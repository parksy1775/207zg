
nucleo144-f207-eth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012a7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002054  08012c0c  08012c0c  00022c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014c60  08014c60  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08014c60  08014c60  00024c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014c68  08014c68  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014c68  08014c68  00024c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014c6c  08014c6c  00024c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08014c70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b0dc  2000007c  08014cec  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b158  08014cec  0003b158  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000411e9  00000000  00000000  000300a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008040  00000000  00000000  0007128e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002098  00000000  00000000  000792d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ea8  00000000  00000000  0007b368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fec7  00000000  00000000  0007d210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032dc8  00000000  00000000  000ad0d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6db8  00000000  00000000  000dfe9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c6c57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008cf8  00000000  00000000  001c6cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012bf4 	.word	0x08012bf4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08012bf4 	.word	0x08012bf4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	468e      	mov	lr, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	f040 8083 	bne.w	8000318 <__udivmoddi4+0x118>
 8000212:	428a      	cmp	r2, r1
 8000214:	4617      	mov	r7, r2
 8000216:	d947      	bls.n	80002a8 <__udivmoddi4+0xa8>
 8000218:	fab2 f382 	clz	r3, r2
 800021c:	b14b      	cbz	r3, 8000232 <__udivmoddi4+0x32>
 800021e:	f1c3 0120 	rsb	r1, r3, #32
 8000222:	fa05 fe03 	lsl.w	lr, r5, r3
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	409f      	lsls	r7, r3
 800022c:	ea41 0e0e 	orr.w	lr, r1, lr
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	fbbe fcf8 	udiv	ip, lr, r8
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb08 e21c 	mls	r2, r8, ip, lr
 8000242:	fb0c f009 	mul.w	r0, ip, r9
 8000246:	0c21      	lsrs	r1, r4, #16
 8000248:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x66>
 8000250:	18ba      	adds	r2, r7, r2
 8000252:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000256:	f080 8118 	bcs.w	800048a <__udivmoddi4+0x28a>
 800025a:	4290      	cmp	r0, r2
 800025c:	f240 8115 	bls.w	800048a <__udivmoddi4+0x28a>
 8000260:	f1ac 0c02 	sub.w	ip, ip, #2
 8000264:	443a      	add	r2, r7
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	fbb2 f0f8 	udiv	r0, r2, r8
 800026c:	fb08 2210 	mls	r2, r8, r0, r2
 8000270:	fb00 f109 	mul.w	r1, r0, r9
 8000274:	b2a4      	uxth	r4, r4
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	42a1      	cmp	r1, r4
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x92>
 800027e:	193c      	adds	r4, r7, r4
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 8103 	bcs.w	800048e <__udivmoddi4+0x28e>
 8000288:	42a1      	cmp	r1, r4
 800028a:	f240 8100 	bls.w	800048e <__udivmoddi4+0x28e>
 800028e:	3802      	subs	r0, #2
 8000290:	443c      	add	r4, r7
 8000292:	1a64      	subs	r4, r4, r1
 8000294:	2100      	movs	r1, #0
 8000296:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa4>
 800029c:	2200      	movs	r2, #0
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	e9c6 4200 	strd	r4, r2, [r6]
 80002a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a8:	b902      	cbnz	r2, 80002ac <__udivmoddi4+0xac>
 80002aa:	deff      	udf	#255	; 0xff
 80002ac:	fab2 f382 	clz	r3, r2
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14f      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b4:	1a8d      	subs	r5, r1, r2
 80002b6:	2101      	movs	r1, #1
 80002b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80002bc:	fa1f f882 	uxth.w	r8, r2
 80002c0:	fbb5 fcfe 	udiv	ip, r5, lr
 80002c4:	fb0e 551c 	mls	r5, lr, ip, r5
 80002c8:	fb08 f00c 	mul.w	r0, r8, ip
 80002cc:	0c22      	lsrs	r2, r4, #16
 80002ce:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	d907      	bls.n	80002e6 <__udivmoddi4+0xe6>
 80002d6:	197d      	adds	r5, r7, r5
 80002d8:	f10c 32ff 	add.w	r2, ip, #4294967295
 80002dc:	d202      	bcs.n	80002e4 <__udivmoddi4+0xe4>
 80002de:	42a8      	cmp	r0, r5
 80002e0:	f200 80e9 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 80002e4:	4694      	mov	ip, r2
 80002e6:	1a2d      	subs	r5, r5, r0
 80002e8:	fbb5 f0fe 	udiv	r0, r5, lr
 80002ec:	fb0e 5510 	mls	r5, lr, r0, r5
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	b2a4      	uxth	r4, r4
 80002f6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002fa:	45a0      	cmp	r8, r4
 80002fc:	d907      	bls.n	800030e <__udivmoddi4+0x10e>
 80002fe:	193c      	adds	r4, r7, r4
 8000300:	f100 32ff 	add.w	r2, r0, #4294967295
 8000304:	d202      	bcs.n	800030c <__udivmoddi4+0x10c>
 8000306:	45a0      	cmp	r8, r4
 8000308:	f200 80d9 	bhi.w	80004be <__udivmoddi4+0x2be>
 800030c:	4610      	mov	r0, r2
 800030e:	eba4 0408 	sub.w	r4, r4, r8
 8000312:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000316:	e7c0      	b.n	800029a <__udivmoddi4+0x9a>
 8000318:	428b      	cmp	r3, r1
 800031a:	d908      	bls.n	800032e <__udivmoddi4+0x12e>
 800031c:	2e00      	cmp	r6, #0
 800031e:	f000 80b1 	beq.w	8000484 <__udivmoddi4+0x284>
 8000322:	2100      	movs	r1, #0
 8000324:	e9c6 0500 	strd	r0, r5, [r6]
 8000328:	4608      	mov	r0, r1
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f183 	clz	r1, r3
 8000332:	2900      	cmp	r1, #0
 8000334:	d14b      	bne.n	80003ce <__udivmoddi4+0x1ce>
 8000336:	42ab      	cmp	r3, r5
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b9 	bhi.w	80004b2 <__udivmoddi4+0x2b2>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb65 0303 	sbc.w	r3, r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	469e      	mov	lr, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d0aa      	beq.n	80002a4 <__udivmoddi4+0xa4>
 800034e:	e9c6 4e00 	strd	r4, lr, [r6]
 8000352:	e7a7      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000354:	409f      	lsls	r7, r3
 8000356:	f1c3 0220 	rsb	r2, r3, #32
 800035a:	40d1      	lsrs	r1, r2
 800035c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fa1f f887 	uxth.w	r8, r7
 8000368:	fb0e 1110 	mls	r1, lr, r0, r1
 800036c:	fa24 f202 	lsr.w	r2, r4, r2
 8000370:	409d      	lsls	r5, r3
 8000372:	fb00 fc08 	mul.w	ip, r0, r8
 8000376:	432a      	orrs	r2, r5
 8000378:	0c15      	lsrs	r5, r2, #16
 800037a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800037e:	45ac      	cmp	ip, r5
 8000380:	fa04 f403 	lsl.w	r4, r4, r3
 8000384:	d909      	bls.n	800039a <__udivmoddi4+0x19a>
 8000386:	197d      	adds	r5, r7, r5
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	f080 808f 	bcs.w	80004ae <__udivmoddi4+0x2ae>
 8000390:	45ac      	cmp	ip, r5
 8000392:	f240 808c 	bls.w	80004ae <__udivmoddi4+0x2ae>
 8000396:	3802      	subs	r0, #2
 8000398:	443d      	add	r5, r7
 800039a:	eba5 050c 	sub.w	r5, r5, ip
 800039e:	fbb5 f1fe 	udiv	r1, r5, lr
 80003a2:	fb0e 5c11 	mls	ip, lr, r1, r5
 80003a6:	fb01 f908 	mul.w	r9, r1, r8
 80003aa:	b295      	uxth	r5, r2
 80003ac:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80003b0:	45a9      	cmp	r9, r5
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	197d      	adds	r5, r7, r5
 80003b6:	f101 32ff 	add.w	r2, r1, #4294967295
 80003ba:	d274      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 80003bc:	45a9      	cmp	r9, r5
 80003be:	d972      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 80003c0:	3902      	subs	r1, #2
 80003c2:	443d      	add	r5, r7
 80003c4:	eba5 0509 	sub.w	r5, r5, r9
 80003c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003cc:	e778      	b.n	80002c0 <__udivmoddi4+0xc0>
 80003ce:	f1c1 0720 	rsb	r7, r1, #32
 80003d2:	408b      	lsls	r3, r1
 80003d4:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d8:	ea4c 0c03 	orr.w	ip, ip, r3
 80003dc:	fa25 f407 	lsr.w	r4, r5, r7
 80003e0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e4:	fbb4 f9fe 	udiv	r9, r4, lr
 80003e8:	fa1f f88c 	uxth.w	r8, ip
 80003ec:	fb0e 4419 	mls	r4, lr, r9, r4
 80003f0:	fa20 f307 	lsr.w	r3, r0, r7
 80003f4:	fb09 fa08 	mul.w	sl, r9, r8
 80003f8:	408d      	lsls	r5, r1
 80003fa:	431d      	orrs	r5, r3
 80003fc:	0c2b      	lsrs	r3, r5, #16
 80003fe:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000402:	45a2      	cmp	sl, r4
 8000404:	fa02 f201 	lsl.w	r2, r2, r1
 8000408:	fa00 f301 	lsl.w	r3, r0, r1
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x222>
 800040e:	eb1c 0404 	adds.w	r4, ip, r4
 8000412:	f109 30ff 	add.w	r0, r9, #4294967295
 8000416:	d248      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 8000418:	45a2      	cmp	sl, r4
 800041a:	d946      	bls.n	80004aa <__udivmoddi4+0x2aa>
 800041c:	f1a9 0902 	sub.w	r9, r9, #2
 8000420:	4464      	add	r4, ip
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	fbb4 f0fe 	udiv	r0, r4, lr
 800042a:	fb0e 4410 	mls	r4, lr, r0, r4
 800042e:	fb00 fa08 	mul.w	sl, r0, r8
 8000432:	b2ad      	uxth	r5, r5
 8000434:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000438:	45a2      	cmp	sl, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x24e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 35ff 	add.w	r5, r0, #4294967295
 8000444:	d22d      	bcs.n	80004a2 <__udivmoddi4+0x2a2>
 8000446:	45a2      	cmp	sl, r4
 8000448:	d92b      	bls.n	80004a2 <__udivmoddi4+0x2a2>
 800044a:	3802      	subs	r0, #2
 800044c:	4464      	add	r4, ip
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	eba4 040a 	sub.w	r4, r4, sl
 800045a:	454c      	cmp	r4, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	464d      	mov	r5, r9
 8000460:	d319      	bcc.n	8000496 <__udivmoddi4+0x296>
 8000462:	d016      	beq.n	8000492 <__udivmoddi4+0x292>
 8000464:	b15e      	cbz	r6, 800047e <__udivmoddi4+0x27e>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb64 0405 	sbc.w	r4, r4, r5
 800046e:	fa04 f707 	lsl.w	r7, r4, r7
 8000472:	fa22 f301 	lsr.w	r3, r2, r1
 8000476:	431f      	orrs	r7, r3
 8000478:	40cc      	lsrs	r4, r1
 800047a:	e9c6 7400 	strd	r7, r4, [r6]
 800047e:	2100      	movs	r1, #0
 8000480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000484:	4631      	mov	r1, r6
 8000486:	4630      	mov	r0, r6
 8000488:	e70c      	b.n	80002a4 <__udivmoddi4+0xa4>
 800048a:	468c      	mov	ip, r1
 800048c:	e6eb      	b.n	8000266 <__udivmoddi4+0x66>
 800048e:	4610      	mov	r0, r2
 8000490:	e6ff      	b.n	8000292 <__udivmoddi4+0x92>
 8000492:	4543      	cmp	r3, r8
 8000494:	d2e6      	bcs.n	8000464 <__udivmoddi4+0x264>
 8000496:	ebb8 0e02 	subs.w	lr, r8, r2
 800049a:	eb69 050c 	sbc.w	r5, r9, ip
 800049e:	3801      	subs	r0, #1
 80004a0:	e7e0      	b.n	8000464 <__udivmoddi4+0x264>
 80004a2:	4628      	mov	r0, r5
 80004a4:	e7d3      	b.n	800044e <__udivmoddi4+0x24e>
 80004a6:	4611      	mov	r1, r2
 80004a8:	e78c      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e7b9      	b.n	8000422 <__udivmoddi4+0x222>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e773      	b.n	800039a <__udivmoddi4+0x19a>
 80004b2:	4608      	mov	r0, r1
 80004b4:	e749      	b.n	800034a <__udivmoddi4+0x14a>
 80004b6:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ba:	443d      	add	r5, r7
 80004bc:	e713      	b.n	80002e6 <__udivmoddi4+0xe6>
 80004be:	3802      	subs	r0, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	e724      	b.n	800030e <__udivmoddi4+0x10e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <vApplicationGetIdleTaskMemory+0x30>)
 80004de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004e6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004e8:	bf00      	nop
 80004ea:	3714      	adds	r7, #20
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	20000098 	.word	0x20000098
 80004f8:	2000014c 	.word	0x2000014c

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b5b0      	push	{r4, r5, r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f001 f811 	bl	8001528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f81f 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 f8b7 	bl	800067c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800050e:	f000 f861 	bl	80005d4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000512:	f000 f889 	bl	8000628 <MX_USB_OTG_FS_PCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8000516:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <main+0x44>)
 8000518:	1d3c      	adds	r4, r7, #4
 800051a:	461d      	mov	r5, r3
 800051c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800051e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000520:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000524:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2100      	movs	r1, #0
 800052c:	4618      	mov	r0, r3
 800052e:	f004 fecd 	bl	80052cc <osThreadCreate>
 8000532:	4603      	mov	r3, r0
 8000534:	4a03      	ldr	r2, [pc, #12]	; (8000544 <main+0x48>)
 8000536:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000538:	f004 feb1 	bl	800529e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053c:	e7fe      	b.n	800053c <main+0x40>
 800053e:	bf00      	nop
 8000540:	08012c18 	.word	0x08012c18
 8000544:	20004444 	.word	0x20004444

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b092      	sub	sp, #72	; 0x48
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0318 	add.w	r3, r7, #24
 8000552:	2230      	movs	r2, #48	; 0x30
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f011 fc71 	bl	8011e3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056a:	2301      	movs	r3, #1
 800056c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800056e:	2305      	movs	r3, #5
 8000570:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000576:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800057a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 4;
 800057c:	2304      	movs	r3, #4
 800057e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000580:	23c0      	movs	r3, #192	; 0xc0
 8000582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000584:	2304      	movs	r3, #4
 8000586:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000588:	2308      	movs	r3, #8
 800058a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058c:	f107 0318 	add.w	r3, r7, #24
 8000590:	4618      	mov	r0, r3
 8000592:	f002 fd7d 	bl	8003090 <HAL_RCC_OscConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800059c:	f000 fa0e 	bl	80009bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a0:	230f      	movs	r3, #15
 80005a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a4:	2302      	movs	r3, #2
 80005a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2103      	movs	r1, #3
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 ffb7 	bl	8003530 <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005c8:	f000 f9f8 	bl	80009bc <Error_Handler>
  }
}
 80005cc:	bf00      	nop
 80005ce:	3748      	adds	r7, #72	; 0x48
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <MX_USART3_UART_Init+0x4c>)
 80005da:	4a12      	ldr	r2, [pc, #72]	; (8000624 <MX_USART3_UART_Init+0x50>)
 80005dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <MX_USART3_UART_Init+0x4c>)
 80005e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <MX_USART3_UART_Init+0x4c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <MX_USART3_UART_Init+0x4c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <MX_USART3_UART_Init+0x4c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <MX_USART3_UART_Init+0x4c>)
 80005fa:	220c      	movs	r2, #12
 80005fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <MX_USART3_UART_Init+0x4c>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_USART3_UART_Init+0x4c>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800060a:	4805      	ldr	r0, [pc, #20]	; (8000620 <MX_USART3_UART_Init+0x4c>)
 800060c:	f003 fc7e 	bl	8003f0c <HAL_UART_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000616:	f000 f9d1 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20004448 	.word	0x20004448
 8000624:	40004800 	.word	0x40004800

08000628 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800062e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000632:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000634:	4b10      	ldr	r3, [pc, #64]	; (8000678 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000636:	2204      	movs	r2, #4
 8000638:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800063a:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800063c:	2202      	movs	r2, #2
 800063e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000640:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000648:	2202      	movs	r2, #2
 800064a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800064e:	2201      	movs	r2, #1
 8000650:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000658:	4b07      	ldr	r3, [pc, #28]	; (8000678 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800065a:	2201      	movs	r2, #1
 800065c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000660:	2200      	movs	r2, #0
 8000662:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000666:	f002 fbf6 	bl	8002e56 <HAL_PCD_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8000670:	f000 f9a4 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	2000448c 	.word	0x2000448c

0800067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08e      	sub	sp, #56	; 0x38
 8000680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	623b      	str	r3, [r7, #32]
 8000696:	4bb1      	ldr	r3, [pc, #708]	; (800095c <MX_GPIO_Init+0x2e0>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4ab0      	ldr	r2, [pc, #704]	; (800095c <MX_GPIO_Init+0x2e0>)
 800069c:	f043 0310 	orr.w	r3, r3, #16
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4bae      	ldr	r3, [pc, #696]	; (800095c <MX_GPIO_Init+0x2e0>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0310 	and.w	r3, r3, #16
 80006aa:	623b      	str	r3, [r7, #32]
 80006ac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
 80006b2:	4baa      	ldr	r3, [pc, #680]	; (800095c <MX_GPIO_Init+0x2e0>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4aa9      	ldr	r2, [pc, #676]	; (800095c <MX_GPIO_Init+0x2e0>)
 80006b8:	f043 0304 	orr.w	r3, r3, #4
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4ba7      	ldr	r3, [pc, #668]	; (800095c <MX_GPIO_Init+0x2e0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0304 	and.w	r3, r3, #4
 80006c6:	61fb      	str	r3, [r7, #28]
 80006c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
 80006ce:	4ba3      	ldr	r3, [pc, #652]	; (800095c <MX_GPIO_Init+0x2e0>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4aa2      	ldr	r2, [pc, #648]	; (800095c <MX_GPIO_Init+0x2e0>)
 80006d4:	f043 0320 	orr.w	r3, r3, #32
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4ba0      	ldr	r3, [pc, #640]	; (800095c <MX_GPIO_Init+0x2e0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0320 	and.w	r3, r3, #32
 80006e2:	61bb      	str	r3, [r7, #24]
 80006e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
 80006ea:	4b9c      	ldr	r3, [pc, #624]	; (800095c <MX_GPIO_Init+0x2e0>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a9b      	ldr	r2, [pc, #620]	; (800095c <MX_GPIO_Init+0x2e0>)
 80006f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b99      	ldr	r3, [pc, #612]	; (800095c <MX_GPIO_Init+0x2e0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
 8000706:	4b95      	ldr	r3, [pc, #596]	; (800095c <MX_GPIO_Init+0x2e0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a94      	ldr	r2, [pc, #592]	; (800095c <MX_GPIO_Init+0x2e0>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b92      	ldr	r3, [pc, #584]	; (800095c <MX_GPIO_Init+0x2e0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	4b8e      	ldr	r3, [pc, #568]	; (800095c <MX_GPIO_Init+0x2e0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a8d      	ldr	r2, [pc, #564]	; (800095c <MX_GPIO_Init+0x2e0>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b8b      	ldr	r3, [pc, #556]	; (800095c <MX_GPIO_Init+0x2e0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	4b87      	ldr	r3, [pc, #540]	; (800095c <MX_GPIO_Init+0x2e0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a86      	ldr	r2, [pc, #536]	; (800095c <MX_GPIO_Init+0x2e0>)
 8000744:	f043 0308 	orr.w	r3, r3, #8
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b84      	ldr	r3, [pc, #528]	; (800095c <MX_GPIO_Init+0x2e0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0308 	and.w	r3, r3, #8
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b80      	ldr	r3, [pc, #512]	; (800095c <MX_GPIO_Init+0x2e0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a7f      	ldr	r2, [pc, #508]	; (800095c <MX_GPIO_Init+0x2e0>)
 8000760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b7d      	ldr	r3, [pc, #500]	; (800095c <MX_GPIO_Init+0x2e0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	213c      	movs	r1, #60	; 0x3c
 8000776:	487a      	ldr	r0, [pc, #488]	; (8000960 <MX_GPIO_Init+0x2e4>)
 8000778:	f002 fb55 	bl	8002e26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	2102      	movs	r1, #2
 8000780:	4878      	ldr	r0, [pc, #480]	; (8000964 <MX_GPIO_Init+0x2e8>)
 8000782:	f002 fb50 	bl	8002e26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	f641 010c 	movw	r1, #6156	; 0x180c
 800078c:	4876      	ldr	r0, [pc, #472]	; (8000968 <MX_GPIO_Init+0x2ec>)
 800078e:	f002 fb4a 	bl	8002e26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2118      	movs	r1, #24
 8000796:	4875      	ldr	r0, [pc, #468]	; (800096c <MX_GPIO_Init+0x2f0>)
 8000798:	f002 fb45 	bl	8002e26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_11|GPIO_PIN_12|LD3_Pin
 800079c:	2200      	movs	r2, #0
 800079e:	f645 0181 	movw	r1, #22657	; 0x5881
 80007a2:	4873      	ldr	r0, [pc, #460]	; (8000970 <MX_GPIO_Init+0x2f4>)
 80007a4:	f002 fb3f 	bl	8002e26 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2140      	movs	r1, #64	; 0x40
 80007ac:	4871      	ldr	r0, [pc, #452]	; (8000974 <MX_GPIO_Init+0x2f8>)
 80007ae:	f002 fb3a 	bl	8002e26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80007b2:	2200      	movs	r2, #0
 80007b4:	21fe      	movs	r1, #254	; 0xfe
 80007b6:	4870      	ldr	r0, [pc, #448]	; (8000978 <MX_GPIO_Init+0x2fc>)
 80007b8:	f002 fb35 	bl	8002e26 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80007bc:	233c      	movs	r3, #60	; 0x3c
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d0:	4619      	mov	r1, r3
 80007d2:	4863      	ldr	r0, [pc, #396]	; (8000960 <MX_GPIO_Init+0x2e4>)
 80007d4:	f002 f972 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ec:	4619      	mov	r1, r3
 80007ee:	485e      	ldr	r0, [pc, #376]	; (8000968 <MX_GPIO_Init+0x2ec>)
 80007f0:	f002 f964 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007f4:	2302      	movs	r3, #2
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000808:	4619      	mov	r1, r3
 800080a:	4856      	ldr	r0, [pc, #344]	; (8000964 <MX_GPIO_Init+0x2e8>)
 800080c:	f002 f956 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF4 PF10 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_10|GPIO_PIN_14;
 8000810:	f244 4310 	movw	r3, #17424	; 0x4410
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000816:	2300      	movs	r3, #0
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800081a:	2302      	movs	r3, #2
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800081e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000822:	4619      	mov	r1, r3
 8000824:	484f      	ldr	r0, [pc, #316]	; (8000964 <MX_GPIO_Init+0x2e8>)
 8000826:	f002 f949 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_12;
 800082a:	f641 030c 	movw	r3, #6156	; 0x180c
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000840:	4619      	mov	r1, r3
 8000842:	4849      	ldr	r0, [pc, #292]	; (8000968 <MX_GPIO_Init+0x2ec>)
 8000844:	f002 f93a 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000848:	2318      	movs	r3, #24
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000858:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085c:	4619      	mov	r1, r3
 800085e:	4843      	ldr	r0, [pc, #268]	; (800096c <MX_GPIO_Init+0x2f0>)
 8000860:	f002 f92c 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000864:	2360      	movs	r3, #96	; 0x60
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000868:	2300      	movs	r3, #0
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800086c:	2302      	movs	r3, #2
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000874:	4619      	mov	r1, r3
 8000876:	483d      	ldr	r0, [pc, #244]	; (800096c <MX_GPIO_Init+0x2f0>)
 8000878:	f002 f920 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB11 PB12 LD3_Pin
                           LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_11|GPIO_PIN_12|LD3_Pin
 800087c:	f645 0381 	movw	r3, #22657	; 0x5881
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000892:	4619      	mov	r1, r3
 8000894:	4836      	ldr	r0, [pc, #216]	; (8000970 <MX_GPIO_Init+0x2f4>)
 8000896:	f002 f911 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB15
                           PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_15
 800089a:	f248 7336 	movw	r3, #34614	; 0x8736
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008a4:	2302      	movs	r3, #2
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ac:	4619      	mov	r1, r3
 80008ae:	4830      	ldr	r0, [pc, #192]	; (8000970 <MX_GPIO_Init+0x2f4>)
 80008b0:	f002 f904 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80008b4:	f44f 53bc 	mov.w	r3, #6016	; 0x1780
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008be:	2302      	movs	r3, #2
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c6:	4619      	mov	r1, r3
 80008c8:	4825      	ldr	r0, [pc, #148]	; (8000960 <MX_GPIO_Init+0x2e4>)
 80008ca:	f002 f8f7 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13
                           PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80008ce:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008d8:	2302      	movs	r3, #2
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e0:	4619      	mov	r1, r3
 80008e2:	4825      	ldr	r0, [pc, #148]	; (8000978 <MX_GPIO_Init+0x2fc>)
 80008e4:	f002 f8ea 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008e8:	2340      	movs	r3, #64	; 0x40
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fc:	4619      	mov	r1, r3
 80008fe:	481d      	ldr	r0, [pc, #116]	; (8000974 <MX_GPIO_Init+0x2f8>)
 8000900:	f002 f8dc 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000904:	2380      	movs	r3, #128	; 0x80
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000908:	2300      	movs	r3, #0
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000914:	4619      	mov	r1, r3
 8000916:	4817      	ldr	r0, [pc, #92]	; (8000974 <MX_GPIO_Init+0x2f8>)
 8000918:	f002 f8d0 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800091c:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000926:	2302      	movs	r3, #2
 8000928:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092e:	4619      	mov	r1, r3
 8000930:	480d      	ldr	r0, [pc, #52]	; (8000968 <MX_GPIO_Init+0x2ec>)
 8000932:	f002 f8c3 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD1 PD2 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000936:	23fe      	movs	r3, #254	; 0xfe
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094a:	4619      	mov	r1, r3
 800094c:	480a      	ldr	r0, [pc, #40]	; (8000978 <MX_GPIO_Init+0x2fc>)
 800094e:	f002 f8b5 	bl	8002abc <HAL_GPIO_Init>

}
 8000952:	bf00      	nop
 8000954:	3738      	adds	r7, #56	; 0x38
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800
 8000960:	40021000 	.word	0x40021000
 8000964:	40021400 	.word	0x40021400
 8000968:	40020800 	.word	0x40020800
 800096c:	40020000 	.word	0x40020000
 8000970:	40020400 	.word	0x40020400
 8000974:	40021800 	.word	0x40021800
 8000978:	40020c00 	.word	0x40020c00

0800097c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000984:	f003 fece 	bl	8004724 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  app_echoserver_init();
 8000988:	f000 fa72 	bl	8000e70 <app_echoserver_init>
  for(;;)
  {
	  MX_LWIP_Process();
 800098c:	f004 f828 	bl	80049e0 <MX_LWIP_Process>
    osDelay(1);
 8000990:	2001      	movs	r0, #1
 8000992:	f004 fce7 	bl	8005364 <osDelay>
  {
 8000996:	e7f9      	b.n	800098c <StartDefaultTask+0x10>

08000998 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d101      	bne.n	80009ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009aa:	f000 fddf 	bl	800156c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40010000 	.word	0x40010000

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <Error_Handler+0x8>
	...

080009c8 <oper>:
#include "operate_gpio.h"
#include "stm32f2xx_hal.h"
enum OPERATION_STATE onoff = OFF;
enum STM_STATE state = READY;

void oper(){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	if(onoff == ON){
 80009cc:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <oper+0x64>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d127      	bne.n	8000a24 <oper+0x5c>
		switch(state){
 80009d4:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <oper+0x68>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b04      	cmp	r3, #4
 80009da:	d824      	bhi.n	8000a26 <oper+0x5e>
 80009dc:	a201      	add	r2, pc, #4	; (adr r2, 80009e4 <oper+0x1c>)
 80009de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e2:	bf00      	nop
 80009e4:	080009f9 	.word	0x080009f9
 80009e8:	08000a05 	.word	0x08000a05
 80009ec:	08000a0d 	.word	0x08000a0d
 80009f0:	08000a15 	.word	0x08000a15
 80009f4:	08000a1d 	.word	0x08000a1d
			case READY:
				oper_M1();
 80009f8:	f000 f81c 	bl	8000a34 <oper_M1>
				state = M1;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <oper+0x68>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	701a      	strb	r2, [r3, #0]
				break;
 8000a02:	e010      	b.n	8000a26 <oper+0x5e>
			case M1:
				state = M2;
 8000a04:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <oper+0x68>)
 8000a06:	2202      	movs	r2, #2
 8000a08:	701a      	strb	r2, [r3, #0]
				break;
 8000a0a:	e00c      	b.n	8000a26 <oper+0x5e>
			case M2:
				state = M3;
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <oper+0x68>)
 8000a0e:	2203      	movs	r2, #3
 8000a10:	701a      	strb	r2, [r3, #0]
				break;
 8000a12:	e008      	b.n	8000a26 <oper+0x5e>
			case M3:
				state = M4;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <oper+0x68>)
 8000a16:	2204      	movs	r2, #4
 8000a18:	701a      	strb	r2, [r3, #0]
				break;
 8000a1a:	e004      	b.n	8000a26 <oper+0x5e>
			case M4:
				state = READY;
 8000a1c:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <oper+0x68>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]
				break;
 8000a22:	e000      	b.n	8000a26 <oper+0x5e>
		}
	}
 8000a24:	bf00      	nop

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	2000054c 	.word	0x2000054c
 8000a30:	2000054d 	.word	0x2000054d

08000a34 <oper_M1>:

void oper_M1(){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)){
 8000a38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a3c:	480d      	ldr	r0, [pc, #52]	; (8000a74 <oper_M1+0x40>)
 8000a3e:	f002 f9db 	bl	8002df8 <HAL_GPIO_ReadPin>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d013      	beq.n	8000a70 <oper_M1+0x3c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2110      	movs	r1, #16
 8000a4c:	480a      	ldr	r0, [pc, #40]	; (8000a78 <oper_M1+0x44>)
 8000a4e:	f002 f9ea 	bl	8002e26 <HAL_GPIO_WritePin>
		while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10)){
 8000a52:	e000      	b.n	8000a56 <oper_M1+0x22>
			continue;
 8000a54:	bf00      	nop
		while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10)){
 8000a56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a5a:	4806      	ldr	r0, [pc, #24]	; (8000a74 <oper_M1+0x40>)
 8000a5c:	f002 f9cc 	bl	8002df8 <HAL_GPIO_ReadPin>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d0f6      	beq.n	8000a54 <oper_M1+0x20>
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2110      	movs	r1, #16
 8000a6a:	4803      	ldr	r0, [pc, #12]	; (8000a78 <oper_M1+0x44>)
 8000a6c:	f002 f9db 	bl	8002e26 <HAL_GPIO_WritePin>
	}
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40020400 	.word	0x40020400
 8000a78:	40020000 	.word	0x40020000

08000a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_MspInit+0x54>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8a:	4a11      	ldr	r2, [pc, #68]	; (8000ad0 <HAL_MspInit+0x54>)
 8000a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a90:	6453      	str	r3, [r2, #68]	; 0x44
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <HAL_MspInit+0x54>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <HAL_MspInit+0x54>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <HAL_MspInit+0x54>)
 8000aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aac:	6413      	str	r3, [r2, #64]	; 0x40
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <HAL_MspInit+0x54>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	210f      	movs	r1, #15
 8000abe:	f06f 0001 	mvn.w	r0, #1
 8000ac2:	f000 fe48 	bl	8001756 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800

08000ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	; 0x28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a19      	ldr	r2, [pc, #100]	; (8000b58 <HAL_UART_MspInit+0x84>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d12c      	bne.n	8000b50 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <HAL_UART_MspInit+0x88>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	4a17      	ldr	r2, [pc, #92]	; (8000b5c <HAL_UART_MspInit+0x88>)
 8000b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b04:	6413      	str	r3, [r2, #64]	; 0x40
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <HAL_UART_MspInit+0x88>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <HAL_UART_MspInit+0x88>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a10      	ldr	r2, [pc, #64]	; (8000b5c <HAL_UART_MspInit+0x88>)
 8000b1c:	f043 0308 	orr.w	r3, r3, #8
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <HAL_UART_MspInit+0x88>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0308 	and.w	r3, r3, #8
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b40:	2307      	movs	r3, #7
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4805      	ldr	r0, [pc, #20]	; (8000b60 <HAL_UART_MspInit+0x8c>)
 8000b4c:	f001 ffb6 	bl	8002abc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b50:	bf00      	nop
 8000b52:	3728      	adds	r7, #40	; 0x28
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40004800 	.word	0x40004800
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020c00 	.word	0x40020c00

08000b64 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b84:	d13f      	bne.n	8000c06 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	4b21      	ldr	r3, [pc, #132]	; (8000c10 <HAL_PCD_MspInit+0xac>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a20      	ldr	r2, [pc, #128]	; (8000c10 <HAL_PCD_MspInit+0xac>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <HAL_PCD_MspInit+0xac>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ba2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bb4:	230a      	movs	r3, #10
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4815      	ldr	r0, [pc, #84]	; (8000c14 <HAL_PCD_MspInit+0xb0>)
 8000bc0:	f001 ff7c 	bl	8002abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480e      	ldr	r0, [pc, #56]	; (8000c14 <HAL_PCD_MspInit+0xb0>)
 8000bda:	f001 ff6f 	bl	8002abc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <HAL_PCD_MspInit+0xac>)
 8000be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be2:	4a0b      	ldr	r2, [pc, #44]	; (8000c10 <HAL_PCD_MspInit+0xac>)
 8000be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be8:	6353      	str	r3, [r2, #52]	; 0x34
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <HAL_PCD_MspInit+0xac>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <HAL_PCD_MspInit+0xac>)
 8000bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfa:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <HAL_PCD_MspInit+0xac>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c06:	bf00      	nop
 8000c08:	3728      	adds	r7, #40	; 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020000 	.word	0x40020000

08000c18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08c      	sub	sp, #48	; 0x30
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	2019      	movs	r0, #25
 8000c2e:	f000 fd92 	bl	8001756 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c32:	2019      	movs	r0, #25
 8000c34:	f000 fdab 	bl	800178e <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <HAL_InitTick+0xa4>)
 8000c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c40:	4a1e      	ldr	r2, [pc, #120]	; (8000cbc <HAL_InitTick+0xa4>)
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	6453      	str	r3, [r2, #68]	; 0x44
 8000c48:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <HAL_InitTick+0xa4>)
 8000c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c54:	f107 0210 	add.w	r2, r7, #16
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f002 fe82 	bl	8003968 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000c64:	f002 fe5e 	bl	8003924 <HAL_RCC_GetPCLK2Freq>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c70:	4a13      	ldr	r2, [pc, #76]	; (8000cc0 <HAL_InitTick+0xa8>)
 8000c72:	fba2 2303 	umull	r2, r3, r2, r3
 8000c76:	0c9b      	lsrs	r3, r3, #18
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <HAL_InitTick+0xac>)
 8000c7e:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <HAL_InitTick+0xb0>)
 8000c80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <HAL_InitTick+0xac>)
 8000c84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c88:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c8a:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <HAL_InitTick+0xac>)
 8000c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c8e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <HAL_InitTick+0xac>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <HAL_InitTick+0xac>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c9c:	4809      	ldr	r0, [pc, #36]	; (8000cc4 <HAL_InitTick+0xac>)
 8000c9e:	f002 fe93 	bl	80039c8 <HAL_TIM_Base_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d104      	bne.n	8000cb2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ca8:	4806      	ldr	r0, [pc, #24]	; (8000cc4 <HAL_InitTick+0xac>)
 8000caa:	f002 fee5 	bl	8003a78 <HAL_TIM_Base_Start_IT>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	e000      	b.n	8000cb4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3730      	adds	r7, #48	; 0x30
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	431bde83 	.word	0x431bde83
 8000cc4:	2000488c 	.word	0x2000488c
 8000cc8:	40010000 	.word	0x40010000

08000ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <NMI_Handler+0x4>

08000cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <HardFault_Handler+0x4>

08000cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <MemManage_Handler+0x4>

08000cde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <BusFault_Handler+0x4>

08000ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <UsageFault_Handler+0x4>

08000cea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr
	...

08000cf8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000cfe:	f002 ff29 	bl	8003b54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	2000488c 	.word	0x2000488c

08000d0c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <ETH_IRQHandler+0x10>)
 8000d12:	f001 f91c 	bl	8001f4e <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200061fc 	.word	0x200061fc

08000d20 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	e00a      	b.n	8000d48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d32:	f3af 8000 	nop.w
 8000d36:	4601      	mov	r1, r0
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	1c5a      	adds	r2, r3, #1
 8000d3c:	60ba      	str	r2, [r7, #8]
 8000d3e:	b2ca      	uxtb	r2, r1
 8000d40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	3301      	adds	r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	697a      	ldr	r2, [r7, #20]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	dbf0      	blt.n	8000d32 <_read+0x12>
	}

return len;
 8000d50:	687b      	ldr	r3, [r7, #4]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b086      	sub	sp, #24
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	60f8      	str	r0, [r7, #12]
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
 8000d6a:	e009      	b.n	8000d80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	1c5a      	adds	r2, r3, #1
 8000d70:	60ba      	str	r2, [r7, #8]
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	697a      	ldr	r2, [r7, #20]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	dbf1      	blt.n	8000d6c <_write+0x12>
	}
	return len;
 8000d88:	687b      	ldr	r3, [r7, #4]
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <_close>:

int _close(int file)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
	return -1;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000db8:	605a      	str	r2, [r3, #4]
	return 0;
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr

08000dc6 <_isatty>:

int _isatty(int file)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b083      	sub	sp, #12
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
	return 1;
 8000dce:	2301      	movs	r3, #1
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr

08000dda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b085      	sub	sp, #20
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	60f8      	str	r0, [r7, #12]
 8000de2:	60b9      	str	r1, [r7, #8]
 8000de4:	607a      	str	r2, [r7, #4]
	return 0;
 8000de6:	2300      	movs	r3, #0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr
	...

08000df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b087      	sub	sp, #28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dfc:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <_sbrk+0x5c>)
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <_sbrk+0x60>)
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e08:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d102      	bne.n	8000e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <_sbrk+0x64>)
 8000e12:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <_sbrk+0x68>)
 8000e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d205      	bcs.n	8000e30 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000e24:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <_sbrk+0x6c>)
 8000e26:	220c      	movs	r2, #12
 8000e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2e:	e009      	b.n	8000e44 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e30:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	4a06      	ldr	r2, [pc, #24]	; (8000e58 <_sbrk+0x64>)
 8000e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e42:	68fb      	ldr	r3, [r7, #12]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	371c      	adds	r7, #28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	2001c000 	.word	0x2001c000
 8000e54:	00000400 	.word	0x00000400
 8000e58:	20000550 	.word	0x20000550
 8000e5c:	2000b158 	.word	0x2000b158
 8000e60:	2000b144 	.word	0x2000b144

08000e64 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr

08000e70 <app_echoserver_init>:

osThreadId defaultTaskHandle;

/* initialize echo server */
err_t app_echoserver_init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
  err_t err;
  pcb_server = tcp_new();		//allocate pcb memory
 8000e76:	f00a f8bb 	bl	800aff0 <tcp_new>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	4a1c      	ldr	r2, [pc, #112]	; (8000ef0 <app_echoserver_init+0x80>)
 8000e7e:	6013      	str	r3, [r2, #0]

  if (pcb_server == NULL)
 8000e80:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <app_echoserver_init+0x80>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d108      	bne.n	8000e9a <app_echoserver_init+0x2a>
  {
    //lack of memory
    memp_free(MEMP_TCP_PCB, pcb_server);
 8000e88:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <app_echoserver_init+0x80>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f007 fe5e 	bl	8008b50 <memp_free>
    return ERR_MEM;
 8000e94:	f04f 33ff 	mov.w	r3, #4294967295
 8000e98:	e025      	b.n	8000ee6 <app_echoserver_init+0x76>
  }

  err = tcp_bind(pcb_server, IP_ADDR_ANY, ECHO_SERVER_LISTEN_PORT); //bind to port 7
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <app_echoserver_init+0x80>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2207      	movs	r2, #7
 8000ea0:	4914      	ldr	r1, [pc, #80]	; (8000ef4 <app_echoserver_init+0x84>)
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f009 f926 	bl	800a0f4 <tcp_bind>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	71fb      	strb	r3, [r7, #7]
  if (err != ERR_OK)
 8000eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d008      	beq.n	8000ec6 <app_echoserver_init+0x56>
  {
    //fail to bind
    memp_free(MEMP_TCP_PCB, pcb_server);
 8000eb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <app_echoserver_init+0x80>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	2001      	movs	r0, #1
 8000ebc:	f007 fe48 	bl	8008b50 <memp_free>
    return err;
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	e00f      	b.n	8000ee6 <app_echoserver_init+0x76>
  }

  pcb_server = tcp_listen(pcb_server);	//listen
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <app_echoserver_init+0x80>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	21ff      	movs	r1, #255	; 0xff
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f009 f9b3 	bl	800a238 <tcp_listen_with_backlog>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <app_echoserver_init+0x80>)
 8000ed6:	6013      	str	r3, [r2, #0]
  tcp_accept(pcb_server, app_callback_accepted);	//register accept callback
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <app_echoserver_init+0x80>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4906      	ldr	r1, [pc, #24]	; (8000ef8 <app_echoserver_init+0x88>)
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f00a f902 	bl	800b0e8 <tcp_accept>


  return ERR_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000554 	.word	0x20000554
 8000ef4:	08014bac 	.word	0x08014bac
 8000ef8:	08000efd 	.word	0x08000efd

08000efc <app_callback_accepted>:
  /* USER CODE END 5 */
}

/* accept callback */
static err_t app_callback_accepted(void *arg, struct tcp_pcb *pcb_new, err_t err)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	4613      	mov	r3, r2
 8000f08:	71fb      	strb	r3, [r7, #7]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(arg); //remove warning
  LWIP_UNUSED_ARG(err);

  tcp_setprio(pcb_new, TCP_PRIO_NORMAL); //set priority for new pcb
 8000f0a:	2140      	movs	r1, #64	; 0x40
 8000f0c:	68b8      	ldr	r0, [r7, #8]
 8000f0e:	f009 fee5 	bl	800acdc <tcp_setprio>

  es = (struct tcp_echoserver_struct*)
      mem_malloc(sizeof(struct tcp_echoserver_struct)); //allocate tcp_echoserver_struct
 8000f12:	200c      	movs	r0, #12
 8000f14:	f007 fc5a 	bl	80087cc <mem_malloc>
 8000f18:	6178      	str	r0, [r7, #20]

  if (es == NULL) //lack of memory
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d106      	bne.n	8000f2e <app_callback_accepted+0x32>
  {
    app_close_connection(pcb_new, es); //close connection
 8000f20:	6979      	ldr	r1, [r7, #20]
 8000f22:	68b8      	ldr	r0, [r7, #8]
 8000f24:	f000 faae 	bl	8001484 <app_close_connection>
    return ERR_MEM;
 8000f28:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2c:	e01d      	b.n	8000f6a <app_callback_accepted+0x6e>
  }

  es->state = ES_ACCEPTED; //accepted
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
  es->pcb = pcb_new; //set pcb pointer
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	605a      	str	r2, [r3, #4]
  es->retries = 0; //clear counter
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	705a      	strb	r2, [r3, #1]
  es->p = NULL; //clear buffer pointer
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]

  tcp_arg(pcb_new, es);		//send es structure as an argument
 8000f46:	6979      	ldr	r1, [r7, #20]
 8000f48:	68b8      	ldr	r0, [r7, #8]
 8000f4a:	f00a f859 	bl	800b000 <tcp_arg>
  tcp_recv(pcb_new, app_callback_received);	//register receive callback
 8000f4e:	4909      	ldr	r1, [pc, #36]	; (8000f74 <app_callback_accepted+0x78>)
 8000f50:	68b8      	ldr	r0, [r7, #8]
 8000f52:	f00a f865 	bl	800b020 <tcp_recv>
  tcp_err(pcb_new, app_callback_error); //register error callback
 8000f56:	4908      	ldr	r1, [pc, #32]	; (8000f78 <app_callback_accepted+0x7c>)
 8000f58:	68b8      	ldr	r0, [r7, #8]
 8000f5a:	f00a f8a3 	bl	800b0a4 <tcp_err>
  tcp_poll(pcb_new, app_callback_poll, 0); //register poll callback
 8000f5e:	2200      	movs	r2, #0
 8000f60:	4906      	ldr	r1, [pc, #24]	; (8000f7c <app_callback_accepted+0x80>)
 8000f62:	68b8      	ldr	r0, [r7, #8]
 8000f64:	f00a f8d6 	bl	800b114 <tcp_poll>

  return ERR_OK;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	08000f81 	.word	0x08000f81
 8000f78:	080010b5 	.word	0x080010b5
 8000f7c:	080010d9 	.word	0x080010d9

08000f80 <app_callback_received>:

/* receive callback */
static err_t app_callback_received(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
 8000f8c:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL", arg != NULL); //check argument
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d105      	bne.n	8000fa0 <app_callback_received+0x20>
 8000f94:	4b43      	ldr	r3, [pc, #268]	; (80010a4 <app_callback_received+0x124>)
 8000f96:	225f      	movs	r2, #95	; 0x5f
 8000f98:	4943      	ldr	r1, [pc, #268]	; (80010a8 <app_callback_received+0x128>)
 8000f9a:	4844      	ldr	r0, [pc, #272]	; (80010ac <app_callback_received+0x12c>)
 8000f9c:	f010 ffb2 	bl	8011f04 <iprintf>
  es = (struct tcp_echoserver_struct*) arg;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	61bb      	str	r3, [r7, #24]


  if (p == NULL) //callback is called but there's no data
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d116      	bne.n	8000fd8 <app_callback_received+0x58>
  {
    es->state = ES_CLOSING;
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	2203      	movs	r2, #3
 8000fae:	701a      	strb	r2, [r3, #0]
    if (es->p == NULL)
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d104      	bne.n	8000fc2 <app_callback_received+0x42>
    {
      app_close_connection(tpcb, es); //close connection
 8000fb8:	69b9      	ldr	r1, [r7, #24]
 8000fba:	68b8      	ldr	r0, [r7, #8]
 8000fbc:	f000 fa62 	bl	8001484 <app_close_connection>
 8000fc0:	e007      	b.n	8000fd2 <app_callback_received+0x52>
    }
    else //if there's remained data to send
    {
      tcp_sent(tpcb, app_callback_sent); //register send callback
 8000fc2:	493b      	ldr	r1, [pc, #236]	; (80010b0 <app_callback_received+0x130>)
 8000fc4:	68b8      	ldr	r0, [r7, #8]
 8000fc6:	f00a f84d 	bl	800b064 <tcp_sent>
      app_send_data(tpcb, es); //send remained data
 8000fca:	69b9      	ldr	r1, [r7, #24]
 8000fcc:	68b8      	ldr	r0, [r7, #8]
 8000fce:	f000 f8d7 	bl	8001180 <app_send_data>
    }
    ret_err = ERR_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	77fb      	strb	r3, [r7, #31]
 8000fd6:	e05f      	b.n	8001098 <app_callback_received+0x118>
  }
  else if (err != ERR_OK) //error when receiving
 8000fd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d00b      	beq.n	8000ff8 <app_callback_received+0x78>
  {
    if (p != NULL) //buffer is not empty
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d005      	beq.n	8000ff2 <app_callback_received+0x72>
    {
      es->p = NULL;
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
      pbuf_free(p); //clear buffer
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f008 fb63 	bl	80096b8 <pbuf_free>
    }
    ret_err = err;
 8000ff2:	78fb      	ldrb	r3, [r7, #3]
 8000ff4:	77fb      	strb	r3, [r7, #31]
 8000ff6:	e04f      	b.n	8001098 <app_callback_received+0x118>
  }
  else if (es->state == ES_ACCEPTED) //first data receiving
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d110      	bne.n	8001022 <app_callback_received+0xa2>
  {
    es->state = ES_RECEIVED; //change state
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	2202      	movs	r2, #2
 8001004:	701a      	strb	r2, [r3, #0]
    es->p = p; //set buffer pointer
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	609a      	str	r2, [r3, #8]

    tcp_sent(tpcb, app_callback_sent); //register send callback
 800100c:	4928      	ldr	r1, [pc, #160]	; (80010b0 <app_callback_received+0x130>)
 800100e:	68b8      	ldr	r0, [r7, #8]
 8001010:	f00a f828 	bl	800b064 <tcp_sent>
    app_send_data(tpcb, es); //send data via es->p
 8001014:	69b9      	ldr	r1, [r7, #24]
 8001016:	68b8      	ldr	r0, [r7, #8]
 8001018:	f000 f8b2 	bl	8001180 <app_send_data>
    ret_err = ERR_OK;
 800101c:	2300      	movs	r3, #0
 800101e:	77fb      	strb	r3, [r7, #31]
 8001020:	e03a      	b.n	8001098 <app_callback_received+0x118>
  }
  else if (es->state == ES_RECEIVED) //additional data receiving
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b02      	cmp	r3, #2
 8001028:	d115      	bne.n	8001056 <app_callback_received+0xd6>
  {

    if (es->p == NULL) //no data to send
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d107      	bne.n	8001042 <app_callback_received+0xc2>
    {
      es->p = p; //set buffer pointer
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	609a      	str	r2, [r3, #8]
      app_send_data(tpcb, es); //send data
 8001038:	69b9      	ldr	r1, [r7, #24]
 800103a:	68b8      	ldr	r0, [r7, #8]
 800103c:	f000 f8a0 	bl	8001180 <app_send_data>
 8001040:	e006      	b.n	8001050 <app_callback_received+0xd0>
    }
    else //buffer is not empty, there's data to send
    {
      struct pbuf *ptr = es->p; //head buffer
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr, p);	//append tail buffer to the head, this buffer will be handled by poll callback
 8001048:	6879      	ldr	r1, [r7, #4]
 800104a:	6978      	ldr	r0, [r7, #20]
 800104c:	f008 fc62 	bl	8009914 <pbuf_chain>
    }
    ret_err = ERR_OK;
 8001050:	2300      	movs	r3, #0
 8001052:	77fb      	strb	r3, [r7, #31]
 8001054:	e020      	b.n	8001098 <app_callback_received+0x118>
  }
  else if (es->state == ES_CLOSING) //receiving data when connection is closing
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b03      	cmp	r3, #3
 800105c:	d10e      	bne.n	800107c <app_callback_received+0xfc>
  {
    tcp_recved(tpcb, p->tot_len);	//advertise window size
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	891b      	ldrh	r3, [r3, #8]
 8001062:	4619      	mov	r1, r3
 8001064:	68b8      	ldr	r0, [r7, #8]
 8001066:	f009 f9df 	bl	800a428 <tcp_recved>


    es->p = NULL;
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f008 fb21 	bl	80096b8 <pbuf_free>
    ret_err = ERR_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	77fb      	strb	r3, [r7, #31]
 800107a:	e00d      	b.n	8001098 <app_callback_received+0x118>
  }
  else //undefined condition
  {
    tcp_recved(tpcb, p->tot_len);	//advertise window size
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	891b      	ldrh	r3, [r3, #8]
 8001080:	4619      	mov	r1, r3
 8001082:	68b8      	ldr	r0, [r7, #8]
 8001084:	f009 f9d0 	bl	800a428 <tcp_recved>
    es->p = NULL;
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f008 fb12 	bl	80096b8 <pbuf_free>
    ret_err = ERR_OK;
 8001094:	2300      	movs	r3, #0
 8001096:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8001098:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3720      	adds	r7, #32
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	08012c34 	.word	0x08012c34
 80010a8:	08012c4c 	.word	0x08012c4c
 80010ac:	08012c58 	.word	0x08012c58
 80010b0:	08001131 	.word	0x08001131

080010b4 <app_callback_error>:

/* error callback */
static void app_callback_error(void *arg, err_t err)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  LWIP_UNUSED_ARG(err);

  es = (struct tcp_echoserver_struct*) arg;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d002      	beq.n	80010d0 <app_callback_error+0x1c>
  {
    mem_free(es);	//free es structure
 80010ca:	68f8      	ldr	r0, [r7, #12]
 80010cc:	f007 fa26 	bl	800851c <mem_free>
  }

  //HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET); //turn on blue LED when there's error.
}
 80010d0:	bf00      	nop
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <app_callback_poll>:

/* poll callback */
static err_t app_callback_poll(void *arg, struct tcp_pcb *tpcb)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  struct tcp_echoserver_struct *es;
  es = (struct tcp_echoserver_struct*) arg;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	60fb      	str	r3, [r7, #12]

  if (es == NULL) //if there's no es structure
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d105      	bne.n	80010f8 <app_callback_poll+0x20>
  {
    tcp_abort(tpcb); //abort connection
 80010ec:	6838      	ldr	r0, [r7, #0]
 80010ee:	f008 fff5 	bl	800a0dc <tcp_abort>
    return ERR_ABRT;
 80010f2:	f06f 030c 	mvn.w	r3, #12
 80010f6:	e015      	b.n	8001124 <app_callback_poll+0x4c>
  }

  if (es->p != NULL) //if there's data to send
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d008      	beq.n	8001112 <app_callback_poll+0x3a>
  {
    tcp_sent(tpcb, app_callback_sent); //register send callback
 8001100:	490a      	ldr	r1, [pc, #40]	; (800112c <app_callback_poll+0x54>)
 8001102:	6838      	ldr	r0, [r7, #0]
 8001104:	f009 ffae 	bl	800b064 <tcp_sent>
    app_send_data(tpcb, es); //send data
 8001108:	68f9      	ldr	r1, [r7, #12]
 800110a:	6838      	ldr	r0, [r7, #0]
 800110c:	f000 f838 	bl	8001180 <app_send_data>
 8001110:	e007      	b.n	8001122 <app_callback_poll+0x4a>
  }
  else //no data to send
  {
    if (es->state == ES_CLOSING)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b03      	cmp	r3, #3
 8001118:	d103      	bne.n	8001122 <app_callback_poll+0x4a>
    {
      app_close_connection(tpcb, es);		//close connection
 800111a:	68f9      	ldr	r1, [r7, #12]
 800111c:	6838      	ldr	r0, [r7, #0]
 800111e:	f000 f9b1 	bl	8001484 <app_close_connection>
    }
  }

  return ERR_OK;
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	08001131 	.word	0x08001131

08001130 <app_callback_sent>:

/* send callback */
static err_t app_callback_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	4613      	mov	r3, r2
 800113c:	80fb      	strh	r3, [r7, #6]
  struct tcp_echoserver_struct *es;
  LWIP_UNUSED_ARG(len);

  es = (struct tcp_echoserver_struct*) arg;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	2200      	movs	r2, #0
 8001146:	705a      	strb	r2, [r3, #1]

  if (es->p != NULL) //if there's data to send
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d008      	beq.n	8001162 <app_callback_sent+0x32>
  {
    tcp_sent(tpcb, app_callback_sent); //register send callback
 8001150:	490a      	ldr	r1, [pc, #40]	; (800117c <app_callback_sent+0x4c>)
 8001152:	68b8      	ldr	r0, [r7, #8]
 8001154:	f009 ff86 	bl	800b064 <tcp_sent>
    app_send_data(tpcb, es); //send data
 8001158:	6979      	ldr	r1, [r7, #20]
 800115a:	68b8      	ldr	r0, [r7, #8]
 800115c:	f000 f810 	bl	8001180 <app_send_data>
 8001160:	e007      	b.n	8001172 <app_callback_sent+0x42>
  }
  else //no data to send
  {
    if (es->state == ES_CLOSING)
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b03      	cmp	r3, #3
 8001168:	d103      	bne.n	8001172 <app_callback_sent+0x42>
    {
      app_close_connection(tpcb, es); //close connection
 800116a:	6979      	ldr	r1, [r7, #20]
 800116c:	68b8      	ldr	r0, [r7, #8]
 800116e:	f000 f989 	bl	8001484 <app_close_connection>
    }
  }
  return ERR_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	08001131 	.word	0x08001131

08001180 <app_send_data>:

/* send data */
static void app_send_data(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b0b8      	sub	sp, #224	; 0xe0
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

  // while no error, data to send, data size is smaller than the size of the send buffer
  while ((wr_err == ERR_OK) && (es->p != NULL)
 8001190:	e156      	b.n	8001440 <app_send_data+0x2c0>
      && (es->p->len <= tcp_sndbuf(tpcb)))
  {
    ptr = es->p;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    uint8_t data[100];
    uint8_t obuf[100];
    u16_t obuf_len = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    memcpy(data,es->p->payload,es->p->len);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	6859      	ldr	r1, [r3, #4]
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	895b      	ldrh	r3, [r3, #10]
 80011ac:	461a      	mov	r2, r3
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	4618      	mov	r0, r3
 80011b4:	f010 fe35 	bl	8011e22 <memcpy>
    if(data[0]==1){
 80011b8:	7b3b      	ldrb	r3, [r7, #12]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d15c      	bne.n	8001278 <app_send_data+0xf8>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, data[4]);
 80011be:	7c3b      	ldrb	r3, [r7, #16]
 80011c0:	461a      	mov	r2, r3
 80011c2:	2110      	movs	r1, #16
 80011c4:	48a9      	ldr	r0, [pc, #676]	; (800146c <app_send_data+0x2ec>)
 80011c6:	f001 fe2e 	bl	8002e26 <HAL_GPIO_WritePin>

    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, data[5]);
 80011ca:	7c7b      	ldrb	r3, [r7, #17]
 80011cc:	461a      	mov	r2, r3
 80011ce:	2104      	movs	r1, #4
 80011d0:	48a7      	ldr	r0, [pc, #668]	; (8001470 <app_send_data+0x2f0>)
 80011d2:	f001 fe28 	bl	8002e26 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, data[6]);
 80011d6:	7cbb      	ldrb	r3, [r7, #18]
 80011d8:	461a      	mov	r2, r3
 80011da:	2108      	movs	r1, #8
 80011dc:	48a4      	ldr	r0, [pc, #656]	; (8001470 <app_send_data+0x2f0>)
 80011de:	f001 fe22 	bl	8002e26 <HAL_GPIO_WritePin>

    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, data[7]);
 80011e2:	7cfb      	ldrb	r3, [r7, #19]
 80011e4:	461a      	mov	r2, r3
 80011e6:	2110      	movs	r1, #16
 80011e8:	48a2      	ldr	r0, [pc, #648]	; (8001474 <app_send_data+0x2f4>)
 80011ea:	f001 fe1c 	bl	8002e26 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, data[8]);
 80011ee:	7d3b      	ldrb	r3, [r7, #20]
 80011f0:	461a      	mov	r2, r3
 80011f2:	2108      	movs	r1, #8
 80011f4:	489f      	ldr	r0, [pc, #636]	; (8001474 <app_send_data+0x2f4>)
 80011f6:	f001 fe16 	bl	8002e26 <HAL_GPIO_WritePin>

    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, data[9]);
 80011fa:	7d7b      	ldrb	r3, [r7, #21]
 80011fc:	461a      	mov	r2, r3
 80011fe:	2120      	movs	r1, #32
 8001200:	489c      	ldr	r0, [pc, #624]	; (8001474 <app_send_data+0x2f4>)
 8001202:	f001 fe10 	bl	8002e26 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, data[10]);
 8001206:	7dbb      	ldrb	r3, [r7, #22]
 8001208:	461a      	mov	r2, r3
 800120a:	2140      	movs	r1, #64	; 0x40
 800120c:	4899      	ldr	r0, [pc, #612]	; (8001474 <app_send_data+0x2f4>)
 800120e:	f001 fe0a 	bl	8002e26 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, data[11]);
 8001212:	7dfb      	ldrb	r3, [r7, #23]
 8001214:	461a      	mov	r2, r3
 8001216:	2180      	movs	r1, #128	; 0x80
 8001218:	4896      	ldr	r0, [pc, #600]	; (8001474 <app_send_data+0x2f4>)
 800121a:	f001 fe04 	bl	8002e26 <HAL_GPIO_WritePin>

    	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, data[12]);
 800121e:	7e3b      	ldrb	r3, [r7, #24]
 8001220:	461a      	mov	r2, r3
 8001222:	2104      	movs	r1, #4
 8001224:	4894      	ldr	r0, [pc, #592]	; (8001478 <app_send_data+0x2f8>)
 8001226:	f001 fdfe 	bl	8002e26 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, data[13]);
 800122a:	7e7b      	ldrb	r3, [r7, #25]
 800122c:	461a      	mov	r2, r3
 800122e:	2108      	movs	r1, #8
 8001230:	4891      	ldr	r0, [pc, #580]	; (8001478 <app_send_data+0x2f8>)
 8001232:	f001 fdf8 	bl	8002e26 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, data[14]);
 8001236:	7ebb      	ldrb	r3, [r7, #26]
 8001238:	461a      	mov	r2, r3
 800123a:	2110      	movs	r1, #16
 800123c:	488e      	ldr	r0, [pc, #568]	; (8001478 <app_send_data+0x2f8>)
 800123e:	f001 fdf2 	bl	8002e26 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, data[15]);
 8001242:	7efb      	ldrb	r3, [r7, #27]
 8001244:	461a      	mov	r2, r3
 8001246:	2120      	movs	r1, #32
 8001248:	488b      	ldr	r0, [pc, #556]	; (8001478 <app_send_data+0x2f8>)
 800124a:	f001 fdec 	bl	8002e26 <HAL_GPIO_WritePin>

    	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, data[13]);
 800124e:	7e7b      	ldrb	r3, [r7, #25]
 8001250:	461a      	mov	r2, r3
 8001252:	2102      	movs	r1, #2
 8001254:	4889      	ldr	r0, [pc, #548]	; (800147c <app_send_data+0x2fc>)
 8001256:	f001 fde6 	bl	8002e26 <HAL_GPIO_WritePin>
    	memcpy(obuf, data, es->p->len);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	895b      	ldrh	r3, [r3, #10]
 8001260:	461a      	mov	r2, r3
 8001262:	f107 010c 	add.w	r1, r7, #12
 8001266:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800126a:	4618      	mov	r0, r3
 800126c:	f010 fdd9 	bl	8011e22 <memcpy>
    	obuf_len = 14;
 8001270:	230e      	movs	r3, #14
 8001272:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
 8001276:	e0a5      	b.n	80013c4 <app_send_data+0x244>
    }
    else if(data[0]==2){
 8001278:	7b3b      	ldrb	r3, [r7, #12]
 800127a:	2b02      	cmp	r3, #2
 800127c:	f040 8093 	bne.w	80013a6 <app_send_data+0x226>
    	obuf[0] = 2;
 8001280:	2302      	movs	r3, #2
 8001282:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
    	obuf[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 8001286:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800128a:	487d      	ldr	r0, [pc, #500]	; (8001480 <app_send_data+0x300>)
 800128c:	f001 fdb4 	bl	8002df8 <HAL_GPIO_ReadPin>
 8001290:	4603      	mov	r3, r0
 8001292:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
    	obuf[2] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 8001296:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800129a:	4879      	ldr	r0, [pc, #484]	; (8001480 <app_send_data+0x300>)
 800129c:	f001 fdac 	bl	8002df8 <HAL_GPIO_ReadPin>
 80012a0:	4603      	mov	r3, r0
 80012a2:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
    	obuf[3] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 80012a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012aa:	4875      	ldr	r0, [pc, #468]	; (8001480 <app_send_data+0x300>)
 80012ac:	f001 fda4 	bl	8002df8 <HAL_GPIO_ReadPin>
 80012b0:	4603      	mov	r3, r0
 80012b2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    	obuf[4] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 80012b6:	2110      	movs	r1, #16
 80012b8:	4871      	ldr	r0, [pc, #452]	; (8001480 <app_send_data+0x300>)
 80012ba:	f001 fd9d 	bl	8002df8 <HAL_GPIO_ReadPin>
 80012be:	4603      	mov	r3, r0
 80012c0:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
    	obuf[5] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 80012c4:	2120      	movs	r1, #32
 80012c6:	486e      	ldr	r0, [pc, #440]	; (8001480 <app_send_data+0x300>)
 80012c8:	f001 fd96 	bl	8002df8 <HAL_GPIO_ReadPin>
 80012cc:	4603      	mov	r3, r0
 80012ce:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
    	obuf[6] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_4);
 80012d2:	2110      	movs	r1, #16
 80012d4:	4869      	ldr	r0, [pc, #420]	; (800147c <app_send_data+0x2fc>)
 80012d6:	f001 fd8f 	bl	8002df8 <HAL_GPIO_ReadPin>
 80012da:	4603      	mov	r3, r0
 80012dc:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
    	obuf[7] = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_8);
 80012e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012e4:	4864      	ldr	r0, [pc, #400]	; (8001478 <app_send_data+0x2f8>)
 80012e6:	f001 fd87 	bl	8002df8 <HAL_GPIO_ReadPin>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    	obuf[8] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13);
 80012f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012f4:	485f      	ldr	r0, [pc, #380]	; (8001474 <app_send_data+0x2f4>)
 80012f6:	f001 fd7f 	bl	8002df8 <HAL_GPIO_ReadPin>
 80012fa:	4603      	mov	r3, r0
 80012fc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
    	obuf[9] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10);
 8001300:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001304:	485d      	ldr	r0, [pc, #372]	; (800147c <app_send_data+0x2fc>)
 8001306:	f001 fd77 	bl	8002df8 <HAL_GPIO_ReadPin>
 800130a:	4603      	mov	r3, r0
 800130c:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
    	obuf[10] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12);
 8001310:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001314:	4857      	ldr	r0, [pc, #348]	; (8001474 <app_send_data+0x2f4>)
 8001316:	f001 fd6f 	bl	8002df8 <HAL_GPIO_ReadPin>
 800131a:	4603      	mov	r3, r0
 800131c:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    	obuf[11] = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8001320:	2180      	movs	r1, #128	; 0x80
 8001322:	4855      	ldr	r0, [pc, #340]	; (8001478 <app_send_data+0x2f8>)
 8001324:	f001 fd68 	bl	8002df8 <HAL_GPIO_ReadPin>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
    	obuf[12] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11);
 800132e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001332:	4850      	ldr	r0, [pc, #320]	; (8001474 <app_send_data+0x2f4>)
 8001334:	f001 fd60 	bl	8002df8 <HAL_GPIO_ReadPin>
 8001338:	4603      	mov	r3, r0
 800133a:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
    	obuf[13] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14);
 800133e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001342:	484c      	ldr	r0, [pc, #304]	; (8001474 <app_send_data+0x2f4>)
 8001344:	f001 fd58 	bl	8002df8 <HAL_GPIO_ReadPin>
 8001348:	4603      	mov	r3, r0
 800134a:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
    	obuf[14] = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10);
 800134e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001352:	4849      	ldr	r0, [pc, #292]	; (8001478 <app_send_data+0x2f8>)
 8001354:	f001 fd50 	bl	8002df8 <HAL_GPIO_ReadPin>
 8001358:	4603      	mov	r3, r0
 800135a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
    	obuf[15] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15);
 800135e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001362:	4844      	ldr	r0, [pc, #272]	; (8001474 <app_send_data+0x2f4>)
 8001364:	f001 fd48 	bl	8002df8 <HAL_GPIO_ReadPin>
 8001368:	4603      	mov	r3, r0
 800136a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    	obuf[16] = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12);
 800136e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001372:	4841      	ldr	r0, [pc, #260]	; (8001478 <app_send_data+0x2f8>)
 8001374:	f001 fd40 	bl	8002df8 <HAL_GPIO_ReadPin>
 8001378:	4603      	mov	r3, r0
 800137a:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
    	obuf[17] = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_14);
 800137e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001382:	483d      	ldr	r0, [pc, #244]	; (8001478 <app_send_data+0x2f8>)
 8001384:	f001 fd38 	bl	8002df8 <HAL_GPIO_ReadPin>
 8001388:	4603      	mov	r3, r0
 800138a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
    	obuf[18] = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9);
 800138e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001392:	4839      	ldr	r0, [pc, #228]	; (8001478 <app_send_data+0x2f8>)
 8001394:	f001 fd30 	bl	8002df8 <HAL_GPIO_ReadPin>
 8001398:	4603      	mov	r3, r0
 800139a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
    	obuf_len = 19;
 800139e:	2313      	movs	r3, #19
 80013a0:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
 80013a4:	e00e      	b.n	80013c4 <app_send_data+0x244>
    }
    else if(data[0]==3){
 80013a6:	7b3b      	ldrb	r3, [r7, #12]
 80013a8:	2b03      	cmp	r3, #3
 80013aa:	d102      	bne.n	80013b2 <app_send_data+0x232>
    	//todo start
    	oper();
 80013ac:	f7ff fb0c 	bl	80009c8 <oper>
 80013b0:	e008      	b.n	80013c4 <app_send_data+0x244>
    }
    else if(data[0]==4){
 80013b2:	7b3b      	ldrb	r3, [r7, #12]
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	d005      	beq.n	80013c4 <app_send_data+0x244>
    	//todo stop
    }
    else{
    	obuf[0] = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
    	obuf_len = 1;
 80013be:	2301      	movs	r3, #1
 80013c0:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    }


    wr_err = tcp_write(tpcb, obuf, obuf_len, 1); //send data
 80013c4:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 80013c8:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80013cc:	2301      	movs	r3, #1
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f00c fc50 	bl	800dc74 <tcp_write>
 80013d4:	4603      	mov	r3, r0
 80013d6:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

    if (wr_err == ERR_OK)
 80013da:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d124      	bne.n	800142c <app_send_data+0x2ac>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 80013e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80013e6:	895b      	ldrh	r3, [r3, #10]
 80013e8:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
      es->p = ptr->next;
 80013ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	609a      	str	r2, [r3, #8]

      if (es->p != NULL) //there's chained buffer to send
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d004      	beq.n	8001408 <app_send_data+0x288>
      {
        pbuf_ref(es->p);	//increase reference counter
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	4618      	mov	r0, r3
 8001404:	f008 fa08 	bl	8009818 <pbuf_ref>
      }

      do
      {
        freed = pbuf_free(ptr);		//free old buffer
 8001408:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800140c:	f008 f954 	bl	80096b8 <pbuf_free>
 8001410:	4603      	mov	r3, r0
 8001412:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
      }
      while (freed == 0);
 8001416:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f4      	beq.n	8001408 <app_send_data+0x288>

      tcp_recved(tpcb, plen);			//advertise window size
 800141e:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8001422:	4619      	mov	r1, r3
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f008 ffff 	bl	800a428 <tcp_recved>
 800142a:	e009      	b.n	8001440 <app_send_data+0x2c0>
    }
    else
    {
      es->p = ptr;  //fail to send, recover buffer pointer
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001432:	609a      	str	r2, [r3, #8]
      es->retries++;  //increase counter
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	785b      	ldrb	r3, [r3, #1]
 8001438:	3301      	adds	r3, #1
 800143a:	b2da      	uxtb	r2, r3
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	705a      	strb	r2, [r3, #1]
  while ((wr_err == ERR_OK) && (es->p != NULL)
 8001440:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8001444:	2b00      	cmp	r3, #0
 8001446:	d10c      	bne.n	8001462 <app_send_data+0x2e2>
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d008      	beq.n	8001462 <app_send_data+0x2e2>
      && (es->p->len <= tcp_sndbuf(tpcb)))
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	895a      	ldrh	r2, [r3, #10]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800145c:	429a      	cmp	r2, r3
 800145e:	f67f ae98 	bls.w	8001192 <app_send_data+0x12>
    }
  }
}
 8001462:	bf00      	nop
 8001464:	37e0      	adds	r7, #224	; 0xe0
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40020000 	.word	0x40020000
 8001470:	40020800 	.word	0x40020800
 8001474:	40020c00 	.word	0x40020c00
 8001478:	40021000 	.word	0x40021000
 800147c:	40021400 	.word	0x40021400
 8001480:	40020400 	.word	0x40020400

08001484 <app_close_connection>:

/* close connection */
static void app_close_connection(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  /* clear callback functions */
  tcp_arg(tpcb, NULL);
 800148e:	2100      	movs	r1, #0
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f009 fdb5 	bl	800b000 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8001496:	2100      	movs	r1, #0
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f009 fde3 	bl	800b064 <tcp_sent>
  tcp_recv(tpcb, NULL);
 800149e:	2100      	movs	r1, #0
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f009 fdbd 	bl	800b020 <tcp_recv>
  tcp_err(tpcb, NULL);
 80014a6:	2100      	movs	r1, #0
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f009 fdfb 	bl	800b0a4 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f009 fe2e 	bl	800b114 <tcp_poll>

  if (es != NULL)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d002      	beq.n	80014c4 <app_close_connection+0x40>
  {
    mem_free(es);		//free es structure
 80014be:	6838      	ldr	r0, [r7, #0]
 80014c0:	f007 f82c 	bl	800851c <mem_free>
  }

  tcp_close(tpcb);		//close connection
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f008 fd3f 	bl	8009f48 <tcp_close>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800150c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d8:	480d      	ldr	r0, [pc, #52]	; (8001510 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014da:	490e      	ldr	r1, [pc, #56]	; (8001514 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014dc:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e0:	e002      	b.n	80014e8 <LoopCopyDataInit>

080014e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e6:	3304      	adds	r3, #4

080014e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ec:	d3f9      	bcc.n	80014e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ee:	4a0b      	ldr	r2, [pc, #44]	; (800151c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014f0:	4c0b      	ldr	r4, [pc, #44]	; (8001520 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f4:	e001      	b.n	80014fa <LoopFillZerobss>

080014f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f8:	3204      	adds	r2, #4

080014fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014fc:	d3fb      	bcc.n	80014f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014fe:	f7ff fcb1 	bl	8000e64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001502:	f010 fc59 	bl	8011db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001506:	f7fe fff9 	bl	80004fc <main>
  bx  lr
 800150a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800150c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001514:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001518:	08014c70 	.word	0x08014c70
  ldr r2, =_sbss
 800151c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001520:	2000b158 	.word	0x2000b158

08001524 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001524:	e7fe      	b.n	8001524 <ADC_IRQHandler>
	...

08001528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800152c:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <HAL_Init+0x40>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <HAL_Init+0x40>)
 8001532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001536:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <HAL_Init+0x40>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <HAL_Init+0x40>)
 800153e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001542:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <HAL_Init+0x40>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a07      	ldr	r2, [pc, #28]	; (8001568 <HAL_Init+0x40>)
 800154a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800154e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001550:	2003      	movs	r0, #3
 8001552:	f000 f8f5 	bl	8001740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001556:	200f      	movs	r0, #15
 8001558:	f7ff fb5e 	bl	8000c18 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800155c:	f7ff fa8e 	bl	8000a7c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40023c00 	.word	0x40023c00

0800156c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <HAL_IncTick+0x1c>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <HAL_IncTick+0x20>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4413      	add	r3, r2
 800157c:	4a03      	ldr	r2, [pc, #12]	; (800158c <HAL_IncTick+0x20>)
 800157e:	6013      	str	r3, [r2, #0]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr
 8001588:	20000008 	.word	0x20000008
 800158c:	200048d4 	.word	0x200048d4

08001590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return uwTick;
 8001594:	4b02      	ldr	r3, [pc, #8]	; (80015a0 <HAL_GetTick+0x10>)
 8001596:	681b      	ldr	r3, [r3, #0]
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	200048d4 	.word	0x200048d4

080015a4 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015ac:	f7ff fff0 	bl	8001590 <HAL_GetTick>
 80015b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015bc:	d005      	beq.n	80015ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <HAL_Delay+0x44>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4413      	add	r3, r2
 80015c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ca:	bf00      	nop
 80015cc:	f7ff ffe0 	bl	8001590 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d8f7      	bhi.n	80015cc <HAL_Delay+0x28>
  {
  }
}
 80015dc:	bf00      	nop
 80015de:	bf00      	nop
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000008 	.word	0x20000008

080015ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <__NVIC_SetPriorityGrouping+0x44>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001608:	4013      	ands	r3, r2
 800160a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001614:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800161c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800161e:	4a04      	ldr	r2, [pc, #16]	; (8001630 <__NVIC_SetPriorityGrouping+0x44>)
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	60d3      	str	r3, [r2, #12]
}
 8001624:	bf00      	nop
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001638:	4b04      	ldr	r3, [pc, #16]	; (800164c <__NVIC_GetPriorityGrouping+0x18>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	0a1b      	lsrs	r3, r3, #8
 800163e:	f003 0307 	and.w	r3, r3, #7
}
 8001642:	4618      	mov	r0, r3
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	2b00      	cmp	r3, #0
 8001660:	db0b      	blt.n	800167a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	f003 021f 	and.w	r2, r3, #31
 8001668:	4906      	ldr	r1, [pc, #24]	; (8001684 <__NVIC_EnableIRQ+0x34>)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	095b      	lsrs	r3, r3, #5
 8001670:	2001      	movs	r0, #1
 8001672:	fa00 f202 	lsl.w	r2, r0, r2
 8001676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	e000e100 	.word	0xe000e100

08001688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	6039      	str	r1, [r7, #0]
 8001692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001698:	2b00      	cmp	r3, #0
 800169a:	db0a      	blt.n	80016b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	490c      	ldr	r1, [pc, #48]	; (80016d4 <__NVIC_SetPriority+0x4c>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	0112      	lsls	r2, r2, #4
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	440b      	add	r3, r1
 80016ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b0:	e00a      	b.n	80016c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4908      	ldr	r1, [pc, #32]	; (80016d8 <__NVIC_SetPriority+0x50>)
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	3b04      	subs	r3, #4
 80016c0:	0112      	lsls	r2, r2, #4
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	440b      	add	r3, r1
 80016c6:	761a      	strb	r2, [r3, #24]
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000e100 	.word	0xe000e100
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016dc:	b480      	push	{r7}
 80016de:	b089      	sub	sp, #36	; 0x24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f1c3 0307 	rsb	r3, r3, #7
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	bf28      	it	cs
 80016fa:	2304      	movcs	r3, #4
 80016fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3304      	adds	r3, #4
 8001702:	2b06      	cmp	r3, #6
 8001704:	d902      	bls.n	800170c <NVIC_EncodePriority+0x30>
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3b03      	subs	r3, #3
 800170a:	e000      	b.n	800170e <NVIC_EncodePriority+0x32>
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001710:	f04f 32ff 	mov.w	r2, #4294967295
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43da      	mvns	r2, r3
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	401a      	ands	r2, r3
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001724:	f04f 31ff 	mov.w	r1, #4294967295
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	fa01 f303 	lsl.w	r3, r1, r3
 800172e:	43d9      	mvns	r1, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001734:	4313      	orrs	r3, r2
         );
}
 8001736:	4618      	mov	r0, r3
 8001738:	3724      	adds	r7, #36	; 0x24
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr

08001740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ff4f 	bl	80015ec <__NVIC_SetPriorityGrouping>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	4603      	mov	r3, r0
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001768:	f7ff ff64 	bl	8001634 <__NVIC_GetPriorityGrouping>
 800176c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	68b9      	ldr	r1, [r7, #8]
 8001772:	6978      	ldr	r0, [r7, #20]
 8001774:	f7ff ffb2 	bl	80016dc <NVIC_EncodePriority>
 8001778:	4602      	mov	r2, r0
 800177a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff81 	bl	8001688 <__NVIC_SetPriority>
}
 8001786:	bf00      	nop
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	4603      	mov	r3, r0
 8001796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff57 	bl	8001650 <__NVIC_EnableIRQ>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61fb      	str	r3, [r7, #28]
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80017bc:	4ba3      	ldr	r3, [pc, #652]	; (8001a4c <HAL_ETH_Init+0x2a0>)
 80017be:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80017c4:	2300      	movs	r3, #0
 80017c6:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e173      	b.n	8001aba <HAL_ETH_Init+0x30e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d106      	bne.n	80017ec <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f003 f904 	bl	80049f4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ec:	2300      	movs	r3, #0
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	4b97      	ldr	r3, [pc, #604]	; (8001a50 <HAL_ETH_Init+0x2a4>)
 80017f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f4:	4a96      	ldr	r2, [pc, #600]	; (8001a50 <HAL_ETH_Init+0x2a4>)
 80017f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017fa:	6453      	str	r3, [r2, #68]	; 0x44
 80017fc:	4b94      	ldr	r3, [pc, #592]	; (8001a50 <HAL_ETH_Init+0x2a4>)
 80017fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001808:	4b92      	ldr	r3, [pc, #584]	; (8001a54 <HAL_ETH_Init+0x2a8>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	4a91      	ldr	r2, [pc, #580]	; (8001a54 <HAL_ETH_Init+0x2a8>)
 800180e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001812:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001814:	4b8f      	ldr	r3, [pc, #572]	; (8001a54 <HAL_ETH_Init+0x2a8>)
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	498d      	ldr	r1, [pc, #564]	; (8001a54 <HAL_ETH_Init+0x2a8>)
 800181e:	4313      	orrs	r3, r2
 8001820:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f042 0201 	orr.w	r2, r2, #1
 8001834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001838:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800183a:	f7ff fea9 	bl	8001590 <HAL_GetTick>
 800183e:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001840:	e011      	b.n	8001866 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 8001842:	f7ff fea5 	bl	8001590 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001850:	d909      	bls.n	8001866 <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2203      	movs	r2, #3
 8001856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e129      	b.n	8001aba <HAL_ETH_Init+0x30e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1e4      	bne.n	8001842 <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f023 031c 	bic.w	r3, r3, #28
 8001886:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001888:	f002 f820 	bl	80038cc <HAL_RCC_GetHCLKFreq>
 800188c:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	4a71      	ldr	r2, [pc, #452]	; (8001a58 <HAL_ETH_Init+0x2ac>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d908      	bls.n	80018a8 <HAL_ETH_Init+0xfc>
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	4a70      	ldr	r2, [pc, #448]	; (8001a5c <HAL_ETH_Init+0x2b0>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d804      	bhi.n	80018a8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	f043 0308 	orr.w	r3, r3, #8
 80018a4:	61fb      	str	r3, [r7, #28]
 80018a6:	e01a      	b.n	80018de <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	4a6c      	ldr	r2, [pc, #432]	; (8001a5c <HAL_ETH_Init+0x2b0>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d908      	bls.n	80018c2 <HAL_ETH_Init+0x116>
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	4a66      	ldr	r2, [pc, #408]	; (8001a4c <HAL_ETH_Init+0x2a0>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d204      	bcs.n	80018c2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f043 030c 	orr.w	r3, r3, #12
 80018be:	61fb      	str	r3, [r7, #28]
 80018c0:	e00d      	b.n	80018de <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	4a61      	ldr	r2, [pc, #388]	; (8001a4c <HAL_ETH_Init+0x2a0>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d303      	bcc.n	80018d2 <HAL_ETH_Init+0x126>
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	4a64      	ldr	r2, [pc, #400]	; (8001a60 <HAL_ETH_Init+0x2b4>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d904      	bls.n	80018dc <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	61fb      	str	r3, [r7, #28]
 80018da:	e000      	b.n	80018de <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80018dc:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	69fa      	ldr	r2, [r7, #28]
 80018e4:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80018e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018ea:	2100      	movs	r1, #0
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 fc0f 	bl	8002110 <HAL_ETH_WritePHYRegister>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00b      	beq.n	8001910 <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80018fc:	6939      	ldr	r1, [r7, #16]
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 fdc4 	bl	800248c <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0d4      	b.n	8001aba <HAL_ETH_Init+0x30e>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001910:	20ff      	movs	r0, #255	; 0xff
 8001912:	f7ff fe47 	bl	80015a4 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 80a2 	beq.w	8001a64 <HAL_ETH_Init+0x2b8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001920:	f7ff fe36 	bl	8001590 <HAL_GetTick>
 8001924:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001926:	f107 030c 	add.w	r3, r7, #12
 800192a:	461a      	mov	r2, r3
 800192c:	2101      	movs	r1, #1
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 fb86 	bl	8002040 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 8001934:	f7ff fe2c 	bl	8001590 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001942:	4293      	cmp	r3, r2
 8001944:	d90f      	bls.n	8001966 <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800194a:	6939      	ldr	r1, [r7, #16]
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 fd9d 	bl	800248c <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e0a9      	b.n	8001aba <HAL_ETH_Init+0x30e>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0da      	beq.n	8001926 <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001970:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001974:	2100      	movs	r1, #0
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 fbca 	bl	8002110 <HAL_ETH_WritePHYRegister>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00b      	beq.n	800199a <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001986:	6939      	ldr	r1, [r7, #16]
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 fd7f 	bl	800248c <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e08f      	b.n	8001aba <HAL_ETH_Init+0x30e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 800199a:	f7ff fdf9 	bl	8001590 <HAL_GetTick>
 800199e:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80019a0:	f107 030c 	add.w	r3, r7, #12
 80019a4:	461a      	mov	r2, r3
 80019a6:	2101      	movs	r1, #1
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 fb49 	bl	8002040 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80019ae:	f7ff fdef 	bl	8001590 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019bc:	4293      	cmp	r3, r2
 80019be:	d90f      	bls.n	80019e0 <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80019c4:	6939      	ldr	r1, [r7, #16]
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 fd60 	bl	800248c <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e06c      	b.n	8001aba <HAL_ETH_Init+0x30e>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 0320 	and.w	r3, r3, #32
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0da      	beq.n	80019a0 <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80019ea:	f107 030c 	add.w	r3, r7, #12
 80019ee:	461a      	mov	r2, r3
 80019f0:	2110      	movs	r1, #16
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 fb24 	bl	8002040 <HAL_ETH_ReadPHYRegister>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00b      	beq.n	8001a16 <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001a02:	6939      	ldr	r1, [r7, #16]
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 fd41 	bl	800248c <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e051      	b.n	8001aba <HAL_ETH_Init+0x30e>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d004      	beq.n	8001a2a <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	e002      	b.n	8001a30 <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	e032      	b.n	8001aa8 <HAL_ETH_Init+0x2fc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	e02d      	b.n	8001aa8 <HAL_ETH_Init+0x2fc>
 8001a4c:	03938700 	.word	0x03938700
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40013800 	.word	0x40013800
 8001a58:	01312cff 	.word	0x01312cff
 8001a5c:	02160ebf 	.word	0x02160ebf
 8001a60:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	08db      	lsrs	r3, r3, #3
 8001a6a:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	085b      	lsrs	r3, r3, #1
 8001a72:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001a74:	4313      	orrs	r3, r2
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	461a      	mov	r2, r3
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 fb47 	bl	8002110 <HAL_ETH_WritePHYRegister>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00b      	beq.n	8001aa0 <HAL_ETH_Init+0x2f4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001a8c:	6939      	ldr	r1, [r7, #16]
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 fcfc 	bl	800248c <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e00c      	b.n	8001aba <HAL_ETH_Init+0x30e>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001aa0:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001aa4:	f7ff fd7e 	bl	80015a4 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001aa8:	6939      	ldr	r1, [r7, #16]
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 fcee 	bl	800248c <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3720      	adds	r7, #32
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop

08001ac4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b087      	sub	sp, #28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
 8001ad0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d101      	bne.n	8001ae4 <HAL_ETH_DMATxDescListInit+0x20>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e052      	b.n	8001b8a <HAL_ETH_DMATxDescListInit+0xc6>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2202      	movs	r2, #2
 8001af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	e030      	b.n	8001b62 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	015b      	lsls	r3, r3, #5
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	4413      	add	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b10:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001b18:	fb02 f303 	mul.w	r3, r2, r3
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	4413      	add	r3, r2
 8001b20:	461a      	mov	r2, r3
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d105      	bne.n	8001b3a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1))
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d208      	bcs.n	8001b56 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1);
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	3301      	adds	r3, #1
 8001b48:	015b      	lsls	r3, r3, #5
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	461a      	mov	r2, r3
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	60da      	str	r2, [r3, #12]
 8001b54:	e002      	b.n	8001b5c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d3ca      	bcc.n	8001b00 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b74:	3310      	adds	r3, #16
 8001b76:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	371c      	adds	r7, #28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b087      	sub	sp, #28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
 8001ba0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <HAL_ETH_DMARxDescListInit+0x20>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e056      	b.n	8001c62 <HAL_ETH_DMARxDescListInit+0xce>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	e034      	b.n	8001c3a <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	015b      	lsls	r3, r3, #5
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001be0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001be8:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001bf0:	fb02 f303 	mul.w	r3, r2, r3
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d105      	bne.n	8001c12 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	3b01      	subs	r3, #1
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d208      	bcs.n	8001c2e <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	015b      	lsls	r3, r3, #5
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	4413      	add	r3, r2
 8001c26:	461a      	mov	r2, r3
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	60da      	str	r2, [r3, #12]
 8001c2c:	e002      	b.n	8001c34 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	3301      	adds	r3, #1
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d3c6      	bcc.n	8001bd0 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c4c:	330c      	adds	r3, #12
 8001c4e:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	371c      	adds	r7, #28
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_ETH_TransmitFrame+0x24>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e0cd      	b.n	8001e2c <HAL_ETH_TransmitFrame+0x1c0>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (FrameLength == 0U)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d109      	bne.n	8001cba <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return  HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e0b8      	b.n	8001e2c <HAL_ETH_TransmitFrame+0x1c0>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	da09      	bge.n	8001cd8 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2212      	movs	r2, #18
 8001cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e0a9      	b.n	8001e2c <HAL_ETH_TransmitFrame+0x1c0>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d915      	bls.n	8001d0e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	4a54      	ldr	r2, [pc, #336]	; (8001e38 <HAL_ETH_TransmitFrame+0x1cc>)
 8001ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cea:	0a9b      	lsrs	r3, r3, #10
 8001cec:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	4b51      	ldr	r3, [pc, #324]	; (8001e38 <HAL_ETH_TransmitFrame+0x1cc>)
 8001cf2:	fba3 1302 	umull	r1, r3, r3, r2
 8001cf6:	0a9b      	lsrs	r3, r3, #10
 8001cf8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001cfc:	fb01 f303 	mul.w	r3, r1, r3
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d005      	beq.n	8001d12 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	e001      	b.n	8001d12 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d11c      	bne.n	8001d52 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d22:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001d26:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001d32:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d42:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d50:	e04b      	b.n	8001dea <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	e044      	b.n	8001de2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d62:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d66:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d107      	bne.n	8001d7e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d78:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d7c:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d82:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001d86:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d116      	bne.n	8001dc0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001da0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	4a25      	ldr	r2, [pc, #148]	; (8001e3c <HAL_ETH_TransmitFrame+0x1d0>)
 8001da6:	fb02 f203 	mul.w	r2, r2, r3
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	4413      	add	r3, r2
 8001dae:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001db2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001dbe:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001dce:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i = 0U; i < bufcount; i++)
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	3301      	adds	r3, #1
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d3b6      	bcc.n	8001d58 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df2:	3314      	adds	r3, #20
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00d      	beq.n	8001e1a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e06:	3314      	adds	r3, #20
 8001e08:	2204      	movs	r2, #4
 8001e0a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e14:	3304      	adds	r3, #4
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	371c      	adds	r7, #28
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	ac02b00b 	.word	0xac02b00b
 8001e3c:	fffffa0c 	.word	0xfffffa0c

08001e40 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d101      	bne.n	8001e5a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001e56:	2302      	movs	r3, #2
 8001e58:	e074      	b.n	8001f44 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2202      	movs	r2, #2
 8001e66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001e6a:	e05a      	b.n	8001f22 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	60fb      	str	r3, [r7, #12]

    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */
    if ((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e80:	d10d      	bne.n	8001e9e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    {
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	461a      	mov	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	629a      	str	r2, [r3, #40]	; 0x28
 8001e9c:	e041      	b.n	8001f22 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10b      	bne.n	8001ec4 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb0:	1c5a      	adds	r2, r3, #1
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	629a      	str	r2, [r3, #40]	; 0x28
 8001ec2:	e02e      	b.n	8001f22 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    {
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d103      	bne.n	8001ee6 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001ef2:	1f1a      	subs	r2, r3, #4
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Return function status */
      return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e010      	b.n	8001f44 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	db02      	blt.n	8001f32 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	d99c      	bls.n	8001e6c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr

08001f4e <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f5e:	3314      	adds	r3, #20
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f66:	2b40      	cmp	r3, #64	; 0x40
 8001f68:	d112      	bne.n	8001f90 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f002 fe10 	bl	8004b90 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f78:	3314      	adds	r3, #20
 8001f7a:	2240      	movs	r2, #64	; 0x40
 8001f7c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f8e:	e01b      	b.n	8001fc8 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f98:	3314      	adds	r3, #20
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d111      	bne.n	8001fc8 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f839 	bl	800201c <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fb2:	3314      	adds	r3, #20
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fd0:	3314      	adds	r3, #20
 8001fd2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fd6:	601a      	str	r2, [r3, #0]

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fe0:	3314      	adds	r3, #20
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fec:	d112      	bne.n	8002014 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f81d 	bl	800202e <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ffc:	3314      	adds	r3, #20
 8001ffe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002002:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr

0800202e <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr

08002040 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	460b      	mov	r3, r1
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b82      	cmp	r3, #130	; 0x82
 8002060:	d101      	bne.n	8002066 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002062:	2302      	movs	r3, #2
 8002064:	e050      	b.n	8002108 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2282      	movs	r2, #130	; 0x82
 800206a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f003 031c 	and.w	r3, r3, #28
 800207c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8a1b      	ldrh	r3, [r3, #16]
 8002082:	02db      	lsls	r3, r3, #11
 8002084:	b29b      	uxth	r3, r3
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	4313      	orrs	r3, r2
 800208a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800208c:	897b      	ldrh	r3, [r7, #10]
 800208e:	019b      	lsls	r3, r3, #6
 8002090:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	4313      	orrs	r3, r2
 8002098:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f023 0302 	bic.w	r3, r3, #2
 80020a0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020b2:	f7ff fa6d 	bl	8001590 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80020b8:	e015      	b.n	80020e6 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80020ba:	f7ff fa69 	bl	8001590 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c8:	d309      	bcc.n	80020de <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e014      	b.n	8002108 <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1e4      	bne.n	80020ba <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	461a      	mov	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	460b      	mov	r3, r1
 800211a:	607a      	str	r2, [r7, #4]
 800211c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b42      	cmp	r3, #66	; 0x42
 8002130:	d101      	bne.n	8002136 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002132:	2302      	movs	r3, #2
 8002134:	e04e      	b.n	80021d4 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2242      	movs	r2, #66	; 0x42
 800213a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f003 031c 	and.w	r3, r3, #28
 800214c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8a1b      	ldrh	r3, [r3, #16]
 8002152:	02db      	lsls	r3, r3, #11
 8002154:	b29b      	uxth	r3, r3
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	4313      	orrs	r3, r2
 800215a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800215c:	897b      	ldrh	r3, [r7, #10]
 800215e:	019b      	lsls	r3, r3, #6
 8002160:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	4313      	orrs	r3, r2
 8002168:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f043 0302 	orr.w	r3, r3, #2
 8002170:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800218c:	f7ff fa00 	bl	8001590 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002192:	e015      	b.n	80021c0 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002194:	f7ff f9fc 	bl	8001590 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a2:	d309      	bcc.n	80021b8 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e00d      	b.n	80021d4 <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1e4      	bne.n	8002194 <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_ETH_Start>:
 * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d101      	bne.n	80021f2 <HAL_ETH_Start+0x16>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e01f      	b.n	8002232 <HAL_ETH_Start+0x56>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2202      	movs	r2, #2
 80021fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 fb42 	bl	800288c <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 fb79 	bl	8002900 <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 fc0c 	bl	8002a2c <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 fbad 	bl	8002974 <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 fbd8 	bl	80029d0 <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <HAL_ETH_Stop+0x16>
 800224c:	2302      	movs	r3, #2
 800224e:	e01f      	b.n	8002290 <HAL_ETH_Stop+0x56>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2202      	movs	r2, #2
 800225c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 fb9e 	bl	80029a2 <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 fbc9 	bl	80029fe <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 fb64 	bl	800293a <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 fbda 	bl	8002a2c <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 fb24 	bl	80028c6 <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_ETH_ConfigMAC+0x1c>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e0e4      	b.n	800247e <HAL_ETH_ConfigMAC+0x1e6>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 80b1 	beq.w	800242e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	4b6c      	ldr	r3, [pc, #432]	; (8002488 <HAL_ETH_ConfigMAC+0x1f0>)
 80022d8:	4013      	ands	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 80022e4:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 80022ea:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 80022f0:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 80022f6:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 80022fc:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 8002302:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 8002308:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 800230e:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 8002314:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 800231a:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          macconf->AutomaticPadCRCStrip |
 8002320:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          macconf->BackOffLimit |
 8002326:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4313      	orrs	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800233e:	2001      	movs	r0, #1
 8002340:	f7ff f930 	bl	80015a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8002354:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800235a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002360:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception |
 8002366:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800236c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002372:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800237e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8002380:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800238a:	2001      	movs	r0, #1
 800238c:	f7ff f90a 	bl	80015a4 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80023a0:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023aa:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80023ba:	4013      	ands	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c2:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80023c8:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80023ce:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80023d4:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect |
 80023da:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80023e0:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023f8:	2001      	movs	r0, #1
 80023fa:	f7ff f8d3 	bl	80015a4 <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                             macconf->VLANTagIdentifier);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800241e:	2001      	movs	r0, #1
 8002420:	f7ff f8c0 	bl	80015a4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	61da      	str	r2, [r3, #28]
 800242c:	e01e      	b.n	800246c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800243c:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	4313      	orrs	r3, r2
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800245e:	2001      	movs	r0, #1
 8002460:	f7ff f8a0 	bl	80015a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	ff20810f 	.word	0xff20810f

0800248c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b0b0      	sub	sp, #192	; 0xc0
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8002496:	2300      	movs	r3, #0
 8002498:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d007      	beq.n	80024b2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024a8:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024b0:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80024b2:	2300      	movs	r3, #0
 80024b4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80024b6:	2300      	movs	r3, #0
 80024b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80024ba:	2300      	movs	r3, #0
 80024bc:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80024be:	2300      	movs	r3, #0
 80024c0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80024c6:	2300      	movs	r3, #0
 80024c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d103      	bne.n	80024da <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80024d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024d6:	663b      	str	r3, [r7, #96]	; 0x60
 80024d8:	e001      	b.n	80024de <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80024da:	2300      	movs	r3, #0
 80024dc:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80024de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024e2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80024e4:	2300      	movs	r3, #0
 80024e6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80024e8:	2300      	movs	r3, #0
 80024ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80024f0:	2300      	movs	r3, #0
 80024f2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80024f4:	2300      	movs	r3, #0
 80024f6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80024f8:	2340      	movs	r3, #64	; 0x40
 80024fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002502:	2300      	movs	r3, #0
 8002504:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800250e:	2300      	movs	r3, #0
 8002510:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002514:	2300      	movs	r3, #0
 8002516:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800251a:	2300      	movs	r3, #0
 800251c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002520:	2300      	movs	r3, #0
 8002522:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002526:	2300      	movs	r3, #0
 8002528:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800252c:	2380      	movs	r3, #128	; 0x80
 800252e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002532:	2300      	movs	r3, #0
 8002534:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002538:	2300      	movs	r3, #0
 800253a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800253e:	2300      	movs	r3, #0
 8002540:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002544:	2300      	movs	r3, #0
 8002546:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800254a:	2300      	movs	r3, #0
 800254c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002550:	2300      	movs	r3, #0
 8002552:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002560:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002564:	4bac      	ldr	r3, [pc, #688]	; (8002818 <ETH_MACDMAConfig+0x38c>)
 8002566:	4013      	ands	r3, r2
 8002568:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 800256c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 800256e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8002570:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 8002572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 8002574:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 8002576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 8002578:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 800257e:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8002580:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 8002582:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8002584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 8002586:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 800258c:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 800258e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 8002590:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8002592:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 8002594:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 8002596:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 8002598:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 800259a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 800259c:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 800259e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 80025a0:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 80025a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025b4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025c0:	2001      	movs	r0, #1
 80025c2:	f7fe ffef 	bl	80015a4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025ce:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80025d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80025d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80025d4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80025d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80025d8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 80025da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80025de:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80025e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 80025e4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80025e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80025ea:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80025ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80025f0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80025f4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80025fc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80025fe:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800260a:	2001      	movs	r0, #1
 800260c:	f7fe ffca 	bl	80015a4 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002618:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002622:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800262c:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002638:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800263c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002640:	4013      	ands	r3, r2
 8002642:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8002646:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800264a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800264c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8002650:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002652:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002656:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8002658:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800265c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800265e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 8002662:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8002664:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002668:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 800266a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800266e:	4313      	orrs	r3, r2
 8002670:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800267c:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002688:	2001      	movs	r0, #1
 800268a:	f7fe ff8b 	bl	80015a4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002696:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8002698:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 800269c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026b2:	2001      	movs	r0, #1
 80026b4:	f7fe ff76 	bl	80015a4 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026c0:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80026c2:	2300      	movs	r3, #0
 80026c4:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80026c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ca:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 80026d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026d4:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80026de:	2300      	movs	r3, #0
 80026e0:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80026e2:	2300      	movs	r3, #0
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80026e6:	2304      	movs	r3, #4
 80026e8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80026ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80026f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026f4:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80026f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026fa:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80026fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002700:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002702:	2380      	movs	r3, #128	; 0x80
 8002704:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 8002706:	2300      	movs	r3, #0
 8002708:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800270a:	2300      	movs	r3, #0
 800270c:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002716:	3318      	adds	r3, #24
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800271e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002722:	4b3e      	ldr	r3, [pc, #248]	; (800281c <ETH_MACDMAConfig+0x390>)
 8002724:	4013      	ands	r3, r2
 8002726:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800272a:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 800272c:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800272e:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 8002730:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 8002732:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 8002734:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 8002736:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8002738:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 800273a:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 800273c:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 800273e:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 8002740:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 8002742:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 8002746:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 8002748:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ReceiveThresholdControl |
 800274a:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800274c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800275e:	3318      	adds	r3, #24
 8002760:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002764:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800276e:	3318      	adds	r3, #24
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002776:	2001      	movs	r0, #1
 8002778:	f7fe ff14 	bl	80015a4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002784:	3318      	adds	r3, #24
 8002786:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800278a:	601a      	str	r2, [r3, #0]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 800278c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                        dmainit.FixedBurst |
 800278e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8002790:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                        dmainit.FixedBurst |
 8002794:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 8002796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002798:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 800279a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.TxDMABurstLength |
 800279c:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 800279e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027a0:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 80027a2:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 80027a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 80027a6:	431a      	orrs	r2, r3
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80027b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027b4:	601a      	str	r2, [r3, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027c4:	2001      	movs	r0, #1
 80027c6:	f7fe feed 	bl	80015a4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027d6:	601a      	str	r2, [r3, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d10f      	bne.n	8002800 <ETH_MACDMAConfig+0x374>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027e8:	331c      	adds	r3, #28
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027fc:	331c      	adds	r3, #28
 80027fe:	601a      	str	r2, [r3, #0]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	461a      	mov	r2, r3
 8002806:	2100      	movs	r1, #0
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f809 	bl	8002820 <ETH_MACAddressConfig>
}
 800280e:	bf00      	nop
 8002810:	37c0      	adds	r7, #192	; 0xc0
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	ff20810f 	.word	0xff20810f
 800281c:	f8de3f23 	.word	0xf8de3f23

08002820 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3305      	adds	r3, #5
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	021b      	lsls	r3, r3, #8
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	3204      	adds	r2, #4
 8002838:	7812      	ldrb	r2, [r2, #0]
 800283a:	4313      	orrs	r3, r2
 800283c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	4b10      	ldr	r3, [pc, #64]	; (8002884 <ETH_MACAddressConfig+0x64>)
 8002842:	4413      	add	r3, r2
 8002844:	461a      	mov	r2, r3
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3303      	adds	r3, #3
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	061a      	lsls	r2, r3, #24
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3302      	adds	r3, #2
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	041b      	lsls	r3, r3, #16
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3301      	adds	r3, #1
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	021b      	lsls	r3, r3, #8
 8002864:	4313      	orrs	r3, r2
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	7812      	ldrb	r2, [r2, #0]
 800286a:	4313      	orrs	r3, r2
 800286c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <ETH_MACAddressConfig+0x68>)
 8002872:	4413      	add	r3, r2
 8002874:	461a      	mov	r2, r3
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	6013      	str	r3, [r2, #0]
}
 800287a:	bf00      	nop
 800287c:	371c      	adds	r7, #28
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	40028040 	.word	0x40028040
 8002888:	40028044 	.word	0x40028044

0800288c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0208 	orr.w	r2, r2, #8
 80028a6:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80028b0:	2001      	movs	r0, #1
 80028b2:	f000 f8e5 	bl	8002a80 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	601a      	str	r2, [r3, #0]
}
 80028be:	bf00      	nop
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b084      	sub	sp, #16
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0208 	bic.w	r2, r2, #8
 80028e0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80028ea:	2001      	movs	r0, #1
 80028ec:	f000 f8c8 	bl	8002a80 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	601a      	str	r2, [r3, #0]
}
 80028f8:	bf00      	nop
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002908:	2300      	movs	r3, #0
 800290a:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0204 	orr.w	r2, r2, #4
 800291a:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002924:	2001      	movs	r0, #1
 8002926:	f000 f8ab 	bl	8002a80 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	601a      	str	r2, [r3, #0]
}
 8002932:	bf00      	nop
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b084      	sub	sp, #16
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0204 	bic.w	r2, r2, #4
 8002954:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800295e:	2001      	movs	r0, #1
 8002960:	f000 f88e 	bl	8002a80 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	601a      	str	r2, [r3, #0]
}
 800296c:	bf00      	nop
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002984:	3318      	adds	r3, #24
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002994:	3318      	adds	r3, #24
 8002996:	601a      	str	r2, [r3, #0]
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr

080029a2 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029b2:	3318      	adds	r3, #24
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029c2:	3318      	adds	r3, #24
 80029c4:	601a      	str	r2, [r3, #0]
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr

080029d0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029e0:	3318      	adds	r3, #24
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f042 0202 	orr.w	r2, r2, #2
 80029ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029f0:	3318      	adds	r3, #24
 80029f2:	601a      	str	r2, [r3, #0]
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr

080029fe <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a0e:	3318      	adds	r3, #24
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0202 	bic.w	r2, r2, #2
 8002a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a1e:	3318      	adds	r3, #24
 8002a20:	601a      	str	r2, [r3, #0]
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a40:	3318      	adds	r3, #24
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a50:	3318      	adds	r3, #24
 8002a52:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a5c:	3318      	adds	r3, #24
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002a62:	2001      	movs	r0, #1
 8002a64:	f000 f80c 	bl	8002a80 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a72:	3318      	adds	r3, #24
 8002a74:	601a      	str	r2, [r3, #0]
}
 8002a76:	bf00      	nop
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a88:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <ETH_Delay+0x34>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <ETH_Delay+0x38>)
 8002a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a92:	0a5b      	lsrs	r3, r3, #9
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	fb02 f303 	mul.w	r3, r2, r3
 8002a9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a9c:	bf00      	nop
  }
  while (Delay --);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1e5a      	subs	r2, r3, #1
 8002aa2:	60fa      	str	r2, [r7, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1f9      	bne.n	8002a9c <ETH_Delay+0x1c>
}
 8002aa8:	bf00      	nop
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr
 8002ab4:	20000000 	.word	0x20000000
 8002ab8:	10624dd3 	.word	0x10624dd3

08002abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aca:	e16f      	b.n	8002dac <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad8:	4013      	ands	r3, r2
 8002ada:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 8161 	beq.w	8002da6 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d005      	beq.n	8002afc <HAL_GPIO_Init+0x40>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d130      	bne.n	8002b5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	2203      	movs	r2, #3
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4013      	ands	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b32:	2201      	movs	r2, #1
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	091b      	lsrs	r3, r3, #4
 8002b48:	f003 0201 	and.w	r2, r3, #1
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	d017      	beq.n	8002b9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	2203      	movs	r2, #3
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d123      	bne.n	8002bee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	08da      	lsrs	r2, r3, #3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3208      	adds	r2, #8
 8002bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	220f      	movs	r2, #15
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	691a      	ldr	r2, [r3, #16]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	08da      	lsrs	r2, r3, #3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3208      	adds	r2, #8
 8002be8:	6939      	ldr	r1, [r7, #16]
 8002bea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	2203      	movs	r2, #3
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	4013      	ands	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 0203 	and.w	r2, r3, #3
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 80bb 	beq.w	8002da6 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c30:	2300      	movs	r3, #0
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	4b64      	ldr	r3, [pc, #400]	; (8002dc8 <HAL_GPIO_Init+0x30c>)
 8002c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c38:	4a63      	ldr	r2, [pc, #396]	; (8002dc8 <HAL_GPIO_Init+0x30c>)
 8002c3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c3e:	6453      	str	r3, [r2, #68]	; 0x44
 8002c40:	4b61      	ldr	r3, [pc, #388]	; (8002dc8 <HAL_GPIO_Init+0x30c>)
 8002c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c4c:	4a5f      	ldr	r2, [pc, #380]	; (8002dcc <HAL_GPIO_Init+0x310>)
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	089b      	lsrs	r3, r3, #2
 8002c52:	3302      	adds	r3, #2
 8002c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f003 0303 	and.w	r3, r3, #3
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	220f      	movs	r2, #15
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a57      	ldr	r2, [pc, #348]	; (8002dd0 <HAL_GPIO_Init+0x314>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d031      	beq.n	8002cdc <HAL_GPIO_Init+0x220>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a56      	ldr	r2, [pc, #344]	; (8002dd4 <HAL_GPIO_Init+0x318>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d02b      	beq.n	8002cd8 <HAL_GPIO_Init+0x21c>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a55      	ldr	r2, [pc, #340]	; (8002dd8 <HAL_GPIO_Init+0x31c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d025      	beq.n	8002cd4 <HAL_GPIO_Init+0x218>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a54      	ldr	r2, [pc, #336]	; (8002ddc <HAL_GPIO_Init+0x320>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d01f      	beq.n	8002cd0 <HAL_GPIO_Init+0x214>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a53      	ldr	r2, [pc, #332]	; (8002de0 <HAL_GPIO_Init+0x324>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d019      	beq.n	8002ccc <HAL_GPIO_Init+0x210>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a52      	ldr	r2, [pc, #328]	; (8002de4 <HAL_GPIO_Init+0x328>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d013      	beq.n	8002cc8 <HAL_GPIO_Init+0x20c>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a51      	ldr	r2, [pc, #324]	; (8002de8 <HAL_GPIO_Init+0x32c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d00d      	beq.n	8002cc4 <HAL_GPIO_Init+0x208>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a50      	ldr	r2, [pc, #320]	; (8002dec <HAL_GPIO_Init+0x330>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d007      	beq.n	8002cc0 <HAL_GPIO_Init+0x204>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a4f      	ldr	r2, [pc, #316]	; (8002df0 <HAL_GPIO_Init+0x334>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d101      	bne.n	8002cbc <HAL_GPIO_Init+0x200>
 8002cb8:	2308      	movs	r3, #8
 8002cba:	e010      	b.n	8002cde <HAL_GPIO_Init+0x222>
 8002cbc:	2309      	movs	r3, #9
 8002cbe:	e00e      	b.n	8002cde <HAL_GPIO_Init+0x222>
 8002cc0:	2307      	movs	r3, #7
 8002cc2:	e00c      	b.n	8002cde <HAL_GPIO_Init+0x222>
 8002cc4:	2306      	movs	r3, #6
 8002cc6:	e00a      	b.n	8002cde <HAL_GPIO_Init+0x222>
 8002cc8:	2305      	movs	r3, #5
 8002cca:	e008      	b.n	8002cde <HAL_GPIO_Init+0x222>
 8002ccc:	2304      	movs	r3, #4
 8002cce:	e006      	b.n	8002cde <HAL_GPIO_Init+0x222>
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e004      	b.n	8002cde <HAL_GPIO_Init+0x222>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	e002      	b.n	8002cde <HAL_GPIO_Init+0x222>
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e000      	b.n	8002cde <HAL_GPIO_Init+0x222>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	f002 0203 	and.w	r2, r2, #3
 8002ce4:	0092      	lsls	r2, r2, #2
 8002ce6:	4093      	lsls	r3, r2
 8002ce8:	461a      	mov	r2, r3
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cf0:	4936      	ldr	r1, [pc, #216]	; (8002dcc <HAL_GPIO_Init+0x310>)
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	089b      	lsrs	r3, r3, #2
 8002cf6:	3302      	adds	r3, #2
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cfe:	4b3d      	ldr	r3, [pc, #244]	; (8002df4 <HAL_GPIO_Init+0x338>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	43db      	mvns	r3, r3
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d22:	4a34      	ldr	r2, [pc, #208]	; (8002df4 <HAL_GPIO_Init+0x338>)
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d28:	4b32      	ldr	r3, [pc, #200]	; (8002df4 <HAL_GPIO_Init+0x338>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	43db      	mvns	r3, r3
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4013      	ands	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d4c:	4a29      	ldr	r2, [pc, #164]	; (8002df4 <HAL_GPIO_Init+0x338>)
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d52:	4b28      	ldr	r3, [pc, #160]	; (8002df4 <HAL_GPIO_Init+0x338>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d76:	4a1f      	ldr	r2, [pc, #124]	; (8002df4 <HAL_GPIO_Init+0x338>)
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d7c:	4b1d      	ldr	r3, [pc, #116]	; (8002df4 <HAL_GPIO_Init+0x338>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	43db      	mvns	r3, r3
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002da0:	4a14      	ldr	r2, [pc, #80]	; (8002df4 <HAL_GPIO_Init+0x338>)
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	3301      	adds	r3, #1
 8002daa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	fa22 f303 	lsr.w	r3, r2, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f47f ae88 	bne.w	8002acc <HAL_GPIO_Init+0x10>
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	bf00      	nop
 8002dc0:	371c      	adds	r7, #28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40013800 	.word	0x40013800
 8002dd0:	40020000 	.word	0x40020000
 8002dd4:	40020400 	.word	0x40020400
 8002dd8:	40020800 	.word	0x40020800
 8002ddc:	40020c00 	.word	0x40020c00
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40021400 	.word	0x40021400
 8002de8:	40021800 	.word	0x40021800
 8002dec:	40021c00 	.word	0x40021c00
 8002df0:	40022000 	.word	0x40022000
 8002df4:	40013c00 	.word	0x40013c00

08002df8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	887b      	ldrh	r3, [r7, #2]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d002      	beq.n	8002e16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e10:	2301      	movs	r3, #1
 8002e12:	73fb      	strb	r3, [r7, #15]
 8002e14:	e001      	b.n	8002e1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e16:	2300      	movs	r3, #0
 8002e18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr

08002e26 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	807b      	strh	r3, [r7, #2]
 8002e32:	4613      	mov	r3, r2
 8002e34:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e36:	787b      	ldrb	r3, [r7, #1]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e3c:	887a      	ldrh	r2, [r7, #2]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e42:	e003      	b.n	8002e4c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e44:	887b      	ldrh	r3, [r7, #2]
 8002e46:	041a      	lsls	r2, r3, #16
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	619a      	str	r2, [r3, #24]
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr

08002e56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e58:	b08f      	sub	sp, #60	; 0x3c
 8002e5a:	af0a      	add	r7, sp, #40	; 0x28
 8002e5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e10f      	b.n	8003088 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7fd fe6e 	bl	8000b64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d102      	bne.n	8002ea2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f001 f9bf 	bl	800422a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	603b      	str	r3, [r7, #0]
 8002eb2:	687e      	ldr	r6, [r7, #4]
 8002eb4:	466d      	mov	r5, sp
 8002eb6:	f106 0410 	add.w	r4, r6, #16
 8002eba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ebc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ec0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ec2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ec6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002eca:	1d33      	adds	r3, r6, #4
 8002ecc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ece:	6838      	ldr	r0, [r7, #0]
 8002ed0:	f001 f954 	bl	800417c <USB_CoreInit>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d005      	beq.n	8002ee6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2202      	movs	r2, #2
 8002ede:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e0d0      	b.n	8003088 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2100      	movs	r1, #0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f001 f9ac 	bl	800424a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	73fb      	strb	r3, [r7, #15]
 8002ef6:	e04a      	b.n	8002f8e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ef8:	7bfa      	ldrb	r2, [r7, #15]
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	333d      	adds	r3, #61	; 0x3d
 8002f08:	2201      	movs	r2, #1
 8002f0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f0c:	7bfa      	ldrb	r2, [r7, #15]
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	4613      	mov	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	1a9b      	subs	r3, r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	333c      	adds	r3, #60	; 0x3c
 8002f1c:	7bfa      	ldrb	r2, [r7, #15]
 8002f1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f20:	7bfa      	ldrb	r2, [r7, #15]
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	b298      	uxth	r0, r3
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	1a9b      	subs	r3, r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	3342      	adds	r3, #66	; 0x42
 8002f34:	4602      	mov	r2, r0
 8002f36:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f38:	7bfa      	ldrb	r2, [r7, #15]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	333f      	adds	r3, #63	; 0x3f
 8002f48:	2200      	movs	r2, #0
 8002f4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f4c:	7bfa      	ldrb	r2, [r7, #15]
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	1a9b      	subs	r3, r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	3344      	adds	r3, #68	; 0x44
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f60:	7bfa      	ldrb	r2, [r7, #15]
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	3348      	adds	r3, #72	; 0x48
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f74:	7bfa      	ldrb	r2, [r7, #15]
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	1a9b      	subs	r3, r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	3350      	adds	r3, #80	; 0x50
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	73fb      	strb	r3, [r7, #15]
 8002f8e:	7bfa      	ldrb	r2, [r7, #15]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d3af      	bcc.n	8002ef8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f98:	2300      	movs	r3, #0
 8002f9a:	73fb      	strb	r3, [r7, #15]
 8002f9c:	e044      	b.n	8003028 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f9e:	7bfa      	ldrb	r2, [r7, #15]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fb4:	7bfa      	ldrb	r2, [r7, #15]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002fc6:	7bfa      	ldrb	r2, [r7, #15]
 8002fc8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002fca:	7bfa      	ldrb	r2, [r7, #15]
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002fdc:	2200      	movs	r2, #0
 8002fde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fe0:	7bfa      	ldrb	r2, [r7, #15]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ff6:	7bfa      	ldrb	r2, [r7, #15]
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	1a9b      	subs	r3, r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	440b      	add	r3, r1
 8003004:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800300c:	7bfa      	ldrb	r2, [r7, #15]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	3301      	adds	r3, #1
 8003026:	73fb      	strb	r3, [r7, #15]
 8003028:	7bfa      	ldrb	r2, [r7, #15]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	429a      	cmp	r2, r3
 8003030:	d3b5      	bcc.n	8002f9e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	603b      	str	r3, [r7, #0]
 8003038:	687e      	ldr	r6, [r7, #4]
 800303a:	466d      	mov	r5, sp
 800303c:	f106 0410 	add.w	r4, r6, #16
 8003040:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003042:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003044:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003046:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003048:	e894 0003 	ldmia.w	r4, {r0, r1}
 800304c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003050:	1d33      	adds	r3, r6, #4
 8003052:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003054:	6838      	ldr	r0, [r7, #0]
 8003056:	f001 f945 	bl	80042e4 <USB_DevInit>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d005      	beq.n	800306c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e00d      	b.n	8003088 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f001 faef 	bl	8004664 <USB_DevDisconnect>

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003090 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08a      	sub	sp, #40	; 0x28
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e237      	b.n	8003512 <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d050      	beq.n	8003150 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ae:	4ba3      	ldr	r3, [pc, #652]	; (800333c <HAL_RCC_OscConfig+0x2ac>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 030c 	and.w	r3, r3, #12
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d00c      	beq.n	80030d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ba:	4ba0      	ldr	r3, [pc, #640]	; (800333c <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030c2:	2b08      	cmp	r3, #8
 80030c4:	d112      	bne.n	80030ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030c6:	4b9d      	ldr	r3, [pc, #628]	; (800333c <HAL_RCC_OscConfig+0x2ac>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030d2:	d10b      	bne.n	80030ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d4:	4b99      	ldr	r3, [pc, #612]	; (800333c <HAL_RCC_OscConfig+0x2ac>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d036      	beq.n	800314e <HAL_RCC_OscConfig+0xbe>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d132      	bne.n	800314e <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e212      	b.n	8003512 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	4b93      	ldr	r3, [pc, #588]	; (8003340 <HAL_RCC_OscConfig+0x2b0>)
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d013      	beq.n	8003126 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fe:	f7fe fa47 	bl	8001590 <HAL_GetTick>
 8003102:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003106:	f7fe fa43 	bl	8001590 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b64      	cmp	r3, #100	; 0x64
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e1fc      	b.n	8003512 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003118:	4b88      	ldr	r3, [pc, #544]	; (800333c <HAL_RCC_OscConfig+0x2ac>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0f0      	beq.n	8003106 <HAL_RCC_OscConfig+0x76>
 8003124:	e014      	b.n	8003150 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003126:	f7fe fa33 	bl	8001590 <HAL_GetTick>
 800312a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800312e:	f7fe fa2f 	bl	8001590 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b64      	cmp	r3, #100	; 0x64
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e1e8      	b.n	8003512 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003140:	4b7e      	ldr	r3, [pc, #504]	; (800333c <HAL_RCC_OscConfig+0x2ac>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1f0      	bne.n	800312e <HAL_RCC_OscConfig+0x9e>
 800314c:	e000      	b.n	8003150 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800314e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d077      	beq.n	800324c <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800315c:	4b77      	ldr	r3, [pc, #476]	; (800333c <HAL_RCC_OscConfig+0x2ac>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 030c 	and.w	r3, r3, #12
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00b      	beq.n	8003180 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003168:	4b74      	ldr	r3, [pc, #464]	; (800333c <HAL_RCC_OscConfig+0x2ac>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003170:	2b08      	cmp	r3, #8
 8003172:	d126      	bne.n	80031c2 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003174:	4b71      	ldr	r3, [pc, #452]	; (800333c <HAL_RCC_OscConfig+0x2ac>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d120      	bne.n	80031c2 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003180:	4b6e      	ldr	r3, [pc, #440]	; (800333c <HAL_RCC_OscConfig+0x2ac>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d005      	beq.n	8003198 <HAL_RCC_OscConfig+0x108>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d001      	beq.n	8003198 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e1bc      	b.n	8003512 <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003198:	4b68      	ldr	r3, [pc, #416]	; (800333c <HAL_RCC_OscConfig+0x2ac>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	21f8      	movs	r1, #248	; 0xf8
 80031a6:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	69b9      	ldr	r1, [r7, #24]
 80031aa:	fa91 f1a1 	rbit	r1, r1
 80031ae:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031b0:	6979      	ldr	r1, [r7, #20]
 80031b2:	fab1 f181 	clz	r1, r1
 80031b6:	b2c9      	uxtb	r1, r1
 80031b8:	408b      	lsls	r3, r1
 80031ba:	4960      	ldr	r1, [pc, #384]	; (800333c <HAL_RCC_OscConfig+0x2ac>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c0:	e044      	b.n	800324c <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d02a      	beq.n	8003220 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031ca:	4b5e      	ldr	r3, [pc, #376]	; (8003344 <HAL_RCC_OscConfig+0x2b4>)
 80031cc:	2201      	movs	r2, #1
 80031ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d0:	f7fe f9de 	bl	8001590 <HAL_GetTick>
 80031d4:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031d8:	f7fe f9da 	bl	8001590 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e193      	b.n	8003512 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ea:	4b54      	ldr	r3, [pc, #336]	; (800333c <HAL_RCC_OscConfig+0x2ac>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0f0      	beq.n	80031d8 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f6:	4b51      	ldr	r3, [pc, #324]	; (800333c <HAL_RCC_OscConfig+0x2ac>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	21f8      	movs	r1, #248	; 0xf8
 8003204:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003206:	6939      	ldr	r1, [r7, #16]
 8003208:	fa91 f1a1 	rbit	r1, r1
 800320c:	60f9      	str	r1, [r7, #12]
  return result;
 800320e:	68f9      	ldr	r1, [r7, #12]
 8003210:	fab1 f181 	clz	r1, r1
 8003214:	b2c9      	uxtb	r1, r1
 8003216:	408b      	lsls	r3, r1
 8003218:	4948      	ldr	r1, [pc, #288]	; (800333c <HAL_RCC_OscConfig+0x2ac>)
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]
 800321e:	e015      	b.n	800324c <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003220:	4b48      	ldr	r3, [pc, #288]	; (8003344 <HAL_RCC_OscConfig+0x2b4>)
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003226:	f7fe f9b3 	bl	8001590 <HAL_GetTick>
 800322a:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800322e:	f7fe f9af 	bl	8001590 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e168      	b.n	8003512 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003240:	4b3e      	ldr	r3, [pc, #248]	; (800333c <HAL_RCC_OscConfig+0x2ac>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1f0      	bne.n	800322e <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b00      	cmp	r3, #0
 8003256:	d030      	beq.n	80032ba <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d016      	beq.n	800328e <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003260:	4b39      	ldr	r3, [pc, #228]	; (8003348 <HAL_RCC_OscConfig+0x2b8>)
 8003262:	2201      	movs	r2, #1
 8003264:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003266:	f7fe f993 	bl	8001590 <HAL_GetTick>
 800326a:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800326e:	f7fe f98f 	bl	8001590 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e148      	b.n	8003512 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003280:	4b2e      	ldr	r3, [pc, #184]	; (800333c <HAL_RCC_OscConfig+0x2ac>)
 8003282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0f0      	beq.n	800326e <HAL_RCC_OscConfig+0x1de>
 800328c:	e015      	b.n	80032ba <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800328e:	4b2e      	ldr	r3, [pc, #184]	; (8003348 <HAL_RCC_OscConfig+0x2b8>)
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003294:	f7fe f97c 	bl	8001590 <HAL_GetTick>
 8003298:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800329c:	f7fe f978 	bl	8001590 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e131      	b.n	8003512 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ae:	4b23      	ldr	r3, [pc, #140]	; (800333c <HAL_RCC_OscConfig+0x2ac>)
 80032b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0304 	and.w	r3, r3, #4
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 8088 	beq.w	80033d8 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032c8:	2300      	movs	r3, #0
 80032ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ce:	4b1b      	ldr	r3, [pc, #108]	; (800333c <HAL_RCC_OscConfig+0x2ac>)
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d110      	bne.n	80032fc <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032da:	2300      	movs	r3, #0
 80032dc:	60bb      	str	r3, [r7, #8]
 80032de:	4b17      	ldr	r3, [pc, #92]	; (800333c <HAL_RCC_OscConfig+0x2ac>)
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	4a16      	ldr	r2, [pc, #88]	; (800333c <HAL_RCC_OscConfig+0x2ac>)
 80032e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e8:	6413      	str	r3, [r2, #64]	; 0x40
 80032ea:	4b14      	ldr	r3, [pc, #80]	; (800333c <HAL_RCC_OscConfig+0x2ac>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f2:	60bb      	str	r3, [r7, #8]
 80032f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032f6:	2301      	movs	r3, #1
 80032f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80032fc:	4b13      	ldr	r3, [pc, #76]	; (800334c <HAL_RCC_OscConfig+0x2bc>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a12      	ldr	r2, [pc, #72]	; (800334c <HAL_RCC_OscConfig+0x2bc>)
 8003302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003306:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003308:	4b10      	ldr	r3, [pc, #64]	; (800334c <HAL_RCC_OscConfig+0x2bc>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003310:	2b00      	cmp	r3, #0
 8003312:	d123      	bne.n	800335c <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003314:	4b0d      	ldr	r3, [pc, #52]	; (800334c <HAL_RCC_OscConfig+0x2bc>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a0c      	ldr	r2, [pc, #48]	; (800334c <HAL_RCC_OscConfig+0x2bc>)
 800331a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800331e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003320:	f7fe f936 	bl	8001590 <HAL_GetTick>
 8003324:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003326:	e013      	b.n	8003350 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003328:	f7fe f932 	bl	8001590 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d90c      	bls.n	8003350 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e0eb      	b.n	8003512 <HAL_RCC_OscConfig+0x482>
 800333a:	bf00      	nop
 800333c:	40023800 	.word	0x40023800
 8003340:	40023802 	.word	0x40023802
 8003344:	42470000 	.word	0x42470000
 8003348:	42470e80 	.word	0x42470e80
 800334c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003350:	4b72      	ldr	r3, [pc, #456]	; (800351c <HAL_RCC_OscConfig+0x48c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0e5      	beq.n	8003328 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	4b6f      	ldr	r3, [pc, #444]	; (8003520 <HAL_RCC_OscConfig+0x490>)
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d015      	beq.n	800339a <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800336e:	f7fe f90f 	bl	8001590 <HAL_GetTick>
 8003372:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003374:	e00a      	b.n	800338c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003376:	f7fe f90b 	bl	8001590 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f241 3288 	movw	r2, #5000	; 0x1388
 8003384:	4293      	cmp	r3, r2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e0c2      	b.n	8003512 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338c:	4b65      	ldr	r3, [pc, #404]	; (8003524 <HAL_RCC_OscConfig+0x494>)
 800338e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0ee      	beq.n	8003376 <HAL_RCC_OscConfig+0x2e6>
 8003398:	e014      	b.n	80033c4 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800339a:	f7fe f8f9 	bl	8001590 <HAL_GetTick>
 800339e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033a0:	e00a      	b.n	80033b8 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033a2:	f7fe f8f5 	bl	8001590 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e0ac      	b.n	8003512 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b8:	4b5a      	ldr	r3, [pc, #360]	; (8003524 <HAL_RCC_OscConfig+0x494>)
 80033ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1ee      	bne.n	80033a2 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d105      	bne.n	80033d8 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033cc:	4b55      	ldr	r3, [pc, #340]	; (8003524 <HAL_RCC_OscConfig+0x494>)
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	4a54      	ldr	r2, [pc, #336]	; (8003524 <HAL_RCC_OscConfig+0x494>)
 80033d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 8097 	beq.w	8003510 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033e2:	4b50      	ldr	r3, [pc, #320]	; (8003524 <HAL_RCC_OscConfig+0x494>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 030c 	and.w	r3, r3, #12
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d061      	beq.n	80034b2 <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d146      	bne.n	8003484 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f6:	4b4c      	ldr	r3, [pc, #304]	; (8003528 <HAL_RCC_OscConfig+0x498>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fc:	f7fe f8c8 	bl	8001590 <HAL_GetTick>
 8003400:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003404:	f7fe f8c4 	bl	8001590 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b64      	cmp	r3, #100	; 0x64
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e07d      	b.n	8003512 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003416:	4b43      	ldr	r3, [pc, #268]	; (8003524 <HAL_RCC_OscConfig+0x494>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f0      	bne.n	8003404 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003422:	4b40      	ldr	r3, [pc, #256]	; (8003524 <HAL_RCC_OscConfig+0x494>)
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	4b41      	ldr	r3, [pc, #260]	; (800352c <HAL_RCC_OscConfig+0x49c>)
 8003428:	4013      	ands	r3, r2
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	69d1      	ldr	r1, [r2, #28]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6a12      	ldr	r2, [r2, #32]
 8003432:	4311      	orrs	r1, r2
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003438:	0192      	lsls	r2, r2, #6
 800343a:	4311      	orrs	r1, r2
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003440:	0612      	lsls	r2, r2, #24
 8003442:	4311      	orrs	r1, r2
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003448:	0852      	lsrs	r2, r2, #1
 800344a:	3a01      	subs	r2, #1
 800344c:	0412      	lsls	r2, r2, #16
 800344e:	430a      	orrs	r2, r1
 8003450:	4934      	ldr	r1, [pc, #208]	; (8003524 <HAL_RCC_OscConfig+0x494>)
 8003452:	4313      	orrs	r3, r2
 8003454:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003456:	4b34      	ldr	r3, [pc, #208]	; (8003528 <HAL_RCC_OscConfig+0x498>)
 8003458:	2201      	movs	r2, #1
 800345a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345c:	f7fe f898 	bl	8001590 <HAL_GetTick>
 8003460:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003464:	f7fe f894 	bl	8001590 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b64      	cmp	r3, #100	; 0x64
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e04d      	b.n	8003512 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003476:	4b2b      	ldr	r3, [pc, #172]	; (8003524 <HAL_RCC_OscConfig+0x494>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0f0      	beq.n	8003464 <HAL_RCC_OscConfig+0x3d4>
 8003482:	e045      	b.n	8003510 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003484:	4b28      	ldr	r3, [pc, #160]	; (8003528 <HAL_RCC_OscConfig+0x498>)
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348a:	f7fe f881 	bl	8001590 <HAL_GetTick>
 800348e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003490:	e008      	b.n	80034a4 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003492:	f7fe f87d 	bl	8001590 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b64      	cmp	r3, #100	; 0x64
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e036      	b.n	8003512 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a4:	4b1f      	ldr	r3, [pc, #124]	; (8003524 <HAL_RCC_OscConfig+0x494>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1f0      	bne.n	8003492 <HAL_RCC_OscConfig+0x402>
 80034b0:	e02e      	b.n	8003510 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e029      	b.n	8003512 <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80034be:	4b19      	ldr	r3, [pc, #100]	; (8003524 <HAL_RCC_OscConfig+0x494>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d11c      	bne.n	800350c <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034dc:	429a      	cmp	r2, r3
 80034de:	d115      	bne.n	800350c <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	099b      	lsrs	r3, r3, #6
 80034e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d10d      	bne.n	800350c <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d106      	bne.n	800350c <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003508:	429a      	cmp	r2, r3
 800350a:	d001      	beq.n	8003510 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3728      	adds	r7, #40	; 0x28
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40007000 	.word	0x40007000
 8003520:	40023870 	.word	0x40023870
 8003524:	40023800 	.word	0x40023800
 8003528:	42470060 	.word	0x42470060
 800352c:	f0bc8000 	.word	0xf0bc8000

08003530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0d2      	b.n	80036ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003544:	4b6b      	ldr	r3, [pc, #428]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 030f 	and.w	r3, r3, #15
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d90c      	bls.n	800356c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003552:	4b68      	ldr	r3, [pc, #416]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800355a:	4b66      	ldr	r3, [pc, #408]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	429a      	cmp	r2, r3
 8003566:	d001      	beq.n	800356c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e0be      	b.n	80036ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d020      	beq.n	80035ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003584:	4b5c      	ldr	r3, [pc, #368]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	4a5b      	ldr	r2, [pc, #364]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 800358a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800358e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b00      	cmp	r3, #0
 800359a:	d005      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 800359c:	4b56      	ldr	r3, [pc, #344]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	4a55      	ldr	r2, [pc, #340]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 80035a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a8:	4b53      	ldr	r3, [pc, #332]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	4950      	ldr	r1, [pc, #320]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d040      	beq.n	8003648 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d107      	bne.n	80035de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ce:	4b4a      	ldr	r3, [pc, #296]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d115      	bne.n	8003606 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e085      	b.n	80036ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d107      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e6:	4b44      	ldr	r3, [pc, #272]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d109      	bne.n	8003606 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e079      	b.n	80036ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f6:	4b40      	ldr	r3, [pc, #256]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e071      	b.n	80036ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003606:	4b3c      	ldr	r3, [pc, #240]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f023 0203 	bic.w	r2, r3, #3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	4939      	ldr	r1, [pc, #228]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003614:	4313      	orrs	r3, r2
 8003616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003618:	f7fd ffba 	bl	8001590 <HAL_GetTick>
 800361c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361e:	e00a      	b.n	8003636 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003620:	f7fd ffb6 	bl	8001590 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	f241 3288 	movw	r2, #5000	; 0x1388
 800362e:	4293      	cmp	r3, r2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e059      	b.n	80036ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003636:	4b30      	ldr	r3, [pc, #192]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 020c 	and.w	r2, r3, #12
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	429a      	cmp	r2, r3
 8003646:	d1eb      	bne.n	8003620 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003648:	4b2a      	ldr	r3, [pc, #168]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 030f 	and.w	r3, r3, #15
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d20c      	bcs.n	8003670 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003656:	4b27      	ldr	r3, [pc, #156]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800365e:	4b25      	ldr	r3, [pc, #148]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d001      	beq.n	8003670 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e03c      	b.n	80036ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	d008      	beq.n	800368e <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800367c:	4b1e      	ldr	r3, [pc, #120]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	491b      	ldr	r1, [pc, #108]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 800368a:	4313      	orrs	r3, r2
 800368c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b00      	cmp	r3, #0
 8003698:	d009      	beq.n	80036ae <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800369a:	4b17      	ldr	r3, [pc, #92]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	4913      	ldr	r1, [pc, #76]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80036ae:	f000 f82b 	bl	8003708 <HAL_RCC_GetSysClockFreq>
 80036b2:	4601      	mov	r1, r0
 80036b4:	4b10      	ldr	r3, [pc, #64]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036bc:	22f0      	movs	r2, #240	; 0xf0
 80036be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	fa92 f2a2 	rbit	r2, r2
 80036c6:	60fa      	str	r2, [r7, #12]
  return result;
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	fab2 f282 	clz	r2, r2
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	40d3      	lsrs	r3, r2
 80036d2:	4a0a      	ldr	r2, [pc, #40]	; (80036fc <HAL_RCC_ClockConfig+0x1cc>)
 80036d4:	5cd3      	ldrb	r3, [r2, r3]
 80036d6:	fa21 f303 	lsr.w	r3, r1, r3
 80036da:	4a09      	ldr	r2, [pc, #36]	; (8003700 <HAL_RCC_ClockConfig+0x1d0>)
 80036dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036de:	4b09      	ldr	r3, [pc, #36]	; (8003704 <HAL_RCC_ClockConfig+0x1d4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fd fa98 	bl	8000c18 <HAL_InitTick>

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40023c00 	.word	0x40023c00
 80036f8:	40023800 	.word	0x40023800
 80036fc:	08014a84 	.word	0x08014a84
 8003700:	20000000 	.word	0x20000000
 8003704:	20000004 	.word	0x20000004

08003708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003708:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800370c:	b084      	sub	sp, #16
 800370e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	607b      	str	r3, [r7, #4]
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	2300      	movs	r3, #0
 800371a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003720:	4b67      	ldr	r3, [pc, #412]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 030c 	and.w	r3, r3, #12
 8003728:	2b08      	cmp	r3, #8
 800372a:	d00d      	beq.n	8003748 <HAL_RCC_GetSysClockFreq+0x40>
 800372c:	2b08      	cmp	r3, #8
 800372e:	f200 80bd 	bhi.w	80038ac <HAL_RCC_GetSysClockFreq+0x1a4>
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <HAL_RCC_GetSysClockFreq+0x34>
 8003736:	2b04      	cmp	r3, #4
 8003738:	d003      	beq.n	8003742 <HAL_RCC_GetSysClockFreq+0x3a>
 800373a:	e0b7      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800373c:	4b61      	ldr	r3, [pc, #388]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800373e:	60bb      	str	r3, [r7, #8]
       break;
 8003740:	e0b7      	b.n	80038b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003742:	4b61      	ldr	r3, [pc, #388]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003744:	60bb      	str	r3, [r7, #8]
      break;
 8003746:	e0b4      	b.n	80038b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003748:	4b5d      	ldr	r3, [pc, #372]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003750:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003752:	4b5b      	ldr	r3, [pc, #364]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d04d      	beq.n	80037fa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800375e:	4b58      	ldr	r3, [pc, #352]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	099b      	lsrs	r3, r3, #6
 8003764:	461a      	mov	r2, r3
 8003766:	f04f 0300 	mov.w	r3, #0
 800376a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800376e:	f04f 0100 	mov.w	r1, #0
 8003772:	ea02 0800 	and.w	r8, r2, r0
 8003776:	ea03 0901 	and.w	r9, r3, r1
 800377a:	4640      	mov	r0, r8
 800377c:	4649      	mov	r1, r9
 800377e:	f04f 0200 	mov.w	r2, #0
 8003782:	f04f 0300 	mov.w	r3, #0
 8003786:	014b      	lsls	r3, r1, #5
 8003788:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800378c:	0142      	lsls	r2, r0, #5
 800378e:	4610      	mov	r0, r2
 8003790:	4619      	mov	r1, r3
 8003792:	ebb0 0008 	subs.w	r0, r0, r8
 8003796:	eb61 0109 	sbc.w	r1, r1, r9
 800379a:	f04f 0200 	mov.w	r2, #0
 800379e:	f04f 0300 	mov.w	r3, #0
 80037a2:	018b      	lsls	r3, r1, #6
 80037a4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80037a8:	0182      	lsls	r2, r0, #6
 80037aa:	1a12      	subs	r2, r2, r0
 80037ac:	eb63 0301 	sbc.w	r3, r3, r1
 80037b0:	f04f 0000 	mov.w	r0, #0
 80037b4:	f04f 0100 	mov.w	r1, #0
 80037b8:	00d9      	lsls	r1, r3, #3
 80037ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037be:	00d0      	lsls	r0, r2, #3
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	eb12 0208 	adds.w	r2, r2, r8
 80037c8:	eb43 0309 	adc.w	r3, r3, r9
 80037cc:	f04f 0000 	mov.w	r0, #0
 80037d0:	f04f 0100 	mov.w	r1, #0
 80037d4:	0259      	lsls	r1, r3, #9
 80037d6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80037da:	0250      	lsls	r0, r2, #9
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	4610      	mov	r0, r2
 80037e2:	4619      	mov	r1, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	461a      	mov	r2, r3
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	f7fc fcf0 	bl	80001d0 <__aeabi_uldivmod>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4613      	mov	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	e04a      	b.n	8003890 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037fa:	4b31      	ldr	r3, [pc, #196]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	099b      	lsrs	r3, r3, #6
 8003800:	461a      	mov	r2, r3
 8003802:	f04f 0300 	mov.w	r3, #0
 8003806:	f240 10ff 	movw	r0, #511	; 0x1ff
 800380a:	f04f 0100 	mov.w	r1, #0
 800380e:	ea02 0400 	and.w	r4, r2, r0
 8003812:	ea03 0501 	and.w	r5, r3, r1
 8003816:	4620      	mov	r0, r4
 8003818:	4629      	mov	r1, r5
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	014b      	lsls	r3, r1, #5
 8003824:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003828:	0142      	lsls	r2, r0, #5
 800382a:	4610      	mov	r0, r2
 800382c:	4619      	mov	r1, r3
 800382e:	1b00      	subs	r0, r0, r4
 8003830:	eb61 0105 	sbc.w	r1, r1, r5
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	f04f 0300 	mov.w	r3, #0
 800383c:	018b      	lsls	r3, r1, #6
 800383e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003842:	0182      	lsls	r2, r0, #6
 8003844:	1a12      	subs	r2, r2, r0
 8003846:	eb63 0301 	sbc.w	r3, r3, r1
 800384a:	f04f 0000 	mov.w	r0, #0
 800384e:	f04f 0100 	mov.w	r1, #0
 8003852:	00d9      	lsls	r1, r3, #3
 8003854:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003858:	00d0      	lsls	r0, r2, #3
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	1912      	adds	r2, r2, r4
 8003860:	eb45 0303 	adc.w	r3, r5, r3
 8003864:	f04f 0000 	mov.w	r0, #0
 8003868:	f04f 0100 	mov.w	r1, #0
 800386c:	0299      	lsls	r1, r3, #10
 800386e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003872:	0290      	lsls	r0, r2, #10
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	4610      	mov	r0, r2
 800387a:	4619      	mov	r1, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	461a      	mov	r2, r3
 8003880:	f04f 0300 	mov.w	r3, #0
 8003884:	f7fc fca4 	bl	80001d0 <__aeabi_uldivmod>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4613      	mov	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003890:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	0c1b      	lsrs	r3, r3, #16
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	3301      	adds	r3, #1
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a8:	60bb      	str	r3, [r7, #8]
      break;
 80038aa:	e002      	b.n	80038b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038ac:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80038ae:	60bb      	str	r3, [r7, #8]
      break;
 80038b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038b2:	68bb      	ldr	r3, [r7, #8]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80038be:	bf00      	nop
 80038c0:	40023800 	.word	0x40023800
 80038c4:	00f42400 	.word	0x00f42400
 80038c8:	007a1200 	.word	0x007a1200

080038cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038d0:	4b02      	ldr	r3, [pc, #8]	; (80038dc <HAL_RCC_GetHCLKFreq+0x10>)
 80038d2:	681b      	ldr	r3, [r3, #0]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr
 80038dc:	20000000 	.word	0x20000000

080038e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80038e6:	f7ff fff1 	bl	80038cc <HAL_RCC_GetHCLKFreq>
 80038ea:	4601      	mov	r1, r0
 80038ec:	4b0b      	ldr	r3, [pc, #44]	; (800391c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80038f4:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80038f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	fa92 f2a2 	rbit	r2, r2
 8003900:	603a      	str	r2, [r7, #0]
  return result;
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	fab2 f282 	clz	r2, r2
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	40d3      	lsrs	r3, r2
 800390c:	4a04      	ldr	r2, [pc, #16]	; (8003920 <HAL_RCC_GetPCLK1Freq+0x40>)
 800390e:	5cd3      	ldrb	r3, [r2, r3]
 8003910:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40023800 	.word	0x40023800
 8003920:	08014a94 	.word	0x08014a94

08003924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800392a:	f7ff ffcf 	bl	80038cc <HAL_RCC_GetHCLKFreq>
 800392e:	4601      	mov	r1, r0
 8003930:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003938:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800393c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	fa92 f2a2 	rbit	r2, r2
 8003944:	603a      	str	r2, [r7, #0]
  return result;
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	fab2 f282 	clz	r2, r2
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	40d3      	lsrs	r3, r2
 8003950:	4a04      	ldr	r2, [pc, #16]	; (8003964 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003952:	5cd3      	ldrb	r3, [r2, r3]
 8003954:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003958:	4618      	mov	r0, r3
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40023800 	.word	0x40023800
 8003964:	08014a94 	.word	0x08014a94

08003968 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	220f      	movs	r2, #15
 8003976:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003978:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <HAL_RCC_GetClockConfig+0x58>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 0203 	and.w	r2, r3, #3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003984:	4b0e      	ldr	r3, [pc, #56]	; (80039c0 <HAL_RCC_GetClockConfig+0x58>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003990:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <HAL_RCC_GetClockConfig+0x58>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800399c:	4b08      	ldr	r3, [pc, #32]	; (80039c0 <HAL_RCC_GetClockConfig+0x58>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	08db      	lsrs	r3, r3, #3
 80039a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039aa:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <HAL_RCC_GetClockConfig+0x5c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 020f 	and.w	r2, r3, #15
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	601a      	str	r2, [r3, #0]
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr
 80039c0:	40023800 	.word	0x40023800
 80039c4:	40023c00 	.word	0x40023c00

080039c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e041      	b.n	8003a5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d106      	bne.n	80039f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f839 	bl	8003a66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3304      	adds	r3, #4
 8003a04:	4619      	mov	r1, r3
 8003a06:	4610      	mov	r0, r2
 8003a08:	f000 f9d0 	bl	8003dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr

08003a78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d001      	beq.n	8003a90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e04e      	b.n	8003b2e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0201 	orr.w	r2, r2, #1
 8003aa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a22      	ldr	r2, [pc, #136]	; (8003b38 <HAL_TIM_Base_Start_IT+0xc0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d022      	beq.n	8003af8 <HAL_TIM_Base_Start_IT+0x80>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aba:	d01d      	beq.n	8003af8 <HAL_TIM_Base_Start_IT+0x80>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a1e      	ldr	r2, [pc, #120]	; (8003b3c <HAL_TIM_Base_Start_IT+0xc4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d018      	beq.n	8003af8 <HAL_TIM_Base_Start_IT+0x80>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a1d      	ldr	r2, [pc, #116]	; (8003b40 <HAL_TIM_Base_Start_IT+0xc8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d013      	beq.n	8003af8 <HAL_TIM_Base_Start_IT+0x80>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a1b      	ldr	r2, [pc, #108]	; (8003b44 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00e      	beq.n	8003af8 <HAL_TIM_Base_Start_IT+0x80>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a1a      	ldr	r2, [pc, #104]	; (8003b48 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d009      	beq.n	8003af8 <HAL_TIM_Base_Start_IT+0x80>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a18      	ldr	r2, [pc, #96]	; (8003b4c <HAL_TIM_Base_Start_IT+0xd4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d004      	beq.n	8003af8 <HAL_TIM_Base_Start_IT+0x80>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a17      	ldr	r2, [pc, #92]	; (8003b50 <HAL_TIM_Base_Start_IT+0xd8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d111      	bne.n	8003b1c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b06      	cmp	r3, #6
 8003b08:	d010      	beq.n	8003b2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0201 	orr.w	r2, r2, #1
 8003b18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b1a:	e007      	b.n	8003b2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bc80      	pop	{r7}
 8003b36:	4770      	bx	lr
 8003b38:	40010000 	.word	0x40010000
 8003b3c:	40000400 	.word	0x40000400
 8003b40:	40000800 	.word	0x40000800
 8003b44:	40000c00 	.word	0x40000c00
 8003b48:	40010400 	.word	0x40010400
 8003b4c:	40014000 	.word	0x40014000
 8003b50:	40001800 	.word	0x40001800

08003b54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d122      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d11b      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0202 	mvn.w	r2, #2
 8003b80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f8ed 	bl	8003d76 <HAL_TIM_IC_CaptureCallback>
 8003b9c:	e005      	b.n	8003baa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f8e0 	bl	8003d64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f8ef 	bl	8003d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f003 0304 	and.w	r3, r3, #4
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d122      	bne.n	8003c04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d11b      	bne.n	8003c04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f06f 0204 	mvn.w	r2, #4
 8003bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2202      	movs	r2, #2
 8003bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f8c3 	bl	8003d76 <HAL_TIM_IC_CaptureCallback>
 8003bf0:	e005      	b.n	8003bfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f8b6 	bl	8003d64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f8c5 	bl	8003d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d122      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d11b      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 0208 	mvn.w	r2, #8
 8003c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2204      	movs	r2, #4
 8003c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f899 	bl	8003d76 <HAL_TIM_IC_CaptureCallback>
 8003c44:	e005      	b.n	8003c52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f88c 	bl	8003d64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 f89b 	bl	8003d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f003 0310 	and.w	r3, r3, #16
 8003c62:	2b10      	cmp	r3, #16
 8003c64:	d122      	bne.n	8003cac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0310 	and.w	r3, r3, #16
 8003c70:	2b10      	cmp	r3, #16
 8003c72:	d11b      	bne.n	8003cac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0210 	mvn.w	r2, #16
 8003c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2208      	movs	r2, #8
 8003c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f86f 	bl	8003d76 <HAL_TIM_IC_CaptureCallback>
 8003c98:	e005      	b.n	8003ca6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f862 	bl	8003d64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 f871 	bl	8003d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d10e      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d107      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f06f 0201 	mvn.w	r2, #1
 8003cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7fc fe60 	bl	8000998 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce2:	2b80      	cmp	r3, #128	; 0x80
 8003ce4:	d10e      	bne.n	8003d04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf0:	2b80      	cmp	r3, #128	; 0x80
 8003cf2:	d107      	bne.n	8003d04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f8fb 	bl	8003efa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0e:	2b40      	cmp	r3, #64	; 0x40
 8003d10:	d10e      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1c:	2b40      	cmp	r3, #64	; 0x40
 8003d1e:	d107      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f835 	bl	8003d9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	2b20      	cmp	r3, #32
 8003d3c:	d10e      	bne.n	8003d5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f003 0320 	and.w	r3, r3, #32
 8003d48:	2b20      	cmp	r3, #32
 8003d4a:	d107      	bne.n	8003d5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f06f 0220 	mvn.w	r2, #32
 8003d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f8c6 	bl	8003ee8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d5c:	bf00      	nop
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bc80      	pop	{r7}
 8003d74:	4770      	bx	lr

08003d76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d7e:	bf00      	nop
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr

08003d88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bc80      	pop	{r7}
 8003d98:	4770      	bx	lr

08003d9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr

08003dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a3f      	ldr	r2, [pc, #252]	; (8003ebc <TIM_Base_SetConfig+0x110>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d013      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dca:	d00f      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a3c      	ldr	r2, [pc, #240]	; (8003ec0 <TIM_Base_SetConfig+0x114>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d00b      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a3b      	ldr	r2, [pc, #236]	; (8003ec4 <TIM_Base_SetConfig+0x118>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d007      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a3a      	ldr	r2, [pc, #232]	; (8003ec8 <TIM_Base_SetConfig+0x11c>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d003      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a39      	ldr	r2, [pc, #228]	; (8003ecc <TIM_Base_SetConfig+0x120>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d108      	bne.n	8003dfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a2e      	ldr	r2, [pc, #184]	; (8003ebc <TIM_Base_SetConfig+0x110>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d02b      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e0c:	d027      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a2b      	ldr	r2, [pc, #172]	; (8003ec0 <TIM_Base_SetConfig+0x114>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d023      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a2a      	ldr	r2, [pc, #168]	; (8003ec4 <TIM_Base_SetConfig+0x118>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d01f      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a29      	ldr	r2, [pc, #164]	; (8003ec8 <TIM_Base_SetConfig+0x11c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d01b      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a28      	ldr	r2, [pc, #160]	; (8003ecc <TIM_Base_SetConfig+0x120>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d017      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a27      	ldr	r2, [pc, #156]	; (8003ed0 <TIM_Base_SetConfig+0x124>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d013      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a26      	ldr	r2, [pc, #152]	; (8003ed4 <TIM_Base_SetConfig+0x128>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d00f      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a25      	ldr	r2, [pc, #148]	; (8003ed8 <TIM_Base_SetConfig+0x12c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d00b      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a24      	ldr	r2, [pc, #144]	; (8003edc <TIM_Base_SetConfig+0x130>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d007      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a23      	ldr	r2, [pc, #140]	; (8003ee0 <TIM_Base_SetConfig+0x134>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d003      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a22      	ldr	r2, [pc, #136]	; (8003ee4 <TIM_Base_SetConfig+0x138>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d108      	bne.n	8003e70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a09      	ldr	r2, [pc, #36]	; (8003ebc <TIM_Base_SetConfig+0x110>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d003      	beq.n	8003ea4 <TIM_Base_SetConfig+0xf8>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a0b      	ldr	r2, [pc, #44]	; (8003ecc <TIM_Base_SetConfig+0x120>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d103      	bne.n	8003eac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	691a      	ldr	r2, [r3, #16]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	615a      	str	r2, [r3, #20]
}
 8003eb2:	bf00      	nop
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr
 8003ebc:	40010000 	.word	0x40010000
 8003ec0:	40000400 	.word	0x40000400
 8003ec4:	40000800 	.word	0x40000800
 8003ec8:	40000c00 	.word	0x40000c00
 8003ecc:	40010400 	.word	0x40010400
 8003ed0:	40014000 	.word	0x40014000
 8003ed4:	40014400 	.word	0x40014400
 8003ed8:	40014800 	.word	0x40014800
 8003edc:	40001800 	.word	0x40001800
 8003ee0:	40001c00 	.word	0x40001c00
 8003ee4:	40002000 	.word	0x40002000

08003ee8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bc80      	pop	{r7}
 8003ef8:	4770      	bx	lr

08003efa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr

08003f0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e03f      	b.n	8003f9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d106      	bne.n	8003f38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7fc fdce 	bl	8000ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2224      	movs	r2, #36	; 0x24
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f829 	bl	8003fa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	691a      	ldr	r2, [r3, #16]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695a      	ldr	r2, [r3, #20]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
	...

08003fa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003fe8:	f023 030c 	bic.w	r3, r3, #12
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6812      	ldr	r2, [r2, #0]
 8003ff0:	68b9      	ldr	r1, [r7, #8]
 8003ff2:	430b      	orrs	r3, r1
 8003ff4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	699a      	ldr	r2, [r3, #24]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a57      	ldr	r2, [pc, #348]	; (8004170 <UART_SetConfig+0x1c8>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d004      	beq.n	8004020 <UART_SetConfig+0x78>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a56      	ldr	r2, [pc, #344]	; (8004174 <UART_SetConfig+0x1cc>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d103      	bne.n	8004028 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004020:	f7ff fc80 	bl	8003924 <HAL_RCC_GetPCLK2Freq>
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	e002      	b.n	800402e <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004028:	f7ff fc5a 	bl	80038e0 <HAL_RCC_GetPCLK1Freq>
 800402c:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004036:	d14c      	bne.n	80040d2 <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	4613      	mov	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	009a      	lsls	r2, r3, #2
 8004042:	441a      	add	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	fbb2 f3f3 	udiv	r3, r2, r3
 800404e:	4a4a      	ldr	r2, [pc, #296]	; (8004178 <UART_SetConfig+0x1d0>)
 8004050:	fba2 2303 	umull	r2, r3, r2, r3
 8004054:	095b      	lsrs	r3, r3, #5
 8004056:	0119      	lsls	r1, r3, #4
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	4613      	mov	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4413      	add	r3, r2
 8004060:	009a      	lsls	r2, r3, #2
 8004062:	441a      	add	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	fbb2 f2f3 	udiv	r2, r2, r3
 800406e:	4b42      	ldr	r3, [pc, #264]	; (8004178 <UART_SetConfig+0x1d0>)
 8004070:	fba3 0302 	umull	r0, r3, r3, r2
 8004074:	095b      	lsrs	r3, r3, #5
 8004076:	2064      	movs	r0, #100	; 0x64
 8004078:	fb00 f303 	mul.w	r3, r0, r3
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	3332      	adds	r3, #50	; 0x32
 8004082:	4a3d      	ldr	r2, [pc, #244]	; (8004178 <UART_SetConfig+0x1d0>)
 8004084:	fba2 2303 	umull	r2, r3, r2, r3
 8004088:	095b      	lsrs	r3, r3, #5
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004090:	4419      	add	r1, r3
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	4613      	mov	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	009a      	lsls	r2, r3, #2
 800409c:	441a      	add	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80040a8:	4b33      	ldr	r3, [pc, #204]	; (8004178 <UART_SetConfig+0x1d0>)
 80040aa:	fba3 0302 	umull	r0, r3, r3, r2
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	2064      	movs	r0, #100	; 0x64
 80040b2:	fb00 f303 	mul.w	r3, r0, r3
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	3332      	adds	r3, #50	; 0x32
 80040bc:	4a2e      	ldr	r2, [pc, #184]	; (8004178 <UART_SetConfig+0x1d0>)
 80040be:	fba2 2303 	umull	r2, r3, r2, r3
 80040c2:	095b      	lsrs	r3, r3, #5
 80040c4:	f003 0207 	and.w	r2, r3, #7
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	440a      	add	r2, r1
 80040ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040d0:	e04a      	b.n	8004168 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	4613      	mov	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	009a      	lsls	r2, r3, #2
 80040dc:	441a      	add	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e8:	4a23      	ldr	r2, [pc, #140]	; (8004178 <UART_SetConfig+0x1d0>)
 80040ea:	fba2 2303 	umull	r2, r3, r2, r3
 80040ee:	095b      	lsrs	r3, r3, #5
 80040f0:	0119      	lsls	r1, r3, #4
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	4613      	mov	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	009a      	lsls	r2, r3, #2
 80040fc:	441a      	add	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	fbb2 f2f3 	udiv	r2, r2, r3
 8004108:	4b1b      	ldr	r3, [pc, #108]	; (8004178 <UART_SetConfig+0x1d0>)
 800410a:	fba3 0302 	umull	r0, r3, r3, r2
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	2064      	movs	r0, #100	; 0x64
 8004112:	fb00 f303 	mul.w	r3, r0, r3
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	3332      	adds	r3, #50	; 0x32
 800411c:	4a16      	ldr	r2, [pc, #88]	; (8004178 <UART_SetConfig+0x1d0>)
 800411e:	fba2 2303 	umull	r2, r3, r2, r3
 8004122:	095b      	lsrs	r3, r3, #5
 8004124:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004128:	4419      	add	r1, r3
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	4613      	mov	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	009a      	lsls	r2, r3, #2
 8004134:	441a      	add	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004140:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <UART_SetConfig+0x1d0>)
 8004142:	fba3 0302 	umull	r0, r3, r3, r2
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	2064      	movs	r0, #100	; 0x64
 800414a:	fb00 f303 	mul.w	r3, r0, r3
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	3332      	adds	r3, #50	; 0x32
 8004154:	4a08      	ldr	r2, [pc, #32]	; (8004178 <UART_SetConfig+0x1d0>)
 8004156:	fba2 2303 	umull	r2, r3, r2, r3
 800415a:	095b      	lsrs	r3, r3, #5
 800415c:	f003 020f 	and.w	r2, r3, #15
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	440a      	add	r2, r1
 8004166:	609a      	str	r2, [r3, #8]
}
 8004168:	bf00      	nop
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40011000 	.word	0x40011000
 8004174:	40011400 	.word	0x40011400
 8004178:	51eb851f 	.word	0x51eb851f

0800417c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800417c:	b084      	sub	sp, #16
 800417e:	b580      	push	{r7, lr}
 8004180:	b084      	sub	sp, #16
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	f107 001c 	add.w	r0, r7, #28
 800418a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004190:	2b01      	cmp	r3, #1
 8004192:	d122      	bne.n	80041da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004198:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80041a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80041bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d105      	bne.n	80041ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 fa76 	bl	80046c0 <USB_CoreReset>
 80041d4:	4603      	mov	r3, r0
 80041d6:	73fb      	strb	r3, [r7, #15]
 80041d8:	e010      	b.n	80041fc <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fa6a 	bl	80046c0 <USB_CoreReset>
 80041ec:	4603      	mov	r3, r0
 80041ee:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80041fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d10b      	bne.n	800421a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f043 0206 	orr.w	r2, r3, #6
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f043 0220 	orr.w	r2, r3, #32
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800421a:	7bfb      	ldrb	r3, [r7, #15]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004226:	b004      	add	sp, #16
 8004228:	4770      	bx	lr

0800422a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f023 0201 	bic.w	r2, r3, #1
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	bc80      	pop	{r7}
 8004248:	4770      	bx	lr

0800424a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b084      	sub	sp, #16
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	460b      	mov	r3, r1
 8004254:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004256:	2300      	movs	r3, #0
 8004258:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004266:	78fb      	ldrb	r3, [r7, #3]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d115      	bne.n	8004298 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004278:	2001      	movs	r0, #1
 800427a:	f7fd f993 	bl	80015a4 <HAL_Delay>
      ms++;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	3301      	adds	r3, #1
 8004282:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 fa0d 	bl	80046a4 <USB_GetMode>
 800428a:	4603      	mov	r3, r0
 800428c:	2b01      	cmp	r3, #1
 800428e:	d01e      	beq.n	80042ce <USB_SetCurrentMode+0x84>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2b31      	cmp	r3, #49	; 0x31
 8004294:	d9f0      	bls.n	8004278 <USB_SetCurrentMode+0x2e>
 8004296:	e01a      	b.n	80042ce <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004298:	78fb      	ldrb	r3, [r7, #3]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d115      	bne.n	80042ca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80042aa:	2001      	movs	r0, #1
 80042ac:	f7fd f97a 	bl	80015a4 <HAL_Delay>
      ms++;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	3301      	adds	r3, #1
 80042b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f9f4 	bl	80046a4 <USB_GetMode>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d005      	beq.n	80042ce <USB_SetCurrentMode+0x84>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2b31      	cmp	r3, #49	; 0x31
 80042c6:	d9f0      	bls.n	80042aa <USB_SetCurrentMode+0x60>
 80042c8:	e001      	b.n	80042ce <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e005      	b.n	80042da <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2b32      	cmp	r3, #50	; 0x32
 80042d2:	d101      	bne.n	80042d8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e000      	b.n	80042da <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042e4:	b084      	sub	sp, #16
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b086      	sub	sp, #24
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
 80042ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80042f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80042f6:	2300      	movs	r3, #0
 80042f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80042fe:	2300      	movs	r3, #0
 8004300:	613b      	str	r3, [r7, #16]
 8004302:	e009      	b.n	8004318 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	3340      	adds	r3, #64	; 0x40
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	2200      	movs	r2, #0
 8004310:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	3301      	adds	r3, #1
 8004316:	613b      	str	r3, [r7, #16]
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	2b0e      	cmp	r3, #14
 800431c:	d9f2      	bls.n	8004304 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800431e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004320:	2b00      	cmp	r3, #0
 8004322:	d11c      	bne.n	800435e <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004332:	f043 0302 	orr.w	r3, r3, #2
 8004336:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004348:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004354:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	639a      	str	r2, [r3, #56]	; 0x38
 800435c:	e00b      	b.n	8004376 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004362:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800437c:	461a      	mov	r2, r3
 800437e:	2300      	movs	r3, #0
 8004380:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004388:	4619      	mov	r1, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004390:	461a      	mov	r2, r3
 8004392:	680b      	ldr	r3, [r1, #0]
 8004394:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004398:	2b01      	cmp	r3, #1
 800439a:	d10c      	bne.n	80043b6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800439c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d104      	bne.n	80043ac <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80043a2:	2100      	movs	r1, #0
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f945 	bl	8004634 <USB_SetDevSpeed>
 80043aa:	e008      	b.n	80043be <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80043ac:	2101      	movs	r1, #1
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f940 	bl	8004634 <USB_SetDevSpeed>
 80043b4:	e003      	b.n	80043be <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80043b6:	2103      	movs	r1, #3
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f93b 	bl	8004634 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80043be:	2110      	movs	r1, #16
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f8f3 	bl	80045ac <USB_FlushTxFifo>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f90f 	bl	80045f4 <USB_FlushRxFifo>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e6:	461a      	mov	r2, r3
 80043e8:	2300      	movs	r3, #0
 80043ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f2:	461a      	mov	r2, r3
 80043f4:	2300      	movs	r3, #0
 80043f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fe:	461a      	mov	r2, r3
 8004400:	2300      	movs	r3, #0
 8004402:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004404:	2300      	movs	r3, #0
 8004406:	613b      	str	r3, [r7, #16]
 8004408:	e043      	b.n	8004492 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4413      	add	r3, r2
 8004412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800441c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004420:	d118      	bne.n	8004454 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10a      	bne.n	800443e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004434:	461a      	mov	r2, r3
 8004436:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	e013      	b.n	8004466 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800444a:	461a      	mov	r2, r3
 800444c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	e008      	b.n	8004466 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4413      	add	r3, r2
 800445c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004460:	461a      	mov	r2, r3
 8004462:	2300      	movs	r3, #0
 8004464:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	015a      	lsls	r2, r3, #5
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4413      	add	r3, r2
 800446e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004472:	461a      	mov	r2, r3
 8004474:	2300      	movs	r3, #0
 8004476:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4413      	add	r3, r2
 8004480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004484:	461a      	mov	r2, r3
 8004486:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800448a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	3301      	adds	r3, #1
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	429a      	cmp	r2, r3
 8004498:	d3b7      	bcc.n	800440a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800449a:	2300      	movs	r3, #0
 800449c:	613b      	str	r3, [r7, #16]
 800449e:	e043      	b.n	8004528 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044b6:	d118      	bne.n	80044ea <USB_DevInit+0x206>
    {
      if (i == 0U)
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10a      	bne.n	80044d4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	015a      	lsls	r2, r3, #5
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ca:	461a      	mov	r2, r3
 80044cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044d0:	6013      	str	r3, [r2, #0]
 80044d2:	e013      	b.n	80044fc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e0:	461a      	mov	r2, r3
 80044e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80044e6:	6013      	str	r3, [r2, #0]
 80044e8:	e008      	b.n	80044fc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f6:	461a      	mov	r2, r3
 80044f8:	2300      	movs	r3, #0
 80044fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4413      	add	r3, r2
 8004504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004508:	461a      	mov	r2, r3
 800450a:	2300      	movs	r3, #0
 800450c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4413      	add	r3, r2
 8004516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451a:	461a      	mov	r2, r3
 800451c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004520:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	3301      	adds	r3, #1
 8004526:	613b      	str	r3, [r7, #16]
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	429a      	cmp	r2, r3
 800452e:	d3b7      	bcc.n	80044a0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800453e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004542:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004550:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004554:	2b00      	cmp	r3, #0
 8004556:	d105      	bne.n	8004564 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	f043 0210 	orr.w	r2, r3, #16
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	699a      	ldr	r2, [r3, #24]
 8004568:	4b0f      	ldr	r3, [pc, #60]	; (80045a8 <USB_DevInit+0x2c4>)
 800456a:	4313      	orrs	r3, r2
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004572:	2b00      	cmp	r3, #0
 8004574:	d005      	beq.n	8004582 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	f043 0208 	orr.w	r2, r3, #8
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004584:	2b01      	cmp	r3, #1
 8004586:	d107      	bne.n	8004598 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004590:	f043 0304 	orr.w	r3, r3, #4
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004598:	7dfb      	ldrb	r3, [r7, #23]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045a4:	b004      	add	sp, #16
 80045a6:	4770      	bx	lr
 80045a8:	803c3800 	.word	0x803c3800

080045ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	019b      	lsls	r3, r3, #6
 80045be:	f043 0220 	orr.w	r2, r3, #32
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	3301      	adds	r3, #1
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4a08      	ldr	r2, [pc, #32]	; (80045f0 <USB_FlushTxFifo+0x44>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d901      	bls.n	80045d8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e006      	b.n	80045e6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	f003 0320 	and.w	r3, r3, #32
 80045e0:	2b20      	cmp	r3, #32
 80045e2:	d0f0      	beq.n	80045c6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bc80      	pop	{r7}
 80045ee:	4770      	bx	lr
 80045f0:	00030d40 	.word	0x00030d40

080045f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80045fc:	2300      	movs	r3, #0
 80045fe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2210      	movs	r2, #16
 8004604:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	3301      	adds	r3, #1
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4a08      	ldr	r2, [pc, #32]	; (8004630 <USB_FlushRxFifo+0x3c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d901      	bls.n	8004618 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e006      	b.n	8004626 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	2b10      	cmp	r3, #16
 8004622:	d0f0      	beq.n	8004606 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	bc80      	pop	{r7}
 800462e:	4770      	bx	lr
 8004630:	00030d40 	.word	0x00030d40

08004634 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	78fb      	ldrb	r3, [r7, #3]
 800464e:	68f9      	ldr	r1, [r7, #12]
 8004650:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004654:	4313      	orrs	r3, r2
 8004656:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	bc80      	pop	{r7}
 8004662:	4770      	bx	lr

08004664 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800467e:	f023 0303 	bic.w	r3, r3, #3
 8004682:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004692:	f043 0302 	orr.w	r3, r3, #2
 8004696:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	bc80      	pop	{r7}
 80046a2:	4770      	bx	lr

080046a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	f003 0301 	and.w	r3, r3, #1
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bc80      	pop	{r7}
 80046bc:	4770      	bx	lr
	...

080046c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	3301      	adds	r3, #1
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4a12      	ldr	r2, [pc, #72]	; (8004720 <USB_CoreReset+0x60>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d901      	bls.n	80046de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e01b      	b.n	8004716 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	daf2      	bge.n	80046cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	f043 0201 	orr.w	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	3301      	adds	r3, #1
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4a08      	ldr	r2, [pc, #32]	; (8004720 <USB_CoreReset+0x60>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d901      	bls.n	8004708 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e006      	b.n	8004716 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b01      	cmp	r3, #1
 8004712:	d0f0      	beq.n	80046f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr
 8004720:	00030d40 	.word	0x00030d40

08004724 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004724:	b5b0      	push	{r4, r5, r7, lr}
 8004726:	b08e      	sub	sp, #56	; 0x38
 8004728:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800472a:	4ba0      	ldr	r3, [pc, #640]	; (80049ac <MX_LWIP_Init+0x288>)
 800472c:	22c0      	movs	r2, #192	; 0xc0
 800472e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004730:	4b9e      	ldr	r3, [pc, #632]	; (80049ac <MX_LWIP_Init+0x288>)
 8004732:	22a8      	movs	r2, #168	; 0xa8
 8004734:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8004736:	4b9d      	ldr	r3, [pc, #628]	; (80049ac <MX_LWIP_Init+0x288>)
 8004738:	2201      	movs	r2, #1
 800473a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 207;
 800473c:	4b9b      	ldr	r3, [pc, #620]	; (80049ac <MX_LWIP_Init+0x288>)
 800473e:	22cf      	movs	r2, #207	; 0xcf
 8004740:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004742:	4b9b      	ldr	r3, [pc, #620]	; (80049b0 <MX_LWIP_Init+0x28c>)
 8004744:	22ff      	movs	r2, #255	; 0xff
 8004746:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004748:	4b99      	ldr	r3, [pc, #612]	; (80049b0 <MX_LWIP_Init+0x28c>)
 800474a:	22ff      	movs	r2, #255	; 0xff
 800474c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800474e:	4b98      	ldr	r3, [pc, #608]	; (80049b0 <MX_LWIP_Init+0x28c>)
 8004750:	22ff      	movs	r2, #255	; 0xff
 8004752:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004754:	4b96      	ldr	r3, [pc, #600]	; (80049b0 <MX_LWIP_Init+0x28c>)
 8004756:	2200      	movs	r2, #0
 8004758:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800475a:	4b96      	ldr	r3, [pc, #600]	; (80049b4 <MX_LWIP_Init+0x290>)
 800475c:	2200      	movs	r2, #0
 800475e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8004760:	4b94      	ldr	r3, [pc, #592]	; (80049b4 <MX_LWIP_Init+0x290>)
 8004762:	2200      	movs	r2, #0
 8004764:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8004766:	4b93      	ldr	r3, [pc, #588]	; (80049b4 <MX_LWIP_Init+0x290>)
 8004768:	2200      	movs	r2, #0
 800476a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800476c:	4b91      	ldr	r3, [pc, #580]	; (80049b4 <MX_LWIP_Init+0x290>)
 800476e:	2200      	movs	r2, #0
 8004770:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004772:	2100      	movs	r1, #0
 8004774:	2000      	movs	r0, #0
 8004776:	f003 fd63 	bl	8008240 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800477a:	4b8c      	ldr	r3, [pc, #560]	; (80049ac <MX_LWIP_Init+0x288>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	061a      	lsls	r2, r3, #24
 8004780:	4b8a      	ldr	r3, [pc, #552]	; (80049ac <MX_LWIP_Init+0x288>)
 8004782:	785b      	ldrb	r3, [r3, #1]
 8004784:	041b      	lsls	r3, r3, #16
 8004786:	431a      	orrs	r2, r3
 8004788:	4b88      	ldr	r3, [pc, #544]	; (80049ac <MX_LWIP_Init+0x288>)
 800478a:	789b      	ldrb	r3, [r3, #2]
 800478c:	021b      	lsls	r3, r3, #8
 800478e:	4313      	orrs	r3, r2
 8004790:	4a86      	ldr	r2, [pc, #536]	; (80049ac <MX_LWIP_Init+0x288>)
 8004792:	78d2      	ldrb	r2, [r2, #3]
 8004794:	4313      	orrs	r3, r2
 8004796:	061a      	lsls	r2, r3, #24
 8004798:	4b84      	ldr	r3, [pc, #528]	; (80049ac <MX_LWIP_Init+0x288>)
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	0619      	lsls	r1, r3, #24
 800479e:	4b83      	ldr	r3, [pc, #524]	; (80049ac <MX_LWIP_Init+0x288>)
 80047a0:	785b      	ldrb	r3, [r3, #1]
 80047a2:	041b      	lsls	r3, r3, #16
 80047a4:	4319      	orrs	r1, r3
 80047a6:	4b81      	ldr	r3, [pc, #516]	; (80049ac <MX_LWIP_Init+0x288>)
 80047a8:	789b      	ldrb	r3, [r3, #2]
 80047aa:	021b      	lsls	r3, r3, #8
 80047ac:	430b      	orrs	r3, r1
 80047ae:	497f      	ldr	r1, [pc, #508]	; (80049ac <MX_LWIP_Init+0x288>)
 80047b0:	78c9      	ldrb	r1, [r1, #3]
 80047b2:	430b      	orrs	r3, r1
 80047b4:	021b      	lsls	r3, r3, #8
 80047b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80047ba:	431a      	orrs	r2, r3
 80047bc:	4b7b      	ldr	r3, [pc, #492]	; (80049ac <MX_LWIP_Init+0x288>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	0619      	lsls	r1, r3, #24
 80047c2:	4b7a      	ldr	r3, [pc, #488]	; (80049ac <MX_LWIP_Init+0x288>)
 80047c4:	785b      	ldrb	r3, [r3, #1]
 80047c6:	041b      	lsls	r3, r3, #16
 80047c8:	4319      	orrs	r1, r3
 80047ca:	4b78      	ldr	r3, [pc, #480]	; (80049ac <MX_LWIP_Init+0x288>)
 80047cc:	789b      	ldrb	r3, [r3, #2]
 80047ce:	021b      	lsls	r3, r3, #8
 80047d0:	430b      	orrs	r3, r1
 80047d2:	4976      	ldr	r1, [pc, #472]	; (80049ac <MX_LWIP_Init+0x288>)
 80047d4:	78c9      	ldrb	r1, [r1, #3]
 80047d6:	430b      	orrs	r3, r1
 80047d8:	0a1b      	lsrs	r3, r3, #8
 80047da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80047de:	431a      	orrs	r2, r3
 80047e0:	4b72      	ldr	r3, [pc, #456]	; (80049ac <MX_LWIP_Init+0x288>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	0619      	lsls	r1, r3, #24
 80047e6:	4b71      	ldr	r3, [pc, #452]	; (80049ac <MX_LWIP_Init+0x288>)
 80047e8:	785b      	ldrb	r3, [r3, #1]
 80047ea:	041b      	lsls	r3, r3, #16
 80047ec:	4319      	orrs	r1, r3
 80047ee:	4b6f      	ldr	r3, [pc, #444]	; (80049ac <MX_LWIP_Init+0x288>)
 80047f0:	789b      	ldrb	r3, [r3, #2]
 80047f2:	021b      	lsls	r3, r3, #8
 80047f4:	430b      	orrs	r3, r1
 80047f6:	496d      	ldr	r1, [pc, #436]	; (80049ac <MX_LWIP_Init+0x288>)
 80047f8:	78c9      	ldrb	r1, [r1, #3]
 80047fa:	430b      	orrs	r3, r1
 80047fc:	0e1b      	lsrs	r3, r3, #24
 80047fe:	4313      	orrs	r3, r2
 8004800:	4a6d      	ldr	r2, [pc, #436]	; (80049b8 <MX_LWIP_Init+0x294>)
 8004802:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004804:	4b6a      	ldr	r3, [pc, #424]	; (80049b0 <MX_LWIP_Init+0x28c>)
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	061a      	lsls	r2, r3, #24
 800480a:	4b69      	ldr	r3, [pc, #420]	; (80049b0 <MX_LWIP_Init+0x28c>)
 800480c:	785b      	ldrb	r3, [r3, #1]
 800480e:	041b      	lsls	r3, r3, #16
 8004810:	431a      	orrs	r2, r3
 8004812:	4b67      	ldr	r3, [pc, #412]	; (80049b0 <MX_LWIP_Init+0x28c>)
 8004814:	789b      	ldrb	r3, [r3, #2]
 8004816:	021b      	lsls	r3, r3, #8
 8004818:	4313      	orrs	r3, r2
 800481a:	4a65      	ldr	r2, [pc, #404]	; (80049b0 <MX_LWIP_Init+0x28c>)
 800481c:	78d2      	ldrb	r2, [r2, #3]
 800481e:	4313      	orrs	r3, r2
 8004820:	061a      	lsls	r2, r3, #24
 8004822:	4b63      	ldr	r3, [pc, #396]	; (80049b0 <MX_LWIP_Init+0x28c>)
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	0619      	lsls	r1, r3, #24
 8004828:	4b61      	ldr	r3, [pc, #388]	; (80049b0 <MX_LWIP_Init+0x28c>)
 800482a:	785b      	ldrb	r3, [r3, #1]
 800482c:	041b      	lsls	r3, r3, #16
 800482e:	4319      	orrs	r1, r3
 8004830:	4b5f      	ldr	r3, [pc, #380]	; (80049b0 <MX_LWIP_Init+0x28c>)
 8004832:	789b      	ldrb	r3, [r3, #2]
 8004834:	021b      	lsls	r3, r3, #8
 8004836:	430b      	orrs	r3, r1
 8004838:	495d      	ldr	r1, [pc, #372]	; (80049b0 <MX_LWIP_Init+0x28c>)
 800483a:	78c9      	ldrb	r1, [r1, #3]
 800483c:	430b      	orrs	r3, r1
 800483e:	021b      	lsls	r3, r3, #8
 8004840:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004844:	431a      	orrs	r2, r3
 8004846:	4b5a      	ldr	r3, [pc, #360]	; (80049b0 <MX_LWIP_Init+0x28c>)
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	0619      	lsls	r1, r3, #24
 800484c:	4b58      	ldr	r3, [pc, #352]	; (80049b0 <MX_LWIP_Init+0x28c>)
 800484e:	785b      	ldrb	r3, [r3, #1]
 8004850:	041b      	lsls	r3, r3, #16
 8004852:	4319      	orrs	r1, r3
 8004854:	4b56      	ldr	r3, [pc, #344]	; (80049b0 <MX_LWIP_Init+0x28c>)
 8004856:	789b      	ldrb	r3, [r3, #2]
 8004858:	021b      	lsls	r3, r3, #8
 800485a:	430b      	orrs	r3, r1
 800485c:	4954      	ldr	r1, [pc, #336]	; (80049b0 <MX_LWIP_Init+0x28c>)
 800485e:	78c9      	ldrb	r1, [r1, #3]
 8004860:	430b      	orrs	r3, r1
 8004862:	0a1b      	lsrs	r3, r3, #8
 8004864:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004868:	431a      	orrs	r2, r3
 800486a:	4b51      	ldr	r3, [pc, #324]	; (80049b0 <MX_LWIP_Init+0x28c>)
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	0619      	lsls	r1, r3, #24
 8004870:	4b4f      	ldr	r3, [pc, #316]	; (80049b0 <MX_LWIP_Init+0x28c>)
 8004872:	785b      	ldrb	r3, [r3, #1]
 8004874:	041b      	lsls	r3, r3, #16
 8004876:	4319      	orrs	r1, r3
 8004878:	4b4d      	ldr	r3, [pc, #308]	; (80049b0 <MX_LWIP_Init+0x28c>)
 800487a:	789b      	ldrb	r3, [r3, #2]
 800487c:	021b      	lsls	r3, r3, #8
 800487e:	430b      	orrs	r3, r1
 8004880:	494b      	ldr	r1, [pc, #300]	; (80049b0 <MX_LWIP_Init+0x28c>)
 8004882:	78c9      	ldrb	r1, [r1, #3]
 8004884:	430b      	orrs	r3, r1
 8004886:	0e1b      	lsrs	r3, r3, #24
 8004888:	4313      	orrs	r3, r2
 800488a:	4a4c      	ldr	r2, [pc, #304]	; (80049bc <MX_LWIP_Init+0x298>)
 800488c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800488e:	4b49      	ldr	r3, [pc, #292]	; (80049b4 <MX_LWIP_Init+0x290>)
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	061a      	lsls	r2, r3, #24
 8004894:	4b47      	ldr	r3, [pc, #284]	; (80049b4 <MX_LWIP_Init+0x290>)
 8004896:	785b      	ldrb	r3, [r3, #1]
 8004898:	041b      	lsls	r3, r3, #16
 800489a:	431a      	orrs	r2, r3
 800489c:	4b45      	ldr	r3, [pc, #276]	; (80049b4 <MX_LWIP_Init+0x290>)
 800489e:	789b      	ldrb	r3, [r3, #2]
 80048a0:	021b      	lsls	r3, r3, #8
 80048a2:	4313      	orrs	r3, r2
 80048a4:	4a43      	ldr	r2, [pc, #268]	; (80049b4 <MX_LWIP_Init+0x290>)
 80048a6:	78d2      	ldrb	r2, [r2, #3]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	061a      	lsls	r2, r3, #24
 80048ac:	4b41      	ldr	r3, [pc, #260]	; (80049b4 <MX_LWIP_Init+0x290>)
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	0619      	lsls	r1, r3, #24
 80048b2:	4b40      	ldr	r3, [pc, #256]	; (80049b4 <MX_LWIP_Init+0x290>)
 80048b4:	785b      	ldrb	r3, [r3, #1]
 80048b6:	041b      	lsls	r3, r3, #16
 80048b8:	4319      	orrs	r1, r3
 80048ba:	4b3e      	ldr	r3, [pc, #248]	; (80049b4 <MX_LWIP_Init+0x290>)
 80048bc:	789b      	ldrb	r3, [r3, #2]
 80048be:	021b      	lsls	r3, r3, #8
 80048c0:	430b      	orrs	r3, r1
 80048c2:	493c      	ldr	r1, [pc, #240]	; (80049b4 <MX_LWIP_Init+0x290>)
 80048c4:	78c9      	ldrb	r1, [r1, #3]
 80048c6:	430b      	orrs	r3, r1
 80048c8:	021b      	lsls	r3, r3, #8
 80048ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80048ce:	431a      	orrs	r2, r3
 80048d0:	4b38      	ldr	r3, [pc, #224]	; (80049b4 <MX_LWIP_Init+0x290>)
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	0619      	lsls	r1, r3, #24
 80048d6:	4b37      	ldr	r3, [pc, #220]	; (80049b4 <MX_LWIP_Init+0x290>)
 80048d8:	785b      	ldrb	r3, [r3, #1]
 80048da:	041b      	lsls	r3, r3, #16
 80048dc:	4319      	orrs	r1, r3
 80048de:	4b35      	ldr	r3, [pc, #212]	; (80049b4 <MX_LWIP_Init+0x290>)
 80048e0:	789b      	ldrb	r3, [r3, #2]
 80048e2:	021b      	lsls	r3, r3, #8
 80048e4:	430b      	orrs	r3, r1
 80048e6:	4933      	ldr	r1, [pc, #204]	; (80049b4 <MX_LWIP_Init+0x290>)
 80048e8:	78c9      	ldrb	r1, [r1, #3]
 80048ea:	430b      	orrs	r3, r1
 80048ec:	0a1b      	lsrs	r3, r3, #8
 80048ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80048f2:	431a      	orrs	r2, r3
 80048f4:	4b2f      	ldr	r3, [pc, #188]	; (80049b4 <MX_LWIP_Init+0x290>)
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	0619      	lsls	r1, r3, #24
 80048fa:	4b2e      	ldr	r3, [pc, #184]	; (80049b4 <MX_LWIP_Init+0x290>)
 80048fc:	785b      	ldrb	r3, [r3, #1]
 80048fe:	041b      	lsls	r3, r3, #16
 8004900:	4319      	orrs	r1, r3
 8004902:	4b2c      	ldr	r3, [pc, #176]	; (80049b4 <MX_LWIP_Init+0x290>)
 8004904:	789b      	ldrb	r3, [r3, #2]
 8004906:	021b      	lsls	r3, r3, #8
 8004908:	430b      	orrs	r3, r1
 800490a:	492a      	ldr	r1, [pc, #168]	; (80049b4 <MX_LWIP_Init+0x290>)
 800490c:	78c9      	ldrb	r1, [r1, #3]
 800490e:	430b      	orrs	r3, r1
 8004910:	0e1b      	lsrs	r3, r3, #24
 8004912:	4313      	orrs	r3, r2
 8004914:	4a2a      	ldr	r2, [pc, #168]	; (80049c0 <MX_LWIP_Init+0x29c>)
 8004916:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004918:	4b2a      	ldr	r3, [pc, #168]	; (80049c4 <MX_LWIP_Init+0x2a0>)
 800491a:	9302      	str	r3, [sp, #8]
 800491c:	4b2a      	ldr	r3, [pc, #168]	; (80049c8 <MX_LWIP_Init+0x2a4>)
 800491e:	9301      	str	r3, [sp, #4]
 8004920:	2300      	movs	r3, #0
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	4b26      	ldr	r3, [pc, #152]	; (80049c0 <MX_LWIP_Init+0x29c>)
 8004926:	4a25      	ldr	r2, [pc, #148]	; (80049bc <MX_LWIP_Init+0x298>)
 8004928:	4923      	ldr	r1, [pc, #140]	; (80049b8 <MX_LWIP_Init+0x294>)
 800492a:	4828      	ldr	r0, [pc, #160]	; (80049cc <MX_LWIP_Init+0x2a8>)
 800492c:	f004 f940 	bl	8008bb0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004930:	4826      	ldr	r0, [pc, #152]	; (80049cc <MX_LWIP_Init+0x2a8>)
 8004932:	f004 fa1f 	bl	8008d74 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004936:	4b25      	ldr	r3, [pc, #148]	; (80049cc <MX_LWIP_Init+0x2a8>)
 8004938:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800493c:	089b      	lsrs	r3, r3, #2
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004948:	4820      	ldr	r0, [pc, #128]	; (80049cc <MX_LWIP_Init+0x2a8>)
 800494a:	f004 fa21 	bl	8008d90 <netif_set_up>
 800494e:	e002      	b.n	8004956 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004950:	481e      	ldr	r0, [pc, #120]	; (80049cc <MX_LWIP_Init+0x2a8>)
 8004952:	f004 fa61 	bl	8008e18 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8004956:	491e      	ldr	r1, [pc, #120]	; (80049d0 <MX_LWIP_Init+0x2ac>)
 8004958:	481c      	ldr	r0, [pc, #112]	; (80049cc <MX_LWIP_Init+0x2a8>)
 800495a:	f004 faca 	bl	8008ef2 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 800495e:	2300      	movs	r3, #0
 8004960:	623b      	str	r3, [r7, #32]
 8004962:	2300      	movs	r3, #0
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8004966:	f107 0320 	add.w	r3, r7, #32
 800496a:	2101      	movs	r1, #1
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fda9 	bl	80054c4 <osSemaphoreCreate>
 8004972:	4603      	mov	r3, r0
 8004974:	4a17      	ldr	r2, [pc, #92]	; (80049d4 <MX_LWIP_Init+0x2b0>)
 8004976:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8004978:	4b17      	ldr	r3, [pc, #92]	; (80049d8 <MX_LWIP_Init+0x2b4>)
 800497a:	4a14      	ldr	r2, [pc, #80]	; (80049cc <MX_LWIP_Init+0x2a8>)
 800497c:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800497e:	4b15      	ldr	r3, [pc, #84]	; (80049d4 <MX_LWIP_Init+0x2b0>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a15      	ldr	r2, [pc, #84]	; (80049d8 <MX_LWIP_Init+0x2b4>)
 8004984:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8004986:	4b15      	ldr	r3, [pc, #84]	; (80049dc <MX_LWIP_Init+0x2b8>)
 8004988:	1d3c      	adds	r4, r7, #4
 800498a:	461d      	mov	r5, r3
 800498c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800498e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004990:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004994:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8004998:	1d3b      	adds	r3, r7, #4
 800499a:	490f      	ldr	r1, [pc, #60]	; (80049d8 <MX_LWIP_Init+0x2b4>)
 800499c:	4618      	mov	r0, r3
 800499e:	f000 fc95 	bl	80052cc <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80049a2:	bf00      	nop
 80049a4:	3728      	adds	r7, #40	; 0x28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bdb0      	pop	{r4, r5, r7, pc}
 80049aa:	bf00      	nop
 80049ac:	20004920 	.word	0x20004920
 80049b0:	2000491c 	.word	0x2000491c
 80049b4:	200048e0 	.word	0x200048e0
 80049b8:	20004918 	.word	0x20004918
 80049bc:	20004924 	.word	0x20004924
 80049c0:	20004928 	.word	0x20004928
 80049c4:	08008169 	.word	0x08008169
 80049c8:	08005061 	.word	0x08005061
 80049cc:	200048e4 	.word	0x200048e4
 80049d0:	08005145 	.word	0x08005145
 80049d4:	20000558 	.word	0x20000558
 80049d8:	200048d8 	.word	0x200048d8
 80049dc:	08012c88 	.word	0x08012c88

080049e0 <MX_LWIP_Process>:

void MX_LWIP_Process(void){
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
	ethernetif_input(&gnetif);
 80049e4:	4802      	ldr	r0, [pc, #8]	; (80049f0 <MX_LWIP_Process+0x10>)
 80049e6:	f000 fb0b 	bl	8005000 <ethernetif_input>
}
 80049ea:	bf00      	nop
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	200048e4 	.word	0x200048e4

080049f4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08e      	sub	sp, #56	; 0x38
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a00:	2200      	movs	r2, #0
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	605a      	str	r2, [r3, #4]
 8004a06:	609a      	str	r2, [r3, #8]
 8004a08:	60da      	str	r2, [r3, #12]
 8004a0a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a59      	ldr	r2, [pc, #356]	; (8004b78 <HAL_ETH_MspInit+0x184>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	f040 80ac 	bne.w	8004b70 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004a18:	2300      	movs	r3, #0
 8004a1a:	623b      	str	r3, [r7, #32]
 8004a1c:	4b57      	ldr	r3, [pc, #348]	; (8004b7c <HAL_ETH_MspInit+0x188>)
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a20:	4a56      	ldr	r2, [pc, #344]	; (8004b7c <HAL_ETH_MspInit+0x188>)
 8004a22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a26:	6313      	str	r3, [r2, #48]	; 0x30
 8004a28:	4b54      	ldr	r3, [pc, #336]	; (8004b7c <HAL_ETH_MspInit+0x188>)
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a30:	623b      	str	r3, [r7, #32]
 8004a32:	6a3b      	ldr	r3, [r7, #32]
 8004a34:	2300      	movs	r3, #0
 8004a36:	61fb      	str	r3, [r7, #28]
 8004a38:	4b50      	ldr	r3, [pc, #320]	; (8004b7c <HAL_ETH_MspInit+0x188>)
 8004a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3c:	4a4f      	ldr	r2, [pc, #316]	; (8004b7c <HAL_ETH_MspInit+0x188>)
 8004a3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a42:	6313      	str	r3, [r2, #48]	; 0x30
 8004a44:	4b4d      	ldr	r3, [pc, #308]	; (8004b7c <HAL_ETH_MspInit+0x188>)
 8004a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a4c:	61fb      	str	r3, [r7, #28]
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	2300      	movs	r3, #0
 8004a52:	61bb      	str	r3, [r7, #24]
 8004a54:	4b49      	ldr	r3, [pc, #292]	; (8004b7c <HAL_ETH_MspInit+0x188>)
 8004a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a58:	4a48      	ldr	r2, [pc, #288]	; (8004b7c <HAL_ETH_MspInit+0x188>)
 8004a5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a5e:	6313      	str	r3, [r2, #48]	; 0x30
 8004a60:	4b46      	ldr	r3, [pc, #280]	; (8004b7c <HAL_ETH_MspInit+0x188>)
 8004a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a68:	61bb      	str	r3, [r7, #24]
 8004a6a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	4b42      	ldr	r3, [pc, #264]	; (8004b7c <HAL_ETH_MspInit+0x188>)
 8004a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a74:	4a41      	ldr	r2, [pc, #260]	; (8004b7c <HAL_ETH_MspInit+0x188>)
 8004a76:	f043 0304 	orr.w	r3, r3, #4
 8004a7a:	6313      	str	r3, [r2, #48]	; 0x30
 8004a7c:	4b3f      	ldr	r3, [pc, #252]	; (8004b7c <HAL_ETH_MspInit+0x188>)
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	617b      	str	r3, [r7, #20]
 8004a86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a88:	2300      	movs	r3, #0
 8004a8a:	613b      	str	r3, [r7, #16]
 8004a8c:	4b3b      	ldr	r3, [pc, #236]	; (8004b7c <HAL_ETH_MspInit+0x188>)
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a90:	4a3a      	ldr	r2, [pc, #232]	; (8004b7c <HAL_ETH_MspInit+0x188>)
 8004a92:	f043 0301 	orr.w	r3, r3, #1
 8004a96:	6313      	str	r3, [r2, #48]	; 0x30
 8004a98:	4b38      	ldr	r3, [pc, #224]	; (8004b7c <HAL_ETH_MspInit+0x188>)
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	613b      	str	r3, [r7, #16]
 8004aa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	4b34      	ldr	r3, [pc, #208]	; (8004b7c <HAL_ETH_MspInit+0x188>)
 8004aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aac:	4a33      	ldr	r2, [pc, #204]	; (8004b7c <HAL_ETH_MspInit+0x188>)
 8004aae:	f043 0302 	orr.w	r3, r3, #2
 8004ab2:	6313      	str	r3, [r2, #48]	; 0x30
 8004ab4:	4b31      	ldr	r3, [pc, #196]	; (8004b7c <HAL_ETH_MspInit+0x188>)
 8004ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	60bb      	str	r3, [r7, #8]
 8004ac4:	4b2d      	ldr	r3, [pc, #180]	; (8004b7c <HAL_ETH_MspInit+0x188>)
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac8:	4a2c      	ldr	r2, [pc, #176]	; (8004b7c <HAL_ETH_MspInit+0x188>)
 8004aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ace:	6313      	str	r3, [r2, #48]	; 0x30
 8004ad0:	4b2a      	ldr	r3, [pc, #168]	; (8004b7c <HAL_ETH_MspInit+0x188>)
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad8:	60bb      	str	r3, [r7, #8]
 8004ada:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004adc:	2332      	movs	r3, #50	; 0x32
 8004ade:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004aec:	230b      	movs	r3, #11
 8004aee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004af4:	4619      	mov	r1, r3
 8004af6:	4822      	ldr	r0, [pc, #136]	; (8004b80 <HAL_ETH_MspInit+0x18c>)
 8004af8:	f7fd ffe0 	bl	8002abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004afc:	2386      	movs	r3, #134	; 0x86
 8004afe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b00:	2302      	movs	r3, #2
 8004b02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b04:	2300      	movs	r3, #0
 8004b06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004b0c:	230b      	movs	r3, #11
 8004b0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b14:	4619      	mov	r1, r3
 8004b16:	481b      	ldr	r0, [pc, #108]	; (8004b84 <HAL_ETH_MspInit+0x190>)
 8004b18:	f7fd ffd0 	bl	8002abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b22:	2302      	movs	r3, #2
 8004b24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b26:	2300      	movs	r3, #0
 8004b28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004b2e:	230b      	movs	r3, #11
 8004b30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b36:	4619      	mov	r1, r3
 8004b38:	4813      	ldr	r0, [pc, #76]	; (8004b88 <HAL_ETH_MspInit+0x194>)
 8004b3a:	f7fd ffbf 	bl	8002abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004b3e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b44:	2302      	movs	r3, #2
 8004b46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004b50:	230b      	movs	r3, #11
 8004b52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b58:	4619      	mov	r1, r3
 8004b5a:	480c      	ldr	r0, [pc, #48]	; (8004b8c <HAL_ETH_MspInit+0x198>)
 8004b5c:	f7fd ffae 	bl	8002abc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004b60:	2200      	movs	r2, #0
 8004b62:	2105      	movs	r1, #5
 8004b64:	203d      	movs	r0, #61	; 0x3d
 8004b66:	f7fc fdf6 	bl	8001756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004b6a:	203d      	movs	r0, #61	; 0x3d
 8004b6c:	f7fc fe0f 	bl	800178e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004b70:	bf00      	nop
 8004b72:	3738      	adds	r7, #56	; 0x38
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40028000 	.word	0x40028000
 8004b7c:	40023800 	.word	0x40023800
 8004b80:	40020800 	.word	0x40020800
 8004b84:	40020000 	.word	0x40020000
 8004b88:	40020400 	.word	0x40020400
 8004b8c:	40021800 	.word	0x40021800

08004b90 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8004b98:	4b04      	ldr	r3, [pc, #16]	; (8004bac <HAL_ETH_RxCpltCallback+0x1c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fd11 	bl	80055c4 <osSemaphoreRelease>
}
 8004ba2:	bf00      	nop
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	2000055c 	.word	0x2000055c

08004bb0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004bb0:	b5b0      	push	{r4, r5, r7, lr}
 8004bb2:	b090      	sub	sp, #64	; 0x40
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004bbc:	4b60      	ldr	r3, [pc, #384]	; (8004d40 <low_level_init+0x190>)
 8004bbe:	4a61      	ldr	r2, [pc, #388]	; (8004d44 <low_level_init+0x194>)
 8004bc0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004bc2:	4b5f      	ldr	r3, [pc, #380]	; (8004d40 <low_level_init+0x190>)
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8004bc8:	4b5d      	ldr	r3, [pc, #372]	; (8004d40 <low_level_init+0x190>)
 8004bca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004bce:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004bd0:	4b5b      	ldr	r3, [pc, #364]	; (8004d40 <low_level_init+0x190>)
 8004bd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bd6:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004bd8:	4b59      	ldr	r3, [pc, #356]	; (8004d40 <low_level_init+0x190>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004bde:	2300      	movs	r3, #0
 8004be0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x15;
 8004be4:	2315      	movs	r3, #21
 8004be6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0x7E;
 8004bea:	237e      	movs	r3, #126	; 0x7e
 8004bec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8004c02:	4a4f      	ldr	r2, [pc, #316]	; (8004d40 <low_level_init+0x190>)
 8004c04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c08:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8004c0a:	4b4d      	ldr	r3, [pc, #308]	; (8004d40 <low_level_init+0x190>)
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004c10:	4b4b      	ldr	r3, [pc, #300]	; (8004d40 <low_level_init+0x190>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004c16:	4b4a      	ldr	r3, [pc, #296]	; (8004d40 <low_level_init+0x190>)
 8004c18:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004c1c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004c1e:	4848      	ldr	r0, [pc, #288]	; (8004d40 <low_level_init+0x190>)
 8004c20:	f7fc fdc4 	bl	80017ac <HAL_ETH_Init>
 8004c24:	4603      	mov	r3, r0
 8004c26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8004c2a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d108      	bne.n	8004c44 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004c38:	f043 0304 	orr.w	r3, r3, #4
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004c44:	2304      	movs	r3, #4
 8004c46:	4a40      	ldr	r2, [pc, #256]	; (8004d48 <low_level_init+0x198>)
 8004c48:	4940      	ldr	r1, [pc, #256]	; (8004d4c <low_level_init+0x19c>)
 8004c4a:	483d      	ldr	r0, [pc, #244]	; (8004d40 <low_level_init+0x190>)
 8004c4c:	f7fc ff3a 	bl	8001ac4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004c50:	2304      	movs	r3, #4
 8004c52:	4a3f      	ldr	r2, [pc, #252]	; (8004d50 <low_level_init+0x1a0>)
 8004c54:	493f      	ldr	r1, [pc, #252]	; (8004d54 <low_level_init+0x1a4>)
 8004c56:	483a      	ldr	r0, [pc, #232]	; (8004d40 <low_level_init+0x190>)
 8004c58:	f7fc ff9c 	bl	8001b94 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2206      	movs	r2, #6
 8004c60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004c64:	4b36      	ldr	r3, [pc, #216]	; (8004d40 <low_level_init+0x190>)
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	781a      	ldrb	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004c70:	4b33      	ldr	r3, [pc, #204]	; (8004d40 <low_level_init+0x190>)
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	785a      	ldrb	r2, [r3, #1]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004c7c:	4b30      	ldr	r3, [pc, #192]	; (8004d40 <low_level_init+0x190>)
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	789a      	ldrb	r2, [r3, #2]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004c88:	4b2d      	ldr	r3, [pc, #180]	; (8004d40 <low_level_init+0x190>)
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	78da      	ldrb	r2, [r3, #3]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004c94:	4b2a      	ldr	r3, [pc, #168]	; (8004d40 <low_level_init+0x190>)
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	791a      	ldrb	r2, [r3, #4]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004ca0:	4b27      	ldr	r3, [pc, #156]	; (8004d40 <low_level_init+0x190>)
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	795a      	ldrb	r2, [r3, #5]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004cb2:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004cba:	f043 030a 	orr.w	r3, r3, #10
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cca:	2300      	movs	r3, #0
 8004ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8004cce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 fbf5 	bl	80054c4 <osSemaphoreCreate>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	4a1e      	ldr	r2, [pc, #120]	; (8004d58 <low_level_init+0x1a8>)
 8004cde:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004ce0:	4b1e      	ldr	r3, [pc, #120]	; (8004d5c <low_level_init+0x1ac>)
 8004ce2:	f107 040c 	add.w	r4, r7, #12
 8004ce6:	461d      	mov	r5, r3
 8004ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004cf0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8004cf4:	f107 030c 	add.w	r3, r7, #12
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fae6 	bl	80052cc <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004d00:	480f      	ldr	r0, [pc, #60]	; (8004d40 <low_level_init+0x190>)
 8004d02:	f7fd fa6b 	bl	80021dc <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004d06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	211d      	movs	r1, #29
 8004d0e:	480c      	ldr	r0, [pc, #48]	; (8004d40 <low_level_init+0x190>)
 8004d10:	f7fd f996 	bl	8002040 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d16:	f043 030b 	orr.w	r3, r3, #11
 8004d1a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1e:	461a      	mov	r2, r3
 8004d20:	211d      	movs	r1, #29
 8004d22:	4807      	ldr	r0, [pc, #28]	; (8004d40 <low_level_init+0x190>)
 8004d24:	f7fd f9f4 	bl	8002110 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004d28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	211d      	movs	r1, #29
 8004d30:	4803      	ldr	r0, [pc, #12]	; (8004d40 <low_level_init+0x190>)
 8004d32:	f7fd f985 	bl	8002040 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004d36:	bf00      	nop
 8004d38:	3740      	adds	r7, #64	; 0x40
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	200061fc 	.word	0x200061fc
 8004d44:	40028000 	.word	0x40028000
 8004d48:	20006244 	.word	0x20006244
 8004d4c:	2000492c 	.word	0x2000492c
 8004d50:	200049ac 	.word	0x200049ac
 8004d54:	2000617c 	.word	0x2000617c
 8004d58:	2000055c 	.word	0x2000055c
 8004d5c:	08012cac 	.word	0x08012cac

08004d60 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08a      	sub	sp, #40	; 0x28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004d6a:	4b4b      	ldr	r3, [pc, #300]	; (8004e98 <low_level_output+0x138>)
 8004d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004d72:	2300      	movs	r3, #0
 8004d74:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004d76:	2300      	movs	r3, #0
 8004d78:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004d82:	4b45      	ldr	r3, [pc, #276]	; (8004e98 <low_level_output+0x138>)
 8004d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d86:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	623b      	str	r3, [r7, #32]
 8004d90:	e05a      	b.n	8004e48 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	da03      	bge.n	8004da2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004d9a:	23f8      	movs	r3, #248	; 0xf8
 8004d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004da0:	e05c      	b.n	8004e5c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	895b      	ldrh	r3, [r3, #10]
 8004da6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004dac:	e02f      	b.n	8004e0e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8004dae:	69fa      	ldr	r2, [r7, #28]
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	18d0      	adds	r0, r2, r3
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	18d1      	adds	r1, r2, r3
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	f00d f82c 	bl	8011e22 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	da03      	bge.n	8004de0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004dd8:	23f8      	movs	r3, #248	; 0xf8
 8004dda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004dde:	e03d      	b.n	8004e5c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4413      	add	r3, r2
 8004dec:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004df0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004dfc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004e08:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	4413      	add	r3, r2
 8004e14:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d8c8      	bhi.n	8004dae <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004e1c:	69fa      	ldr	r2, [r7, #28]
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	18d0      	adds	r0, r2, r3
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	4413      	add	r3, r2
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	f00c fff8 	bl	8011e22 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4413      	add	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4413      	add	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	623b      	str	r3, [r7, #32]
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1a1      	bne.n	8004d92 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004e4e:	6979      	ldr	r1, [r7, #20]
 8004e50:	4811      	ldr	r0, [pc, #68]	; (8004e98 <low_level_output+0x138>)
 8004e52:	f7fc ff0b 	bl	8001c6c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004e5c:	4b0e      	ldr	r3, [pc, #56]	; (8004e98 <low_level_output+0x138>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e64:	3314      	adds	r3, #20
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0320 	and.w	r3, r3, #32
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00d      	beq.n	8004e8c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004e70:	4b09      	ldr	r3, [pc, #36]	; (8004e98 <low_level_output+0x138>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e78:	3314      	adds	r3, #20
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004e7e:	4b06      	ldr	r3, [pc, #24]	; (8004e98 <low_level_output+0x138>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e86:	3304      	adds	r3, #4
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004e8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3728      	adds	r7, #40	; 0x28
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	200061fc 	.word	0x200061fc

08004e9c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b08c      	sub	sp, #48	; 0x30
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004eac:	2300      	movs	r3, #0
 8004eae:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8004ec0:	484e      	ldr	r0, [pc, #312]	; (8004ffc <low_level_input+0x160>)
 8004ec2:	f7fc ffbd 	bl	8001e40 <HAL_ETH_GetReceivedFrame_IT>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <low_level_input+0x34>

    return NULL;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	e091      	b.n	8004ff4 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004ed0:	4b4a      	ldr	r3, [pc, #296]	; (8004ffc <low_level_input+0x160>)
 8004ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004ed6:	4b49      	ldr	r3, [pc, #292]	; (8004ffc <low_level_input+0x160>)
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8004edc:	89fb      	ldrh	r3, [r7, #14]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d006      	beq.n	8004ef0 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004ee2:	89fb      	ldrh	r3, [r7, #14]
 8004ee4:	2203      	movs	r2, #3
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	2004      	movs	r0, #4
 8004eea:	f004 f873 	bl	8008fd4 <pbuf_alloc>
 8004eee:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8004ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d04b      	beq.n	8004f8e <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004ef6:	4b41      	ldr	r3, [pc, #260]	; (8004ffc <low_level_input+0x160>)
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004efc:	2300      	movs	r3, #0
 8004efe:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f04:	e040      	b.n	8004f88 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8004f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f08:	895b      	ldrh	r3, [r3, #10]
 8004f0a:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004f10:	e021      	b.n	8004f56 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	18d0      	adds	r0, r2, r3
 8004f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	18d1      	adds	r1, r2, r3
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004f26:	3304      	adds	r3, #4
 8004f28:	461a      	mov	r2, r3
 8004f2a:	f00c ff7a 	bl	8011e22 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004f3a:	69fa      	ldr	r2, [r7, #28]
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004f44:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004f50:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004f52:	2300      	movs	r3, #0
 8004f54:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d8d6      	bhi.n	8004f12 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	18d0      	adds	r0, r2, r3
 8004f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	4413      	add	r3, r2
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	4619      	mov	r1, r3
 8004f76:	f00c ff54 	bl	8011e22 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004f7a:	69fa      	ldr	r2, [r7, #28]
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	4413      	add	r3, r2
 8004f80:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1bb      	bne.n	8004f06 <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004f8e:	4b1b      	ldr	r3, [pc, #108]	; (8004ffc <low_level_input+0x160>)
 8004f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f92:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004f94:	2300      	movs	r3, #0
 8004f96:	613b      	str	r3, [r7, #16]
 8004f98:	e00b      	b.n	8004fb2 <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	613b      	str	r3, [r7, #16]
 8004fb2:	4b12      	ldr	r3, [pc, #72]	; (8004ffc <low_level_input+0x160>)
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d3ee      	bcc.n	8004f9a <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8004fbc:	4b0f      	ldr	r3, [pc, #60]	; (8004ffc <low_level_input+0x160>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8004fc2:	4b0e      	ldr	r3, [pc, #56]	; (8004ffc <low_level_input+0x160>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fca:	3314      	adds	r3, #20
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00d      	beq.n	8004ff2 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004fd6:	4b09      	ldr	r3, [pc, #36]	; (8004ffc <low_level_input+0x160>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fde:	3314      	adds	r3, #20
 8004fe0:	2280      	movs	r2, #128	; 0x80
 8004fe2:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004fe4:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <low_level_input+0x160>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fec:	3308      	adds	r3, #8
 8004fee:	2200      	movs	r2, #0
 8004ff0:	601a      	str	r2, [r3, #0]
  }
  return p;
 8004ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3730      	adds	r7, #48	; 0x30
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	200061fc 	.word	0x200061fc

08005000 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800500c:	4b12      	ldr	r3, [pc, #72]	; (8005058 <ethernetif_input+0x58>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f04f 31ff 	mov.w	r1, #4294967295
 8005014:	4618      	mov	r0, r3
 8005016:	f000 fa87 	bl	8005528 <osSemaphoreWait>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1f5      	bne.n	800500c <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8005020:	480e      	ldr	r0, [pc, #56]	; (800505c <ethernetif_input+0x5c>)
 8005022:	f00c fd73 	bl	8011b0c <sys_mutex_lock>
        p = low_level_input( netif );
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f7ff ff38 	bl	8004e9c <low_level_input>
 800502c:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00a      	beq.n	800504a <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	68f9      	ldr	r1, [r7, #12]
 800503a:	68b8      	ldr	r0, [r7, #8]
 800503c:	4798      	blx	r3
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8005044:	68b8      	ldr	r0, [r7, #8]
 8005046:	f004 fb37 	bl	80096b8 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800504a:	4804      	ldr	r0, [pc, #16]	; (800505c <ethernetif_input+0x5c>)
 800504c:	f00c fd6d 	bl	8011b2a <sys_mutex_unlock>
      } while(p!=NULL);
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1e4      	bne.n	8005020 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005056:	e7d9      	b.n	800500c <ethernetif_input+0xc>
 8005058:	2000055c 	.word	0x2000055c
 800505c:	20007a14 	.word	0x20007a14

08005060 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d106      	bne.n	800507c <ethernetif_init+0x1c>
 800506e:	4b0e      	ldr	r3, [pc, #56]	; (80050a8 <ethernetif_init+0x48>)
 8005070:	f240 2235 	movw	r2, #565	; 0x235
 8005074:	490d      	ldr	r1, [pc, #52]	; (80050ac <ethernetif_init+0x4c>)
 8005076:	480e      	ldr	r0, [pc, #56]	; (80050b0 <ethernetif_init+0x50>)
 8005078:	f00c ff44 	bl	8011f04 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2273      	movs	r2, #115	; 0x73
 8005080:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2274      	movs	r2, #116	; 0x74
 8005088:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a09      	ldr	r2, [pc, #36]	; (80050b4 <ethernetif_init+0x54>)
 8005090:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a08      	ldr	r2, [pc, #32]	; (80050b8 <ethernetif_init+0x58>)
 8005096:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7ff fd89 	bl	8004bb0 <low_level_init>

  return ERR_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	08012cc8 	.word	0x08012cc8
 80050ac:	08012ce4 	.word	0x08012ce4
 80050b0:	08012cf4 	.word	0x08012cf4
 80050b4:	0800fd99 	.word	0x0800fd99
 80050b8:	08004d61 	.word	0x08004d61

080050bc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80050c0:	f7fc fa66 	bl	8001590 <HAL_GetTick>
 80050c4:	4603      	mov	r3, r0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	bd80      	pop	{r7, pc}
	...

080050cc <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80050d4:	2300      	movs	r3, #0
 80050d6:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80050dc:	f107 0308 	add.w	r3, r7, #8
 80050e0:	461a      	mov	r2, r3
 80050e2:	2101      	movs	r1, #1
 80050e4:	4816      	ldr	r0, [pc, #88]	; (8005140 <ethernetif_set_link+0x74>)
 80050e6:	f7fc ffab 	bl	8002040 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80050fa:	f003 0304 	and.w	r3, r3, #4
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d108      	bne.n	8005114 <ethernetif_set_link+0x48>
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d005      	beq.n	8005114 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4618      	mov	r0, r3
 800510e:	f003 fea5 	bl	8008e5c <netif_set_link_up>
 8005112:	e011      	b.n	8005138 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800511c:	089b      	lsrs	r3, r3, #2
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	d007      	beq.n	8005138 <ethernetif_set_link+0x6c>
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d104      	bne.n	8005138 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4618      	mov	r0, r3
 8005134:	f003 febd 	bl	8008eb2 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8005138:	20c8      	movs	r0, #200	; 0xc8
 800513a:	f000 f913 	bl	8005364 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800513e:	e7cd      	b.n	80050dc <ethernetif_set_link+0x10>
 8005140:	200061fc 	.word	0x200061fc

08005144 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800514c:	2300      	movs	r3, #0
 800514e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005150:	2300      	movs	r3, #0
 8005152:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800515a:	089b      	lsrs	r3, r3, #2
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d05d      	beq.n	8005222 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005166:	4b34      	ldr	r3, [pc, #208]	; (8005238 <ethernetif_update_config+0xf4>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d03f      	beq.n	80051ee <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800516e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005172:	2100      	movs	r1, #0
 8005174:	4830      	ldr	r0, [pc, #192]	; (8005238 <ethernetif_update_config+0xf4>)
 8005176:	f7fc ffcb 	bl	8002110 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800517a:	f7fc fa09 	bl	8001590 <HAL_GetTick>
 800517e:	4603      	mov	r3, r0
 8005180:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005182:	f107 0308 	add.w	r3, r7, #8
 8005186:	461a      	mov	r2, r3
 8005188:	2101      	movs	r1, #1
 800518a:	482b      	ldr	r0, [pc, #172]	; (8005238 <ethernetif_update_config+0xf4>)
 800518c:	f7fc ff58 	bl	8002040 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005190:	f7fc f9fe 	bl	8001590 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800519e:	d828      	bhi.n	80051f2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f003 0320 	and.w	r3, r3, #32
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0eb      	beq.n	8005182 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80051aa:	f107 0308 	add.w	r3, r7, #8
 80051ae:	461a      	mov	r2, r3
 80051b0:	2110      	movs	r1, #16
 80051b2:	4821      	ldr	r0, [pc, #132]	; (8005238 <ethernetif_update_config+0xf4>)
 80051b4:	f7fc ff44 	bl	8002040 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	f003 0304 	and.w	r3, r3, #4
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d004      	beq.n	80051cc <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80051c2:	4b1d      	ldr	r3, [pc, #116]	; (8005238 <ethernetif_update_config+0xf4>)
 80051c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051c8:	60da      	str	r2, [r3, #12]
 80051ca:	e002      	b.n	80051d2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80051cc:	4b1a      	ldr	r3, [pc, #104]	; (8005238 <ethernetif_update_config+0xf4>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80051dc:	4b16      	ldr	r3, [pc, #88]	; (8005238 <ethernetif_update_config+0xf4>)
 80051de:	2200      	movs	r2, #0
 80051e0:	609a      	str	r2, [r3, #8]
 80051e2:	e016      	b.n	8005212 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80051e4:	4b14      	ldr	r3, [pc, #80]	; (8005238 <ethernetif_update_config+0xf4>)
 80051e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80051ea:	609a      	str	r2, [r3, #8]
 80051ec:	e011      	b.n	8005212 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80051ee:	bf00      	nop
 80051f0:	e000      	b.n	80051f4 <ethernetif_update_config+0xb0>
          goto error;
 80051f2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80051f4:	4b10      	ldr	r3, [pc, #64]	; (8005238 <ethernetif_update_config+0xf4>)
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	08db      	lsrs	r3, r3, #3
 80051fa:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80051fc:	4b0e      	ldr	r3, [pc, #56]	; (8005238 <ethernetif_update_config+0xf4>)
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	085b      	lsrs	r3, r3, #1
 8005202:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005204:	4313      	orrs	r3, r2
 8005206:	b29b      	uxth	r3, r3
 8005208:	461a      	mov	r2, r3
 800520a:	2100      	movs	r1, #0
 800520c:	480a      	ldr	r0, [pc, #40]	; (8005238 <ethernetif_update_config+0xf4>)
 800520e:	f7fc ff7f 	bl	8002110 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8005212:	2100      	movs	r1, #0
 8005214:	4808      	ldr	r0, [pc, #32]	; (8005238 <ethernetif_update_config+0xf4>)
 8005216:	f7fd f83f 	bl	8002298 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800521a:	4807      	ldr	r0, [pc, #28]	; (8005238 <ethernetif_update_config+0xf4>)
 800521c:	f7fc ffde 	bl	80021dc <HAL_ETH_Start>
 8005220:	e002      	b.n	8005228 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005222:	4805      	ldr	r0, [pc, #20]	; (8005238 <ethernetif_update_config+0xf4>)
 8005224:	f7fd f809 	bl	800223a <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f807 	bl	800523c <ethernetif_notify_conn_changed>
}
 800522e:	bf00      	nop
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	200061fc 	.word	0x200061fc

0800523c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	bc80      	pop	{r7}
 800524c:	4770      	bx	lr

0800524e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800524e:	b480      	push	{r7}
 8005250:	b085      	sub	sp, #20
 8005252:	af00      	add	r7, sp, #0
 8005254:	4603      	mov	r3, r0
 8005256:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005258:	2300      	movs	r3, #0
 800525a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800525c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005260:	2b84      	cmp	r3, #132	; 0x84
 8005262:	d005      	beq.n	8005270 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005264:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	3303      	adds	r3, #3
 800526e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005270:	68fb      	ldr	r3, [r7, #12]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	bc80      	pop	{r7}
 800527a:	4770      	bx	lr

0800527c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005282:	f3ef 8305 	mrs	r3, IPSR
 8005286:	607b      	str	r3, [r7, #4]
  return(result);
 8005288:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800528a:	2b00      	cmp	r3, #0
 800528c:	bf14      	ite	ne
 800528e:	2301      	movne	r3, #1
 8005290:	2300      	moveq	r3, #0
 8005292:	b2db      	uxtb	r3, r3
}
 8005294:	4618      	mov	r0, r3
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	bc80      	pop	{r7}
 800529c:	4770      	bx	lr

0800529e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80052a2:	f001 fc67 	bl	8006b74 <vTaskStartScheduler>
  
  return osOK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	bd80      	pop	{r7, pc}

080052ac <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80052b0:	f7ff ffe4 	bl	800527c <inHandlerMode>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80052ba:	f001 fd7d 	bl	8006db8 <xTaskGetTickCountFromISR>
 80052be:	4603      	mov	r3, r0
 80052c0:	e002      	b.n	80052c8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80052c2:	f001 fd6b 	bl	8006d9c <xTaskGetTickCount>
 80052c6:	4603      	mov	r3, r0
  }
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	bd80      	pop	{r7, pc}

080052cc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80052cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ce:	b089      	sub	sp, #36	; 0x24
 80052d0:	af04      	add	r7, sp, #16
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d020      	beq.n	8005320 <osThreadCreate+0x54>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d01c      	beq.n	8005320 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685c      	ldr	r4, [r3, #4]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681d      	ldr	r5, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	691e      	ldr	r6, [r3, #16]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff ffa8 	bl	800524e <makeFreeRtosPriority>
 80052fe:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005308:	9202      	str	r2, [sp, #8]
 800530a:	9301      	str	r3, [sp, #4]
 800530c:	9100      	str	r1, [sp, #0]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	4632      	mov	r2, r6
 8005312:	4629      	mov	r1, r5
 8005314:	4620      	mov	r0, r4
 8005316:	f001 fa58 	bl	80067ca <xTaskCreateStatic>
 800531a:	4603      	mov	r3, r0
 800531c:	60fb      	str	r3, [r7, #12]
 800531e:	e01c      	b.n	800535a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685c      	ldr	r4, [r3, #4]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800532c:	b29e      	uxth	r6, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005334:	4618      	mov	r0, r3
 8005336:	f7ff ff8a 	bl	800524e <makeFreeRtosPriority>
 800533a:	4602      	mov	r2, r0
 800533c:	f107 030c 	add.w	r3, r7, #12
 8005340:	9301      	str	r3, [sp, #4]
 8005342:	9200      	str	r2, [sp, #0]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	4632      	mov	r2, r6
 8005348:	4629      	mov	r1, r5
 800534a:	4620      	mov	r0, r4
 800534c:	f001 fa99 	bl	8006882 <xTaskCreate>
 8005350:	4603      	mov	r3, r0
 8005352:	2b01      	cmp	r3, #1
 8005354:	d001      	beq.n	800535a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005356:	2300      	movs	r3, #0
 8005358:	e000      	b.n	800535c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800535a:	68fb      	ldr	r3, [r7, #12]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005364 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <osDelay+0x16>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	e000      	b.n	800537c <osDelay+0x18>
 800537a:	2301      	movs	r3, #1
 800537c:	4618      	mov	r0, r3
 800537e:	f001 fbc5 	bl	8006b0c <vTaskDelay>
  
  return osOK;
 8005382:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d007      	beq.n	80053ac <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	4619      	mov	r1, r3
 80053a2:	2001      	movs	r0, #1
 80053a4:	f000 fc3e 	bl	8005c24 <xQueueCreateMutexStatic>
 80053a8:	4603      	mov	r3, r0
 80053aa:	e003      	b.n	80053b4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80053ac:	2001      	movs	r0, #1
 80053ae:	f000 fc21 	bl	8005bf4 <xQueueCreateMutex>
 80053b2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80053c6:	2300      	movs	r3, #0
 80053c8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d101      	bne.n	80053d4 <osMutexWait+0x18>
    return osErrorParameter;
 80053d0:	2380      	movs	r3, #128	; 0x80
 80053d2:	e03a      	b.n	800544a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80053d4:	2300      	movs	r3, #0
 80053d6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053de:	d103      	bne.n	80053e8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80053e0:	f04f 33ff 	mov.w	r3, #4294967295
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	e009      	b.n	80053fc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d006      	beq.n	80053fc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <osMutexWait+0x40>
      ticks = 1;
 80053f8:	2301      	movs	r3, #1
 80053fa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80053fc:	f7ff ff3e 	bl	800527c <inHandlerMode>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d017      	beq.n	8005436 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005406:	f107 0308 	add.w	r3, r7, #8
 800540a:	461a      	mov	r2, r3
 800540c:	2100      	movs	r1, #0
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f001 f834 	bl	800647c <xQueueReceiveFromISR>
 8005414:	4603      	mov	r3, r0
 8005416:	2b01      	cmp	r3, #1
 8005418:	d001      	beq.n	800541e <osMutexWait+0x62>
      return osErrorOS;
 800541a:	23ff      	movs	r3, #255	; 0xff
 800541c:	e015      	b.n	800544a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d011      	beq.n	8005448 <osMutexWait+0x8c>
 8005424:	4b0b      	ldr	r3, [pc, #44]	; (8005454 <osMutexWait+0x98>)
 8005426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	e008      	b.n	8005448 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005436:	68f9      	ldr	r1, [r7, #12]
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 ff13 	bl	8006264 <xQueueSemaphoreTake>
 800543e:	4603      	mov	r3, r0
 8005440:	2b01      	cmp	r3, #1
 8005442:	d001      	beq.n	8005448 <osMutexWait+0x8c>
    return osErrorOS;
 8005444:	23ff      	movs	r3, #255	; 0xff
 8005446:	e000      	b.n	800544a <osMutexWait+0x8e>
  }
  
  return osOK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	e000ed04 	.word	0xe000ed04

08005458 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005460:	2300      	movs	r3, #0
 8005462:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005464:	2300      	movs	r3, #0
 8005466:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005468:	f7ff ff08 	bl	800527c <inHandlerMode>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d016      	beq.n	80054a0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005472:	f107 0308 	add.w	r3, r7, #8
 8005476:	4619      	mov	r1, r3
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 fd85 	bl	8005f88 <xQueueGiveFromISR>
 800547e:	4603      	mov	r3, r0
 8005480:	2b01      	cmp	r3, #1
 8005482:	d001      	beq.n	8005488 <osMutexRelease+0x30>
      return osErrorOS;
 8005484:	23ff      	movs	r3, #255	; 0xff
 8005486:	e017      	b.n	80054b8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d013      	beq.n	80054b6 <osMutexRelease+0x5e>
 800548e:	4b0c      	ldr	r3, [pc, #48]	; (80054c0 <osMutexRelease+0x68>)
 8005490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	e00a      	b.n	80054b6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80054a0:	2300      	movs	r3, #0
 80054a2:	2200      	movs	r2, #0
 80054a4:	2100      	movs	r1, #0
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fbd8 	bl	8005c5c <xQueueGenericSend>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d001      	beq.n	80054b6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80054b2:	23ff      	movs	r3, #255	; 0xff
 80054b4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80054b6:	68fb      	ldr	r3, [r7, #12]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	e000ed04 	.word	0xe000ed04

080054c4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af02      	add	r7, sp, #8
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00f      	beq.n	80054f6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d10a      	bne.n	80054f2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2203      	movs	r2, #3
 80054e2:	9200      	str	r2, [sp, #0]
 80054e4:	2200      	movs	r2, #0
 80054e6:	2100      	movs	r1, #0
 80054e8:	2001      	movs	r0, #1
 80054ea:	f000 fa95 	bl	8005a18 <xQueueGenericCreateStatic>
 80054ee:	4603      	mov	r3, r0
 80054f0:	e016      	b.n	8005520 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80054f2:	2300      	movs	r3, #0
 80054f4:	e014      	b.n	8005520 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d110      	bne.n	800551e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80054fc:	2203      	movs	r2, #3
 80054fe:	2100      	movs	r1, #0
 8005500:	2001      	movs	r0, #1
 8005502:	f000 fb00 	bl	8005b06 <xQueueGenericCreate>
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d005      	beq.n	800551a <osSemaphoreCreate+0x56>
 800550e:	2300      	movs	r3, #0
 8005510:	2200      	movs	r2, #0
 8005512:	2100      	movs	r1, #0
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 fba1 	bl	8005c5c <xQueueGenericSend>
      return sema;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	e000      	b.n	8005520 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800551e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005532:	2300      	movs	r3, #0
 8005534:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800553c:	2380      	movs	r3, #128	; 0x80
 800553e:	e03a      	b.n	80055b6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554a:	d103      	bne.n	8005554 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800554c:	f04f 33ff 	mov.w	r3, #4294967295
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	e009      	b.n	8005568 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d006      	beq.n	8005568 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <osSemaphoreWait+0x40>
      ticks = 1;
 8005564:	2301      	movs	r3, #1
 8005566:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005568:	f7ff fe88 	bl	800527c <inHandlerMode>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d017      	beq.n	80055a2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005572:	f107 0308 	add.w	r3, r7, #8
 8005576:	461a      	mov	r2, r3
 8005578:	2100      	movs	r1, #0
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 ff7e 	bl	800647c <xQueueReceiveFromISR>
 8005580:	4603      	mov	r3, r0
 8005582:	2b01      	cmp	r3, #1
 8005584:	d001      	beq.n	800558a <osSemaphoreWait+0x62>
      return osErrorOS;
 8005586:	23ff      	movs	r3, #255	; 0xff
 8005588:	e015      	b.n	80055b6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d011      	beq.n	80055b4 <osSemaphoreWait+0x8c>
 8005590:	4b0b      	ldr	r3, [pc, #44]	; (80055c0 <osSemaphoreWait+0x98>)
 8005592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	e008      	b.n	80055b4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80055a2:	68f9      	ldr	r1, [r7, #12]
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 fe5d 	bl	8006264 <xQueueSemaphoreTake>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d001      	beq.n	80055b4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80055b0:	23ff      	movs	r3, #255	; 0xff
 80055b2:	e000      	b.n	80055b6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	e000ed04 	.word	0xe000ed04

080055c4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80055d0:	2300      	movs	r3, #0
 80055d2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80055d4:	f7ff fe52 	bl	800527c <inHandlerMode>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d016      	beq.n	800560c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80055de:	f107 0308 	add.w	r3, r7, #8
 80055e2:	4619      	mov	r1, r3
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 fccf 	bl	8005f88 <xQueueGiveFromISR>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d001      	beq.n	80055f4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80055f0:	23ff      	movs	r3, #255	; 0xff
 80055f2:	e017      	b.n	8005624 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d013      	beq.n	8005622 <osSemaphoreRelease+0x5e>
 80055fa:	4b0c      	ldr	r3, [pc, #48]	; (800562c <osSemaphoreRelease+0x68>)
 80055fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	e00a      	b.n	8005622 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800560c:	2300      	movs	r3, #0
 800560e:	2200      	movs	r2, #0
 8005610:	2100      	movs	r1, #0
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 fb22 	bl	8005c5c <xQueueGenericSend>
 8005618:	4603      	mov	r3, r0
 800561a:	2b01      	cmp	r3, #1
 800561c:	d001      	beq.n	8005622 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800561e:	23ff      	movs	r3, #255	; 0xff
 8005620:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005622:	68fb      	ldr	r3, [r7, #12]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	e000ed04 	.word	0xe000ed04

08005630 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005630:	b590      	push	{r4, r7, lr}
 8005632:	b085      	sub	sp, #20
 8005634:	af02      	add	r7, sp, #8
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d011      	beq.n	8005666 <osMessageCreate+0x36>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00d      	beq.n	8005666 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6818      	ldr	r0, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6859      	ldr	r1, [r3, #4]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689a      	ldr	r2, [r3, #8]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	2400      	movs	r4, #0
 800565c:	9400      	str	r4, [sp, #0]
 800565e:	f000 f9db 	bl	8005a18 <xQueueGenericCreateStatic>
 8005662:	4603      	mov	r3, r0
 8005664:	e008      	b.n	8005678 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6818      	ldr	r0, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	4619      	mov	r1, r3
 8005672:	f000 fa48 	bl	8005b06 <xQueueGenericCreate>
 8005676:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005678:	4618      	mov	r0, r3
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	bd90      	pop	{r4, r7, pc}

08005680 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800568c:	2300      	movs	r3, #0
 800568e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <osMessagePut+0x1e>
    ticks = 1;
 800569a:	2301      	movs	r3, #1
 800569c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800569e:	f7ff fded 	bl	800527c <inHandlerMode>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d018      	beq.n	80056da <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80056a8:	f107 0210 	add.w	r2, r7, #16
 80056ac:	f107 0108 	add.w	r1, r7, #8
 80056b0:	2300      	movs	r3, #0
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 fbd0 	bl	8005e58 <xQueueGenericSendFromISR>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d001      	beq.n	80056c2 <osMessagePut+0x42>
      return osErrorOS;
 80056be:	23ff      	movs	r3, #255	; 0xff
 80056c0:	e018      	b.n	80056f4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d014      	beq.n	80056f2 <osMessagePut+0x72>
 80056c8:	4b0c      	ldr	r3, [pc, #48]	; (80056fc <osMessagePut+0x7c>)
 80056ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	e00b      	b.n	80056f2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80056da:	f107 0108 	add.w	r1, r7, #8
 80056de:	2300      	movs	r3, #0
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f000 faba 	bl	8005c5c <xQueueGenericSend>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d001      	beq.n	80056f2 <osMessagePut+0x72>
      return osErrorOS;
 80056ee:	23ff      	movs	r3, #255	; 0xff
 80056f0:	e000      	b.n	80056f4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3718      	adds	r7, #24
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	e000ed04 	.word	0xe000ed04

08005700 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005700:	b590      	push	{r4, r7, lr}
 8005702:	b08b      	sub	sp, #44	; 0x2c
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005710:	2300      	movs	r3, #0
 8005712:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10a      	bne.n	8005730 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800571a:	2380      	movs	r3, #128	; 0x80
 800571c:	617b      	str	r3, [r7, #20]
    return event;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	461c      	mov	r4, r3
 8005722:	f107 0314 	add.w	r3, r7, #20
 8005726:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800572a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800572e:	e054      	b.n	80057da <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005730:	2300      	movs	r3, #0
 8005732:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005734:	2300      	movs	r3, #0
 8005736:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573e:	d103      	bne.n	8005748 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005740:	f04f 33ff 	mov.w	r3, #4294967295
 8005744:	627b      	str	r3, [r7, #36]	; 0x24
 8005746:	e009      	b.n	800575c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d006      	beq.n	800575c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	2b00      	cmp	r3, #0
 8005756:	d101      	bne.n	800575c <osMessageGet+0x5c>
      ticks = 1;
 8005758:	2301      	movs	r3, #1
 800575a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800575c:	f7ff fd8e 	bl	800527c <inHandlerMode>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d01c      	beq.n	80057a0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005766:	f107 0220 	add.w	r2, r7, #32
 800576a:	f107 0314 	add.w	r3, r7, #20
 800576e:	3304      	adds	r3, #4
 8005770:	4619      	mov	r1, r3
 8005772:	68b8      	ldr	r0, [r7, #8]
 8005774:	f000 fe82 	bl	800647c <xQueueReceiveFromISR>
 8005778:	4603      	mov	r3, r0
 800577a:	2b01      	cmp	r3, #1
 800577c:	d102      	bne.n	8005784 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800577e:	2310      	movs	r3, #16
 8005780:	617b      	str	r3, [r7, #20]
 8005782:	e001      	b.n	8005788 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005784:	2300      	movs	r3, #0
 8005786:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d01d      	beq.n	80057ca <osMessageGet+0xca>
 800578e:	4b15      	ldr	r3, [pc, #84]	; (80057e4 <osMessageGet+0xe4>)
 8005790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	e014      	b.n	80057ca <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80057a0:	f107 0314 	add.w	r3, r7, #20
 80057a4:	3304      	adds	r3, #4
 80057a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a8:	4619      	mov	r1, r3
 80057aa:	68b8      	ldr	r0, [r7, #8]
 80057ac:	f000 fc7a 	bl	80060a4 <xQueueReceive>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d102      	bne.n	80057bc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80057b6:	2310      	movs	r3, #16
 80057b8:	617b      	str	r3, [r7, #20]
 80057ba:	e006      	b.n	80057ca <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <osMessageGet+0xc6>
 80057c2:	2300      	movs	r3, #0
 80057c4:	e000      	b.n	80057c8 <osMessageGet+0xc8>
 80057c6:	2340      	movs	r3, #64	; 0x40
 80057c8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	461c      	mov	r4, r3
 80057ce:	f107 0314 	add.w	r3, r7, #20
 80057d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80057d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	372c      	adds	r7, #44	; 0x2c
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd90      	pop	{r4, r7, pc}
 80057e2:	bf00      	nop
 80057e4:	e000ed04 	.word	0xe000ed04

080057e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f103 0208 	add.w	r2, r3, #8
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005800:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f103 0208 	add.w	r2, r3, #8
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f103 0208 	add.w	r2, r3, #8
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	bc80      	pop	{r7}
 8005824:	4770      	bx	lr

08005826 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005826:	b480      	push	{r7}
 8005828:	b083      	sub	sp, #12
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	bc80      	pop	{r7}
 800583c:	4770      	bx	lr

0800583e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800583e:	b480      	push	{r7}
 8005840:	b085      	sub	sp, #20
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	689a      	ldr	r2, [r3, #8]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	601a      	str	r2, [r3, #0]
}
 800587a:	bf00      	nop
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	bc80      	pop	{r7}
 8005882:	4770      	bx	lr

08005884 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589a:	d103      	bne.n	80058a4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	e00c      	b.n	80058be <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3308      	adds	r3, #8
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	e002      	b.n	80058b2 <vListInsert+0x2e>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	60fb      	str	r3, [r7, #12]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d2f6      	bcs.n	80058ac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	601a      	str	r2, [r3, #0]
}
 80058ea:	bf00      	nop
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bc80      	pop	{r7}
 80058f2:	4770      	bx	lr

080058f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	6892      	ldr	r2, [r2, #8]
 800590a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	6852      	ldr	r2, [r2, #4]
 8005914:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	429a      	cmp	r2, r3
 800591e:	d103      	bne.n	8005928 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689a      	ldr	r2, [r3, #8]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	1e5a      	subs	r2, r3, #1
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3714      	adds	r7, #20
 8005940:	46bd      	mov	sp, r7
 8005942:	bc80      	pop	{r7}
 8005944:	4770      	bx	lr
	...

08005948 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10a      	bne.n	8005972 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800595c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800596e:	bf00      	nop
 8005970:	e7fe      	b.n	8005970 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005972:	f002 f873 	bl	8007a5c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597e:	68f9      	ldr	r1, [r7, #12]
 8005980:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005982:	fb01 f303 	mul.w	r3, r1, r3
 8005986:	441a      	add	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a2:	3b01      	subs	r3, #1
 80059a4:	68f9      	ldr	r1, [r7, #12]
 80059a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80059a8:	fb01 f303 	mul.w	r3, r1, r3
 80059ac:	441a      	add	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	22ff      	movs	r2, #255	; 0xff
 80059b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	22ff      	movs	r2, #255	; 0xff
 80059be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d114      	bne.n	80059f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d01a      	beq.n	8005a06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	3310      	adds	r3, #16
 80059d4:	4618      	mov	r0, r3
 80059d6:	f001 fb45 	bl	8007064 <xTaskRemoveFromEventList>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d012      	beq.n	8005a06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80059e0:	4b0c      	ldr	r3, [pc, #48]	; (8005a14 <xQueueGenericReset+0xcc>)
 80059e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059e6:	601a      	str	r2, [r3, #0]
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	e009      	b.n	8005a06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	3310      	adds	r3, #16
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff fef6 	bl	80057e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	3324      	adds	r3, #36	; 0x24
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7ff fef1 	bl	80057e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005a06:	f002 f859 	bl	8007abc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005a0a:	2301      	movs	r3, #1
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	e000ed04 	.word	0xe000ed04

08005a18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08e      	sub	sp, #56	; 0x38
 8005a1c:	af02      	add	r7, sp, #8
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
 8005a24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10a      	bne.n	8005a42 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a3e:	bf00      	nop
 8005a40:	e7fe      	b.n	8005a40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10a      	bne.n	8005a5e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4c:	f383 8811 	msr	BASEPRI, r3
 8005a50:	f3bf 8f6f 	isb	sy
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a5a:	bf00      	nop
 8005a5c:	e7fe      	b.n	8005a5c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d002      	beq.n	8005a6a <xQueueGenericCreateStatic+0x52>
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <xQueueGenericCreateStatic+0x56>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e000      	b.n	8005a70 <xQueueGenericCreateStatic+0x58>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10a      	bne.n	8005a8a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a78:	f383 8811 	msr	BASEPRI, r3
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	623b      	str	r3, [r7, #32]
}
 8005a86:	bf00      	nop
 8005a88:	e7fe      	b.n	8005a88 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d102      	bne.n	8005a96 <xQueueGenericCreateStatic+0x7e>
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <xQueueGenericCreateStatic+0x82>
 8005a96:	2301      	movs	r3, #1
 8005a98:	e000      	b.n	8005a9c <xQueueGenericCreateStatic+0x84>
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10a      	bne.n	8005ab6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa4:	f383 8811 	msr	BASEPRI, r3
 8005aa8:	f3bf 8f6f 	isb	sy
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	61fb      	str	r3, [r7, #28]
}
 8005ab2:	bf00      	nop
 8005ab4:	e7fe      	b.n	8005ab4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005ab6:	2348      	movs	r3, #72	; 0x48
 8005ab8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2b48      	cmp	r3, #72	; 0x48
 8005abe:	d00a      	beq.n	8005ad6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	61bb      	str	r3, [r7, #24]
}
 8005ad2:	bf00      	nop
 8005ad4:	e7fe      	b.n	8005ad4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00d      	beq.n	8005afc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ae8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	4613      	mov	r3, r2
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	68b9      	ldr	r1, [r7, #8]
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 f843 	bl	8005b82 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3730      	adds	r7, #48	; 0x30
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b08a      	sub	sp, #40	; 0x28
 8005b0a:	af02      	add	r7, sp, #8
 8005b0c:	60f8      	str	r0, [r7, #12]
 8005b0e:	60b9      	str	r1, [r7, #8]
 8005b10:	4613      	mov	r3, r2
 8005b12:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10a      	bne.n	8005b30 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	613b      	str	r3, [r7, #16]
}
 8005b2c:	bf00      	nop
 8005b2e:	e7fe      	b.n	8005b2e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d102      	bne.n	8005b3c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005b36:	2300      	movs	r3, #0
 8005b38:	61fb      	str	r3, [r7, #28]
 8005b3a:	e004      	b.n	8005b46 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	fb02 f303 	mul.w	r3, r2, r3
 8005b44:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	3348      	adds	r3, #72	; 0x48
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f002 f886 	bl	8007c5c <pvPortMalloc>
 8005b50:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00f      	beq.n	8005b78 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	3348      	adds	r3, #72	; 0x48
 8005b5c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b66:	79fa      	ldrb	r2, [r7, #7]
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	68b9      	ldr	r1, [r7, #8]
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 f805 	bl	8005b82 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005b78:	69bb      	ldr	r3, [r7, #24]
	}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3720      	adds	r7, #32
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b084      	sub	sp, #16
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	60b9      	str	r1, [r7, #8]
 8005b8c:	607a      	str	r2, [r7, #4]
 8005b8e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d103      	bne.n	8005b9e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	69ba      	ldr	r2, [r7, #24]
 8005b9a:	601a      	str	r2, [r3, #0]
 8005b9c:	e002      	b.n	8005ba4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005bb0:	2101      	movs	r1, #1
 8005bb2:	69b8      	ldr	r0, [r7, #24]
 8005bb4:	f7ff fec8 	bl	8005948 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005bb8:	bf00      	nop
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00e      	beq.n	8005bec <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005be0:	2300      	movs	r3, #0
 8005be2:	2200      	movs	r2, #0
 8005be4:	2100      	movs	r1, #0
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f838 	bl	8005c5c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005bec:	bf00      	nop
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	617b      	str	r3, [r7, #20]
 8005c02:	2300      	movs	r3, #0
 8005c04:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005c06:	79fb      	ldrb	r3, [r7, #7]
 8005c08:	461a      	mov	r2, r3
 8005c0a:	6939      	ldr	r1, [r7, #16]
 8005c0c:	6978      	ldr	r0, [r7, #20]
 8005c0e:	f7ff ff7a 	bl	8005b06 <xQueueGenericCreate>
 8005c12:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f7ff ffd3 	bl	8005bc0 <prvInitialiseMutex>

		return pxNewQueue;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
	}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b088      	sub	sp, #32
 8005c28:	af02      	add	r7, sp, #8
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	6039      	str	r1, [r7, #0]
 8005c2e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005c30:	2301      	movs	r3, #1
 8005c32:	617b      	str	r3, [r7, #20]
 8005c34:	2300      	movs	r3, #0
 8005c36:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005c38:	79fb      	ldrb	r3, [r7, #7]
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	6939      	ldr	r1, [r7, #16]
 8005c42:	6978      	ldr	r0, [r7, #20]
 8005c44:	f7ff fee8 	bl	8005a18 <xQueueGenericCreateStatic>
 8005c48:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f7ff ffb8 	bl	8005bc0 <prvInitialiseMutex>

		return pxNewQueue;
 8005c50:	68fb      	ldr	r3, [r7, #12]
	}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3718      	adds	r7, #24
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b08e      	sub	sp, #56	; 0x38
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
 8005c68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10a      	bne.n	8005c8e <xQueueGenericSend+0x32>
	__asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c8a:	bf00      	nop
 8005c8c:	e7fe      	b.n	8005c8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d103      	bne.n	8005c9c <xQueueGenericSend+0x40>
 8005c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <xQueueGenericSend+0x44>
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e000      	b.n	8005ca2 <xQueueGenericSend+0x46>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10a      	bne.n	8005cbc <xQueueGenericSend+0x60>
	__asm volatile
 8005ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005caa:	f383 8811 	msr	BASEPRI, r3
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005cb8:	bf00      	nop
 8005cba:	e7fe      	b.n	8005cba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d103      	bne.n	8005cca <xQueueGenericSend+0x6e>
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d101      	bne.n	8005cce <xQueueGenericSend+0x72>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e000      	b.n	8005cd0 <xQueueGenericSend+0x74>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10a      	bne.n	8005cea <xQueueGenericSend+0x8e>
	__asm volatile
 8005cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd8:	f383 8811 	msr	BASEPRI, r3
 8005cdc:	f3bf 8f6f 	isb	sy
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	623b      	str	r3, [r7, #32]
}
 8005ce6:	bf00      	nop
 8005ce8:	e7fe      	b.n	8005ce8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cea:	f001 fb7f 	bl	80073ec <xTaskGetSchedulerState>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d102      	bne.n	8005cfa <xQueueGenericSend+0x9e>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <xQueueGenericSend+0xa2>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e000      	b.n	8005d00 <xQueueGenericSend+0xa4>
 8005cfe:	2300      	movs	r3, #0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10a      	bne.n	8005d1a <xQueueGenericSend+0xbe>
	__asm volatile
 8005d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d08:	f383 8811 	msr	BASEPRI, r3
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	61fb      	str	r3, [r7, #28]
}
 8005d16:	bf00      	nop
 8005d18:	e7fe      	b.n	8005d18 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d1a:	f001 fe9f 	bl	8007a5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d302      	bcc.n	8005d30 <xQueueGenericSend+0xd4>
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d129      	bne.n	8005d84 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d30:	683a      	ldr	r2, [r7, #0]
 8005d32:	68b9      	ldr	r1, [r7, #8]
 8005d34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d36:	f000 fc38 	bl	80065aa <prvCopyDataToQueue>
 8005d3a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d010      	beq.n	8005d66 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d46:	3324      	adds	r3, #36	; 0x24
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f001 f98b 	bl	8007064 <xTaskRemoveFromEventList>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d013      	beq.n	8005d7c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d54:	4b3f      	ldr	r3, [pc, #252]	; (8005e54 <xQueueGenericSend+0x1f8>)
 8005d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	f3bf 8f6f 	isb	sy
 8005d64:	e00a      	b.n	8005d7c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d007      	beq.n	8005d7c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d6c:	4b39      	ldr	r3, [pc, #228]	; (8005e54 <xQueueGenericSend+0x1f8>)
 8005d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d7c:	f001 fe9e 	bl	8007abc <vPortExitCritical>
				return pdPASS;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e063      	b.n	8005e4c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d103      	bne.n	8005d92 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d8a:	f001 fe97 	bl	8007abc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	e05c      	b.n	8005e4c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d106      	bne.n	8005da6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d98:	f107 0314 	add.w	r3, r7, #20
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f001 f9c3 	bl	8007128 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005da2:	2301      	movs	r3, #1
 8005da4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005da6:	f001 fe89 	bl	8007abc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005daa:	f000 ff4d 	bl	8006c48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005dae:	f001 fe55 	bl	8007a5c <vPortEnterCritical>
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005db8:	b25b      	sxtb	r3, r3
 8005dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dbe:	d103      	bne.n	8005dc8 <xQueueGenericSend+0x16c>
 8005dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dce:	b25b      	sxtb	r3, r3
 8005dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd4:	d103      	bne.n	8005dde <xQueueGenericSend+0x182>
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dde:	f001 fe6d 	bl	8007abc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005de2:	1d3a      	adds	r2, r7, #4
 8005de4:	f107 0314 	add.w	r3, r7, #20
 8005de8:	4611      	mov	r1, r2
 8005dea:	4618      	mov	r0, r3
 8005dec:	f001 f9b2 	bl	8007154 <xTaskCheckForTimeOut>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d124      	bne.n	8005e40 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005df6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005df8:	f000 fccf 	bl	800679a <prvIsQueueFull>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d018      	beq.n	8005e34 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e04:	3310      	adds	r3, #16
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	4611      	mov	r1, r2
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f001 f906 	bl	800701c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005e10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e12:	f000 fc5a 	bl	80066ca <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e16:	f000 ff25 	bl	8006c64 <xTaskResumeAll>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f47f af7c 	bne.w	8005d1a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005e22:	4b0c      	ldr	r3, [pc, #48]	; (8005e54 <xQueueGenericSend+0x1f8>)
 8005e24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e28:	601a      	str	r2, [r3, #0]
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	f3bf 8f6f 	isb	sy
 8005e32:	e772      	b.n	8005d1a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e36:	f000 fc48 	bl	80066ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e3a:	f000 ff13 	bl	8006c64 <xTaskResumeAll>
 8005e3e:	e76c      	b.n	8005d1a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e42:	f000 fc42 	bl	80066ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e46:	f000 ff0d 	bl	8006c64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e4a:	2300      	movs	r3, #0
		}
	}
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3738      	adds	r7, #56	; 0x38
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	e000ed04 	.word	0xe000ed04

08005e58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b08e      	sub	sp, #56	; 0x38
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10a      	bne.n	8005e86 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e74:	f383 8811 	msr	BASEPRI, r3
 8005e78:	f3bf 8f6f 	isb	sy
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e82:	bf00      	nop
 8005e84:	e7fe      	b.n	8005e84 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d103      	bne.n	8005e94 <xQueueGenericSendFromISR+0x3c>
 8005e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <xQueueGenericSendFromISR+0x40>
 8005e94:	2301      	movs	r3, #1
 8005e96:	e000      	b.n	8005e9a <xQueueGenericSendFromISR+0x42>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10a      	bne.n	8005eb4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	623b      	str	r3, [r7, #32]
}
 8005eb0:	bf00      	nop
 8005eb2:	e7fe      	b.n	8005eb2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d103      	bne.n	8005ec2 <xQueueGenericSendFromISR+0x6a>
 8005eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d101      	bne.n	8005ec6 <xQueueGenericSendFromISR+0x6e>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e000      	b.n	8005ec8 <xQueueGenericSendFromISR+0x70>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10a      	bne.n	8005ee2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	61fb      	str	r3, [r7, #28]
}
 8005ede:	bf00      	nop
 8005ee0:	e7fe      	b.n	8005ee0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ee2:	f001 fe7d 	bl	8007be0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005ee6:	f3ef 8211 	mrs	r2, BASEPRI
 8005eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eee:	f383 8811 	msr	BASEPRI, r3
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	61ba      	str	r2, [r7, #24]
 8005efc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005efe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f00:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d302      	bcc.n	8005f14 <xQueueGenericSendFromISR+0xbc>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d12c      	bne.n	8005f6e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f1e:	683a      	ldr	r2, [r7, #0]
 8005f20:	68b9      	ldr	r1, [r7, #8]
 8005f22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f24:	f000 fb41 	bl	80065aa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f28:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f30:	d112      	bne.n	8005f58 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d016      	beq.n	8005f68 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3c:	3324      	adds	r3, #36	; 0x24
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f001 f890 	bl	8007064 <xTaskRemoveFromEventList>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00e      	beq.n	8005f68 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00b      	beq.n	8005f68 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	601a      	str	r2, [r3, #0]
 8005f56:	e007      	b.n	8005f68 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	b25a      	sxtb	r2, r3
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005f6c:	e001      	b.n	8005f72 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	637b      	str	r3, [r7, #52]	; 0x34
 8005f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f74:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f7c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3738      	adds	r7, #56	; 0x38
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b08e      	sub	sp, #56	; 0x38
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10a      	bne.n	8005fb2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	623b      	str	r3, [r7, #32]
}
 8005fae:	bf00      	nop
 8005fb0:	e7fe      	b.n	8005fb0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00a      	beq.n	8005fd0 <xQueueGiveFromISR+0x48>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	61fb      	str	r3, [r7, #28]
}
 8005fcc:	bf00      	nop
 8005fce:	e7fe      	b.n	8005fce <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d103      	bne.n	8005fe0 <xQueueGiveFromISR+0x58>
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <xQueueGiveFromISR+0x5c>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e000      	b.n	8005fe6 <xQueueGiveFromISR+0x5e>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10a      	bne.n	8006000 <xQueueGiveFromISR+0x78>
	__asm volatile
 8005fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	61bb      	str	r3, [r7, #24]
}
 8005ffc:	bf00      	nop
 8005ffe:	e7fe      	b.n	8005ffe <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006000:	f001 fdee 	bl	8007be0 <vPortValidateInterruptPriority>
	__asm volatile
 8006004:	f3ef 8211 	mrs	r2, BASEPRI
 8006008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600c:	f383 8811 	msr	BASEPRI, r3
 8006010:	f3bf 8f6f 	isb	sy
 8006014:	f3bf 8f4f 	dsb	sy
 8006018:	617a      	str	r2, [r7, #20]
 800601a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800601c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800601e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006024:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800602a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800602c:	429a      	cmp	r2, r3
 800602e:	d22b      	bcs.n	8006088 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006032:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800603a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603c:	1c5a      	adds	r2, r3, #1
 800603e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006040:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006042:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604a:	d112      	bne.n	8006072 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	2b00      	cmp	r3, #0
 8006052:	d016      	beq.n	8006082 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006056:	3324      	adds	r3, #36	; 0x24
 8006058:	4618      	mov	r0, r3
 800605a:	f001 f803 	bl	8007064 <xTaskRemoveFromEventList>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00e      	beq.n	8006082 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00b      	beq.n	8006082 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2201      	movs	r2, #1
 800606e:	601a      	str	r2, [r3, #0]
 8006070:	e007      	b.n	8006082 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006072:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006076:	3301      	adds	r3, #1
 8006078:	b2db      	uxtb	r3, r3
 800607a:	b25a      	sxtb	r2, r3
 800607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006082:	2301      	movs	r3, #1
 8006084:	637b      	str	r3, [r7, #52]	; 0x34
 8006086:	e001      	b.n	800608c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006088:	2300      	movs	r3, #0
 800608a:	637b      	str	r3, [r7, #52]	; 0x34
 800608c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f383 8811 	msr	BASEPRI, r3
}
 8006096:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800609a:	4618      	mov	r0, r3
 800609c:	3738      	adds	r7, #56	; 0x38
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
	...

080060a4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b08c      	sub	sp, #48	; 0x30
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80060b0:	2300      	movs	r3, #0
 80060b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80060b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10a      	bne.n	80060d4 <xQueueReceive+0x30>
	__asm volatile
 80060be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	623b      	str	r3, [r7, #32]
}
 80060d0:	bf00      	nop
 80060d2:	e7fe      	b.n	80060d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d103      	bne.n	80060e2 <xQueueReceive+0x3e>
 80060da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <xQueueReceive+0x42>
 80060e2:	2301      	movs	r3, #1
 80060e4:	e000      	b.n	80060e8 <xQueueReceive+0x44>
 80060e6:	2300      	movs	r3, #0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10a      	bne.n	8006102 <xQueueReceive+0x5e>
	__asm volatile
 80060ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	61fb      	str	r3, [r7, #28]
}
 80060fe:	bf00      	nop
 8006100:	e7fe      	b.n	8006100 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006102:	f001 f973 	bl	80073ec <xTaskGetSchedulerState>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d102      	bne.n	8006112 <xQueueReceive+0x6e>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <xQueueReceive+0x72>
 8006112:	2301      	movs	r3, #1
 8006114:	e000      	b.n	8006118 <xQueueReceive+0x74>
 8006116:	2300      	movs	r3, #0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10a      	bne.n	8006132 <xQueueReceive+0x8e>
	__asm volatile
 800611c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	61bb      	str	r3, [r7, #24]
}
 800612e:	bf00      	nop
 8006130:	e7fe      	b.n	8006130 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006132:	f001 fc93 	bl	8007a5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	2b00      	cmp	r3, #0
 8006140:	d01f      	beq.n	8006182 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006142:	68b9      	ldr	r1, [r7, #8]
 8006144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006146:	f000 fa9a 	bl	800667e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	1e5a      	subs	r2, r3, #1
 800614e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006150:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00f      	beq.n	800617a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800615a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615c:	3310      	adds	r3, #16
 800615e:	4618      	mov	r0, r3
 8006160:	f000 ff80 	bl	8007064 <xTaskRemoveFromEventList>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d007      	beq.n	800617a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800616a:	4b3d      	ldr	r3, [pc, #244]	; (8006260 <xQueueReceive+0x1bc>)
 800616c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	f3bf 8f4f 	dsb	sy
 8006176:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800617a:	f001 fc9f 	bl	8007abc <vPortExitCritical>
				return pdPASS;
 800617e:	2301      	movs	r3, #1
 8006180:	e069      	b.n	8006256 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d103      	bne.n	8006190 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006188:	f001 fc98 	bl	8007abc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800618c:	2300      	movs	r3, #0
 800618e:	e062      	b.n	8006256 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006192:	2b00      	cmp	r3, #0
 8006194:	d106      	bne.n	80061a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006196:	f107 0310 	add.w	r3, r7, #16
 800619a:	4618      	mov	r0, r3
 800619c:	f000 ffc4 	bl	8007128 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061a0:	2301      	movs	r3, #1
 80061a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061a4:	f001 fc8a 	bl	8007abc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061a8:	f000 fd4e 	bl	8006c48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061ac:	f001 fc56 	bl	8007a5c <vPortEnterCritical>
 80061b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061b6:	b25b      	sxtb	r3, r3
 80061b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061bc:	d103      	bne.n	80061c6 <xQueueReceive+0x122>
 80061be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061cc:	b25b      	sxtb	r3, r3
 80061ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d2:	d103      	bne.n	80061dc <xQueueReceive+0x138>
 80061d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061dc:	f001 fc6e 	bl	8007abc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061e0:	1d3a      	adds	r2, r7, #4
 80061e2:	f107 0310 	add.w	r3, r7, #16
 80061e6:	4611      	mov	r1, r2
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 ffb3 	bl	8007154 <xTaskCheckForTimeOut>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d123      	bne.n	800623c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061f6:	f000 faba 	bl	800676e <prvIsQueueEmpty>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d017      	beq.n	8006230 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006202:	3324      	adds	r3, #36	; 0x24
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	4611      	mov	r1, r2
 8006208:	4618      	mov	r0, r3
 800620a:	f000 ff07 	bl	800701c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800620e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006210:	f000 fa5b 	bl	80066ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006214:	f000 fd26 	bl	8006c64 <xTaskResumeAll>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d189      	bne.n	8006132 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800621e:	4b10      	ldr	r3, [pc, #64]	; (8006260 <xQueueReceive+0x1bc>)
 8006220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	e780      	b.n	8006132 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006232:	f000 fa4a 	bl	80066ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006236:	f000 fd15 	bl	8006c64 <xTaskResumeAll>
 800623a:	e77a      	b.n	8006132 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800623c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800623e:	f000 fa44 	bl	80066ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006242:	f000 fd0f 	bl	8006c64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006248:	f000 fa91 	bl	800676e <prvIsQueueEmpty>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	f43f af6f 	beq.w	8006132 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006254:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006256:	4618      	mov	r0, r3
 8006258:	3730      	adds	r7, #48	; 0x30
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	e000ed04 	.word	0xe000ed04

08006264 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b08e      	sub	sp, #56	; 0x38
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800626e:	2300      	movs	r3, #0
 8006270:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006276:	2300      	movs	r3, #0
 8006278:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800627a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10a      	bne.n	8006296 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006284:	f383 8811 	msr	BASEPRI, r3
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	623b      	str	r3, [r7, #32]
}
 8006292:	bf00      	nop
 8006294:	e7fe      	b.n	8006294 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00a      	beq.n	80062b4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800629e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	61fb      	str	r3, [r7, #28]
}
 80062b0:	bf00      	nop
 80062b2:	e7fe      	b.n	80062b2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062b4:	f001 f89a 	bl	80073ec <xTaskGetSchedulerState>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d102      	bne.n	80062c4 <xQueueSemaphoreTake+0x60>
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <xQueueSemaphoreTake+0x64>
 80062c4:	2301      	movs	r3, #1
 80062c6:	e000      	b.n	80062ca <xQueueSemaphoreTake+0x66>
 80062c8:	2300      	movs	r3, #0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10a      	bne.n	80062e4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	61bb      	str	r3, [r7, #24]
}
 80062e0:	bf00      	nop
 80062e2:	e7fe      	b.n	80062e2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80062e4:	f001 fbba 	bl	8007a5c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80062e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ec:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80062ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d024      	beq.n	800633e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80062f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f6:	1e5a      	subs	r2, r3, #1
 80062f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d104      	bne.n	800630e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006304:	f001 fa3c 	bl	8007780 <pvTaskIncrementMutexHeldCount>
 8006308:	4602      	mov	r2, r0
 800630a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800630e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00f      	beq.n	8006336 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006318:	3310      	adds	r3, #16
 800631a:	4618      	mov	r0, r3
 800631c:	f000 fea2 	bl	8007064 <xTaskRemoveFromEventList>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d007      	beq.n	8006336 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006326:	4b54      	ldr	r3, [pc, #336]	; (8006478 <xQueueSemaphoreTake+0x214>)
 8006328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006336:	f001 fbc1 	bl	8007abc <vPortExitCritical>
				return pdPASS;
 800633a:	2301      	movs	r3, #1
 800633c:	e097      	b.n	800646e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d111      	bne.n	8006368 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800634a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634e:	f383 8811 	msr	BASEPRI, r3
 8006352:	f3bf 8f6f 	isb	sy
 8006356:	f3bf 8f4f 	dsb	sy
 800635a:	617b      	str	r3, [r7, #20]
}
 800635c:	bf00      	nop
 800635e:	e7fe      	b.n	800635e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006360:	f001 fbac 	bl	8007abc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006364:	2300      	movs	r3, #0
 8006366:	e082      	b.n	800646e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800636a:	2b00      	cmp	r3, #0
 800636c:	d106      	bne.n	800637c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800636e:	f107 030c 	add.w	r3, r7, #12
 8006372:	4618      	mov	r0, r3
 8006374:	f000 fed8 	bl	8007128 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006378:	2301      	movs	r3, #1
 800637a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800637c:	f001 fb9e 	bl	8007abc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006380:	f000 fc62 	bl	8006c48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006384:	f001 fb6a 	bl	8007a5c <vPortEnterCritical>
 8006388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800638e:	b25b      	sxtb	r3, r3
 8006390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006394:	d103      	bne.n	800639e <xQueueSemaphoreTake+0x13a>
 8006396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800639e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063a4:	b25b      	sxtb	r3, r3
 80063a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063aa:	d103      	bne.n	80063b4 <xQueueSemaphoreTake+0x150>
 80063ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063b4:	f001 fb82 	bl	8007abc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063b8:	463a      	mov	r2, r7
 80063ba:	f107 030c 	add.w	r3, r7, #12
 80063be:	4611      	mov	r1, r2
 80063c0:	4618      	mov	r0, r3
 80063c2:	f000 fec7 	bl	8007154 <xTaskCheckForTimeOut>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d132      	bne.n	8006432 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063ce:	f000 f9ce 	bl	800676e <prvIsQueueEmpty>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d026      	beq.n	8006426 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d109      	bne.n	80063f4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80063e0:	f001 fb3c 	bl	8007a5c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80063e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f001 f81d 	bl	8007428 <xTaskPriorityInherit>
 80063ee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80063f0:	f001 fb64 	bl	8007abc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80063f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f6:	3324      	adds	r3, #36	; 0x24
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	4611      	mov	r1, r2
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 fe0d 	bl	800701c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006402:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006404:	f000 f961 	bl	80066ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006408:	f000 fc2c 	bl	8006c64 <xTaskResumeAll>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	f47f af68 	bne.w	80062e4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006414:	4b18      	ldr	r3, [pc, #96]	; (8006478 <xQueueSemaphoreTake+0x214>)
 8006416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800641a:	601a      	str	r2, [r3, #0]
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	f3bf 8f6f 	isb	sy
 8006424:	e75e      	b.n	80062e4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006426:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006428:	f000 f94f 	bl	80066ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800642c:	f000 fc1a 	bl	8006c64 <xTaskResumeAll>
 8006430:	e758      	b.n	80062e4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006432:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006434:	f000 f949 	bl	80066ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006438:	f000 fc14 	bl	8006c64 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800643c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800643e:	f000 f996 	bl	800676e <prvIsQueueEmpty>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	f43f af4d 	beq.w	80062e4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00d      	beq.n	800646c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006450:	f001 fb04 	bl	8007a5c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006454:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006456:	f000 f891 	bl	800657c <prvGetDisinheritPriorityAfterTimeout>
 800645a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800645c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006462:	4618      	mov	r0, r3
 8006464:	f001 f8ec 	bl	8007640 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006468:	f001 fb28 	bl	8007abc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800646c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800646e:	4618      	mov	r0, r3
 8006470:	3738      	adds	r7, #56	; 0x38
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	e000ed04 	.word	0xe000ed04

0800647c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b08e      	sub	sp, #56	; 0x38
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800648c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10a      	bne.n	80064a8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	623b      	str	r3, [r7, #32]
}
 80064a4:	bf00      	nop
 80064a6:	e7fe      	b.n	80064a6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d103      	bne.n	80064b6 <xQueueReceiveFromISR+0x3a>
 80064ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <xQueueReceiveFromISR+0x3e>
 80064b6:	2301      	movs	r3, #1
 80064b8:	e000      	b.n	80064bc <xQueueReceiveFromISR+0x40>
 80064ba:	2300      	movs	r3, #0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10a      	bne.n	80064d6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80064c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	61fb      	str	r3, [r7, #28]
}
 80064d2:	bf00      	nop
 80064d4:	e7fe      	b.n	80064d4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064d6:	f001 fb83 	bl	8007be0 <vPortValidateInterruptPriority>
	__asm volatile
 80064da:	f3ef 8211 	mrs	r2, BASEPRI
 80064de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	61ba      	str	r2, [r7, #24]
 80064f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80064f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d02f      	beq.n	8006562 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006504:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800650c:	68b9      	ldr	r1, [r7, #8]
 800650e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006510:	f000 f8b5 	bl	800667e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006516:	1e5a      	subs	r2, r3, #1
 8006518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800651c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006524:	d112      	bne.n	800654c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d016      	beq.n	800655c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800652e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006530:	3310      	adds	r3, #16
 8006532:	4618      	mov	r0, r3
 8006534:	f000 fd96 	bl	8007064 <xTaskRemoveFromEventList>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00e      	beq.n	800655c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00b      	beq.n	800655c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	e007      	b.n	800655c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800654c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006550:	3301      	adds	r3, #1
 8006552:	b2db      	uxtb	r3, r3
 8006554:	b25a      	sxtb	r2, r3
 8006556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800655c:	2301      	movs	r3, #1
 800655e:	637b      	str	r3, [r7, #52]	; 0x34
 8006560:	e001      	b.n	8006566 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006562:	2300      	movs	r3, #0
 8006564:	637b      	str	r3, [r7, #52]	; 0x34
 8006566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006568:	613b      	str	r3, [r7, #16]
	__asm volatile
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	f383 8811 	msr	BASEPRI, r3
}
 8006570:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006574:	4618      	mov	r0, r3
 8006576:	3738      	adds	r7, #56	; 0x38
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006588:	2b00      	cmp	r3, #0
 800658a:	d006      	beq.n	800659a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f1c3 0307 	rsb	r3, r3, #7
 8006596:	60fb      	str	r3, [r7, #12]
 8006598:	e001      	b.n	800659e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800659a:	2300      	movs	r3, #0
 800659c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800659e:	68fb      	ldr	r3, [r7, #12]
	}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3714      	adds	r7, #20
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bc80      	pop	{r7}
 80065a8:	4770      	bx	lr

080065aa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b086      	sub	sp, #24
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	60f8      	str	r0, [r7, #12]
 80065b2:	60b9      	str	r1, [r7, #8]
 80065b4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80065b6:	2300      	movs	r3, #0
 80065b8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065be:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10d      	bne.n	80065e4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d14d      	bne.n	800666c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	4618      	mov	r0, r3
 80065d6:	f000 ffad 	bl	8007534 <xTaskPriorityDisinherit>
 80065da:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	605a      	str	r2, [r3, #4]
 80065e2:	e043      	b.n	800666c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d119      	bne.n	800661e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6898      	ldr	r0, [r3, #8]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f2:	461a      	mov	r2, r3
 80065f4:	68b9      	ldr	r1, [r7, #8]
 80065f6:	f00b fc14 	bl	8011e22 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	689a      	ldr	r2, [r3, #8]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006602:	441a      	add	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	689a      	ldr	r2, [r3, #8]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	429a      	cmp	r2, r3
 8006612:	d32b      	bcc.n	800666c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	609a      	str	r2, [r3, #8]
 800661c:	e026      	b.n	800666c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	68d8      	ldr	r0, [r3, #12]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006626:	461a      	mov	r2, r3
 8006628:	68b9      	ldr	r1, [r7, #8]
 800662a:	f00b fbfa 	bl	8011e22 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	68da      	ldr	r2, [r3, #12]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006636:	425b      	negs	r3, r3
 8006638:	441a      	add	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	68da      	ldr	r2, [r3, #12]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	429a      	cmp	r2, r3
 8006648:	d207      	bcs.n	800665a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006652:	425b      	negs	r3, r3
 8006654:	441a      	add	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b02      	cmp	r3, #2
 800665e:	d105      	bne.n	800666c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d002      	beq.n	800666c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	3b01      	subs	r3, #1
 800666a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	1c5a      	adds	r2, r3, #1
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006674:	697b      	ldr	r3, [r7, #20]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3718      	adds	r7, #24
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b082      	sub	sp, #8
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668c:	2b00      	cmp	r3, #0
 800668e:	d018      	beq.n	80066c2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68da      	ldr	r2, [r3, #12]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006698:	441a      	add	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	68da      	ldr	r2, [r3, #12]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d303      	bcc.n	80066b2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68d9      	ldr	r1, [r3, #12]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ba:	461a      	mov	r2, r3
 80066bc:	6838      	ldr	r0, [r7, #0]
 80066be:	f00b fbb0 	bl	8011e22 <memcpy>
	}
}
 80066c2:	bf00      	nop
 80066c4:	3708      	adds	r7, #8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b084      	sub	sp, #16
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80066d2:	f001 f9c3 	bl	8007a5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066dc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066de:	e011      	b.n	8006704 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d012      	beq.n	800670e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	3324      	adds	r3, #36	; 0x24
 80066ec:	4618      	mov	r0, r3
 80066ee:	f000 fcb9 	bl	8007064 <xTaskRemoveFromEventList>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d001      	beq.n	80066fc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80066f8:	f000 fd8e 	bl	8007218 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80066fc:	7bfb      	ldrb	r3, [r7, #15]
 80066fe:	3b01      	subs	r3, #1
 8006700:	b2db      	uxtb	r3, r3
 8006702:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006704:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006708:	2b00      	cmp	r3, #0
 800670a:	dce9      	bgt.n	80066e0 <prvUnlockQueue+0x16>
 800670c:	e000      	b.n	8006710 <prvUnlockQueue+0x46>
					break;
 800670e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	22ff      	movs	r2, #255	; 0xff
 8006714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006718:	f001 f9d0 	bl	8007abc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800671c:	f001 f99e 	bl	8007a5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006726:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006728:	e011      	b.n	800674e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d012      	beq.n	8006758 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	3310      	adds	r3, #16
 8006736:	4618      	mov	r0, r3
 8006738:	f000 fc94 	bl	8007064 <xTaskRemoveFromEventList>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d001      	beq.n	8006746 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006742:	f000 fd69 	bl	8007218 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006746:	7bbb      	ldrb	r3, [r7, #14]
 8006748:	3b01      	subs	r3, #1
 800674a:	b2db      	uxtb	r3, r3
 800674c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800674e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006752:	2b00      	cmp	r3, #0
 8006754:	dce9      	bgt.n	800672a <prvUnlockQueue+0x60>
 8006756:	e000      	b.n	800675a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006758:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	22ff      	movs	r2, #255	; 0xff
 800675e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006762:	f001 f9ab 	bl	8007abc <vPortExitCritical>
}
 8006766:	bf00      	nop
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b084      	sub	sp, #16
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006776:	f001 f971 	bl	8007a5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677e:	2b00      	cmp	r3, #0
 8006780:	d102      	bne.n	8006788 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006782:	2301      	movs	r3, #1
 8006784:	60fb      	str	r3, [r7, #12]
 8006786:	e001      	b.n	800678c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006788:	2300      	movs	r3, #0
 800678a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800678c:	f001 f996 	bl	8007abc <vPortExitCritical>

	return xReturn;
 8006790:	68fb      	ldr	r3, [r7, #12]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b084      	sub	sp, #16
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067a2:	f001 f95b 	bl	8007a5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d102      	bne.n	80067b8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80067b2:	2301      	movs	r3, #1
 80067b4:	60fb      	str	r3, [r7, #12]
 80067b6:	e001      	b.n	80067bc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80067b8:	2300      	movs	r3, #0
 80067ba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067bc:	f001 f97e 	bl	8007abc <vPortExitCritical>

	return xReturn;
 80067c0:	68fb      	ldr	r3, [r7, #12]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b08e      	sub	sp, #56	; 0x38
 80067ce:	af04      	add	r7, sp, #16
 80067d0:	60f8      	str	r0, [r7, #12]
 80067d2:	60b9      	str	r1, [r7, #8]
 80067d4:	607a      	str	r2, [r7, #4]
 80067d6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80067d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10a      	bne.n	80067f4 <xTaskCreateStatic+0x2a>
	__asm volatile
 80067de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	623b      	str	r3, [r7, #32]
}
 80067f0:	bf00      	nop
 80067f2:	e7fe      	b.n	80067f2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80067f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10a      	bne.n	8006810 <xTaskCreateStatic+0x46>
	__asm volatile
 80067fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	61fb      	str	r3, [r7, #28]
}
 800680c:	bf00      	nop
 800680e:	e7fe      	b.n	800680e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006810:	23b4      	movs	r3, #180	; 0xb4
 8006812:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	2bb4      	cmp	r3, #180	; 0xb4
 8006818:	d00a      	beq.n	8006830 <xTaskCreateStatic+0x66>
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	61bb      	str	r3, [r7, #24]
}
 800682c:	bf00      	nop
 800682e:	e7fe      	b.n	800682e <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006832:	2b00      	cmp	r3, #0
 8006834:	d01e      	beq.n	8006874 <xTaskCreateStatic+0xaa>
 8006836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006838:	2b00      	cmp	r3, #0
 800683a:	d01b      	beq.n	8006874 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800683c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006842:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006844:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006848:	2202      	movs	r2, #2
 800684a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800684e:	2300      	movs	r3, #0
 8006850:	9303      	str	r3, [sp, #12]
 8006852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006854:	9302      	str	r3, [sp, #8]
 8006856:	f107 0314 	add.w	r3, r7, #20
 800685a:	9301      	str	r3, [sp, #4]
 800685c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685e:	9300      	str	r3, [sp, #0]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	68b9      	ldr	r1, [r7, #8]
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f000 f850 	bl	800690c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800686c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800686e:	f000 f8e3 	bl	8006a38 <prvAddNewTaskToReadyList>
 8006872:	e001      	b.n	8006878 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006874:	2300      	movs	r3, #0
 8006876:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006878:	697b      	ldr	r3, [r7, #20]
	}
 800687a:	4618      	mov	r0, r3
 800687c:	3728      	adds	r7, #40	; 0x28
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006882:	b580      	push	{r7, lr}
 8006884:	b08c      	sub	sp, #48	; 0x30
 8006886:	af04      	add	r7, sp, #16
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	603b      	str	r3, [r7, #0]
 800688e:	4613      	mov	r3, r2
 8006890:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006892:	88fb      	ldrh	r3, [r7, #6]
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4618      	mov	r0, r3
 8006898:	f001 f9e0 	bl	8007c5c <pvPortMalloc>
 800689c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00e      	beq.n	80068c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80068a4:	20b4      	movs	r0, #180	; 0xb4
 80068a6:	f001 f9d9 	bl	8007c5c <pvPortMalloc>
 80068aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d003      	beq.n	80068ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	631a      	str	r2, [r3, #48]	; 0x30
 80068b8:	e005      	b.n	80068c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80068ba:	6978      	ldr	r0, [r7, #20]
 80068bc:	f001 fa92 	bl	8007de4 <vPortFree>
 80068c0:	e001      	b.n	80068c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80068c2:	2300      	movs	r3, #0
 80068c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d017      	beq.n	80068fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80068d4:	88fa      	ldrh	r2, [r7, #6]
 80068d6:	2300      	movs	r3, #0
 80068d8:	9303      	str	r3, [sp, #12]
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	9302      	str	r3, [sp, #8]
 80068de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e0:	9301      	str	r3, [sp, #4]
 80068e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	68b9      	ldr	r1, [r7, #8]
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f000 f80e 	bl	800690c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068f0:	69f8      	ldr	r0, [r7, #28]
 80068f2:	f000 f8a1 	bl	8006a38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80068f6:	2301      	movs	r3, #1
 80068f8:	61bb      	str	r3, [r7, #24]
 80068fa:	e002      	b.n	8006902 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80068fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006900:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006902:	69bb      	ldr	r3, [r7, #24]
	}
 8006904:	4618      	mov	r0, r3
 8006906:	3720      	adds	r7, #32
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b088      	sub	sp, #32
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
 8006918:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006924:	3b01      	subs	r3, #1
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	f023 0307 	bic.w	r3, r3, #7
 8006932:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	f003 0307 	and.w	r3, r3, #7
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00a      	beq.n	8006954 <prvInitialiseNewTask+0x48>
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	617b      	str	r3, [r7, #20]
}
 8006950:	bf00      	nop
 8006952:	e7fe      	b.n	8006952 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006954:	2300      	movs	r3, #0
 8006956:	61fb      	str	r3, [r7, #28]
 8006958:	e012      	b.n	8006980 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	4413      	add	r3, r2
 8006960:	7819      	ldrb	r1, [r3, #0]
 8006962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	4413      	add	r3, r2
 8006968:	3334      	adds	r3, #52	; 0x34
 800696a:	460a      	mov	r2, r1
 800696c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	4413      	add	r3, r2
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d006      	beq.n	8006988 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	3301      	adds	r3, #1
 800697e:	61fb      	str	r3, [r7, #28]
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	2b0f      	cmp	r3, #15
 8006984:	d9e9      	bls.n	800695a <prvInitialiseNewTask+0x4e>
 8006986:	e000      	b.n	800698a <prvInitialiseNewTask+0x7e>
		{
			break;
 8006988:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800698a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698c:	2200      	movs	r2, #0
 800698e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006994:	2b06      	cmp	r3, #6
 8006996:	d901      	bls.n	800699c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006998:	2306      	movs	r3, #6
 800699a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800699c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80069a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069a6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80069a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069aa:	2200      	movs	r2, #0
 80069ac:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b0:	3304      	adds	r3, #4
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fe ff37 	bl	8005826 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80069b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ba:	3318      	adds	r3, #24
 80069bc:	4618      	mov	r0, r3
 80069be:	f7fe ff32 	bl	8005826 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80069c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ca:	f1c3 0207 	rsb	r2, r3, #7
 80069ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80069d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80069d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069da:	2200      	movs	r2, #0
 80069dc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80069e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80069e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ea:	334c      	adds	r3, #76	; 0x4c
 80069ec:	2260      	movs	r2, #96	; 0x60
 80069ee:	2100      	movs	r1, #0
 80069f0:	4618      	mov	r0, r3
 80069f2:	f00b fa24 	bl	8011e3e <memset>
 80069f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f8:	4a0c      	ldr	r2, [pc, #48]	; (8006a2c <prvInitialiseNewTask+0x120>)
 80069fa:	651a      	str	r2, [r3, #80]	; 0x50
 80069fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fe:	4a0c      	ldr	r2, [pc, #48]	; (8006a30 <prvInitialiseNewTask+0x124>)
 8006a00:	655a      	str	r2, [r3, #84]	; 0x54
 8006a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a04:	4a0b      	ldr	r2, [pc, #44]	; (8006a34 <prvInitialiseNewTask+0x128>)
 8006a06:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	68f9      	ldr	r1, [r7, #12]
 8006a0c:	69b8      	ldr	r0, [r7, #24]
 8006a0e:	f000 ff31 	bl	8007874 <pxPortInitialiseStack>
 8006a12:	4602      	mov	r2, r0
 8006a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a16:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d002      	beq.n	8006a24 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a22:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a24:	bf00      	nop
 8006a26:	3720      	adds	r7, #32
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	08014be8 	.word	0x08014be8
 8006a30:	08014c08 	.word	0x08014c08
 8006a34:	08014bc8 	.word	0x08014bc8

08006a38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a40:	f001 f80c 	bl	8007a5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a44:	4b2a      	ldr	r3, [pc, #168]	; (8006af0 <prvAddNewTaskToReadyList+0xb8>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	4a29      	ldr	r2, [pc, #164]	; (8006af0 <prvAddNewTaskToReadyList+0xb8>)
 8006a4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a4e:	4b29      	ldr	r3, [pc, #164]	; (8006af4 <prvAddNewTaskToReadyList+0xbc>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d109      	bne.n	8006a6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a56:	4a27      	ldr	r2, [pc, #156]	; (8006af4 <prvAddNewTaskToReadyList+0xbc>)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a5c:	4b24      	ldr	r3, [pc, #144]	; (8006af0 <prvAddNewTaskToReadyList+0xb8>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d110      	bne.n	8006a86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a64:	f000 fbfc 	bl	8007260 <prvInitialiseTaskLists>
 8006a68:	e00d      	b.n	8006a86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a6a:	4b23      	ldr	r3, [pc, #140]	; (8006af8 <prvAddNewTaskToReadyList+0xc0>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d109      	bne.n	8006a86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a72:	4b20      	ldr	r3, [pc, #128]	; (8006af4 <prvAddNewTaskToReadyList+0xbc>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d802      	bhi.n	8006a86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a80:	4a1c      	ldr	r2, [pc, #112]	; (8006af4 <prvAddNewTaskToReadyList+0xbc>)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a86:	4b1d      	ldr	r3, [pc, #116]	; (8006afc <prvAddNewTaskToReadyList+0xc4>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	4a1b      	ldr	r2, [pc, #108]	; (8006afc <prvAddNewTaskToReadyList+0xc4>)
 8006a8e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a94:	2201      	movs	r2, #1
 8006a96:	409a      	lsls	r2, r3
 8006a98:	4b19      	ldr	r3, [pc, #100]	; (8006b00 <prvAddNewTaskToReadyList+0xc8>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	4a18      	ldr	r2, [pc, #96]	; (8006b00 <prvAddNewTaskToReadyList+0xc8>)
 8006aa0:	6013      	str	r3, [r2, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4a15      	ldr	r2, [pc, #84]	; (8006b04 <prvAddNewTaskToReadyList+0xcc>)
 8006ab0:	441a      	add	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	3304      	adds	r3, #4
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	4610      	mov	r0, r2
 8006aba:	f7fe fec0 	bl	800583e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006abe:	f000 fffd 	bl	8007abc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ac2:	4b0d      	ldr	r3, [pc, #52]	; (8006af8 <prvAddNewTaskToReadyList+0xc0>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00e      	beq.n	8006ae8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006aca:	4b0a      	ldr	r3, [pc, #40]	; (8006af4 <prvAddNewTaskToReadyList+0xbc>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d207      	bcs.n	8006ae8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ad8:	4b0b      	ldr	r3, [pc, #44]	; (8006b08 <prvAddNewTaskToReadyList+0xd0>)
 8006ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ade:	601a      	str	r2, [r3, #0]
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ae8:	bf00      	nop
 8006aea:	3708      	adds	r7, #8
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	20000660 	.word	0x20000660
 8006af4:	20000560 	.word	0x20000560
 8006af8:	2000066c 	.word	0x2000066c
 8006afc:	2000067c 	.word	0x2000067c
 8006b00:	20000668 	.word	0x20000668
 8006b04:	20000564 	.word	0x20000564
 8006b08:	e000ed04 	.word	0xe000ed04

08006b0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b14:	2300      	movs	r3, #0
 8006b16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d017      	beq.n	8006b4e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b1e:	4b13      	ldr	r3, [pc, #76]	; (8006b6c <vTaskDelay+0x60>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00a      	beq.n	8006b3c <vTaskDelay+0x30>
	__asm volatile
 8006b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2a:	f383 8811 	msr	BASEPRI, r3
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f3bf 8f4f 	dsb	sy
 8006b36:	60bb      	str	r3, [r7, #8]
}
 8006b38:	bf00      	nop
 8006b3a:	e7fe      	b.n	8006b3a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006b3c:	f000 f884 	bl	8006c48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b40:	2100      	movs	r1, #0
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fe30 	bl	80077a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b48:	f000 f88c 	bl	8006c64 <xTaskResumeAll>
 8006b4c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d107      	bne.n	8006b64 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006b54:	4b06      	ldr	r3, [pc, #24]	; (8006b70 <vTaskDelay+0x64>)
 8006b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b64:	bf00      	nop
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	20000688 	.word	0x20000688
 8006b70:	e000ed04 	.word	0xe000ed04

08006b74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b08a      	sub	sp, #40	; 0x28
 8006b78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006b82:	463a      	mov	r2, r7
 8006b84:	1d39      	adds	r1, r7, #4
 8006b86:	f107 0308 	add.w	r3, r7, #8
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7f9 fc9c 	bl	80004c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006b90:	6839      	ldr	r1, [r7, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	9202      	str	r2, [sp, #8]
 8006b98:	9301      	str	r3, [sp, #4]
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	460a      	mov	r2, r1
 8006ba2:	4921      	ldr	r1, [pc, #132]	; (8006c28 <vTaskStartScheduler+0xb4>)
 8006ba4:	4821      	ldr	r0, [pc, #132]	; (8006c2c <vTaskStartScheduler+0xb8>)
 8006ba6:	f7ff fe10 	bl	80067ca <xTaskCreateStatic>
 8006baa:	4603      	mov	r3, r0
 8006bac:	4a20      	ldr	r2, [pc, #128]	; (8006c30 <vTaskStartScheduler+0xbc>)
 8006bae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006bb0:	4b1f      	ldr	r3, [pc, #124]	; (8006c30 <vTaskStartScheduler+0xbc>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d002      	beq.n	8006bbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	617b      	str	r3, [r7, #20]
 8006bbc:	e001      	b.n	8006bc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d11b      	bne.n	8006c00 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bcc:	f383 8811 	msr	BASEPRI, r3
 8006bd0:	f3bf 8f6f 	isb	sy
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	613b      	str	r3, [r7, #16]
}
 8006bda:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006bdc:	4b15      	ldr	r3, [pc, #84]	; (8006c34 <vTaskStartScheduler+0xc0>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	334c      	adds	r3, #76	; 0x4c
 8006be2:	4a15      	ldr	r2, [pc, #84]	; (8006c38 <vTaskStartScheduler+0xc4>)
 8006be4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006be6:	4b15      	ldr	r3, [pc, #84]	; (8006c3c <vTaskStartScheduler+0xc8>)
 8006be8:	f04f 32ff 	mov.w	r2, #4294967295
 8006bec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006bee:	4b14      	ldr	r3, [pc, #80]	; (8006c40 <vTaskStartScheduler+0xcc>)
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006bf4:	4b13      	ldr	r3, [pc, #76]	; (8006c44 <vTaskStartScheduler+0xd0>)
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006bfa:	f000 febd 	bl	8007978 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006bfe:	e00e      	b.n	8006c1e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c06:	d10a      	bne.n	8006c1e <vTaskStartScheduler+0xaa>
	__asm volatile
 8006c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0c:	f383 8811 	msr	BASEPRI, r3
 8006c10:	f3bf 8f6f 	isb	sy
 8006c14:	f3bf 8f4f 	dsb	sy
 8006c18:	60fb      	str	r3, [r7, #12]
}
 8006c1a:	bf00      	nop
 8006c1c:	e7fe      	b.n	8006c1c <vTaskStartScheduler+0xa8>
}
 8006c1e:	bf00      	nop
 8006c20:	3718      	adds	r7, #24
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	08012d1c 	.word	0x08012d1c
 8006c2c:	08007231 	.word	0x08007231
 8006c30:	20000684 	.word	0x20000684
 8006c34:	20000560 	.word	0x20000560
 8006c38:	20000018 	.word	0x20000018
 8006c3c:	20000680 	.word	0x20000680
 8006c40:	2000066c 	.word	0x2000066c
 8006c44:	20000664 	.word	0x20000664

08006c48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c48:	b480      	push	{r7}
 8006c4a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006c4c:	4b04      	ldr	r3, [pc, #16]	; (8006c60 <vTaskSuspendAll+0x18>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3301      	adds	r3, #1
 8006c52:	4a03      	ldr	r2, [pc, #12]	; (8006c60 <vTaskSuspendAll+0x18>)
 8006c54:	6013      	str	r3, [r2, #0]
}
 8006c56:	bf00      	nop
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bc80      	pop	{r7}
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	20000688 	.word	0x20000688

08006c64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006c72:	4b41      	ldr	r3, [pc, #260]	; (8006d78 <xTaskResumeAll+0x114>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d10a      	bne.n	8006c90 <xTaskResumeAll+0x2c>
	__asm volatile
 8006c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7e:	f383 8811 	msr	BASEPRI, r3
 8006c82:	f3bf 8f6f 	isb	sy
 8006c86:	f3bf 8f4f 	dsb	sy
 8006c8a:	603b      	str	r3, [r7, #0]
}
 8006c8c:	bf00      	nop
 8006c8e:	e7fe      	b.n	8006c8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c90:	f000 fee4 	bl	8007a5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c94:	4b38      	ldr	r3, [pc, #224]	; (8006d78 <xTaskResumeAll+0x114>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	4a37      	ldr	r2, [pc, #220]	; (8006d78 <xTaskResumeAll+0x114>)
 8006c9c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c9e:	4b36      	ldr	r3, [pc, #216]	; (8006d78 <xTaskResumeAll+0x114>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d161      	bne.n	8006d6a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ca6:	4b35      	ldr	r3, [pc, #212]	; (8006d7c <xTaskResumeAll+0x118>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d05d      	beq.n	8006d6a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cae:	e02e      	b.n	8006d0e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006cb0:	4b33      	ldr	r3, [pc, #204]	; (8006d80 <xTaskResumeAll+0x11c>)
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	3318      	adds	r3, #24
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7fe fe19 	bl	80058f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	3304      	adds	r3, #4
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7fe fe14 	bl	80058f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	409a      	lsls	r2, r3
 8006cd4:	4b2b      	ldr	r3, [pc, #172]	; (8006d84 <xTaskResumeAll+0x120>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	4a2a      	ldr	r2, [pc, #168]	; (8006d84 <xTaskResumeAll+0x120>)
 8006cdc:	6013      	str	r3, [r2, #0]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	4a27      	ldr	r2, [pc, #156]	; (8006d88 <xTaskResumeAll+0x124>)
 8006cec:	441a      	add	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	3304      	adds	r3, #4
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	4610      	mov	r0, r2
 8006cf6:	f7fe fda2 	bl	800583e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cfe:	4b23      	ldr	r3, [pc, #140]	; (8006d8c <xTaskResumeAll+0x128>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d302      	bcc.n	8006d0e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006d08:	4b21      	ldr	r3, [pc, #132]	; (8006d90 <xTaskResumeAll+0x12c>)
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d0e:	4b1c      	ldr	r3, [pc, #112]	; (8006d80 <xTaskResumeAll+0x11c>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1cc      	bne.n	8006cb0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d001      	beq.n	8006d20 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d1c:	f000 fb42 	bl	80073a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006d20:	4b1c      	ldr	r3, [pc, #112]	; (8006d94 <xTaskResumeAll+0x130>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d010      	beq.n	8006d4e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d2c:	f000 f856 	bl	8006ddc <xTaskIncrementTick>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d002      	beq.n	8006d3c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006d36:	4b16      	ldr	r3, [pc, #88]	; (8006d90 <xTaskResumeAll+0x12c>)
 8006d38:	2201      	movs	r2, #1
 8006d3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1f1      	bne.n	8006d2c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006d48:	4b12      	ldr	r3, [pc, #72]	; (8006d94 <xTaskResumeAll+0x130>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d4e:	4b10      	ldr	r3, [pc, #64]	; (8006d90 <xTaskResumeAll+0x12c>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d009      	beq.n	8006d6a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d56:	2301      	movs	r3, #1
 8006d58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d5a:	4b0f      	ldr	r3, [pc, #60]	; (8006d98 <xTaskResumeAll+0x134>)
 8006d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d6a:	f000 fea7 	bl	8007abc <vPortExitCritical>

	return xAlreadyYielded;
 8006d6e:	68bb      	ldr	r3, [r7, #8]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	20000688 	.word	0x20000688
 8006d7c:	20000660 	.word	0x20000660
 8006d80:	20000620 	.word	0x20000620
 8006d84:	20000668 	.word	0x20000668
 8006d88:	20000564 	.word	0x20000564
 8006d8c:	20000560 	.word	0x20000560
 8006d90:	20000674 	.word	0x20000674
 8006d94:	20000670 	.word	0x20000670
 8006d98:	e000ed04 	.word	0xe000ed04

08006d9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006da2:	4b04      	ldr	r3, [pc, #16]	; (8006db4 <xTaskGetTickCount+0x18>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006da8:	687b      	ldr	r3, [r7, #4]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	370c      	adds	r7, #12
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bc80      	pop	{r7}
 8006db2:	4770      	bx	lr
 8006db4:	20000664 	.word	0x20000664

08006db8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006dbe:	f000 ff0f 	bl	8007be0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006dc6:	4b04      	ldr	r3, [pc, #16]	; (8006dd8 <xTaskGetTickCountFromISR+0x20>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006dcc:	683b      	ldr	r3, [r7, #0]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	20000664 	.word	0x20000664

08006ddc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006de2:	2300      	movs	r3, #0
 8006de4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006de6:	4b51      	ldr	r3, [pc, #324]	; (8006f2c <xTaskIncrementTick+0x150>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f040 808d 	bne.w	8006f0a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006df0:	4b4f      	ldr	r3, [pc, #316]	; (8006f30 <xTaskIncrementTick+0x154>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	3301      	adds	r3, #1
 8006df6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006df8:	4a4d      	ldr	r2, [pc, #308]	; (8006f30 <xTaskIncrementTick+0x154>)
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d120      	bne.n	8006e46 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e04:	4b4b      	ldr	r3, [pc, #300]	; (8006f34 <xTaskIncrementTick+0x158>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00a      	beq.n	8006e24 <xTaskIncrementTick+0x48>
	__asm volatile
 8006e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	603b      	str	r3, [r7, #0]
}
 8006e20:	bf00      	nop
 8006e22:	e7fe      	b.n	8006e22 <xTaskIncrementTick+0x46>
 8006e24:	4b43      	ldr	r3, [pc, #268]	; (8006f34 <xTaskIncrementTick+0x158>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	60fb      	str	r3, [r7, #12]
 8006e2a:	4b43      	ldr	r3, [pc, #268]	; (8006f38 <xTaskIncrementTick+0x15c>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a41      	ldr	r2, [pc, #260]	; (8006f34 <xTaskIncrementTick+0x158>)
 8006e30:	6013      	str	r3, [r2, #0]
 8006e32:	4a41      	ldr	r2, [pc, #260]	; (8006f38 <xTaskIncrementTick+0x15c>)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6013      	str	r3, [r2, #0]
 8006e38:	4b40      	ldr	r3, [pc, #256]	; (8006f3c <xTaskIncrementTick+0x160>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	4a3f      	ldr	r2, [pc, #252]	; (8006f3c <xTaskIncrementTick+0x160>)
 8006e40:	6013      	str	r3, [r2, #0]
 8006e42:	f000 faaf 	bl	80073a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e46:	4b3e      	ldr	r3, [pc, #248]	; (8006f40 <xTaskIncrementTick+0x164>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d34d      	bcc.n	8006eec <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e50:	4b38      	ldr	r3, [pc, #224]	; (8006f34 <xTaskIncrementTick+0x158>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <xTaskIncrementTick+0x82>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e000      	b.n	8006e60 <xTaskIncrementTick+0x84>
 8006e5e:	2300      	movs	r3, #0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d004      	beq.n	8006e6e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e64:	4b36      	ldr	r3, [pc, #216]	; (8006f40 <xTaskIncrementTick+0x164>)
 8006e66:	f04f 32ff 	mov.w	r2, #4294967295
 8006e6a:	601a      	str	r2, [r3, #0]
					break;
 8006e6c:	e03e      	b.n	8006eec <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006e6e:	4b31      	ldr	r3, [pc, #196]	; (8006f34 <xTaskIncrementTick+0x158>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e7e:	693a      	ldr	r2, [r7, #16]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d203      	bcs.n	8006e8e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e86:	4a2e      	ldr	r2, [pc, #184]	; (8006f40 <xTaskIncrementTick+0x164>)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6013      	str	r3, [r2, #0]
						break;
 8006e8c:	e02e      	b.n	8006eec <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	3304      	adds	r3, #4
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7fe fd2e 	bl	80058f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d004      	beq.n	8006eaa <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	3318      	adds	r3, #24
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f7fe fd25 	bl	80058f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eae:	2201      	movs	r2, #1
 8006eb0:	409a      	lsls	r2, r3
 8006eb2:	4b24      	ldr	r3, [pc, #144]	; (8006f44 <xTaskIncrementTick+0x168>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	4a22      	ldr	r2, [pc, #136]	; (8006f44 <xTaskIncrementTick+0x168>)
 8006eba:	6013      	str	r3, [r2, #0]
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4a1f      	ldr	r2, [pc, #124]	; (8006f48 <xTaskIncrementTick+0x16c>)
 8006eca:	441a      	add	r2, r3
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	3304      	adds	r3, #4
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	4610      	mov	r0, r2
 8006ed4:	f7fe fcb3 	bl	800583e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006edc:	4b1b      	ldr	r3, [pc, #108]	; (8006f4c <xTaskIncrementTick+0x170>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d3b4      	bcc.n	8006e50 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006eea:	e7b1      	b.n	8006e50 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006eec:	4b17      	ldr	r3, [pc, #92]	; (8006f4c <xTaskIncrementTick+0x170>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef2:	4915      	ldr	r1, [pc, #84]	; (8006f48 <xTaskIncrementTick+0x16c>)
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4413      	add	r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	440b      	add	r3, r1
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d907      	bls.n	8006f14 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006f04:	2301      	movs	r3, #1
 8006f06:	617b      	str	r3, [r7, #20]
 8006f08:	e004      	b.n	8006f14 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006f0a:	4b11      	ldr	r3, [pc, #68]	; (8006f50 <xTaskIncrementTick+0x174>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	4a0f      	ldr	r2, [pc, #60]	; (8006f50 <xTaskIncrementTick+0x174>)
 8006f12:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006f14:	4b0f      	ldr	r3, [pc, #60]	; (8006f54 <xTaskIncrementTick+0x178>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006f20:	697b      	ldr	r3, [r7, #20]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3718      	adds	r7, #24
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	20000688 	.word	0x20000688
 8006f30:	20000664 	.word	0x20000664
 8006f34:	20000618 	.word	0x20000618
 8006f38:	2000061c 	.word	0x2000061c
 8006f3c:	20000678 	.word	0x20000678
 8006f40:	20000680 	.word	0x20000680
 8006f44:	20000668 	.word	0x20000668
 8006f48:	20000564 	.word	0x20000564
 8006f4c:	20000560 	.word	0x20000560
 8006f50:	20000670 	.word	0x20000670
 8006f54:	20000674 	.word	0x20000674

08006f58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b087      	sub	sp, #28
 8006f5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f5e:	4b29      	ldr	r3, [pc, #164]	; (8007004 <vTaskSwitchContext+0xac>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d003      	beq.n	8006f6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f66:	4b28      	ldr	r3, [pc, #160]	; (8007008 <vTaskSwitchContext+0xb0>)
 8006f68:	2201      	movs	r2, #1
 8006f6a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f6c:	e044      	b.n	8006ff8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006f6e:	4b26      	ldr	r3, [pc, #152]	; (8007008 <vTaskSwitchContext+0xb0>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006f74:	4b25      	ldr	r3, [pc, #148]	; (800700c <vTaskSwitchContext+0xb4>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	fab3 f383 	clz	r3, r3
 8006f80:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006f82:	7afb      	ldrb	r3, [r7, #11]
 8006f84:	f1c3 031f 	rsb	r3, r3, #31
 8006f88:	617b      	str	r3, [r7, #20]
 8006f8a:	4921      	ldr	r1, [pc, #132]	; (8007010 <vTaskSwitchContext+0xb8>)
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	440b      	add	r3, r1
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d10a      	bne.n	8006fb4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa2:	f383 8811 	msr	BASEPRI, r3
 8006fa6:	f3bf 8f6f 	isb	sy
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	607b      	str	r3, [r7, #4]
}
 8006fb0:	bf00      	nop
 8006fb2:	e7fe      	b.n	8006fb2 <vTaskSwitchContext+0x5a>
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	4413      	add	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4a14      	ldr	r2, [pc, #80]	; (8007010 <vTaskSwitchContext+0xb8>)
 8006fc0:	4413      	add	r3, r2
 8006fc2:	613b      	str	r3, [r7, #16]
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	605a      	str	r2, [r3, #4]
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	685a      	ldr	r2, [r3, #4]
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	3308      	adds	r3, #8
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d104      	bne.n	8006fe4 <vTaskSwitchContext+0x8c>
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	685a      	ldr	r2, [r3, #4]
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	605a      	str	r2, [r3, #4]
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	4a0a      	ldr	r2, [pc, #40]	; (8007014 <vTaskSwitchContext+0xbc>)
 8006fec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006fee:	4b09      	ldr	r3, [pc, #36]	; (8007014 <vTaskSwitchContext+0xbc>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	334c      	adds	r3, #76	; 0x4c
 8006ff4:	4a08      	ldr	r2, [pc, #32]	; (8007018 <vTaskSwitchContext+0xc0>)
 8006ff6:	6013      	str	r3, [r2, #0]
}
 8006ff8:	bf00      	nop
 8006ffa:	371c      	adds	r7, #28
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bc80      	pop	{r7}
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	20000688 	.word	0x20000688
 8007008:	20000674 	.word	0x20000674
 800700c:	20000668 	.word	0x20000668
 8007010:	20000564 	.word	0x20000564
 8007014:	20000560 	.word	0x20000560
 8007018:	20000018 	.word	0x20000018

0800701c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10a      	bne.n	8007042 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	60fb      	str	r3, [r7, #12]
}
 800703e:	bf00      	nop
 8007040:	e7fe      	b.n	8007040 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007042:	4b07      	ldr	r3, [pc, #28]	; (8007060 <vTaskPlaceOnEventList+0x44>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	3318      	adds	r3, #24
 8007048:	4619      	mov	r1, r3
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f7fe fc1a 	bl	8005884 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007050:	2101      	movs	r1, #1
 8007052:	6838      	ldr	r0, [r7, #0]
 8007054:	f000 fba8 	bl	80077a8 <prvAddCurrentTaskToDelayedList>
}
 8007058:	bf00      	nop
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	20000560 	.word	0x20000560

08007064 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10a      	bne.n	8007090 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800707a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707e:	f383 8811 	msr	BASEPRI, r3
 8007082:	f3bf 8f6f 	isb	sy
 8007086:	f3bf 8f4f 	dsb	sy
 800708a:	60fb      	str	r3, [r7, #12]
}
 800708c:	bf00      	nop
 800708e:	e7fe      	b.n	800708e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	3318      	adds	r3, #24
 8007094:	4618      	mov	r0, r3
 8007096:	f7fe fc2d 	bl	80058f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800709a:	4b1d      	ldr	r3, [pc, #116]	; (8007110 <xTaskRemoveFromEventList+0xac>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d11c      	bne.n	80070dc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	3304      	adds	r3, #4
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fe fc24 	bl	80058f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b0:	2201      	movs	r2, #1
 80070b2:	409a      	lsls	r2, r3
 80070b4:	4b17      	ldr	r3, [pc, #92]	; (8007114 <xTaskRemoveFromEventList+0xb0>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	4a16      	ldr	r2, [pc, #88]	; (8007114 <xTaskRemoveFromEventList+0xb0>)
 80070bc:	6013      	str	r3, [r2, #0]
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c2:	4613      	mov	r3, r2
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	4413      	add	r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	4a13      	ldr	r2, [pc, #76]	; (8007118 <xTaskRemoveFromEventList+0xb4>)
 80070cc:	441a      	add	r2, r3
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	3304      	adds	r3, #4
 80070d2:	4619      	mov	r1, r3
 80070d4:	4610      	mov	r0, r2
 80070d6:	f7fe fbb2 	bl	800583e <vListInsertEnd>
 80070da:	e005      	b.n	80070e8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	3318      	adds	r3, #24
 80070e0:	4619      	mov	r1, r3
 80070e2:	480e      	ldr	r0, [pc, #56]	; (800711c <xTaskRemoveFromEventList+0xb8>)
 80070e4:	f7fe fbab 	bl	800583e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ec:	4b0c      	ldr	r3, [pc, #48]	; (8007120 <xTaskRemoveFromEventList+0xbc>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d905      	bls.n	8007102 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80070f6:	2301      	movs	r3, #1
 80070f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80070fa:	4b0a      	ldr	r3, [pc, #40]	; (8007124 <xTaskRemoveFromEventList+0xc0>)
 80070fc:	2201      	movs	r2, #1
 80070fe:	601a      	str	r2, [r3, #0]
 8007100:	e001      	b.n	8007106 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007102:	2300      	movs	r3, #0
 8007104:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007106:	697b      	ldr	r3, [r7, #20]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3718      	adds	r7, #24
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	20000688 	.word	0x20000688
 8007114:	20000668 	.word	0x20000668
 8007118:	20000564 	.word	0x20000564
 800711c:	20000620 	.word	0x20000620
 8007120:	20000560 	.word	0x20000560
 8007124:	20000674 	.word	0x20000674

08007128 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007130:	4b06      	ldr	r3, [pc, #24]	; (800714c <vTaskInternalSetTimeOutState+0x24>)
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007138:	4b05      	ldr	r3, [pc, #20]	; (8007150 <vTaskInternalSetTimeOutState+0x28>)
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	605a      	str	r2, [r3, #4]
}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	bc80      	pop	{r7}
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	20000678 	.word	0x20000678
 8007150:	20000664 	.word	0x20000664

08007154 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b088      	sub	sp, #32
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10a      	bne.n	800717a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	613b      	str	r3, [r7, #16]
}
 8007176:	bf00      	nop
 8007178:	e7fe      	b.n	8007178 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10a      	bne.n	8007196 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	60fb      	str	r3, [r7, #12]
}
 8007192:	bf00      	nop
 8007194:	e7fe      	b.n	8007194 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007196:	f000 fc61 	bl	8007a5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800719a:	4b1d      	ldr	r3, [pc, #116]	; (8007210 <xTaskCheckForTimeOut+0xbc>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	69ba      	ldr	r2, [r7, #24]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b2:	d102      	bne.n	80071ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80071b4:	2300      	movs	r3, #0
 80071b6:	61fb      	str	r3, [r7, #28]
 80071b8:	e023      	b.n	8007202 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	4b15      	ldr	r3, [pc, #84]	; (8007214 <xTaskCheckForTimeOut+0xc0>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d007      	beq.n	80071d6 <xTaskCheckForTimeOut+0x82>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	69ba      	ldr	r2, [r7, #24]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d302      	bcc.n	80071d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80071d0:	2301      	movs	r3, #1
 80071d2:	61fb      	str	r3, [r7, #28]
 80071d4:	e015      	b.n	8007202 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d20b      	bcs.n	80071f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	1ad2      	subs	r2, r2, r3
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f7ff ff9b 	bl	8007128 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80071f2:	2300      	movs	r3, #0
 80071f4:	61fb      	str	r3, [r7, #28]
 80071f6:	e004      	b.n	8007202 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	2200      	movs	r2, #0
 80071fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80071fe:	2301      	movs	r3, #1
 8007200:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007202:	f000 fc5b 	bl	8007abc <vPortExitCritical>

	return xReturn;
 8007206:	69fb      	ldr	r3, [r7, #28]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3720      	adds	r7, #32
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	20000664 	.word	0x20000664
 8007214:	20000678 	.word	0x20000678

08007218 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007218:	b480      	push	{r7}
 800721a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800721c:	4b03      	ldr	r3, [pc, #12]	; (800722c <vTaskMissedYield+0x14>)
 800721e:	2201      	movs	r2, #1
 8007220:	601a      	str	r2, [r3, #0]
}
 8007222:	bf00      	nop
 8007224:	46bd      	mov	sp, r7
 8007226:	bc80      	pop	{r7}
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	20000674 	.word	0x20000674

08007230 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007238:	f000 f852 	bl	80072e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800723c:	4b06      	ldr	r3, [pc, #24]	; (8007258 <prvIdleTask+0x28>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d9f9      	bls.n	8007238 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007244:	4b05      	ldr	r3, [pc, #20]	; (800725c <prvIdleTask+0x2c>)
 8007246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800724a:	601a      	str	r2, [r3, #0]
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007254:	e7f0      	b.n	8007238 <prvIdleTask+0x8>
 8007256:	bf00      	nop
 8007258:	20000564 	.word	0x20000564
 800725c:	e000ed04 	.word	0xe000ed04

08007260 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007266:	2300      	movs	r3, #0
 8007268:	607b      	str	r3, [r7, #4]
 800726a:	e00c      	b.n	8007286 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	4613      	mov	r3, r2
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	4413      	add	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4a12      	ldr	r2, [pc, #72]	; (80072c0 <prvInitialiseTaskLists+0x60>)
 8007278:	4413      	add	r3, r2
 800727a:	4618      	mov	r0, r3
 800727c:	f7fe fab4 	bl	80057e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	3301      	adds	r3, #1
 8007284:	607b      	str	r3, [r7, #4]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2b06      	cmp	r3, #6
 800728a:	d9ef      	bls.n	800726c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800728c:	480d      	ldr	r0, [pc, #52]	; (80072c4 <prvInitialiseTaskLists+0x64>)
 800728e:	f7fe faab 	bl	80057e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007292:	480d      	ldr	r0, [pc, #52]	; (80072c8 <prvInitialiseTaskLists+0x68>)
 8007294:	f7fe faa8 	bl	80057e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007298:	480c      	ldr	r0, [pc, #48]	; (80072cc <prvInitialiseTaskLists+0x6c>)
 800729a:	f7fe faa5 	bl	80057e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800729e:	480c      	ldr	r0, [pc, #48]	; (80072d0 <prvInitialiseTaskLists+0x70>)
 80072a0:	f7fe faa2 	bl	80057e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80072a4:	480b      	ldr	r0, [pc, #44]	; (80072d4 <prvInitialiseTaskLists+0x74>)
 80072a6:	f7fe fa9f 	bl	80057e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80072aa:	4b0b      	ldr	r3, [pc, #44]	; (80072d8 <prvInitialiseTaskLists+0x78>)
 80072ac:	4a05      	ldr	r2, [pc, #20]	; (80072c4 <prvInitialiseTaskLists+0x64>)
 80072ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80072b0:	4b0a      	ldr	r3, [pc, #40]	; (80072dc <prvInitialiseTaskLists+0x7c>)
 80072b2:	4a05      	ldr	r2, [pc, #20]	; (80072c8 <prvInitialiseTaskLists+0x68>)
 80072b4:	601a      	str	r2, [r3, #0]
}
 80072b6:	bf00      	nop
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	20000564 	.word	0x20000564
 80072c4:	200005f0 	.word	0x200005f0
 80072c8:	20000604 	.word	0x20000604
 80072cc:	20000620 	.word	0x20000620
 80072d0:	20000634 	.word	0x20000634
 80072d4:	2000064c 	.word	0x2000064c
 80072d8:	20000618 	.word	0x20000618
 80072dc:	2000061c 	.word	0x2000061c

080072e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072e6:	e019      	b.n	800731c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80072e8:	f000 fbb8 	bl	8007a5c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80072ec:	4b10      	ldr	r3, [pc, #64]	; (8007330 <prvCheckTasksWaitingTermination+0x50>)
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	3304      	adds	r3, #4
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7fe fafb 	bl	80058f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80072fe:	4b0d      	ldr	r3, [pc, #52]	; (8007334 <prvCheckTasksWaitingTermination+0x54>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	3b01      	subs	r3, #1
 8007304:	4a0b      	ldr	r2, [pc, #44]	; (8007334 <prvCheckTasksWaitingTermination+0x54>)
 8007306:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007308:	4b0b      	ldr	r3, [pc, #44]	; (8007338 <prvCheckTasksWaitingTermination+0x58>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	3b01      	subs	r3, #1
 800730e:	4a0a      	ldr	r2, [pc, #40]	; (8007338 <prvCheckTasksWaitingTermination+0x58>)
 8007310:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007312:	f000 fbd3 	bl	8007abc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f810 	bl	800733c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800731c:	4b06      	ldr	r3, [pc, #24]	; (8007338 <prvCheckTasksWaitingTermination+0x58>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1e1      	bne.n	80072e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007324:	bf00      	nop
 8007326:	bf00      	nop
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	20000634 	.word	0x20000634
 8007334:	20000660 	.word	0x20000660
 8007338:	20000648 	.word	0x20000648

0800733c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	334c      	adds	r3, #76	; 0x4c
 8007348:	4618      	mov	r0, r3
 800734a:	f00a fe01 	bl	8011f50 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007354:	2b00      	cmp	r3, #0
 8007356:	d108      	bne.n	800736a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735c:	4618      	mov	r0, r3
 800735e:	f000 fd41 	bl	8007de4 <vPortFree>
				vPortFree( pxTCB );
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fd3e 	bl	8007de4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007368:	e018      	b.n	800739c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007370:	2b01      	cmp	r3, #1
 8007372:	d103      	bne.n	800737c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 fd35 	bl	8007de4 <vPortFree>
	}
 800737a:	e00f      	b.n	800739c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007382:	2b02      	cmp	r3, #2
 8007384:	d00a      	beq.n	800739c <prvDeleteTCB+0x60>
	__asm volatile
 8007386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738a:	f383 8811 	msr	BASEPRI, r3
 800738e:	f3bf 8f6f 	isb	sy
 8007392:	f3bf 8f4f 	dsb	sy
 8007396:	60fb      	str	r3, [r7, #12]
}
 8007398:	bf00      	nop
 800739a:	e7fe      	b.n	800739a <prvDeleteTCB+0x5e>
	}
 800739c:	bf00      	nop
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073aa:	4b0e      	ldr	r3, [pc, #56]	; (80073e4 <prvResetNextTaskUnblockTime+0x40>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d101      	bne.n	80073b8 <prvResetNextTaskUnblockTime+0x14>
 80073b4:	2301      	movs	r3, #1
 80073b6:	e000      	b.n	80073ba <prvResetNextTaskUnblockTime+0x16>
 80073b8:	2300      	movs	r3, #0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d004      	beq.n	80073c8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80073be:	4b0a      	ldr	r3, [pc, #40]	; (80073e8 <prvResetNextTaskUnblockTime+0x44>)
 80073c0:	f04f 32ff 	mov.w	r2, #4294967295
 80073c4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80073c6:	e008      	b.n	80073da <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80073c8:	4b06      	ldr	r3, [pc, #24]	; (80073e4 <prvResetNextTaskUnblockTime+0x40>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	4a04      	ldr	r2, [pc, #16]	; (80073e8 <prvResetNextTaskUnblockTime+0x44>)
 80073d8:	6013      	str	r3, [r2, #0]
}
 80073da:	bf00      	nop
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	bc80      	pop	{r7}
 80073e2:	4770      	bx	lr
 80073e4:	20000618 	.word	0x20000618
 80073e8:	20000680 	.word	0x20000680

080073ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80073f2:	4b0b      	ldr	r3, [pc, #44]	; (8007420 <xTaskGetSchedulerState+0x34>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d102      	bne.n	8007400 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80073fa:	2301      	movs	r3, #1
 80073fc:	607b      	str	r3, [r7, #4]
 80073fe:	e008      	b.n	8007412 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007400:	4b08      	ldr	r3, [pc, #32]	; (8007424 <xTaskGetSchedulerState+0x38>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d102      	bne.n	800740e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007408:	2302      	movs	r3, #2
 800740a:	607b      	str	r3, [r7, #4]
 800740c:	e001      	b.n	8007412 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800740e:	2300      	movs	r3, #0
 8007410:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007412:	687b      	ldr	r3, [r7, #4]
	}
 8007414:	4618      	mov	r0, r3
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	bc80      	pop	{r7}
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	2000066c 	.word	0x2000066c
 8007424:	20000688 	.word	0x20000688

08007428 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007434:	2300      	movs	r3, #0
 8007436:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d06e      	beq.n	800751c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007442:	4b39      	ldr	r3, [pc, #228]	; (8007528 <xTaskPriorityInherit+0x100>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007448:	429a      	cmp	r2, r3
 800744a:	d25e      	bcs.n	800750a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	2b00      	cmp	r3, #0
 8007452:	db06      	blt.n	8007462 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007454:	4b34      	ldr	r3, [pc, #208]	; (8007528 <xTaskPriorityInherit+0x100>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745a:	f1c3 0207 	rsb	r2, r3, #7
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	6959      	ldr	r1, [r3, #20]
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800746a:	4613      	mov	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4413      	add	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4a2e      	ldr	r2, [pc, #184]	; (800752c <xTaskPriorityInherit+0x104>)
 8007474:	4413      	add	r3, r2
 8007476:	4299      	cmp	r1, r3
 8007478:	d101      	bne.n	800747e <xTaskPriorityInherit+0x56>
 800747a:	2301      	movs	r3, #1
 800747c:	e000      	b.n	8007480 <xTaskPriorityInherit+0x58>
 800747e:	2300      	movs	r3, #0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d03a      	beq.n	80074fa <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	3304      	adds	r3, #4
 8007488:	4618      	mov	r0, r3
 800748a:	f7fe fa33 	bl	80058f4 <uxListRemove>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d115      	bne.n	80074c0 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007498:	4924      	ldr	r1, [pc, #144]	; (800752c <xTaskPriorityInherit+0x104>)
 800749a:	4613      	mov	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	440b      	add	r3, r1
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d10a      	bne.n	80074c0 <xTaskPriorityInherit+0x98>
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ae:	2201      	movs	r2, #1
 80074b0:	fa02 f303 	lsl.w	r3, r2, r3
 80074b4:	43da      	mvns	r2, r3
 80074b6:	4b1e      	ldr	r3, [pc, #120]	; (8007530 <xTaskPriorityInherit+0x108>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4013      	ands	r3, r2
 80074bc:	4a1c      	ldr	r2, [pc, #112]	; (8007530 <xTaskPriorityInherit+0x108>)
 80074be:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80074c0:	4b19      	ldr	r3, [pc, #100]	; (8007528 <xTaskPriorityInherit+0x100>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ce:	2201      	movs	r2, #1
 80074d0:	409a      	lsls	r2, r3
 80074d2:	4b17      	ldr	r3, [pc, #92]	; (8007530 <xTaskPriorityInherit+0x108>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	4a15      	ldr	r2, [pc, #84]	; (8007530 <xTaskPriorityInherit+0x108>)
 80074da:	6013      	str	r3, [r2, #0]
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e0:	4613      	mov	r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4a10      	ldr	r2, [pc, #64]	; (800752c <xTaskPriorityInherit+0x104>)
 80074ea:	441a      	add	r2, r3
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	3304      	adds	r3, #4
 80074f0:	4619      	mov	r1, r3
 80074f2:	4610      	mov	r0, r2
 80074f4:	f7fe f9a3 	bl	800583e <vListInsertEnd>
 80074f8:	e004      	b.n	8007504 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80074fa:	4b0b      	ldr	r3, [pc, #44]	; (8007528 <xTaskPriorityInherit+0x100>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007504:	2301      	movs	r3, #1
 8007506:	60fb      	str	r3, [r7, #12]
 8007508:	e008      	b.n	800751c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800750e:	4b06      	ldr	r3, [pc, #24]	; (8007528 <xTaskPriorityInherit+0x100>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007514:	429a      	cmp	r2, r3
 8007516:	d201      	bcs.n	800751c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007518:	2301      	movs	r3, #1
 800751a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800751c:	68fb      	ldr	r3, [r7, #12]
	}
 800751e:	4618      	mov	r0, r3
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	20000560 	.word	0x20000560
 800752c:	20000564 	.word	0x20000564
 8007530:	20000668 	.word	0x20000668

08007534 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007540:	2300      	movs	r3, #0
 8007542:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d06e      	beq.n	8007628 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800754a:	4b3a      	ldr	r3, [pc, #232]	; (8007634 <xTaskPriorityDisinherit+0x100>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	693a      	ldr	r2, [r7, #16]
 8007550:	429a      	cmp	r2, r3
 8007552:	d00a      	beq.n	800756a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	60fb      	str	r3, [r7, #12]
}
 8007566:	bf00      	nop
 8007568:	e7fe      	b.n	8007568 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10a      	bne.n	8007588 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007576:	f383 8811 	msr	BASEPRI, r3
 800757a:	f3bf 8f6f 	isb	sy
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	60bb      	str	r3, [r7, #8]
}
 8007584:	bf00      	nop
 8007586:	e7fe      	b.n	8007586 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800758c:	1e5a      	subs	r2, r3, #1
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800759a:	429a      	cmp	r2, r3
 800759c:	d044      	beq.n	8007628 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d140      	bne.n	8007628 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	3304      	adds	r3, #4
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7fe f9a2 	bl	80058f4 <uxListRemove>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d115      	bne.n	80075e2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ba:	491f      	ldr	r1, [pc, #124]	; (8007638 <xTaskPriorityDisinherit+0x104>)
 80075bc:	4613      	mov	r3, r2
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	4413      	add	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	440b      	add	r3, r1
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d10a      	bne.n	80075e2 <xTaskPriorityDisinherit+0xae>
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d0:	2201      	movs	r2, #1
 80075d2:	fa02 f303 	lsl.w	r3, r2, r3
 80075d6:	43da      	mvns	r2, r3
 80075d8:	4b18      	ldr	r3, [pc, #96]	; (800763c <xTaskPriorityDisinherit+0x108>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4013      	ands	r3, r2
 80075de:	4a17      	ldr	r2, [pc, #92]	; (800763c <xTaskPriorityDisinherit+0x108>)
 80075e0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ee:	f1c3 0207 	rsb	r2, r3, #7
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fa:	2201      	movs	r2, #1
 80075fc:	409a      	lsls	r2, r3
 80075fe:	4b0f      	ldr	r3, [pc, #60]	; (800763c <xTaskPriorityDisinherit+0x108>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4313      	orrs	r3, r2
 8007604:	4a0d      	ldr	r2, [pc, #52]	; (800763c <xTaskPriorityDisinherit+0x108>)
 8007606:	6013      	str	r3, [r2, #0]
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800760c:	4613      	mov	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4413      	add	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4a08      	ldr	r2, [pc, #32]	; (8007638 <xTaskPriorityDisinherit+0x104>)
 8007616:	441a      	add	r2, r3
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	3304      	adds	r3, #4
 800761c:	4619      	mov	r1, r3
 800761e:	4610      	mov	r0, r2
 8007620:	f7fe f90d 	bl	800583e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007624:	2301      	movs	r3, #1
 8007626:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007628:	697b      	ldr	r3, [r7, #20]
	}
 800762a:	4618      	mov	r0, r3
 800762c:	3718      	adds	r7, #24
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	20000560 	.word	0x20000560
 8007638:	20000564 	.word	0x20000564
 800763c:	20000668 	.word	0x20000668

08007640 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007640:	b580      	push	{r7, lr}
 8007642:	b088      	sub	sp, #32
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800764e:	2301      	movs	r3, #1
 8007650:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	f000 8088 	beq.w	800776a <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800765e:	2b00      	cmp	r3, #0
 8007660:	d10a      	bne.n	8007678 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007666:	f383 8811 	msr	BASEPRI, r3
 800766a:	f3bf 8f6f 	isb	sy
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	60fb      	str	r3, [r7, #12]
}
 8007674:	bf00      	nop
 8007676:	e7fe      	b.n	8007676 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800767c:	683a      	ldr	r2, [r7, #0]
 800767e:	429a      	cmp	r2, r3
 8007680:	d902      	bls.n	8007688 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	61fb      	str	r3, [r7, #28]
 8007686:	e002      	b.n	800768e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800768c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007692:	69fa      	ldr	r2, [r7, #28]
 8007694:	429a      	cmp	r2, r3
 8007696:	d068      	beq.n	800776a <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800769c:	697a      	ldr	r2, [r7, #20]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d163      	bne.n	800776a <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80076a2:	4b34      	ldr	r3, [pc, #208]	; (8007774 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	69ba      	ldr	r2, [r7, #24]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d10a      	bne.n	80076c2 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80076ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b0:	f383 8811 	msr	BASEPRI, r3
 80076b4:	f3bf 8f6f 	isb	sy
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	60bb      	str	r3, [r7, #8]
}
 80076be:	bf00      	nop
 80076c0:	e7fe      	b.n	80076c0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	69fa      	ldr	r2, [r7, #28]
 80076cc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	db04      	blt.n	80076e0 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	f1c3 0207 	rsb	r2, r3, #7
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	6959      	ldr	r1, [r3, #20]
 80076e4:	693a      	ldr	r2, [r7, #16]
 80076e6:	4613      	mov	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	4413      	add	r3, r2
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	4a22      	ldr	r2, [pc, #136]	; (8007778 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80076f0:	4413      	add	r3, r2
 80076f2:	4299      	cmp	r1, r3
 80076f4:	d101      	bne.n	80076fa <vTaskPriorityDisinheritAfterTimeout+0xba>
 80076f6:	2301      	movs	r3, #1
 80076f8:	e000      	b.n	80076fc <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80076fa:	2300      	movs	r3, #0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d034      	beq.n	800776a <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	3304      	adds	r3, #4
 8007704:	4618      	mov	r0, r3
 8007706:	f7fe f8f5 	bl	80058f4 <uxListRemove>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d115      	bne.n	800773c <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007714:	4918      	ldr	r1, [pc, #96]	; (8007778 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007716:	4613      	mov	r3, r2
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	4413      	add	r3, r2
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	440b      	add	r3, r1
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d10a      	bne.n	800773c <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772a:	2201      	movs	r2, #1
 800772c:	fa02 f303 	lsl.w	r3, r2, r3
 8007730:	43da      	mvns	r2, r3
 8007732:	4b12      	ldr	r3, [pc, #72]	; (800777c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4013      	ands	r3, r2
 8007738:	4a10      	ldr	r2, [pc, #64]	; (800777c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800773a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007740:	2201      	movs	r2, #1
 8007742:	409a      	lsls	r2, r3
 8007744:	4b0d      	ldr	r3, [pc, #52]	; (800777c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4313      	orrs	r3, r2
 800774a:	4a0c      	ldr	r2, [pc, #48]	; (800777c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800774c:	6013      	str	r3, [r2, #0]
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007752:	4613      	mov	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4413      	add	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4a07      	ldr	r2, [pc, #28]	; (8007778 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800775c:	441a      	add	r2, r3
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	3304      	adds	r3, #4
 8007762:	4619      	mov	r1, r3
 8007764:	4610      	mov	r0, r2
 8007766:	f7fe f86a 	bl	800583e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800776a:	bf00      	nop
 800776c:	3720      	adds	r7, #32
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	20000560 	.word	0x20000560
 8007778:	20000564 	.word	0x20000564
 800777c:	20000668 	.word	0x20000668

08007780 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007780:	b480      	push	{r7}
 8007782:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007784:	4b07      	ldr	r3, [pc, #28]	; (80077a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d004      	beq.n	8007796 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800778c:	4b05      	ldr	r3, [pc, #20]	; (80077a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007792:	3201      	adds	r2, #1
 8007794:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007796:	4b03      	ldr	r3, [pc, #12]	; (80077a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007798:	681b      	ldr	r3, [r3, #0]
	}
 800779a:	4618      	mov	r0, r3
 800779c:	46bd      	mov	sp, r7
 800779e:	bc80      	pop	{r7}
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	20000560 	.word	0x20000560

080077a8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80077b2:	4b29      	ldr	r3, [pc, #164]	; (8007858 <prvAddCurrentTaskToDelayedList+0xb0>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077b8:	4b28      	ldr	r3, [pc, #160]	; (800785c <prvAddCurrentTaskToDelayedList+0xb4>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	3304      	adds	r3, #4
 80077be:	4618      	mov	r0, r3
 80077c0:	f7fe f898 	bl	80058f4 <uxListRemove>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10b      	bne.n	80077e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80077ca:	4b24      	ldr	r3, [pc, #144]	; (800785c <prvAddCurrentTaskToDelayedList+0xb4>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d0:	2201      	movs	r2, #1
 80077d2:	fa02 f303 	lsl.w	r3, r2, r3
 80077d6:	43da      	mvns	r2, r3
 80077d8:	4b21      	ldr	r3, [pc, #132]	; (8007860 <prvAddCurrentTaskToDelayedList+0xb8>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4013      	ands	r3, r2
 80077de:	4a20      	ldr	r2, [pc, #128]	; (8007860 <prvAddCurrentTaskToDelayedList+0xb8>)
 80077e0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e8:	d10a      	bne.n	8007800 <prvAddCurrentTaskToDelayedList+0x58>
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d007      	beq.n	8007800 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077f0:	4b1a      	ldr	r3, [pc, #104]	; (800785c <prvAddCurrentTaskToDelayedList+0xb4>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3304      	adds	r3, #4
 80077f6:	4619      	mov	r1, r3
 80077f8:	481a      	ldr	r0, [pc, #104]	; (8007864 <prvAddCurrentTaskToDelayedList+0xbc>)
 80077fa:	f7fe f820 	bl	800583e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80077fe:	e026      	b.n	800784e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4413      	add	r3, r2
 8007806:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007808:	4b14      	ldr	r3, [pc, #80]	; (800785c <prvAddCurrentTaskToDelayedList+0xb4>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007810:	68ba      	ldr	r2, [r7, #8]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	429a      	cmp	r2, r3
 8007816:	d209      	bcs.n	800782c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007818:	4b13      	ldr	r3, [pc, #76]	; (8007868 <prvAddCurrentTaskToDelayedList+0xc0>)
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	4b0f      	ldr	r3, [pc, #60]	; (800785c <prvAddCurrentTaskToDelayedList+0xb4>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	3304      	adds	r3, #4
 8007822:	4619      	mov	r1, r3
 8007824:	4610      	mov	r0, r2
 8007826:	f7fe f82d 	bl	8005884 <vListInsert>
}
 800782a:	e010      	b.n	800784e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800782c:	4b0f      	ldr	r3, [pc, #60]	; (800786c <prvAddCurrentTaskToDelayedList+0xc4>)
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	4b0a      	ldr	r3, [pc, #40]	; (800785c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	3304      	adds	r3, #4
 8007836:	4619      	mov	r1, r3
 8007838:	4610      	mov	r0, r2
 800783a:	f7fe f823 	bl	8005884 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800783e:	4b0c      	ldr	r3, [pc, #48]	; (8007870 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	429a      	cmp	r2, r3
 8007846:	d202      	bcs.n	800784e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007848:	4a09      	ldr	r2, [pc, #36]	; (8007870 <prvAddCurrentTaskToDelayedList+0xc8>)
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	6013      	str	r3, [r2, #0]
}
 800784e:	bf00      	nop
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	20000664 	.word	0x20000664
 800785c:	20000560 	.word	0x20000560
 8007860:	20000668 	.word	0x20000668
 8007864:	2000064c 	.word	0x2000064c
 8007868:	2000061c 	.word	0x2000061c
 800786c:	20000618 	.word	0x20000618
 8007870:	20000680 	.word	0x20000680

08007874 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	3b04      	subs	r3, #4
 8007884:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800788c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	3b04      	subs	r3, #4
 8007892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	f023 0201 	bic.w	r2, r3, #1
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	3b04      	subs	r3, #4
 80078a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80078a4:	4a08      	ldr	r2, [pc, #32]	; (80078c8 <pxPortInitialiseStack+0x54>)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	3b14      	subs	r3, #20
 80078ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	3b20      	subs	r3, #32
 80078ba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80078bc:	68fb      	ldr	r3, [r7, #12]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3714      	adds	r7, #20
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bc80      	pop	{r7}
 80078c6:	4770      	bx	lr
 80078c8:	080078cd 	.word	0x080078cd

080078cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80078d2:	2300      	movs	r3, #0
 80078d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80078d6:	4b12      	ldr	r3, [pc, #72]	; (8007920 <prvTaskExitError+0x54>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078de:	d00a      	beq.n	80078f6 <prvTaskExitError+0x2a>
	__asm volatile
 80078e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e4:	f383 8811 	msr	BASEPRI, r3
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	60fb      	str	r3, [r7, #12]
}
 80078f2:	bf00      	nop
 80078f4:	e7fe      	b.n	80078f4 <prvTaskExitError+0x28>
	__asm volatile
 80078f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fa:	f383 8811 	msr	BASEPRI, r3
 80078fe:	f3bf 8f6f 	isb	sy
 8007902:	f3bf 8f4f 	dsb	sy
 8007906:	60bb      	str	r3, [r7, #8]
}
 8007908:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800790a:	bf00      	nop
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d0fc      	beq.n	800790c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007912:	bf00      	nop
 8007914:	bf00      	nop
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	bc80      	pop	{r7}
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	2000000c 	.word	0x2000000c
	...

08007930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007930:	4b07      	ldr	r3, [pc, #28]	; (8007950 <pxCurrentTCBConst2>)
 8007932:	6819      	ldr	r1, [r3, #0]
 8007934:	6808      	ldr	r0, [r1, #0]
 8007936:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800793a:	f380 8809 	msr	PSP, r0
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f04f 0000 	mov.w	r0, #0
 8007946:	f380 8811 	msr	BASEPRI, r0
 800794a:	f04e 0e0d 	orr.w	lr, lr, #13
 800794e:	4770      	bx	lr

08007950 <pxCurrentTCBConst2>:
 8007950:	20000560 	.word	0x20000560
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007954:	bf00      	nop
 8007956:	bf00      	nop

08007958 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007958:	4806      	ldr	r0, [pc, #24]	; (8007974 <prvPortStartFirstTask+0x1c>)
 800795a:	6800      	ldr	r0, [r0, #0]
 800795c:	6800      	ldr	r0, [r0, #0]
 800795e:	f380 8808 	msr	MSP, r0
 8007962:	b662      	cpsie	i
 8007964:	b661      	cpsie	f
 8007966:	f3bf 8f4f 	dsb	sy
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	df00      	svc	0
 8007970:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007972:	bf00      	nop
 8007974:	e000ed08 	.word	0xe000ed08

08007978 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800797e:	4b32      	ldr	r3, [pc, #200]	; (8007a48 <xPortStartScheduler+0xd0>)
 8007980:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	b2db      	uxtb	r3, r3
 8007988:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	22ff      	movs	r2, #255	; 0xff
 800798e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	b2db      	uxtb	r3, r3
 8007996:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007998:	78fb      	ldrb	r3, [r7, #3]
 800799a:	b2db      	uxtb	r3, r3
 800799c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80079a0:	b2da      	uxtb	r2, r3
 80079a2:	4b2a      	ldr	r3, [pc, #168]	; (8007a4c <xPortStartScheduler+0xd4>)
 80079a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80079a6:	4b2a      	ldr	r3, [pc, #168]	; (8007a50 <xPortStartScheduler+0xd8>)
 80079a8:	2207      	movs	r2, #7
 80079aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079ac:	e009      	b.n	80079c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80079ae:	4b28      	ldr	r3, [pc, #160]	; (8007a50 <xPortStartScheduler+0xd8>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	3b01      	subs	r3, #1
 80079b4:	4a26      	ldr	r2, [pc, #152]	; (8007a50 <xPortStartScheduler+0xd8>)
 80079b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079b8:	78fb      	ldrb	r3, [r7, #3]
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	005b      	lsls	r3, r3, #1
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079c2:	78fb      	ldrb	r3, [r7, #3]
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ca:	2b80      	cmp	r3, #128	; 0x80
 80079cc:	d0ef      	beq.n	80079ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079ce:	4b20      	ldr	r3, [pc, #128]	; (8007a50 <xPortStartScheduler+0xd8>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f1c3 0307 	rsb	r3, r3, #7
 80079d6:	2b04      	cmp	r3, #4
 80079d8:	d00a      	beq.n	80079f0 <xPortStartScheduler+0x78>
	__asm volatile
 80079da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079de:	f383 8811 	msr	BASEPRI, r3
 80079e2:	f3bf 8f6f 	isb	sy
 80079e6:	f3bf 8f4f 	dsb	sy
 80079ea:	60bb      	str	r3, [r7, #8]
}
 80079ec:	bf00      	nop
 80079ee:	e7fe      	b.n	80079ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079f0:	4b17      	ldr	r3, [pc, #92]	; (8007a50 <xPortStartScheduler+0xd8>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	021b      	lsls	r3, r3, #8
 80079f6:	4a16      	ldr	r2, [pc, #88]	; (8007a50 <xPortStartScheduler+0xd8>)
 80079f8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079fa:	4b15      	ldr	r3, [pc, #84]	; (8007a50 <xPortStartScheduler+0xd8>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a02:	4a13      	ldr	r2, [pc, #76]	; (8007a50 <xPortStartScheduler+0xd8>)
 8007a04:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	b2da      	uxtb	r2, r3
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a0e:	4b11      	ldr	r3, [pc, #68]	; (8007a54 <xPortStartScheduler+0xdc>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a10      	ldr	r2, [pc, #64]	; (8007a54 <xPortStartScheduler+0xdc>)
 8007a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a1a:	4b0e      	ldr	r3, [pc, #56]	; (8007a54 <xPortStartScheduler+0xdc>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a0d      	ldr	r2, [pc, #52]	; (8007a54 <xPortStartScheduler+0xdc>)
 8007a20:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007a24:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a26:	f000 f8b9 	bl	8007b9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a2a:	4b0b      	ldr	r3, [pc, #44]	; (8007a58 <xPortStartScheduler+0xe0>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a30:	f7ff ff92 	bl	8007958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a34:	f7ff fa90 	bl	8006f58 <vTaskSwitchContext>
	prvTaskExitError();
 8007a38:	f7ff ff48 	bl	80078cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	e000e400 	.word	0xe000e400
 8007a4c:	2000068c 	.word	0x2000068c
 8007a50:	20000690 	.word	0x20000690
 8007a54:	e000ed20 	.word	0xe000ed20
 8007a58:	2000000c 	.word	0x2000000c

08007a5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
	__asm volatile
 8007a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a66:	f383 8811 	msr	BASEPRI, r3
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	607b      	str	r3, [r7, #4]
}
 8007a74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a76:	4b0f      	ldr	r3, [pc, #60]	; (8007ab4 <vPortEnterCritical+0x58>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	4a0d      	ldr	r2, [pc, #52]	; (8007ab4 <vPortEnterCritical+0x58>)
 8007a7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a80:	4b0c      	ldr	r3, [pc, #48]	; (8007ab4 <vPortEnterCritical+0x58>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d10f      	bne.n	8007aa8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a88:	4b0b      	ldr	r3, [pc, #44]	; (8007ab8 <vPortEnterCritical+0x5c>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00a      	beq.n	8007aa8 <vPortEnterCritical+0x4c>
	__asm volatile
 8007a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a96:	f383 8811 	msr	BASEPRI, r3
 8007a9a:	f3bf 8f6f 	isb	sy
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	603b      	str	r3, [r7, #0]
}
 8007aa4:	bf00      	nop
 8007aa6:	e7fe      	b.n	8007aa6 <vPortEnterCritical+0x4a>
	}
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bc80      	pop	{r7}
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	2000000c 	.word	0x2000000c
 8007ab8:	e000ed04 	.word	0xe000ed04

08007abc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007ac2:	4b11      	ldr	r3, [pc, #68]	; (8007b08 <vPortExitCritical+0x4c>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10a      	bne.n	8007ae0 <vPortExitCritical+0x24>
	__asm volatile
 8007aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ace:	f383 8811 	msr	BASEPRI, r3
 8007ad2:	f3bf 8f6f 	isb	sy
 8007ad6:	f3bf 8f4f 	dsb	sy
 8007ada:	607b      	str	r3, [r7, #4]
}
 8007adc:	bf00      	nop
 8007ade:	e7fe      	b.n	8007ade <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ae0:	4b09      	ldr	r3, [pc, #36]	; (8007b08 <vPortExitCritical+0x4c>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	4a08      	ldr	r2, [pc, #32]	; (8007b08 <vPortExitCritical+0x4c>)
 8007ae8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007aea:	4b07      	ldr	r3, [pc, #28]	; (8007b08 <vPortExitCritical+0x4c>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d105      	bne.n	8007afe <vPortExitCritical+0x42>
 8007af2:	2300      	movs	r3, #0
 8007af4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	f383 8811 	msr	BASEPRI, r3
}
 8007afc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007afe:	bf00      	nop
 8007b00:	370c      	adds	r7, #12
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bc80      	pop	{r7}
 8007b06:	4770      	bx	lr
 8007b08:	2000000c 	.word	0x2000000c
 8007b0c:	00000000 	.word	0x00000000

08007b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b10:	f3ef 8009 	mrs	r0, PSP
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	4b0d      	ldr	r3, [pc, #52]	; (8007b50 <pxCurrentTCBConst>)
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007b20:	6010      	str	r0, [r2, #0]
 8007b22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007b26:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007b2a:	f380 8811 	msr	BASEPRI, r0
 8007b2e:	f7ff fa13 	bl	8006f58 <vTaskSwitchContext>
 8007b32:	f04f 0000 	mov.w	r0, #0
 8007b36:	f380 8811 	msr	BASEPRI, r0
 8007b3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007b3e:	6819      	ldr	r1, [r3, #0]
 8007b40:	6808      	ldr	r0, [r1, #0]
 8007b42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007b46:	f380 8809 	msr	PSP, r0
 8007b4a:	f3bf 8f6f 	isb	sy
 8007b4e:	4770      	bx	lr

08007b50 <pxCurrentTCBConst>:
 8007b50:	20000560 	.word	0x20000560
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b54:	bf00      	nop
 8007b56:	bf00      	nop

08007b58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	607b      	str	r3, [r7, #4]
}
 8007b70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b72:	f7ff f933 	bl	8006ddc <xTaskIncrementTick>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d003      	beq.n	8007b84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b7c:	4b06      	ldr	r3, [pc, #24]	; (8007b98 <SysTick_Handler+0x40>)
 8007b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b82:	601a      	str	r2, [r3, #0]
 8007b84:	2300      	movs	r3, #0
 8007b86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	f383 8811 	msr	BASEPRI, r3
}
 8007b8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b90:	bf00      	nop
 8007b92:	3708      	adds	r7, #8
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	e000ed04 	.word	0xe000ed04

08007b9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ba0:	4b0a      	ldr	r3, [pc, #40]	; (8007bcc <vPortSetupTimerInterrupt+0x30>)
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ba6:	4b0a      	ldr	r3, [pc, #40]	; (8007bd0 <vPortSetupTimerInterrupt+0x34>)
 8007ba8:	2200      	movs	r2, #0
 8007baa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007bac:	4b09      	ldr	r3, [pc, #36]	; (8007bd4 <vPortSetupTimerInterrupt+0x38>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a09      	ldr	r2, [pc, #36]	; (8007bd8 <vPortSetupTimerInterrupt+0x3c>)
 8007bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb6:	099b      	lsrs	r3, r3, #6
 8007bb8:	4a08      	ldr	r2, [pc, #32]	; (8007bdc <vPortSetupTimerInterrupt+0x40>)
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007bbe:	4b03      	ldr	r3, [pc, #12]	; (8007bcc <vPortSetupTimerInterrupt+0x30>)
 8007bc0:	2207      	movs	r2, #7
 8007bc2:	601a      	str	r2, [r3, #0]
}
 8007bc4:	bf00      	nop
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bc80      	pop	{r7}
 8007bca:	4770      	bx	lr
 8007bcc:	e000e010 	.word	0xe000e010
 8007bd0:	e000e018 	.word	0xe000e018
 8007bd4:	20000000 	.word	0x20000000
 8007bd8:	10624dd3 	.word	0x10624dd3
 8007bdc:	e000e014 	.word	0xe000e014

08007be0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007be0:	b480      	push	{r7}
 8007be2:	b085      	sub	sp, #20
 8007be4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007be6:	f3ef 8305 	mrs	r3, IPSR
 8007bea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2b0f      	cmp	r3, #15
 8007bf0:	d914      	bls.n	8007c1c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007bf2:	4a16      	ldr	r2, [pc, #88]	; (8007c4c <vPortValidateInterruptPriority+0x6c>)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007bfc:	4b14      	ldr	r3, [pc, #80]	; (8007c50 <vPortValidateInterruptPriority+0x70>)
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	7afa      	ldrb	r2, [r7, #11]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d20a      	bcs.n	8007c1c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0a:	f383 8811 	msr	BASEPRI, r3
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	f3bf 8f4f 	dsb	sy
 8007c16:	607b      	str	r3, [r7, #4]
}
 8007c18:	bf00      	nop
 8007c1a:	e7fe      	b.n	8007c1a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c1c:	4b0d      	ldr	r3, [pc, #52]	; (8007c54 <vPortValidateInterruptPriority+0x74>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c24:	4b0c      	ldr	r3, [pc, #48]	; (8007c58 <vPortValidateInterruptPriority+0x78>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d90a      	bls.n	8007c42 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c30:	f383 8811 	msr	BASEPRI, r3
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	603b      	str	r3, [r7, #0]
}
 8007c3e:	bf00      	nop
 8007c40:	e7fe      	b.n	8007c40 <vPortValidateInterruptPriority+0x60>
	}
 8007c42:	bf00      	nop
 8007c44:	3714      	adds	r7, #20
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bc80      	pop	{r7}
 8007c4a:	4770      	bx	lr
 8007c4c:	e000e3f0 	.word	0xe000e3f0
 8007c50:	2000068c 	.word	0x2000068c
 8007c54:	e000ed0c 	.word	0xe000ed0c
 8007c58:	20000690 	.word	0x20000690

08007c5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b08a      	sub	sp, #40	; 0x28
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c64:	2300      	movs	r3, #0
 8007c66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c68:	f7fe ffee 	bl	8006c48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c6c:	4b58      	ldr	r3, [pc, #352]	; (8007dd0 <pvPortMalloc+0x174>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d101      	bne.n	8007c78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c74:	f000 f910 	bl	8007e98 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c78:	4b56      	ldr	r3, [pc, #344]	; (8007dd4 <pvPortMalloc+0x178>)
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4013      	ands	r3, r2
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f040 808e 	bne.w	8007da2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d01d      	beq.n	8007cc8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007c8c:	2208      	movs	r2, #8
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4413      	add	r3, r2
 8007c92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f003 0307 	and.w	r3, r3, #7
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d014      	beq.n	8007cc8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f023 0307 	bic.w	r3, r3, #7
 8007ca4:	3308      	adds	r3, #8
 8007ca6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f003 0307 	and.w	r3, r3, #7
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00a      	beq.n	8007cc8 <pvPortMalloc+0x6c>
	__asm volatile
 8007cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb6:	f383 8811 	msr	BASEPRI, r3
 8007cba:	f3bf 8f6f 	isb	sy
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	617b      	str	r3, [r7, #20]
}
 8007cc4:	bf00      	nop
 8007cc6:	e7fe      	b.n	8007cc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d069      	beq.n	8007da2 <pvPortMalloc+0x146>
 8007cce:	4b42      	ldr	r3, [pc, #264]	; (8007dd8 <pvPortMalloc+0x17c>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d864      	bhi.n	8007da2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007cd8:	4b40      	ldr	r3, [pc, #256]	; (8007ddc <pvPortMalloc+0x180>)
 8007cda:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007cdc:	4b3f      	ldr	r3, [pc, #252]	; (8007ddc <pvPortMalloc+0x180>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ce2:	e004      	b.n	8007cee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d903      	bls.n	8007d00 <pvPortMalloc+0xa4>
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1f1      	bne.n	8007ce4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d00:	4b33      	ldr	r3, [pc, #204]	; (8007dd0 <pvPortMalloc+0x174>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d04b      	beq.n	8007da2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d0a:	6a3b      	ldr	r3, [r7, #32]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2208      	movs	r2, #8
 8007d10:	4413      	add	r3, r2
 8007d12:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	6a3b      	ldr	r3, [r7, #32]
 8007d1a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1e:	685a      	ldr	r2, [r3, #4]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	1ad2      	subs	r2, r2, r3
 8007d24:	2308      	movs	r3, #8
 8007d26:	005b      	lsls	r3, r3, #1
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d91f      	bls.n	8007d6c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4413      	add	r3, r2
 8007d32:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	f003 0307 	and.w	r3, r3, #7
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00a      	beq.n	8007d54 <pvPortMalloc+0xf8>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	613b      	str	r3, [r7, #16]
}
 8007d50:	bf00      	nop
 8007d52:	e7fe      	b.n	8007d52 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d56:	685a      	ldr	r2, [r3, #4]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	1ad2      	subs	r2, r2, r3
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d66:	69b8      	ldr	r0, [r7, #24]
 8007d68:	f000 f8f8 	bl	8007f5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d6c:	4b1a      	ldr	r3, [pc, #104]	; (8007dd8 <pvPortMalloc+0x17c>)
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	4a18      	ldr	r2, [pc, #96]	; (8007dd8 <pvPortMalloc+0x17c>)
 8007d78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d7a:	4b17      	ldr	r3, [pc, #92]	; (8007dd8 <pvPortMalloc+0x17c>)
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	4b18      	ldr	r3, [pc, #96]	; (8007de0 <pvPortMalloc+0x184>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d203      	bcs.n	8007d8e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d86:	4b14      	ldr	r3, [pc, #80]	; (8007dd8 <pvPortMalloc+0x17c>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a15      	ldr	r2, [pc, #84]	; (8007de0 <pvPortMalloc+0x184>)
 8007d8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d90:	685a      	ldr	r2, [r3, #4]
 8007d92:	4b10      	ldr	r3, [pc, #64]	; (8007dd4 <pvPortMalloc+0x178>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	431a      	orrs	r2, r3
 8007d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9e:	2200      	movs	r2, #0
 8007da0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007da2:	f7fe ff5f 	bl	8006c64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	f003 0307 	and.w	r3, r3, #7
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00a      	beq.n	8007dc6 <pvPortMalloc+0x16a>
	__asm volatile
 8007db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	60fb      	str	r3, [r7, #12]
}
 8007dc2:	bf00      	nop
 8007dc4:	e7fe      	b.n	8007dc4 <pvPortMalloc+0x168>
	return pvReturn;
 8007dc6:	69fb      	ldr	r3, [r7, #28]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3728      	adds	r7, #40	; 0x28
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	2000429c 	.word	0x2000429c
 8007dd4:	200042a8 	.word	0x200042a8
 8007dd8:	200042a0 	.word	0x200042a0
 8007ddc:	20004294 	.word	0x20004294
 8007de0:	200042a4 	.word	0x200042a4

08007de4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b086      	sub	sp, #24
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d048      	beq.n	8007e88 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007df6:	2308      	movs	r3, #8
 8007df8:	425b      	negs	r3, r3
 8007dfa:	697a      	ldr	r2, [r7, #20]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	685a      	ldr	r2, [r3, #4]
 8007e08:	4b21      	ldr	r3, [pc, #132]	; (8007e90 <vPortFree+0xac>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10a      	bne.n	8007e28 <vPortFree+0x44>
	__asm volatile
 8007e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e16:	f383 8811 	msr	BASEPRI, r3
 8007e1a:	f3bf 8f6f 	isb	sy
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	60fb      	str	r3, [r7, #12]
}
 8007e24:	bf00      	nop
 8007e26:	e7fe      	b.n	8007e26 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00a      	beq.n	8007e46 <vPortFree+0x62>
	__asm volatile
 8007e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e34:	f383 8811 	msr	BASEPRI, r3
 8007e38:	f3bf 8f6f 	isb	sy
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	60bb      	str	r3, [r7, #8]
}
 8007e42:	bf00      	nop
 8007e44:	e7fe      	b.n	8007e44 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	685a      	ldr	r2, [r3, #4]
 8007e4a:	4b11      	ldr	r3, [pc, #68]	; (8007e90 <vPortFree+0xac>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4013      	ands	r3, r2
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d019      	beq.n	8007e88 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d115      	bne.n	8007e88 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	4b0b      	ldr	r3, [pc, #44]	; (8007e90 <vPortFree+0xac>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	43db      	mvns	r3, r3
 8007e66:	401a      	ands	r2, r3
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e6c:	f7fe feec 	bl	8006c48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	4b07      	ldr	r3, [pc, #28]	; (8007e94 <vPortFree+0xb0>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4413      	add	r3, r2
 8007e7a:	4a06      	ldr	r2, [pc, #24]	; (8007e94 <vPortFree+0xb0>)
 8007e7c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e7e:	6938      	ldr	r0, [r7, #16]
 8007e80:	f000 f86c 	bl	8007f5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007e84:	f7fe feee 	bl	8006c64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e88:	bf00      	nop
 8007e8a:	3718      	adds	r7, #24
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	200042a8 	.word	0x200042a8
 8007e94:	200042a0 	.word	0x200042a0

08007e98 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e9e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007ea2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ea4:	4b27      	ldr	r3, [pc, #156]	; (8007f44 <prvHeapInit+0xac>)
 8007ea6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f003 0307 	and.w	r3, r3, #7
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00c      	beq.n	8007ecc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	3307      	adds	r3, #7
 8007eb6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f023 0307 	bic.w	r3, r3, #7
 8007ebe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	1ad3      	subs	r3, r2, r3
 8007ec6:	4a1f      	ldr	r2, [pc, #124]	; (8007f44 <prvHeapInit+0xac>)
 8007ec8:	4413      	add	r3, r2
 8007eca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ed0:	4a1d      	ldr	r2, [pc, #116]	; (8007f48 <prvHeapInit+0xb0>)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ed6:	4b1c      	ldr	r3, [pc, #112]	; (8007f48 <prvHeapInit+0xb0>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ee4:	2208      	movs	r2, #8
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	1a9b      	subs	r3, r3, r2
 8007eea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f023 0307 	bic.w	r3, r3, #7
 8007ef2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	4a15      	ldr	r2, [pc, #84]	; (8007f4c <prvHeapInit+0xb4>)
 8007ef8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007efa:	4b14      	ldr	r3, [pc, #80]	; (8007f4c <prvHeapInit+0xb4>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2200      	movs	r2, #0
 8007f00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f02:	4b12      	ldr	r3, [pc, #72]	; (8007f4c <prvHeapInit+0xb4>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2200      	movs	r2, #0
 8007f08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	1ad2      	subs	r2, r2, r3
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f18:	4b0c      	ldr	r3, [pc, #48]	; (8007f4c <prvHeapInit+0xb4>)
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	4a0a      	ldr	r2, [pc, #40]	; (8007f50 <prvHeapInit+0xb8>)
 8007f26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	4a09      	ldr	r2, [pc, #36]	; (8007f54 <prvHeapInit+0xbc>)
 8007f2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f30:	4b09      	ldr	r3, [pc, #36]	; (8007f58 <prvHeapInit+0xc0>)
 8007f32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007f36:	601a      	str	r2, [r3, #0]
}
 8007f38:	bf00      	nop
 8007f3a:	3714      	adds	r7, #20
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bc80      	pop	{r7}
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	20000694 	.word	0x20000694
 8007f48:	20004294 	.word	0x20004294
 8007f4c:	2000429c 	.word	0x2000429c
 8007f50:	200042a4 	.word	0x200042a4
 8007f54:	200042a0 	.word	0x200042a0
 8007f58:	200042a8 	.word	0x200042a8

08007f5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f64:	4b27      	ldr	r3, [pc, #156]	; (8008004 <prvInsertBlockIntoFreeList+0xa8>)
 8007f66:	60fb      	str	r3, [r7, #12]
 8007f68:	e002      	b.n	8007f70 <prvInsertBlockIntoFreeList+0x14>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	60fb      	str	r3, [r7, #12]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d8f7      	bhi.n	8007f6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	68ba      	ldr	r2, [r7, #8]
 8007f84:	4413      	add	r3, r2
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d108      	bne.n	8007f9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	685a      	ldr	r2, [r3, #4]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	441a      	add	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	441a      	add	r2, r3
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d118      	bne.n	8007fe4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	4b14      	ldr	r3, [pc, #80]	; (8008008 <prvInsertBlockIntoFreeList+0xac>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d00d      	beq.n	8007fda <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	685a      	ldr	r2, [r3, #4]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	441a      	add	r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	601a      	str	r2, [r3, #0]
 8007fd8:	e008      	b.n	8007fec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007fda:	4b0b      	ldr	r3, [pc, #44]	; (8008008 <prvInsertBlockIntoFreeList+0xac>)
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	601a      	str	r2, [r3, #0]
 8007fe2:	e003      	b.n	8007fec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d002      	beq.n	8007ffa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ffa:	bf00      	nop
 8007ffc:	3714      	adds	r7, #20
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bc80      	pop	{r7}
 8008002:	4770      	bx	lr
 8008004:	20004294 	.word	0x20004294
 8008008:	2000429c 	.word	0x2000429c

0800800c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8008014:	4b2b      	ldr	r3, [pc, #172]	; (80080c4 <tcpip_thread+0xb8>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d005      	beq.n	8008028 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 800801c:	4b29      	ldr	r3, [pc, #164]	; (80080c4 <tcpip_thread+0xb8>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a29      	ldr	r2, [pc, #164]	; (80080c8 <tcpip_thread+0xbc>)
 8008022:	6812      	ldr	r2, [r2, #0]
 8008024:	4610      	mov	r0, r2
 8008026:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 8008028:	4828      	ldr	r0, [pc, #160]	; (80080cc <tcpip_thread+0xc0>)
 800802a:	f009 fd6f 	bl	8011b0c <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800802e:	4827      	ldr	r0, [pc, #156]	; (80080cc <tcpip_thread+0xc0>)
 8008030:	f009 fd7b 	bl	8011b2a <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8008034:	f107 030c 	add.w	r3, r7, #12
 8008038:	4619      	mov	r1, r3
 800803a:	4825      	ldr	r0, [pc, #148]	; (80080d0 <tcpip_thread+0xc4>)
 800803c:	f007 f912 	bl	800f264 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8008040:	4822      	ldr	r0, [pc, #136]	; (80080cc <tcpip_thread+0xc0>)
 8008042:	f009 fd63 	bl	8011b0c <sys_mutex_lock>
    if (msg == NULL) {
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d106      	bne.n	800805a <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800804c:	4b21      	ldr	r3, [pc, #132]	; (80080d4 <tcpip_thread+0xc8>)
 800804e:	2269      	movs	r2, #105	; 0x69
 8008050:	4921      	ldr	r1, [pc, #132]	; (80080d8 <tcpip_thread+0xcc>)
 8008052:	4822      	ldr	r0, [pc, #136]	; (80080dc <tcpip_thread+0xd0>)
 8008054:	f009 ff56 	bl	8011f04 <iprintf>
      continue;
 8008058:	e032      	b.n	80080c0 <tcpip_thread+0xb4>
    }
    switch (msg->type) {
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	2b04      	cmp	r3, #4
 8008060:	d020      	beq.n	80080a4 <tcpip_thread+0x98>
 8008062:	2b04      	cmp	r3, #4
 8008064:	dc25      	bgt.n	80080b2 <tcpip_thread+0xa6>
 8008066:	2b02      	cmp	r3, #2
 8008068:	d002      	beq.n	8008070 <tcpip_thread+0x64>
 800806a:	2b03      	cmp	r3, #3
 800806c:	d00e      	beq.n	800808c <tcpip_thread+0x80>
 800806e:	e020      	b.n	80080b2 <tcpip_thread+0xa6>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	6850      	ldr	r0, [r2, #4]
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	6892      	ldr	r2, [r2, #8]
 800807c:	4611      	mov	r1, r2
 800807e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	4619      	mov	r1, r3
 8008084:	2009      	movs	r0, #9
 8008086:	f000 fd63 	bl	8008b50 <memp_free>
      break;
 800808a:	e019      	b.n	80080c0 <tcpip_thread+0xb4>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	6892      	ldr	r2, [r2, #8]
 8008094:	4610      	mov	r0, r2
 8008096:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	4619      	mov	r1, r3
 800809c:	2008      	movs	r0, #8
 800809e:	f000 fd57 	bl	8008b50 <memp_free>
      break;
 80080a2:	e00d      	b.n	80080c0 <tcpip_thread+0xb4>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	6892      	ldr	r2, [r2, #8]
 80080ac:	4610      	mov	r0, r2
 80080ae:	4798      	blx	r3
      break;
 80080b0:	e006      	b.n	80080c0 <tcpip_thread+0xb4>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80080b2:	4b08      	ldr	r3, [pc, #32]	; (80080d4 <tcpip_thread+0xc8>)
 80080b4:	229b      	movs	r2, #155	; 0x9b
 80080b6:	4908      	ldr	r1, [pc, #32]	; (80080d8 <tcpip_thread+0xcc>)
 80080b8:	4808      	ldr	r0, [pc, #32]	; (80080dc <tcpip_thread+0xd0>)
 80080ba:	f009 ff23 	bl	8011f04 <iprintf>
      break;
 80080be:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 80080c0:	e7b5      	b.n	800802e <tcpip_thread+0x22>
 80080c2:	bf00      	nop
 80080c4:	200042ac 	.word	0x200042ac
 80080c8:	200042b0 	.word	0x200042b0
 80080cc:	20007a14 	.word	0x20007a14
 80080d0:	200042b4 	.word	0x200042b4
 80080d4:	08012d24 	.word	0x08012d24
 80080d8:	08012d54 	.word	0x08012d54
 80080dc:	08012d74 	.word	0x08012d74

080080e0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80080ec:	481a      	ldr	r0, [pc, #104]	; (8008158 <tcpip_inpkt+0x78>)
 80080ee:	f009 fcd2 	bl	8011a96 <sys_mbox_valid>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d105      	bne.n	8008104 <tcpip_inpkt+0x24>
 80080f8:	4b18      	ldr	r3, [pc, #96]	; (800815c <tcpip_inpkt+0x7c>)
 80080fa:	22b5      	movs	r2, #181	; 0xb5
 80080fc:	4918      	ldr	r1, [pc, #96]	; (8008160 <tcpip_inpkt+0x80>)
 80080fe:	4819      	ldr	r0, [pc, #100]	; (8008164 <tcpip_inpkt+0x84>)
 8008100:	f009 ff00 	bl	8011f04 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8008104:	2009      	movs	r0, #9
 8008106:	f000 fcd1 	bl	8008aac <memp_malloc>
 800810a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d102      	bne.n	8008118 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8008112:	f04f 33ff 	mov.w	r3, #4294967295
 8008116:	e01a      	b.n	800814e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	2202      	movs	r2, #2
 800811c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	68ba      	ldr	r2, [r7, #8]
 8008128:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8008130:	6979      	ldr	r1, [r7, #20]
 8008132:	4809      	ldr	r0, [pc, #36]	; (8008158 <tcpip_inpkt+0x78>)
 8008134:	f009 fc56 	bl	80119e4 <sys_mbox_trypost>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d006      	beq.n	800814c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800813e:	6979      	ldr	r1, [r7, #20]
 8008140:	2009      	movs	r0, #9
 8008142:	f000 fd05 	bl	8008b50 <memp_free>
    return ERR_MEM;
 8008146:	f04f 33ff 	mov.w	r3, #4294967295
 800814a:	e000      	b.n	800814e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800814c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800814e:	4618      	mov	r0, r3
 8008150:	3718      	adds	r7, #24
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	200042b4 	.word	0x200042b4
 800815c:	08012d24 	.word	0x08012d24
 8008160:	08012d9c 	.word	0x08012d9c
 8008164:	08012d74 	.word	0x08012d74

08008168 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008178:	f003 0318 	and.w	r3, r3, #24
 800817c:	2b00      	cmp	r3, #0
 800817e:	d006      	beq.n	800818e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8008180:	4a08      	ldr	r2, [pc, #32]	; (80081a4 <tcpip_input+0x3c>)
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7ff ffab 	bl	80080e0 <tcpip_inpkt>
 800818a:	4603      	mov	r3, r0
 800818c:	e005      	b.n	800819a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800818e:	4a06      	ldr	r2, [pc, #24]	; (80081a8 <tcpip_input+0x40>)
 8008190:	6839      	ldr	r1, [r7, #0]
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f7ff ffa4 	bl	80080e0 <tcpip_inpkt>
 8008198:	4603      	mov	r3, r0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3708      	adds	r7, #8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	080117b9 	.word	0x080117b9
 80081a8:	08010775 	.word	0x08010775

080081ac <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	4613      	mov	r3, r2
 80081b8:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80081ba:	481d      	ldr	r0, [pc, #116]	; (8008230 <tcpip_callback_with_block+0x84>)
 80081bc:	f009 fc6b 	bl	8011a96 <sys_mbox_valid>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d105      	bne.n	80081d2 <tcpip_callback_with_block+0x26>
 80081c6:	4b1b      	ldr	r3, [pc, #108]	; (8008234 <tcpip_callback_with_block+0x88>)
 80081c8:	22ee      	movs	r2, #238	; 0xee
 80081ca:	491b      	ldr	r1, [pc, #108]	; (8008238 <tcpip_callback_with_block+0x8c>)
 80081cc:	481b      	ldr	r0, [pc, #108]	; (800823c <tcpip_callback_with_block+0x90>)
 80081ce:	f009 fe99 	bl	8011f04 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80081d2:	2008      	movs	r0, #8
 80081d4:	f000 fc6a 	bl	8008aac <memp_malloc>
 80081d8:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d102      	bne.n	80081e6 <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 80081e0:	f04f 33ff 	mov.w	r3, #4294967295
 80081e4:	e01f      	b.n	8008226 <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	2203      	movs	r2, #3
 80081ea:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	68ba      	ldr	r2, [r7, #8]
 80081f6:	609a      	str	r2, [r3, #8]
  if (block) {
 80081f8:	79fb      	ldrb	r3, [r7, #7]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d004      	beq.n	8008208 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 80081fe:	6979      	ldr	r1, [r7, #20]
 8008200:	480b      	ldr	r0, [pc, #44]	; (8008230 <tcpip_callback_with_block+0x84>)
 8008202:	f009 fbd9 	bl	80119b8 <sys_mbox_post>
 8008206:	e00d      	b.n	8008224 <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8008208:	6979      	ldr	r1, [r7, #20]
 800820a:	4809      	ldr	r0, [pc, #36]	; (8008230 <tcpip_callback_with_block+0x84>)
 800820c:	f009 fbea 	bl	80119e4 <sys_mbox_trypost>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d006      	beq.n	8008224 <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008216:	6979      	ldr	r1, [r7, #20]
 8008218:	2008      	movs	r0, #8
 800821a:	f000 fc99 	bl	8008b50 <memp_free>
      return ERR_MEM;
 800821e:	f04f 33ff 	mov.w	r3, #4294967295
 8008222:	e000      	b.n	8008226 <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3718      	adds	r7, #24
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	200042b4 	.word	0x200042b4
 8008234:	08012d24 	.word	0x08012d24
 8008238:	08012d9c 	.word	0x08012d9c
 800823c:	08012d74 	.word	0x08012d74

08008240 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af02      	add	r7, sp, #8
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  lwip_init();
 800824a:	f000 f868 	bl	800831e <lwip_init>

  tcpip_init_done = initfunc;
 800824e:	4a17      	ldr	r2, [pc, #92]	; (80082ac <tcpip_init+0x6c>)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8008254:	4a16      	ldr	r2, [pc, #88]	; (80082b0 <tcpip_init+0x70>)
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800825a:	2106      	movs	r1, #6
 800825c:	4815      	ldr	r0, [pc, #84]	; (80082b4 <tcpip_init+0x74>)
 800825e:	f009 fb89 	bl	8011974 <sys_mbox_new>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d006      	beq.n	8008276 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8008268:	4b13      	ldr	r3, [pc, #76]	; (80082b8 <tcpip_init+0x78>)
 800826a:	f240 12d5 	movw	r2, #469	; 0x1d5
 800826e:	4913      	ldr	r1, [pc, #76]	; (80082bc <tcpip_init+0x7c>)
 8008270:	4813      	ldr	r0, [pc, #76]	; (80082c0 <tcpip_init+0x80>)
 8008272:	f009 fe47 	bl	8011f04 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8008276:	4813      	ldr	r0, [pc, #76]	; (80082c4 <tcpip_init+0x84>)
 8008278:	f009 fc2c 	bl	8011ad4 <sys_mutex_new>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d006      	beq.n	8008290 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8008282:	4b0d      	ldr	r3, [pc, #52]	; (80082b8 <tcpip_init+0x78>)
 8008284:	f240 12d9 	movw	r2, #473	; 0x1d9
 8008288:	490f      	ldr	r1, [pc, #60]	; (80082c8 <tcpip_init+0x88>)
 800828a:	480d      	ldr	r0, [pc, #52]	; (80082c0 <tcpip_init+0x80>)
 800828c:	f009 fe3a 	bl	8011f04 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8008290:	2300      	movs	r3, #0
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008298:	2200      	movs	r2, #0
 800829a:	490c      	ldr	r1, [pc, #48]	; (80082cc <tcpip_init+0x8c>)
 800829c:	480c      	ldr	r0, [pc, #48]	; (80082d0 <tcpip_init+0x90>)
 800829e:	f009 fc51 	bl	8011b44 <sys_thread_new>
}
 80082a2:	bf00      	nop
 80082a4:	3708      	adds	r7, #8
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	200042ac 	.word	0x200042ac
 80082b0:	200042b0 	.word	0x200042b0
 80082b4:	200042b4 	.word	0x200042b4
 80082b8:	08012d24 	.word	0x08012d24
 80082bc:	08012dac 	.word	0x08012dac
 80082c0:	08012d74 	.word	0x08012d74
 80082c4:	20007a14 	.word	0x20007a14
 80082c8:	08012dd0 	.word	0x08012dd0
 80082cc:	0800800d 	.word	0x0800800d
 80082d0:	08012df4 	.word	0x08012df4

080082d4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	4603      	mov	r3, r0
 80082dc:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 80082de:	88fb      	ldrh	r3, [r7, #6]
 80082e0:	ba5b      	rev16	r3, r3
 80082e2:	b29b      	uxth	r3, r3
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bc80      	pop	{r7}
 80082ec:	4770      	bx	lr

080082ee <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80082ee:	b480      	push	{r7}
 80082f0:	b083      	sub	sp, #12
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	061a      	lsls	r2, r3, #24
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	021b      	lsls	r3, r3, #8
 80082fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008302:	431a      	orrs	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	0a1b      	lsrs	r3, r3, #8
 8008308:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800830c:	431a      	orrs	r2, r3
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	0e1b      	lsrs	r3, r3, #24
 8008312:	4313      	orrs	r3, r2
}
 8008314:	4618      	mov	r0, r3
 8008316:	370c      	adds	r7, #12
 8008318:	46bd      	mov	sp, r7
 800831a:	bc80      	pop	{r7}
 800831c:	4770      	bx	lr

0800831e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b082      	sub	sp, #8
 8008322:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8008324:	2300      	movs	r3, #0
 8008326:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8008328:	f009 fbc6 	bl	8011ab8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800832c:	f000 f8a6 	bl	800847c <mem_init>
  memp_init();
 8008330:	f000 fb70 	bl	8008a14 <memp_init>
  pbuf_init();
  netif_init();
 8008334:	f000 fc36 	bl	8008ba4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008338:	f006 ffba 	bl	800f2b0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800833c:	f001 fc40 	bl	8009bc0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8008340:	f006 fe4c 	bl	800efdc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8008344:	bf00      	nop
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008354:	4b40      	ldr	r3, [pc, #256]	; (8008458 <plug_holes+0x10c>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	429a      	cmp	r2, r3
 800835c:	d206      	bcs.n	800836c <plug_holes+0x20>
 800835e:	4b3f      	ldr	r3, [pc, #252]	; (800845c <plug_holes+0x110>)
 8008360:	f240 125d 	movw	r2, #349	; 0x15d
 8008364:	493e      	ldr	r1, [pc, #248]	; (8008460 <plug_holes+0x114>)
 8008366:	483f      	ldr	r0, [pc, #252]	; (8008464 <plug_holes+0x118>)
 8008368:	f009 fdcc 	bl	8011f04 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800836c:	4b3e      	ldr	r3, [pc, #248]	; (8008468 <plug_holes+0x11c>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	429a      	cmp	r2, r3
 8008374:	d306      	bcc.n	8008384 <plug_holes+0x38>
 8008376:	4b39      	ldr	r3, [pc, #228]	; (800845c <plug_holes+0x110>)
 8008378:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800837c:	493b      	ldr	r1, [pc, #236]	; (800846c <plug_holes+0x120>)
 800837e:	4839      	ldr	r0, [pc, #228]	; (8008464 <plug_holes+0x118>)
 8008380:	f009 fdc0 	bl	8011f04 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	791b      	ldrb	r3, [r3, #4]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d006      	beq.n	800839a <plug_holes+0x4e>
 800838c:	4b33      	ldr	r3, [pc, #204]	; (800845c <plug_holes+0x110>)
 800838e:	f240 125f 	movw	r2, #351	; 0x15f
 8008392:	4937      	ldr	r1, [pc, #220]	; (8008470 <plug_holes+0x124>)
 8008394:	4833      	ldr	r0, [pc, #204]	; (8008464 <plug_holes+0x118>)
 8008396:	f009 fdb5 	bl	8011f04 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	881b      	ldrh	r3, [r3, #0]
 800839e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80083a2:	d906      	bls.n	80083b2 <plug_holes+0x66>
 80083a4:	4b2d      	ldr	r3, [pc, #180]	; (800845c <plug_holes+0x110>)
 80083a6:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80083aa:	4932      	ldr	r1, [pc, #200]	; (8008474 <plug_holes+0x128>)
 80083ac:	482d      	ldr	r0, [pc, #180]	; (8008464 <plug_holes+0x118>)
 80083ae:	f009 fda9 	bl	8011f04 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 80083b2:	4b29      	ldr	r3, [pc, #164]	; (8008458 <plug_holes+0x10c>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	8812      	ldrh	r2, [r2, #0]
 80083ba:	4413      	add	r3, r2
 80083bc:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d01f      	beq.n	8008406 <plug_holes+0xba>
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	791b      	ldrb	r3, [r3, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d11b      	bne.n	8008406 <plug_holes+0xba>
 80083ce:	4b26      	ldr	r3, [pc, #152]	; (8008468 <plug_holes+0x11c>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d016      	beq.n	8008406 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80083d8:	4b27      	ldr	r3, [pc, #156]	; (8008478 <plug_holes+0x12c>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d102      	bne.n	80083e8 <plug_holes+0x9c>
      lfree = mem;
 80083e2:	4a25      	ldr	r2, [pc, #148]	; (8008478 <plug_holes+0x12c>)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	881a      	ldrh	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80083f0:	4b19      	ldr	r3, [pc, #100]	; (8008458 <plug_holes+0x10c>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	1ad1      	subs	r1, r2, r3
 80083f8:	4b17      	ldr	r3, [pc, #92]	; (8008458 <plug_holes+0x10c>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	8812      	ldrh	r2, [r2, #0]
 8008400:	4413      	add	r3, r2
 8008402:	b28a      	uxth	r2, r1
 8008404:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8008406:	4b14      	ldr	r3, [pc, #80]	; (8008458 <plug_holes+0x10c>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	8852      	ldrh	r2, [r2, #2]
 800840e:	4413      	add	r3, r2
 8008410:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8008412:	68ba      	ldr	r2, [r7, #8]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	429a      	cmp	r2, r3
 8008418:	d01a      	beq.n	8008450 <plug_holes+0x104>
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	791b      	ldrb	r3, [r3, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d116      	bne.n	8008450 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8008422:	4b15      	ldr	r3, [pc, #84]	; (8008478 <plug_holes+0x12c>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	429a      	cmp	r2, r3
 800842a:	d102      	bne.n	8008432 <plug_holes+0xe6>
      lfree = pmem;
 800842c:	4a12      	ldr	r2, [pc, #72]	; (8008478 <plug_holes+0x12c>)
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	881a      	ldrh	r2, [r3, #0]
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800843a:	4b07      	ldr	r3, [pc, #28]	; (8008458 <plug_holes+0x10c>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	1ad1      	subs	r1, r2, r3
 8008442:	4b05      	ldr	r3, [pc, #20]	; (8008458 <plug_holes+0x10c>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	8812      	ldrh	r2, [r2, #0]
 800844a:	4413      	add	r3, r2
 800844c:	b28a      	uxth	r2, r1
 800844e:	805a      	strh	r2, [r3, #2]
  }
}
 8008450:	bf00      	nop
 8008452:	3710      	adds	r7, #16
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	200042b8 	.word	0x200042b8
 800845c:	08012e04 	.word	0x08012e04
 8008460:	08012e34 	.word	0x08012e34
 8008464:	08012e4c 	.word	0x08012e4c
 8008468:	200042bc 	.word	0x200042bc
 800846c:	08012e74 	.word	0x08012e74
 8008470:	08012e90 	.word	0x08012e90
 8008474:	08012eac 	.word	0x08012eac
 8008478:	200042c0 	.word	0x200042c0

0800847c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008482:	4b1e      	ldr	r3, [pc, #120]	; (80084fc <mem_init+0x80>)
 8008484:	3303      	adds	r3, #3
 8008486:	f023 0303 	bic.w	r3, r3, #3
 800848a:	461a      	mov	r2, r3
 800848c:	4b1c      	ldr	r3, [pc, #112]	; (8008500 <mem_init+0x84>)
 800848e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008490:	4b1b      	ldr	r3, [pc, #108]	; (8008500 <mem_init+0x84>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800849c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80084aa:	4b15      	ldr	r3, [pc, #84]	; (8008500 <mem_init+0x84>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80084b2:	4a14      	ldr	r2, [pc, #80]	; (8008504 <mem_init+0x88>)
 80084b4:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80084b6:	4b13      	ldr	r3, [pc, #76]	; (8008504 <mem_init+0x88>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2201      	movs	r2, #1
 80084bc:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80084be:	4b11      	ldr	r3, [pc, #68]	; (8008504 <mem_init+0x88>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80084c6:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80084c8:	4b0e      	ldr	r3, [pc, #56]	; (8008504 <mem_init+0x88>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80084d0:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80084d2:	4b0b      	ldr	r3, [pc, #44]	; (8008500 <mem_init+0x84>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a0c      	ldr	r2, [pc, #48]	; (8008508 <mem_init+0x8c>)
 80084d8:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80084da:	480c      	ldr	r0, [pc, #48]	; (800850c <mem_init+0x90>)
 80084dc:	f009 fafa 	bl	8011ad4 <sys_mutex_new>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d006      	beq.n	80084f4 <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80084e6:	4b0a      	ldr	r3, [pc, #40]	; (8008510 <mem_init+0x94>)
 80084e8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80084ec:	4909      	ldr	r1, [pc, #36]	; (8008514 <mem_init+0x98>)
 80084ee:	480a      	ldr	r0, [pc, #40]	; (8008518 <mem_init+0x9c>)
 80084f0:	f009 fd08 	bl	8011f04 <iprintf>
  }
}
 80084f4:	bf00      	nop
 80084f6:	3708      	adds	r7, #8
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	20007a30 	.word	0x20007a30
 8008500:	200042b8 	.word	0x200042b8
 8008504:	200042bc 	.word	0x200042bc
 8008508:	200042c0 	.word	0x200042c0
 800850c:	200042c4 	.word	0x200042c4
 8008510:	08012e04 	.word	0x08012e04
 8008514:	08012ed8 	.word	0x08012ed8
 8008518:	08012e4c 	.word	0x08012e4c

0800851c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d050      	beq.n	80085cc <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f003 0303 	and.w	r3, r3, #3
 8008530:	2b00      	cmp	r3, #0
 8008532:	d006      	beq.n	8008542 <mem_free+0x26>
 8008534:	4b27      	ldr	r3, [pc, #156]	; (80085d4 <mem_free+0xb8>)
 8008536:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800853a:	4927      	ldr	r1, [pc, #156]	; (80085d8 <mem_free+0xbc>)
 800853c:	4827      	ldr	r0, [pc, #156]	; (80085dc <mem_free+0xc0>)
 800853e:	f009 fce1 	bl	8011f04 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008542:	4b27      	ldr	r3, [pc, #156]	; (80085e0 <mem_free+0xc4>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	429a      	cmp	r2, r3
 800854a:	d304      	bcc.n	8008556 <mem_free+0x3a>
 800854c:	4b25      	ldr	r3, [pc, #148]	; (80085e4 <mem_free+0xc8>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	429a      	cmp	r2, r3
 8008554:	d306      	bcc.n	8008564 <mem_free+0x48>
 8008556:	4b1f      	ldr	r3, [pc, #124]	; (80085d4 <mem_free+0xb8>)
 8008558:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800855c:	4922      	ldr	r1, [pc, #136]	; (80085e8 <mem_free+0xcc>)
 800855e:	481f      	ldr	r0, [pc, #124]	; (80085dc <mem_free+0xc0>)
 8008560:	f009 fcd0 	bl	8011f04 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008564:	4b1e      	ldr	r3, [pc, #120]	; (80085e0 <mem_free+0xc4>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	429a      	cmp	r2, r3
 800856c:	d304      	bcc.n	8008578 <mem_free+0x5c>
 800856e:	4b1d      	ldr	r3, [pc, #116]	; (80085e4 <mem_free+0xc8>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	429a      	cmp	r2, r3
 8008576:	d306      	bcc.n	8008586 <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8008578:	f009 fb0a 	bl	8011b90 <sys_arch_protect>
 800857c:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800857e:	68b8      	ldr	r0, [r7, #8]
 8008580:	f009 fb14 	bl	8011bac <sys_arch_unprotect>
    return;
 8008584:	e023      	b.n	80085ce <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8008586:	4819      	ldr	r0, [pc, #100]	; (80085ec <mem_free+0xd0>)
 8008588:	f009 fac0 	bl	8011b0c <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	3b08      	subs	r3, #8
 8008590:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	791b      	ldrb	r3, [r3, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d106      	bne.n	80085a8 <mem_free+0x8c>
 800859a:	4b0e      	ldr	r3, [pc, #56]	; (80085d4 <mem_free+0xb8>)
 800859c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80085a0:	4913      	ldr	r1, [pc, #76]	; (80085f0 <mem_free+0xd4>)
 80085a2:	480e      	ldr	r0, [pc, #56]	; (80085dc <mem_free+0xc0>)
 80085a4:	f009 fcae 	bl	8011f04 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80085ae:	4b11      	ldr	r3, [pc, #68]	; (80085f4 <mem_free+0xd8>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d202      	bcs.n	80085be <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80085b8:	4a0e      	ldr	r2, [pc, #56]	; (80085f4 <mem_free+0xd8>)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f7ff fec4 	bl	800834c <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80085c4:	4809      	ldr	r0, [pc, #36]	; (80085ec <mem_free+0xd0>)
 80085c6:	f009 fab0 	bl	8011b2a <sys_mutex_unlock>
 80085ca:	e000      	b.n	80085ce <mem_free+0xb2>
    return;
 80085cc:	bf00      	nop
}
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	08012e04 	.word	0x08012e04
 80085d8:	08012ef4 	.word	0x08012ef4
 80085dc:	08012e4c 	.word	0x08012e4c
 80085e0:	200042b8 	.word	0x200042b8
 80085e4:	200042bc 	.word	0x200042bc
 80085e8:	08012f18 	.word	0x08012f18
 80085ec:	200042c4 	.word	0x200042c4
 80085f0:	08012f30 	.word	0x08012f30
 80085f4:	200042c0 	.word	0x200042c0

080085f8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b088      	sub	sp, #32
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	460b      	mov	r3, r1
 8008602:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8008604:	887b      	ldrh	r3, [r7, #2]
 8008606:	3303      	adds	r3, #3
 8008608:	b29b      	uxth	r3, r3
 800860a:	f023 0303 	bic.w	r3, r3, #3
 800860e:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8008610:	887b      	ldrh	r3, [r7, #2]
 8008612:	2b0b      	cmp	r3, #11
 8008614:	d801      	bhi.n	800861a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8008616:	230c      	movs	r3, #12
 8008618:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800861a:	887b      	ldrh	r3, [r7, #2]
 800861c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008620:	d901      	bls.n	8008626 <mem_trim+0x2e>
    return NULL;
 8008622:	2300      	movs	r3, #0
 8008624:	e0bd      	b.n	80087a2 <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008626:	4b61      	ldr	r3, [pc, #388]	; (80087ac <mem_trim+0x1b4>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	429a      	cmp	r2, r3
 800862e:	d304      	bcc.n	800863a <mem_trim+0x42>
 8008630:	4b5f      	ldr	r3, [pc, #380]	; (80087b0 <mem_trim+0x1b8>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	429a      	cmp	r2, r3
 8008638:	d306      	bcc.n	8008648 <mem_trim+0x50>
 800863a:	4b5e      	ldr	r3, [pc, #376]	; (80087b4 <mem_trim+0x1bc>)
 800863c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8008640:	495d      	ldr	r1, [pc, #372]	; (80087b8 <mem_trim+0x1c0>)
 8008642:	485e      	ldr	r0, [pc, #376]	; (80087bc <mem_trim+0x1c4>)
 8008644:	f009 fc5e 	bl	8011f04 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008648:	4b58      	ldr	r3, [pc, #352]	; (80087ac <mem_trim+0x1b4>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	429a      	cmp	r2, r3
 8008650:	d304      	bcc.n	800865c <mem_trim+0x64>
 8008652:	4b57      	ldr	r3, [pc, #348]	; (80087b0 <mem_trim+0x1b8>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	429a      	cmp	r2, r3
 800865a:	d307      	bcc.n	800866c <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800865c:	f009 fa98 	bl	8011b90 <sys_arch_protect>
 8008660:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	f009 faa2 	bl	8011bac <sys_arch_unprotect>
    return rmem;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	e09a      	b.n	80087a2 <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	3b08      	subs	r3, #8
 8008670:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8008672:	4b4e      	ldr	r3, [pc, #312]	; (80087ac <mem_trim+0x1b4>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	69fa      	ldr	r2, [r7, #28]
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	881a      	ldrh	r2, [r3, #0]
 8008680:	8b7b      	ldrh	r3, [r7, #26]
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	b29b      	uxth	r3, r3
 8008686:	3b08      	subs	r3, #8
 8008688:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800868a:	887a      	ldrh	r2, [r7, #2]
 800868c:	8b3b      	ldrh	r3, [r7, #24]
 800868e:	429a      	cmp	r2, r3
 8008690:	d906      	bls.n	80086a0 <mem_trim+0xa8>
 8008692:	4b48      	ldr	r3, [pc, #288]	; (80087b4 <mem_trim+0x1bc>)
 8008694:	f240 2206 	movw	r2, #518	; 0x206
 8008698:	4949      	ldr	r1, [pc, #292]	; (80087c0 <mem_trim+0x1c8>)
 800869a:	4848      	ldr	r0, [pc, #288]	; (80087bc <mem_trim+0x1c4>)
 800869c:	f009 fc32 	bl	8011f04 <iprintf>
  if (newsize > size) {
 80086a0:	887a      	ldrh	r2, [r7, #2]
 80086a2:	8b3b      	ldrh	r3, [r7, #24]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d901      	bls.n	80086ac <mem_trim+0xb4>
    /* not supported */
    return NULL;
 80086a8:	2300      	movs	r3, #0
 80086aa:	e07a      	b.n	80087a2 <mem_trim+0x1aa>
  }
  if (newsize == size) {
 80086ac:	887a      	ldrh	r2, [r7, #2]
 80086ae:	8b3b      	ldrh	r3, [r7, #24]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d101      	bne.n	80086b8 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	e074      	b.n	80087a2 <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80086b8:	4842      	ldr	r0, [pc, #264]	; (80087c4 <mem_trim+0x1cc>)
 80086ba:	f009 fa27 	bl	8011b0c <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 80086be:	4b3b      	ldr	r3, [pc, #236]	; (80087ac <mem_trim+0x1b4>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	69fa      	ldr	r2, [r7, #28]
 80086c4:	8812      	ldrh	r2, [r2, #0]
 80086c6:	4413      	add	r3, r2
 80086c8:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	791b      	ldrb	r3, [r3, #4]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d131      	bne.n	8008736 <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	881b      	ldrh	r3, [r3, #0]
 80086d6:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80086d8:	8b7a      	ldrh	r2, [r7, #26]
 80086da:	887b      	ldrh	r3, [r7, #2]
 80086dc:	4413      	add	r3, r2
 80086de:	b29b      	uxth	r3, r3
 80086e0:	3308      	adds	r3, #8
 80086e2:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 80086e4:	4b38      	ldr	r3, [pc, #224]	; (80087c8 <mem_trim+0x1d0>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	697a      	ldr	r2, [r7, #20]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d105      	bne.n	80086fa <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 80086ee:	4b2f      	ldr	r3, [pc, #188]	; (80087ac <mem_trim+0x1b4>)
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	8a7b      	ldrh	r3, [r7, #18]
 80086f4:	4413      	add	r3, r2
 80086f6:	4a34      	ldr	r2, [pc, #208]	; (80087c8 <mem_trim+0x1d0>)
 80086f8:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80086fa:	4b2c      	ldr	r3, [pc, #176]	; (80087ac <mem_trim+0x1b4>)
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	8a7b      	ldrh	r3, [r7, #18]
 8008700:	4413      	add	r3, r2
 8008702:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	2200      	movs	r2, #0
 8008708:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	8a3a      	ldrh	r2, [r7, #16]
 800870e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	8b7a      	ldrh	r2, [r7, #26]
 8008714:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	8a7a      	ldrh	r2, [r7, #18]
 800871a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	881b      	ldrh	r3, [r3, #0]
 8008720:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008724:	d039      	beq.n	800879a <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8008726:	4b21      	ldr	r3, [pc, #132]	; (80087ac <mem_trim+0x1b4>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	697a      	ldr	r2, [r7, #20]
 800872c:	8812      	ldrh	r2, [r2, #0]
 800872e:	4413      	add	r3, r2
 8008730:	8a7a      	ldrh	r2, [r7, #18]
 8008732:	805a      	strh	r2, [r3, #2]
 8008734:	e031      	b.n	800879a <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008736:	887b      	ldrh	r3, [r7, #2]
 8008738:	f103 0214 	add.w	r2, r3, #20
 800873c:	8b3b      	ldrh	r3, [r7, #24]
 800873e:	429a      	cmp	r2, r3
 8008740:	d82b      	bhi.n	800879a <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8008742:	8b7a      	ldrh	r2, [r7, #26]
 8008744:	887b      	ldrh	r3, [r7, #2]
 8008746:	4413      	add	r3, r2
 8008748:	b29b      	uxth	r3, r3
 800874a:	3308      	adds	r3, #8
 800874c:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800874e:	4b17      	ldr	r3, [pc, #92]	; (80087ac <mem_trim+0x1b4>)
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	8a7b      	ldrh	r3, [r7, #18]
 8008754:	4413      	add	r3, r2
 8008756:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 8008758:	4b1b      	ldr	r3, [pc, #108]	; (80087c8 <mem_trim+0x1d0>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	697a      	ldr	r2, [r7, #20]
 800875e:	429a      	cmp	r2, r3
 8008760:	d202      	bcs.n	8008768 <mem_trim+0x170>
      lfree = mem2;
 8008762:	4a19      	ldr	r2, [pc, #100]	; (80087c8 <mem_trim+0x1d0>)
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	2200      	movs	r2, #0
 800876c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	881a      	ldrh	r2, [r3, #0]
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	8b7a      	ldrh	r2, [r7, #26]
 800877a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	8a7a      	ldrh	r2, [r7, #18]
 8008780:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	881b      	ldrh	r3, [r3, #0]
 8008786:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800878a:	d006      	beq.n	800879a <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800878c:	4b07      	ldr	r3, [pc, #28]	; (80087ac <mem_trim+0x1b4>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	697a      	ldr	r2, [r7, #20]
 8008792:	8812      	ldrh	r2, [r2, #0]
 8008794:	4413      	add	r3, r2
 8008796:	8a7a      	ldrh	r2, [r7, #18]
 8008798:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800879a:	480a      	ldr	r0, [pc, #40]	; (80087c4 <mem_trim+0x1cc>)
 800879c:	f009 f9c5 	bl	8011b2a <sys_mutex_unlock>
  return rmem;
 80087a0:	687b      	ldr	r3, [r7, #4]
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3720      	adds	r7, #32
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	200042b8 	.word	0x200042b8
 80087b0:	200042bc 	.word	0x200042bc
 80087b4:	08012e04 	.word	0x08012e04
 80087b8:	08012f44 	.word	0x08012f44
 80087bc:	08012e4c 	.word	0x08012e4c
 80087c0:	08012f5c 	.word	0x08012f5c
 80087c4:	200042c4 	.word	0x200042c4
 80087c8:	200042c0 	.word	0x200042c0

080087cc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b088      	sub	sp, #32
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	4603      	mov	r3, r0
 80087d4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 80087d6:	88fb      	ldrh	r3, [r7, #6]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d101      	bne.n	80087e0 <mem_malloc+0x14>
    return NULL;
 80087dc:	2300      	movs	r3, #0
 80087de:	e0d0      	b.n	8008982 <mem_malloc+0x1b6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 80087e0:	88fb      	ldrh	r3, [r7, #6]
 80087e2:	3303      	adds	r3, #3
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	f023 0303 	bic.w	r3, r3, #3
 80087ea:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 80087ec:	88fb      	ldrh	r3, [r7, #6]
 80087ee:	2b0b      	cmp	r3, #11
 80087f0:	d801      	bhi.n	80087f6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80087f2:	230c      	movs	r3, #12
 80087f4:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 80087f6:	88fb      	ldrh	r3, [r7, #6]
 80087f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80087fc:	d901      	bls.n	8008802 <mem_malloc+0x36>
    return NULL;
 80087fe:	2300      	movs	r3, #0
 8008800:	e0bf      	b.n	8008982 <mem_malloc+0x1b6>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8008802:	4862      	ldr	r0, [pc, #392]	; (800898c <mem_malloc+0x1c0>)
 8008804:	f009 f982 	bl	8011b0c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8008808:	4b61      	ldr	r3, [pc, #388]	; (8008990 <mem_malloc+0x1c4>)
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	4b61      	ldr	r3, [pc, #388]	; (8008994 <mem_malloc+0x1c8>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	83fb      	strh	r3, [r7, #30]
 8008814:	e0aa      	b.n	800896c <mem_malloc+0x1a0>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8008816:	4b5f      	ldr	r3, [pc, #380]	; (8008994 <mem_malloc+0x1c8>)
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	8bfb      	ldrh	r3, [r7, #30]
 800881c:	4413      	add	r3, r2
 800881e:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	791b      	ldrb	r3, [r3, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	f040 809b 	bne.w	8008960 <mem_malloc+0x194>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	881b      	ldrh	r3, [r3, #0]
 800882e:	461a      	mov	r2, r3
 8008830:	8bfb      	ldrh	r3, [r7, #30]
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	f1a3 0208 	sub.w	r2, r3, #8
 8008838:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800883a:	429a      	cmp	r2, r3
 800883c:	f0c0 8090 	bcc.w	8008960 <mem_malloc+0x194>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	881b      	ldrh	r3, [r3, #0]
 8008844:	461a      	mov	r2, r3
 8008846:	8bfb      	ldrh	r3, [r7, #30]
 8008848:	1ad3      	subs	r3, r2, r3
 800884a:	f1a3 0208 	sub.w	r2, r3, #8
 800884e:	88fb      	ldrh	r3, [r7, #6]
 8008850:	3314      	adds	r3, #20
 8008852:	429a      	cmp	r2, r3
 8008854:	d327      	bcc.n	80088a6 <mem_malloc+0xda>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8008856:	8bfa      	ldrh	r2, [r7, #30]
 8008858:	88fb      	ldrh	r3, [r7, #6]
 800885a:	4413      	add	r3, r2
 800885c:	b29b      	uxth	r3, r3
 800885e:	3308      	adds	r3, #8
 8008860:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8008862:	4b4c      	ldr	r3, [pc, #304]	; (8008994 <mem_malloc+0x1c8>)
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	8a7b      	ldrh	r3, [r7, #18]
 8008868:	4413      	add	r3, r2
 800886a:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2200      	movs	r2, #0
 8008870:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	881a      	ldrh	r2, [r3, #0]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	8bfa      	ldrh	r2, [r7, #30]
 800887e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	8a7a      	ldrh	r2, [r7, #18]
 8008884:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	2201      	movs	r2, #1
 800888a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	881b      	ldrh	r3, [r3, #0]
 8008890:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008894:	d00a      	beq.n	80088ac <mem_malloc+0xe0>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8008896:	4b3f      	ldr	r3, [pc, #252]	; (8008994 <mem_malloc+0x1c8>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	8812      	ldrh	r2, [r2, #0]
 800889e:	4413      	add	r3, r2
 80088a0:	8a7a      	ldrh	r2, [r7, #18]
 80088a2:	805a      	strh	r2, [r3, #2]
 80088a4:	e002      	b.n	80088ac <mem_malloc+0xe0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	2201      	movs	r2, #1
 80088aa:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80088ac:	4b38      	ldr	r3, [pc, #224]	; (8008990 <mem_malloc+0x1c4>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	697a      	ldr	r2, [r7, #20]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d127      	bne.n	8008906 <mem_malloc+0x13a>
          struct mem *cur = lfree;
 80088b6:	4b36      	ldr	r3, [pc, #216]	; (8008990 <mem_malloc+0x1c4>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80088bc:	e005      	b.n	80088ca <mem_malloc+0xfe>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 80088be:	4b35      	ldr	r3, [pc, #212]	; (8008994 <mem_malloc+0x1c8>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	69ba      	ldr	r2, [r7, #24]
 80088c4:	8812      	ldrh	r2, [r2, #0]
 80088c6:	4413      	add	r3, r2
 80088c8:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	791b      	ldrb	r3, [r3, #4]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d004      	beq.n	80088dc <mem_malloc+0x110>
 80088d2:	4b31      	ldr	r3, [pc, #196]	; (8008998 <mem_malloc+0x1cc>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	69ba      	ldr	r2, [r7, #24]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d1f0      	bne.n	80088be <mem_malloc+0xf2>
          }
          lfree = cur;
 80088dc:	4a2c      	ldr	r2, [pc, #176]	; (8008990 <mem_malloc+0x1c4>)
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80088e2:	4b2b      	ldr	r3, [pc, #172]	; (8008990 <mem_malloc+0x1c4>)
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	4b2c      	ldr	r3, [pc, #176]	; (8008998 <mem_malloc+0x1cc>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d00b      	beq.n	8008906 <mem_malloc+0x13a>
 80088ee:	4b28      	ldr	r3, [pc, #160]	; (8008990 <mem_malloc+0x1c4>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	791b      	ldrb	r3, [r3, #4]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d006      	beq.n	8008906 <mem_malloc+0x13a>
 80088f8:	4b28      	ldr	r3, [pc, #160]	; (800899c <mem_malloc+0x1d0>)
 80088fa:	f240 22cf 	movw	r2, #719	; 0x2cf
 80088fe:	4928      	ldr	r1, [pc, #160]	; (80089a0 <mem_malloc+0x1d4>)
 8008900:	4828      	ldr	r0, [pc, #160]	; (80089a4 <mem_malloc+0x1d8>)
 8008902:	f009 faff 	bl	8011f04 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8008906:	4821      	ldr	r0, [pc, #132]	; (800898c <mem_malloc+0x1c0>)
 8008908:	f009 f90f 	bl	8011b2a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800890c:	88fa      	ldrh	r2, [r7, #6]
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	4413      	add	r3, r2
 8008912:	3308      	adds	r3, #8
 8008914:	4a20      	ldr	r2, [pc, #128]	; (8008998 <mem_malloc+0x1cc>)
 8008916:	6812      	ldr	r2, [r2, #0]
 8008918:	4293      	cmp	r3, r2
 800891a:	d906      	bls.n	800892a <mem_malloc+0x15e>
 800891c:	4b1f      	ldr	r3, [pc, #124]	; (800899c <mem_malloc+0x1d0>)
 800891e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8008922:	4921      	ldr	r1, [pc, #132]	; (80089a8 <mem_malloc+0x1dc>)
 8008924:	481f      	ldr	r0, [pc, #124]	; (80089a4 <mem_malloc+0x1d8>)
 8008926:	f009 faed 	bl	8011f04 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	f003 0303 	and.w	r3, r3, #3
 8008930:	2b00      	cmp	r3, #0
 8008932:	d006      	beq.n	8008942 <mem_malloc+0x176>
 8008934:	4b19      	ldr	r3, [pc, #100]	; (800899c <mem_malloc+0x1d0>)
 8008936:	f240 22d5 	movw	r2, #725	; 0x2d5
 800893a:	491c      	ldr	r1, [pc, #112]	; (80089ac <mem_malloc+0x1e0>)
 800893c:	4819      	ldr	r0, [pc, #100]	; (80089a4 <mem_malloc+0x1d8>)
 800893e:	f009 fae1 	bl	8011f04 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f003 0303 	and.w	r3, r3, #3
 8008948:	2b00      	cmp	r3, #0
 800894a:	d006      	beq.n	800895a <mem_malloc+0x18e>
 800894c:	4b13      	ldr	r3, [pc, #76]	; (800899c <mem_malloc+0x1d0>)
 800894e:	f240 22d7 	movw	r2, #727	; 0x2d7
 8008952:	4917      	ldr	r1, [pc, #92]	; (80089b0 <mem_malloc+0x1e4>)
 8008954:	4813      	ldr	r0, [pc, #76]	; (80089a4 <mem_malloc+0x1d8>)
 8008956:	f009 fad5 	bl	8011f04 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	3308      	adds	r3, #8
 800895e:	e010      	b.n	8008982 <mem_malloc+0x1b6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8008960:	4b0c      	ldr	r3, [pc, #48]	; (8008994 <mem_malloc+0x1c8>)
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	8bfb      	ldrh	r3, [r7, #30]
 8008966:	4413      	add	r3, r2
 8008968:	881b      	ldrh	r3, [r3, #0]
 800896a:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800896c:	8bfa      	ldrh	r2, [r7, #30]
 800896e:	88fb      	ldrh	r3, [r7, #6]
 8008970:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8008974:	429a      	cmp	r2, r3
 8008976:	f4ff af4e 	bcc.w	8008816 <mem_malloc+0x4a>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800897a:	4804      	ldr	r0, [pc, #16]	; (800898c <mem_malloc+0x1c0>)
 800897c:	f009 f8d5 	bl	8011b2a <sys_mutex_unlock>
  return NULL;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3720      	adds	r7, #32
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	200042c4 	.word	0x200042c4
 8008990:	200042c0 	.word	0x200042c0
 8008994:	200042b8 	.word	0x200042b8
 8008998:	200042bc 	.word	0x200042bc
 800899c:	08012e04 	.word	0x08012e04
 80089a0:	08012f7c 	.word	0x08012f7c
 80089a4:	08012e4c 	.word	0x08012e4c
 80089a8:	08012f98 	.word	0x08012f98
 80089ac:	08012fc8 	.word	0x08012fc8
 80089b0:	08012ff8 	.word	0x08012ff8

080089b4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	2200      	movs	r2, #0
 80089c2:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	3303      	adds	r3, #3
 80089ca:	f023 0303 	bic.w	r3, r3, #3
 80089ce:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80089d0:	2300      	movs	r3, #0
 80089d2:	60fb      	str	r3, [r7, #12]
 80089d4:	e011      	b.n	80089fa <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	881b      	ldrh	r3, [r3, #0]
 80089ec:	461a      	mov	r2, r3
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	4413      	add	r3, r2
 80089f2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	3301      	adds	r3, #1
 80089f8:	60fb      	str	r3, [r7, #12]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	885b      	ldrh	r3, [r3, #2]
 80089fe:	461a      	mov	r2, r3
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	4293      	cmp	r3, r2
 8008a04:	dbe7      	blt.n	80089d6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8008a06:	bf00      	nop
 8008a08:	bf00      	nop
 8008a0a:	3714      	adds	r7, #20
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bc80      	pop	{r7}
 8008a10:	4770      	bx	lr
	...

08008a14 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	80fb      	strh	r3, [r7, #6]
 8008a1e:	e009      	b.n	8008a34 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008a20:	88fb      	ldrh	r3, [r7, #6]
 8008a22:	4a08      	ldr	r2, [pc, #32]	; (8008a44 <memp_init+0x30>)
 8008a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7ff ffc3 	bl	80089b4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008a2e:	88fb      	ldrh	r3, [r7, #6]
 8008a30:	3301      	adds	r3, #1
 8008a32:	80fb      	strh	r3, [r7, #6]
 8008a34:	88fb      	ldrh	r3, [r7, #6]
 8008a36:	2b0c      	cmp	r3, #12
 8008a38:	d9f2      	bls.n	8008a20 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8008a3a:	bf00      	nop
 8008a3c:	bf00      	nop
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	08014b38 	.word	0x08014b38

08008a48 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8008a50:	f009 f89e 	bl	8011b90 <sys_arch_protect>
 8008a54:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d015      	beq.n	8008a90 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	68ba      	ldr	r2, [r7, #8]
 8008a6a:	6812      	ldr	r2, [r2, #0]
 8008a6c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	f003 0303 	and.w	r3, r3, #3
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d006      	beq.n	8008a86 <do_memp_malloc_pool+0x3e>
 8008a78:	4b09      	ldr	r3, [pc, #36]	; (8008aa0 <do_memp_malloc_pool+0x58>)
 8008a7a:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8008a7e:	4909      	ldr	r1, [pc, #36]	; (8008aa4 <do_memp_malloc_pool+0x5c>)
 8008a80:	4809      	ldr	r0, [pc, #36]	; (8008aa8 <do_memp_malloc_pool+0x60>)
 8008a82:	f009 fa3f 	bl	8011f04 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	f009 f890 	bl	8011bac <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	e003      	b.n	8008a98 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 8008a90:	68f8      	ldr	r0, [r7, #12]
 8008a92:	f009 f88b 	bl	8011bac <sys_arch_unprotect>
  return NULL;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	0801301c 	.word	0x0801301c
 8008aa4:	0801304c 	.word	0x0801304c
 8008aa8:	08013070 	.word	0x08013070

08008aac <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008ab6:	79fb      	ldrb	r3, [r7, #7]
 8008ab8:	2b0c      	cmp	r3, #12
 8008aba:	d908      	bls.n	8008ace <memp_malloc+0x22>
 8008abc:	4b0a      	ldr	r3, [pc, #40]	; (8008ae8 <memp_malloc+0x3c>)
 8008abe:	f240 1287 	movw	r2, #391	; 0x187
 8008ac2:	490a      	ldr	r1, [pc, #40]	; (8008aec <memp_malloc+0x40>)
 8008ac4:	480a      	ldr	r0, [pc, #40]	; (8008af0 <memp_malloc+0x44>)
 8008ac6:	f009 fa1d 	bl	8011f04 <iprintf>
 8008aca:	2300      	movs	r3, #0
 8008acc:	e008      	b.n	8008ae0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8008ace:	79fb      	ldrb	r3, [r7, #7]
 8008ad0:	4a08      	ldr	r2, [pc, #32]	; (8008af4 <memp_malloc+0x48>)
 8008ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7ff ffb6 	bl	8008a48 <do_memp_malloc_pool>
 8008adc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8008ade:	68fb      	ldr	r3, [r7, #12]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	0801301c 	.word	0x0801301c
 8008aec:	080130ac 	.word	0x080130ac
 8008af0:	08013070 	.word	0x08013070
 8008af4:	08014b38 	.word	0x08014b38

08008af8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	f003 0303 	and.w	r3, r3, #3
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d006      	beq.n	8008b1a <do_memp_free_pool+0x22>
 8008b0c:	4b0d      	ldr	r3, [pc, #52]	; (8008b44 <do_memp_free_pool+0x4c>)
 8008b0e:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8008b12:	490d      	ldr	r1, [pc, #52]	; (8008b48 <do_memp_free_pool+0x50>)
 8008b14:	480d      	ldr	r0, [pc, #52]	; (8008b4c <do_memp_free_pool+0x54>)
 8008b16:	f009 f9f5 	bl	8011f04 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8008b1e:	f009 f837 	bl	8011b90 <sys_arch_protect>
 8008b22:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8008b36:	68b8      	ldr	r0, [r7, #8]
 8008b38:	f009 f838 	bl	8011bac <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8008b3c:	bf00      	nop
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	0801301c 	.word	0x0801301c
 8008b48:	080130cc 	.word	0x080130cc
 8008b4c:	08013070 	.word	0x08013070

08008b50 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	4603      	mov	r3, r0
 8008b58:	6039      	str	r1, [r7, #0]
 8008b5a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008b5c:	79fb      	ldrb	r3, [r7, #7]
 8008b5e:	2b0c      	cmp	r3, #12
 8008b60:	d907      	bls.n	8008b72 <memp_free+0x22>
 8008b62:	4b0c      	ldr	r3, [pc, #48]	; (8008b94 <memp_free+0x44>)
 8008b64:	f240 12db 	movw	r2, #475	; 0x1db
 8008b68:	490b      	ldr	r1, [pc, #44]	; (8008b98 <memp_free+0x48>)
 8008b6a:	480c      	ldr	r0, [pc, #48]	; (8008b9c <memp_free+0x4c>)
 8008b6c:	f009 f9ca 	bl	8011f04 <iprintf>
 8008b70:	e00c      	b.n	8008b8c <memp_free+0x3c>

  if (mem == NULL) {
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d008      	beq.n	8008b8a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008b78:	79fb      	ldrb	r3, [r7, #7]
 8008b7a:	4a09      	ldr	r2, [pc, #36]	; (8008ba0 <memp_free+0x50>)
 8008b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b80:	6839      	ldr	r1, [r7, #0]
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7ff ffb8 	bl	8008af8 <do_memp_free_pool>
 8008b88:	e000      	b.n	8008b8c <memp_free+0x3c>
    return;
 8008b8a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008b8c:	3708      	adds	r7, #8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	0801301c 	.word	0x0801301c
 8008b98:	080130ec 	.word	0x080130ec
 8008b9c:	08013070 	.word	0x08013070
 8008ba0:	08014b38 	.word	0x08014b38

08008ba4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8008ba8:	bf00      	nop
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bc80      	pop	{r7}
 8008bae:	4770      	bx	lr

08008bb0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	607a      	str	r2, [r7, #4]
 8008bbc:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d105      	bne.n	8008bd0 <netif_add+0x20>
 8008bc4:	4b21      	ldr	r3, [pc, #132]	; (8008c4c <netif_add+0x9c>)
 8008bc6:	22fb      	movs	r2, #251	; 0xfb
 8008bc8:	4921      	ldr	r1, [pc, #132]	; (8008c50 <netif_add+0xa0>)
 8008bca:	4822      	ldr	r0, [pc, #136]	; (8008c54 <netif_add+0xa4>)
 8008bcc:	f009 f99a 	bl	8011f04 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2200      	movs	r2, #0
 8008be0:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2203      	movs	r2, #3
 8008bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	69ba      	ldr	r2, [r7, #24]
 8008bfc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 8008bfe:	4b16      	ldr	r3, [pc, #88]	; (8008c58 <netif_add+0xa8>)
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	1c5a      	adds	r2, r3, #1
 8008c04:	b2d1      	uxtb	r1, r2
 8008c06:	4a14      	ldr	r2, [pc, #80]	; (8008c58 <netif_add+0xa8>)
 8008c08:	7011      	strb	r1, [r2, #0]
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6a3a      	ldr	r2, [r7, #32]
 8008c14:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	68b9      	ldr	r1, [r7, #8]
 8008c1c:	68f8      	ldr	r0, [r7, #12]
 8008c1e:	f000 f81f 	bl	8008c60 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	4798      	blx	r3
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d001      	beq.n	8008c32 <netif_add+0x82>
    return NULL;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	e007      	b.n	8008c42 <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8008c32:	4b0a      	ldr	r3, [pc, #40]	; (8008c5c <netif_add+0xac>)
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008c3a:	4a08      	ldr	r2, [pc, #32]	; (8008c5c <netif_add+0xac>)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8008c40:	68fb      	ldr	r3, [r7, #12]
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	08013108 	.word	0x08013108
 8008c50:	0801313c 	.word	0x0801313c
 8008c54:	08013154 	.word	0x08013154
 8008c58:	200042fc 	.word	0x200042fc
 8008c5c:	2000b118 	.word	0x2000b118

08008c60 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	607a      	str	r2, [r7, #4]
 8008c6c:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d003      	beq.n	8008c7c <netif_set_addr+0x1c>
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d10c      	bne.n	8008c96 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8008c7c:	68b9      	ldr	r1, [r7, #8]
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	f000 f81a 	bl	8008cb8 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8008c84:	6879      	ldr	r1, [r7, #4]
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	f000 f861 	bl	8008d4e <netif_set_netmask>
    netif_set_gw(netif, gw);
 8008c8c:	6839      	ldr	r1, [r7, #0]
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	f000 f84a 	bl	8008d28 <netif_set_gw>
 8008c94:	e00c      	b.n	8008cb0 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 8008c96:	6879      	ldr	r1, [r7, #4]
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f000 f858 	bl	8008d4e <netif_set_netmask>
    netif_set_gw(netif, gw);
 8008c9e:	6839      	ldr	r1, [r7, #0]
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f000 f841 	bl	8008d28 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8008ca6:	68b9      	ldr	r1, [r7, #8]
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f000 f805 	bl	8008cb8 <netif_set_ipaddr>
  }
}
 8008cae:	bf00      	nop
 8008cb0:	bf00      	nop
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d003      	beq.n	8008cd0 <netif_set_ipaddr+0x18>
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	60fb      	str	r3, [r7, #12]
 8008cce:	e002      	b.n	8008cd6 <netif_set_ipaddr+0x1e>
 8008cd0:	4b14      	ldr	r3, [pc, #80]	; (8008d24 <netif_set_ipaddr+0x6c>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	3304      	adds	r3, #4
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d01c      	beq.n	8008d1c <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	3304      	adds	r3, #4
 8008ce6:	f107 020c 	add.w	r2, r7, #12
 8008cea:	4611      	mov	r1, r2
 8008cec:	4618      	mov	r0, r3
 8008cee:	f002 fb4f 	bl	800b390 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	3304      	adds	r3, #4
 8008cf6:	f107 020c 	add.w	r2, r7, #12
 8008cfa:	4611      	mov	r1, r2
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f006 fbfd 	bl	800f4fc <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d002      	beq.n	8008d0e <netif_set_ipaddr+0x56>
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	e000      	b.n	8008d10 <netif_set_ipaddr+0x58>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008d14:	2101      	movs	r1, #1
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f85d 	bl	8008dd6 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8008d1c:	bf00      	nop
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	08014bac 	.word	0x08014bac

08008d28 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d002      	beq.n	8008d3e <netif_set_gw+0x16>
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	e000      	b.n	8008d40 <netif_set_gw+0x18>
 8008d3e:	2300      	movs	r3, #0
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8008d44:	bf00      	nop
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bc80      	pop	{r7}
 8008d4c:	4770      	bx	lr

08008d4e <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8008d4e:	b480      	push	{r7}
 8008d50:	b083      	sub	sp, #12
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
 8008d56:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d002      	beq.n	8008d64 <netif_set_netmask+0x16>
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	e000      	b.n	8008d66 <netif_set_netmask+0x18>
 8008d64:	2300      	movs	r3, #0
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8008d6a:	bf00      	nop
 8008d6c:	370c      	adds	r7, #12
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bc80      	pop	{r7}
 8008d72:	4770      	bx	lr

08008d74 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008d7c:	4a03      	ldr	r2, [pc, #12]	; (8008d8c <netif_set_default+0x18>)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008d82:	bf00      	nop
 8008d84:	370c      	adds	r7, #12
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bc80      	pop	{r7}
 8008d8a:	4770      	bx	lr
 8008d8c:	2000b11c 	.word	0x2000b11c

08008d90 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008d9e:	f003 0301 	and.w	r3, r3, #1
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d113      	bne.n	8008dce <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008dac:	f043 0301 	orr.w	r3, r3, #1
 8008db0:	b2da      	uxtb	r2, r3
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008dbe:	f003 0304 	and.w	r3, r3, #4
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d003      	beq.n	8008dce <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8008dc6:	2103      	movs	r1, #3
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f804 	bl	8008dd6 <netif_issue_reports>
    }
  }
}
 8008dce:	bf00      	nop
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b082      	sub	sp, #8
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
 8008dde:	460b      	mov	r3, r1
 8008de0:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008de2:	78fb      	ldrb	r3, [r7, #3]
 8008de4:	f003 0301 	and.w	r3, r3, #1
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d011      	beq.n	8008e10 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	3304      	adds	r3, #4
 8008df0:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00c      	beq.n	8008e10 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008dfc:	f003 0308 	and.w	r3, r3, #8
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d005      	beq.n	8008e10 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	3304      	adds	r3, #4
 8008e08:	4619      	mov	r1, r3
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f007 faa8 	bl	8010360 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8008e10:	bf00      	nop
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d012      	beq.n	8008e54 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008e34:	f023 0301 	bic.w	r3, r3, #1
 8008e38:	b2da      	uxtb	r2, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008e46:	f003 0308 	and.w	r3, r3, #8
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d002      	beq.n	8008e54 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f006 fe4c 	bl	800faec <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8008e54:	bf00      	nop
 8008e56:	3708      	adds	r7, #8
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008e6a:	f003 0304 	and.w	r3, r3, #4
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d11b      	bne.n	8008eaa <netif_set_link_up+0x4e>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008e78:	f043 0304 	orr.w	r3, r3, #4
 8008e7c:	b2da      	uxtb	r2, r3
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008e8a:	f003 0301 	and.w	r3, r3, #1
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d003      	beq.n	8008e9a <netif_set_link_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8008e92:	2103      	movs	r1, #3
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f7ff ff9e 	bl	8008dd6 <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d003      	beq.n	8008eaa <netif_set_link_up+0x4e>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	69db      	ldr	r3, [r3, #28]
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	4798      	blx	r3
  }
}
 8008eaa:	bf00      	nop
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b082      	sub	sp, #8
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008ec0:	f003 0304 	and.w	r3, r3, #4
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d010      	beq.n	8008eea <netif_set_link_down+0x38>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008ece:	f023 0304 	bic.w	r3, r3, #4
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    NETIF_LINK_CALLBACK(netif);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	69db      	ldr	r3, [r3, #28]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d003      	beq.n	8008eea <netif_set_link_down+0x38>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	69db      	ldr	r3, [r3, #28]
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	4798      	blx	r3
  }
}
 8008eea:	bf00      	nop
 8008eec:	3708      	adds	r7, #8
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008ef2:	b480      	push	{r7}
 8008ef4:	b083      	sub	sp, #12
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
 8008efa:	6039      	str	r1, [r7, #0]
  if (netif) {
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d002      	beq.n	8008f08 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	683a      	ldr	r2, [r7, #0]
 8008f06:	61da      	str	r2, [r3, #28]
  }
}
 8008f08:	bf00      	nop
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bc80      	pop	{r7}
 8008f10:	4770      	bx	lr
	...

08008f14 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8008f1a:	f008 fe39 	bl	8011b90 <sys_arch_protect>
 8008f1e:	6038      	str	r0, [r7, #0]
 8008f20:	4b0f      	ldr	r3, [pc, #60]	; (8008f60 <pbuf_free_ooseq+0x4c>)
 8008f22:	2200      	movs	r2, #0
 8008f24:	701a      	strb	r2, [r3, #0]
 8008f26:	6838      	ldr	r0, [r7, #0]
 8008f28:	f008 fe40 	bl	8011bac <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008f2c:	4b0d      	ldr	r3, [pc, #52]	; (8008f64 <pbuf_free_ooseq+0x50>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	607b      	str	r3, [r7, #4]
 8008f32:	e00f      	b.n	8008f54 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d008      	beq.n	8008f4e <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f40:	4618      	mov	r0, r3
 8008f42:	f001 fe9e 	bl	800ac82 <tcp_segs_free>
      pcb->ooseq = NULL;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8008f4c:	e005      	b.n	8008f5a <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	607b      	str	r3, [r7, #4]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d1ec      	bne.n	8008f34 <pbuf_free_ooseq+0x20>
    }
  }
}
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	2000b120 	.word	0x2000b120
 8008f64:	2000b128 	.word	0x2000b128

08008f68 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8008f70:	f7ff ffd0 	bl	8008f14 <pbuf_free_ooseq>
}
 8008f74:	bf00      	nop
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8008f82:	f008 fe05 	bl	8011b90 <sys_arch_protect>
 8008f86:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8008f88:	4b10      	ldr	r3, [pc, #64]	; (8008fcc <pbuf_pool_is_empty+0x50>)
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8008f8e:	4b0f      	ldr	r3, [pc, #60]	; (8008fcc <pbuf_pool_is_empty+0x50>)
 8008f90:	2201      	movs	r2, #1
 8008f92:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f008 fe09 	bl	8011bac <sys_arch_unprotect>

  if (!queued) {
 8008f9a:	78fb      	ldrb	r3, [r7, #3]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d110      	bne.n	8008fc2 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	480a      	ldr	r0, [pc, #40]	; (8008fd0 <pbuf_pool_is_empty+0x54>)
 8008fa6:	f7ff f901 	bl	80081ac <tcpip_callback_with_block>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d008      	beq.n	8008fc2 <pbuf_pool_is_empty+0x46>
 8008fb0:	f008 fdee 	bl	8011b90 <sys_arch_protect>
 8008fb4:	6078      	str	r0, [r7, #4]
 8008fb6:	4b05      	ldr	r3, [pc, #20]	; (8008fcc <pbuf_pool_is_empty+0x50>)
 8008fb8:	2200      	movs	r2, #0
 8008fba:	701a      	strb	r2, [r3, #0]
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f008 fdf5 	bl	8011bac <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008fc2:	bf00      	nop
 8008fc4:	3708      	adds	r7, #8
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	2000b120 	.word	0x2000b120
 8008fd0:	08008f69 	.word	0x08008f69

08008fd4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b088      	sub	sp, #32
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	4603      	mov	r3, r0
 8008fdc:	71fb      	strb	r3, [r7, #7]
 8008fde:	460b      	mov	r3, r1
 8008fe0:	80bb      	strh	r3, [r7, #4]
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8008fe6:	79fb      	ldrb	r3, [r7, #7]
 8008fe8:	2b04      	cmp	r3, #4
 8008fea:	d81c      	bhi.n	8009026 <pbuf_alloc+0x52>
 8008fec:	a201      	add	r2, pc, #4	; (adr r2, 8008ff4 <pbuf_alloc+0x20>)
 8008fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff2:	bf00      	nop
 8008ff4:	08009009 	.word	0x08009009
 8008ff8:	0800900f 	.word	0x0800900f
 8008ffc:	08009015 	.word	0x08009015
 8009000:	0800901b 	.word	0x0800901b
 8009004:	08009021 	.word	0x08009021
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8009008:	2336      	movs	r3, #54	; 0x36
 800900a:	82fb      	strh	r3, [r7, #22]
    break;
 800900c:	e014      	b.n	8009038 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800900e:	2322      	movs	r3, #34	; 0x22
 8009010:	82fb      	strh	r3, [r7, #22]
    break;
 8009012:	e011      	b.n	8009038 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8009014:	230e      	movs	r3, #14
 8009016:	82fb      	strh	r3, [r7, #22]
    break;
 8009018:	e00e      	b.n	8009038 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800901a:	2300      	movs	r3, #0
 800901c:	82fb      	strh	r3, [r7, #22]
    break;
 800901e:	e00b      	b.n	8009038 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8009020:	2300      	movs	r3, #0
 8009022:	82fb      	strh	r3, [r7, #22]
    break;
 8009024:	e008      	b.n	8009038 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8009026:	4ba5      	ldr	r3, [pc, #660]	; (80092bc <pbuf_alloc+0x2e8>)
 8009028:	f44f 728b 	mov.w	r2, #278	; 0x116
 800902c:	49a4      	ldr	r1, [pc, #656]	; (80092c0 <pbuf_alloc+0x2ec>)
 800902e:	48a5      	ldr	r0, [pc, #660]	; (80092c4 <pbuf_alloc+0x2f0>)
 8009030:	f008 ff68 	bl	8011f04 <iprintf>
    return NULL;
 8009034:	2300      	movs	r3, #0
 8009036:	e15d      	b.n	80092f4 <pbuf_alloc+0x320>
  }

  switch (type) {
 8009038:	79bb      	ldrb	r3, [r7, #6]
 800903a:	2b03      	cmp	r3, #3
 800903c:	d00d      	beq.n	800905a <pbuf_alloc+0x86>
 800903e:	2b03      	cmp	r3, #3
 8009040:	f300 8133 	bgt.w	80092aa <pbuf_alloc+0x2d6>
 8009044:	2b00      	cmp	r3, #0
 8009046:	f000 80d0 	beq.w	80091ea <pbuf_alloc+0x216>
 800904a:	2b00      	cmp	r3, #0
 800904c:	f2c0 812d 	blt.w	80092aa <pbuf_alloc+0x2d6>
 8009050:	3b01      	subs	r3, #1
 8009052:	2b01      	cmp	r3, #1
 8009054:	f200 8129 	bhi.w	80092aa <pbuf_alloc+0x2d6>
 8009058:	e10d      	b.n	8009276 <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800905a:	200c      	movs	r0, #12
 800905c:	f7ff fd26 	bl	8008aac <memp_malloc>
 8009060:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d103      	bne.n	8009070 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 8009068:	f7ff ff88 	bl	8008f7c <pbuf_pool_is_empty>
      return NULL;
 800906c:	2300      	movs	r3, #0
 800906e:	e141      	b.n	80092f4 <pbuf_alloc+0x320>
    }
    p->type = type;
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	79ba      	ldrb	r2, [r7, #6]
 8009074:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8009076:	69fb      	ldr	r3, [r7, #28]
 8009078:	2200      	movs	r2, #0
 800907a:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800907c:	8afb      	ldrh	r3, [r7, #22]
 800907e:	3310      	adds	r3, #16
 8009080:	69fa      	ldr	r2, [r7, #28]
 8009082:	4413      	add	r3, r2
 8009084:	3303      	adds	r3, #3
 8009086:	f023 0303 	bic.w	r3, r3, #3
 800908a:	461a      	mov	r2, r3
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	f003 0303 	and.w	r3, r3, #3
 8009098:	2b00      	cmp	r3, #0
 800909a:	d006      	beq.n	80090aa <pbuf_alloc+0xd6>
 800909c:	4b87      	ldr	r3, [pc, #540]	; (80092bc <pbuf_alloc+0x2e8>)
 800909e:	f44f 7294 	mov.w	r2, #296	; 0x128
 80090a2:	4989      	ldr	r1, [pc, #548]	; (80092c8 <pbuf_alloc+0x2f4>)
 80090a4:	4887      	ldr	r0, [pc, #540]	; (80092c4 <pbuf_alloc+0x2f0>)
 80090a6:	f008 ff2d 	bl	8011f04 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 80090aa:	69fb      	ldr	r3, [r7, #28]
 80090ac:	88ba      	ldrh	r2, [r7, #4]
 80090ae:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80090b0:	8afb      	ldrh	r3, [r7, #22]
 80090b2:	3303      	adds	r3, #3
 80090b4:	f023 0303 	bic.w	r3, r3, #3
 80090b8:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 80090bc:	88bb      	ldrh	r3, [r7, #4]
 80090be:	4293      	cmp	r3, r2
 80090c0:	bf28      	it	cs
 80090c2:	4613      	movcs	r3, r2
 80090c4:	b29a      	uxth	r2, r3
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	69fa      	ldr	r2, [r7, #28]
 80090d0:	8952      	ldrh	r2, [r2, #10]
 80090d2:	441a      	add	r2, r3
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80090da:	429a      	cmp	r2, r3
 80090dc:	d906      	bls.n	80090ec <pbuf_alloc+0x118>
 80090de:	4b77      	ldr	r3, [pc, #476]	; (80092bc <pbuf_alloc+0x2e8>)
 80090e0:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80090e4:	4979      	ldr	r1, [pc, #484]	; (80092cc <pbuf_alloc+0x2f8>)
 80090e6:	4877      	ldr	r0, [pc, #476]	; (80092c4 <pbuf_alloc+0x2f0>)
 80090e8:	f008 ff0c 	bl	8011f04 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80090ec:	8afb      	ldrh	r3, [r7, #22]
 80090ee:	3303      	adds	r3, #3
 80090f0:	f023 0303 	bic.w	r3, r3, #3
 80090f4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80090f8:	d106      	bne.n	8009108 <pbuf_alloc+0x134>
 80090fa:	4b70      	ldr	r3, [pc, #448]	; (80092bc <pbuf_alloc+0x2e8>)
 80090fc:	f240 1231 	movw	r2, #305	; 0x131
 8009100:	4973      	ldr	r1, [pc, #460]	; (80092d0 <pbuf_alloc+0x2fc>)
 8009102:	4870      	ldr	r0, [pc, #448]	; (80092c4 <pbuf_alloc+0x2f0>)
 8009104:	f008 fefe 	bl	8011f04 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	2201      	movs	r2, #1
 800910c:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8009112:	88bb      	ldrh	r3, [r7, #4]
 8009114:	69fa      	ldr	r2, [r7, #28]
 8009116:	8952      	ldrh	r2, [r2, #10]
 8009118:	1a9b      	subs	r3, r3, r2
 800911a:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800911c:	e061      	b.n	80091e2 <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800911e:	200c      	movs	r0, #12
 8009120:	f7ff fcc4 	bl	8008aac <memp_malloc>
 8009124:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d106      	bne.n	800913a <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 800912c:	f7ff ff26 	bl	8008f7c <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8009130:	69f8      	ldr	r0, [r7, #28]
 8009132:	f000 fac1 	bl	80096b8 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8009136:	2300      	movs	r3, #0
 8009138:	e0dc      	b.n	80092f4 <pbuf_alloc+0x320>
      }
      q->type = type;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	79ba      	ldrb	r2, [r7, #6]
 800913e:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2200      	movs	r2, #0
 8009144:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2200      	movs	r2, #0
 800914a:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800914c:	69bb      	ldr	r3, [r7, #24]
 800914e:	68fa      	ldr	r2, [r7, #12]
 8009150:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009158:	4293      	cmp	r3, r2
 800915a:	dd06      	ble.n	800916a <pbuf_alloc+0x196>
 800915c:	4b57      	ldr	r3, [pc, #348]	; (80092bc <pbuf_alloc+0x2e8>)
 800915e:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8009162:	495c      	ldr	r1, [pc, #368]	; (80092d4 <pbuf_alloc+0x300>)
 8009164:	4857      	ldr	r0, [pc, #348]	; (80092c4 <pbuf_alloc+0x2f0>)
 8009166:	f008 fecd 	bl	8011f04 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	b29a      	uxth	r2, r3
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	b29b      	uxth	r3, r3
 8009176:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800917a:	bf28      	it	cs
 800917c:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8009180:	b29a      	uxth	r2, r3
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f103 0210 	add.w	r2, r3, #16
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	f003 0303 	and.w	r3, r3, #3
 8009198:	2b00      	cmp	r3, #0
 800919a:	d006      	beq.n	80091aa <pbuf_alloc+0x1d6>
 800919c:	4b47      	ldr	r3, [pc, #284]	; (80092bc <pbuf_alloc+0x2e8>)
 800919e:	f240 1251 	movw	r2, #337	; 0x151
 80091a2:	494d      	ldr	r1, [pc, #308]	; (80092d8 <pbuf_alloc+0x304>)
 80091a4:	4847      	ldr	r0, [pc, #284]	; (80092c4 <pbuf_alloc+0x2f0>)
 80091a6:	f008 fead 	bl	8011f04 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	69fa      	ldr	r2, [r7, #28]
 80091b0:	8952      	ldrh	r2, [r2, #10]
 80091b2:	441a      	add	r2, r3
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d906      	bls.n	80091cc <pbuf_alloc+0x1f8>
 80091be:	4b3f      	ldr	r3, [pc, #252]	; (80092bc <pbuf_alloc+0x2e8>)
 80091c0:	f240 1253 	movw	r2, #339	; 0x153
 80091c4:	4941      	ldr	r1, [pc, #260]	; (80092cc <pbuf_alloc+0x2f8>)
 80091c6:	483f      	ldr	r0, [pc, #252]	; (80092c4 <pbuf_alloc+0x2f0>)
 80091c8:	f008 fe9c 	bl	8011f04 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2201      	movs	r2, #1
 80091d0:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	895b      	ldrh	r3, [r3, #10]
 80091d6:	461a      	mov	r2, r3
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	1a9b      	subs	r3, r3, r2
 80091dc:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	dc9a      	bgt.n	800911e <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 80091e8:	e07d      	b.n	80092e6 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 80091ea:	8afb      	ldrh	r3, [r7, #22]
 80091ec:	3313      	adds	r3, #19
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	f023 0303 	bic.w	r3, r3, #3
 80091f4:	b29a      	uxth	r2, r3
 80091f6:	88bb      	ldrh	r3, [r7, #4]
 80091f8:	3303      	adds	r3, #3
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	f023 0303 	bic.w	r3, r3, #3
 8009200:	b29b      	uxth	r3, r3
 8009202:	4413      	add	r3, r2
 8009204:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8009206:	897a      	ldrh	r2, [r7, #10]
 8009208:	88bb      	ldrh	r3, [r7, #4]
 800920a:	3303      	adds	r3, #3
 800920c:	f023 0303 	bic.w	r3, r3, #3
 8009210:	429a      	cmp	r2, r3
 8009212:	d201      	bcs.n	8009218 <pbuf_alloc+0x244>
        return NULL;
 8009214:	2300      	movs	r3, #0
 8009216:	e06d      	b.n	80092f4 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8009218:	897b      	ldrh	r3, [r7, #10]
 800921a:	4618      	mov	r0, r3
 800921c:	f7ff fad6 	bl	80087cc <mem_malloc>
 8009220:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d101      	bne.n	800922c <pbuf_alloc+0x258>
      return NULL;
 8009228:	2300      	movs	r3, #0
 800922a:	e063      	b.n	80092f4 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800922c:	8afb      	ldrh	r3, [r7, #22]
 800922e:	3310      	adds	r3, #16
 8009230:	69fa      	ldr	r2, [r7, #28]
 8009232:	4413      	add	r3, r2
 8009234:	3303      	adds	r3, #3
 8009236:	f023 0303 	bic.w	r3, r3, #3
 800923a:	461a      	mov	r2, r3
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	88ba      	ldrh	r2, [r7, #4]
 8009244:	811a      	strh	r2, [r3, #8]
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	891a      	ldrh	r2, [r3, #8]
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	2200      	movs	r2, #0
 8009252:	601a      	str	r2, [r3, #0]
    p->type = type;
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	79ba      	ldrb	r2, [r7, #6]
 8009258:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	f003 0303 	and.w	r3, r3, #3
 8009262:	2b00      	cmp	r3, #0
 8009264:	d03e      	beq.n	80092e4 <pbuf_alloc+0x310>
 8009266:	4b15      	ldr	r3, [pc, #84]	; (80092bc <pbuf_alloc+0x2e8>)
 8009268:	f44f 72bb 	mov.w	r2, #374	; 0x176
 800926c:	491b      	ldr	r1, [pc, #108]	; (80092dc <pbuf_alloc+0x308>)
 800926e:	4815      	ldr	r0, [pc, #84]	; (80092c4 <pbuf_alloc+0x2f0>)
 8009270:	f008 fe48 	bl	8011f04 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8009274:	e036      	b.n	80092e4 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8009276:	200b      	movs	r0, #11
 8009278:	f7ff fc18 	bl	8008aac <memp_malloc>
 800927c:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d101      	bne.n	8009288 <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8009284:	2300      	movs	r3, #0
 8009286:	e035      	b.n	80092f4 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8009288:	69fb      	ldr	r3, [r7, #28]
 800928a:	2200      	movs	r2, #0
 800928c:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800928e:	69fb      	ldr	r3, [r7, #28]
 8009290:	88ba      	ldrh	r2, [r7, #4]
 8009292:	811a      	strh	r2, [r3, #8]
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	891a      	ldrh	r2, [r3, #8]
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	2200      	movs	r2, #0
 80092a0:	601a      	str	r2, [r3, #0]
    p->type = type;
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	79ba      	ldrb	r2, [r7, #6]
 80092a6:	731a      	strb	r2, [r3, #12]
    break;
 80092a8:	e01d      	b.n	80092e6 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80092aa:	4b04      	ldr	r3, [pc, #16]	; (80092bc <pbuf_alloc+0x2e8>)
 80092ac:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80092b0:	490b      	ldr	r1, [pc, #44]	; (80092e0 <pbuf_alloc+0x30c>)
 80092b2:	4804      	ldr	r0, [pc, #16]	; (80092c4 <pbuf_alloc+0x2f0>)
 80092b4:	f008 fe26 	bl	8011f04 <iprintf>
    return NULL;
 80092b8:	2300      	movs	r3, #0
 80092ba:	e01b      	b.n	80092f4 <pbuf_alloc+0x320>
 80092bc:	0801317c 	.word	0x0801317c
 80092c0:	080131ac 	.word	0x080131ac
 80092c4:	080131c8 	.word	0x080131c8
 80092c8:	080131f0 	.word	0x080131f0
 80092cc:	08013220 	.word	0x08013220
 80092d0:	08013254 	.word	0x08013254
 80092d4:	08013288 	.word	0x08013288
 80092d8:	0801329c 	.word	0x0801329c
 80092dc:	080132cc 	.word	0x080132cc
 80092e0:	080132f8 	.word	0x080132f8
    break;
 80092e4:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	2201      	movs	r2, #1
 80092ea:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	2200      	movs	r2, #0
 80092f0:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80092f2:	69fb      	ldr	r3, [r7, #28]
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3720      	adds	r7, #32
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	603b      	str	r3, [r7, #0]
 8009304:	4603      	mov	r3, r0
 8009306:	71fb      	strb	r3, [r7, #7]
 8009308:	460b      	mov	r3, r1
 800930a:	80bb      	strh	r3, [r7, #4]
 800930c:	4613      	mov	r3, r2
 800930e:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8009310:	79fb      	ldrb	r3, [r7, #7]
 8009312:	2b04      	cmp	r3, #4
 8009314:	d81b      	bhi.n	800934e <pbuf_alloced_custom+0x52>
 8009316:	a201      	add	r2, pc, #4	; (adr r2, 800931c <pbuf_alloced_custom+0x20>)
 8009318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800931c:	08009331 	.word	0x08009331
 8009320:	08009337 	.word	0x08009337
 8009324:	0800933d 	.word	0x0800933d
 8009328:	08009343 	.word	0x08009343
 800932c:	08009349 	.word	0x08009349
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8009330:	2336      	movs	r3, #54	; 0x36
 8009332:	81fb      	strh	r3, [r7, #14]
    break;
 8009334:	e014      	b.n	8009360 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8009336:	2322      	movs	r3, #34	; 0x22
 8009338:	81fb      	strh	r3, [r7, #14]
    break;
 800933a:	e011      	b.n	8009360 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800933c:	230e      	movs	r3, #14
 800933e:	81fb      	strh	r3, [r7, #14]
    break;
 8009340:	e00e      	b.n	8009360 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8009342:	2300      	movs	r3, #0
 8009344:	81fb      	strh	r3, [r7, #14]
    break;
 8009346:	e00b      	b.n	8009360 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8009348:	2300      	movs	r3, #0
 800934a:	81fb      	strh	r3, [r7, #14]
    break;
 800934c:	e008      	b.n	8009360 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800934e:	4b1d      	ldr	r3, [pc, #116]	; (80093c4 <pbuf_alloced_custom+0xc8>)
 8009350:	f240 12c5 	movw	r2, #453	; 0x1c5
 8009354:	491c      	ldr	r1, [pc, #112]	; (80093c8 <pbuf_alloced_custom+0xcc>)
 8009356:	481d      	ldr	r0, [pc, #116]	; (80093cc <pbuf_alloced_custom+0xd0>)
 8009358:	f008 fdd4 	bl	8011f04 <iprintf>
    return NULL;
 800935c:	2300      	movs	r3, #0
 800935e:	e02d      	b.n	80093bc <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009360:	89fb      	ldrh	r3, [r7, #14]
 8009362:	3303      	adds	r3, #3
 8009364:	f023 0203 	bic.w	r2, r3, #3
 8009368:	88bb      	ldrh	r3, [r7, #4]
 800936a:	441a      	add	r2, r3
 800936c:	8bbb      	ldrh	r3, [r7, #28]
 800936e:	429a      	cmp	r2, r3
 8009370:	d901      	bls.n	8009376 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8009372:	2300      	movs	r3, #0
 8009374:	e022      	b.n	80093bc <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	2200      	movs	r2, #0
 800937a:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d008      	beq.n	8009394 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009382:	89fb      	ldrh	r3, [r7, #14]
 8009384:	3303      	adds	r3, #3
 8009386:	f023 0303 	bic.w	r3, r3, #3
 800938a:	69ba      	ldr	r2, [r7, #24]
 800938c:	441a      	add	r2, r3
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	605a      	str	r2, [r3, #4]
 8009392:	e002      	b.n	800939a <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	2200      	movs	r2, #0
 8009398:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	2202      	movs	r2, #2
 800939e:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	88ba      	ldrh	r2, [r7, #4]
 80093a4:	811a      	strh	r2, [r3, #8]
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	891a      	ldrh	r2, [r3, #8]
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	79ba      	ldrb	r2, [r7, #6]
 80093b2:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	2201      	movs	r2, #1
 80093b8:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 80093ba:	683b      	ldr	r3, [r7, #0]
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3710      	adds	r7, #16
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	0801317c 	.word	0x0801317c
 80093c8:	08013314 	.word	0x08013314
 80093cc:	080131c8 	.word	0x080131c8

080093d0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b086      	sub	sp, #24
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	460b      	mov	r3, r1
 80093da:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d106      	bne.n	80093f0 <pbuf_realloc+0x20>
 80093e2:	4b4b      	ldr	r3, [pc, #300]	; (8009510 <pbuf_realloc+0x140>)
 80093e4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80093e8:	494a      	ldr	r1, [pc, #296]	; (8009514 <pbuf_realloc+0x144>)
 80093ea:	484b      	ldr	r0, [pc, #300]	; (8009518 <pbuf_realloc+0x148>)
 80093ec:	f008 fd8a 	bl	8011f04 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	7b1b      	ldrb	r3, [r3, #12]
 80093f4:	2b03      	cmp	r3, #3
 80093f6:	d012      	beq.n	800941e <pbuf_realloc+0x4e>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	7b1b      	ldrb	r3, [r3, #12]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d00e      	beq.n	800941e <pbuf_realloc+0x4e>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	7b1b      	ldrb	r3, [r3, #12]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00a      	beq.n	800941e <pbuf_realloc+0x4e>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	7b1b      	ldrb	r3, [r3, #12]
 800940c:	2b02      	cmp	r3, #2
 800940e:	d006      	beq.n	800941e <pbuf_realloc+0x4e>
 8009410:	4b3f      	ldr	r3, [pc, #252]	; (8009510 <pbuf_realloc+0x140>)
 8009412:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009416:	4941      	ldr	r1, [pc, #260]	; (800951c <pbuf_realloc+0x14c>)
 8009418:	483f      	ldr	r0, [pc, #252]	; (8009518 <pbuf_realloc+0x148>)
 800941a:	f008 fd73 	bl	8011f04 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	891b      	ldrh	r3, [r3, #8]
 8009422:	887a      	ldrh	r2, [r7, #2]
 8009424:	429a      	cmp	r2, r3
 8009426:	d26e      	bcs.n	8009506 <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8009428:	887b      	ldrh	r3, [r7, #2]
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	8912      	ldrh	r2, [r2, #8]
 800942e:	1a9b      	subs	r3, r3, r2
 8009430:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8009432:	887b      	ldrh	r3, [r7, #2]
 8009434:	827b      	strh	r3, [r7, #18]
  q = p;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800943a:	e025      	b.n	8009488 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	895b      	ldrh	r3, [r3, #10]
 8009440:	8a7a      	ldrh	r2, [r7, #18]
 8009442:	1ad3      	subs	r3, r2, r3
 8009444:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800944c:	4293      	cmp	r3, r2
 800944e:	dd06      	ble.n	800945e <pbuf_realloc+0x8e>
 8009450:	4b2f      	ldr	r3, [pc, #188]	; (8009510 <pbuf_realloc+0x140>)
 8009452:	f240 220b 	movw	r2, #523	; 0x20b
 8009456:	4932      	ldr	r1, [pc, #200]	; (8009520 <pbuf_realloc+0x150>)
 8009458:	482f      	ldr	r0, [pc, #188]	; (8009518 <pbuf_realloc+0x148>)
 800945a:	f008 fd53 	bl	8011f04 <iprintf>
    q->tot_len += (u16_t)grow;
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	891a      	ldrh	r2, [r3, #8]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	b29b      	uxth	r3, r3
 8009466:	4413      	add	r3, r2
 8009468:	b29a      	uxth	r2, r3
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d106      	bne.n	8009488 <pbuf_realloc+0xb8>
 800947a:	4b25      	ldr	r3, [pc, #148]	; (8009510 <pbuf_realloc+0x140>)
 800947c:	f240 220f 	movw	r2, #527	; 0x20f
 8009480:	4928      	ldr	r1, [pc, #160]	; (8009524 <pbuf_realloc+0x154>)
 8009482:	4825      	ldr	r0, [pc, #148]	; (8009518 <pbuf_realloc+0x148>)
 8009484:	f008 fd3e 	bl	8011f04 <iprintf>
  while (rem_len > q->len) {
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	895b      	ldrh	r3, [r3, #10]
 800948c:	8a7a      	ldrh	r2, [r7, #18]
 800948e:	429a      	cmp	r2, r3
 8009490:	d8d4      	bhi.n	800943c <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	7b1b      	ldrb	r3, [r3, #12]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d121      	bne.n	80094de <pbuf_realloc+0x10e>
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	895b      	ldrh	r3, [r3, #10]
 800949e:	8a7a      	ldrh	r2, [r7, #18]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d01c      	beq.n	80094de <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	7b5b      	ldrb	r3, [r3, #13]
 80094a8:	f003 0302 	and.w	r3, r3, #2
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d116      	bne.n	80094de <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	685a      	ldr	r2, [r3, #4]
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	b29a      	uxth	r2, r3
 80094ba:	8a7b      	ldrh	r3, [r7, #18]
 80094bc:	4413      	add	r3, r2
 80094be:	b29b      	uxth	r3, r3
 80094c0:	4619      	mov	r1, r3
 80094c2:	6978      	ldr	r0, [r7, #20]
 80094c4:	f7ff f898 	bl	80085f8 <mem_trim>
 80094c8:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d106      	bne.n	80094de <pbuf_realloc+0x10e>
 80094d0:	4b0f      	ldr	r3, [pc, #60]	; (8009510 <pbuf_realloc+0x140>)
 80094d2:	f240 221d 	movw	r2, #541	; 0x21d
 80094d6:	4914      	ldr	r1, [pc, #80]	; (8009528 <pbuf_realloc+0x158>)
 80094d8:	480f      	ldr	r0, [pc, #60]	; (8009518 <pbuf_realloc+0x148>)
 80094da:	f008 fd13 	bl	8011f04 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	8a7a      	ldrh	r2, [r7, #18]
 80094e2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	895a      	ldrh	r2, [r3, #10]
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d004      	beq.n	80094fe <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4618      	mov	r0, r3
 80094fa:	f000 f8dd 	bl	80096b8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	2200      	movs	r2, #0
 8009502:	601a      	str	r2, [r3, #0]
 8009504:	e000      	b.n	8009508 <pbuf_realloc+0x138>
    return;
 8009506:	bf00      	nop

}
 8009508:	3718      	adds	r7, #24
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	0801317c 	.word	0x0801317c
 8009514:	08013338 	.word	0x08013338
 8009518:	080131c8 	.word	0x080131c8
 800951c:	08013350 	.word	0x08013350
 8009520:	0801336c 	.word	0x0801336c
 8009524:	08013380 	.word	0x08013380
 8009528:	08013398 	.word	0x08013398

0800952c <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	460b      	mov	r3, r1
 8009536:	807b      	strh	r3, [r7, #2]
 8009538:	4613      	mov	r3, r2
 800953a:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d106      	bne.n	8009550 <pbuf_header_impl+0x24>
 8009542:	4b46      	ldr	r3, [pc, #280]	; (800965c <pbuf_header_impl+0x130>)
 8009544:	f240 223f 	movw	r2, #575	; 0x23f
 8009548:	4945      	ldr	r1, [pc, #276]	; (8009660 <pbuf_header_impl+0x134>)
 800954a:	4846      	ldr	r0, [pc, #280]	; (8009664 <pbuf_header_impl+0x138>)
 800954c:	f008 fcda 	bl	8011f04 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8009550:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d002      	beq.n	800955e <pbuf_header_impl+0x32>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d101      	bne.n	8009562 <pbuf_header_impl+0x36>
    return 0;
 800955e:	2300      	movs	r3, #0
 8009560:	e078      	b.n	8009654 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8009562:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009566:	2b00      	cmp	r3, #0
 8009568:	da10      	bge.n	800958c <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800956a:	887b      	ldrh	r3, [r7, #2]
 800956c:	425b      	negs	r3, r3
 800956e:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	895b      	ldrh	r3, [r3, #10]
 8009574:	89fa      	ldrh	r2, [r7, #14]
 8009576:	429a      	cmp	r2, r3
 8009578:	d90a      	bls.n	8009590 <pbuf_header_impl+0x64>
 800957a:	4b38      	ldr	r3, [pc, #224]	; (800965c <pbuf_header_impl+0x130>)
 800957c:	f240 2247 	movw	r2, #583	; 0x247
 8009580:	4939      	ldr	r1, [pc, #228]	; (8009668 <pbuf_header_impl+0x13c>)
 8009582:	4838      	ldr	r0, [pc, #224]	; (8009664 <pbuf_header_impl+0x138>)
 8009584:	f008 fcbe 	bl	8011f04 <iprintf>
 8009588:	2301      	movs	r3, #1
 800958a:	e063      	b.n	8009654 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800958c:	887b      	ldrh	r3, [r7, #2]
 800958e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	7b1b      	ldrb	r3, [r3, #12]
 8009594:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800959c:	89bb      	ldrh	r3, [r7, #12]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d002      	beq.n	80095a8 <pbuf_header_impl+0x7c>
 80095a2:	89bb      	ldrh	r3, [r7, #12]
 80095a4:	2b03      	cmp	r3, #3
 80095a6:	d112      	bne.n	80095ce <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	685a      	ldr	r2, [r3, #4]
 80095ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80095b0:	425b      	negs	r3, r3
 80095b2:	441a      	add	r2, r3
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	685a      	ldr	r2, [r3, #4]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	3310      	adds	r3, #16
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d238      	bcs.n	8009636 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	68ba      	ldr	r2, [r7, #8]
 80095c8:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e042      	b.n	8009654 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 80095ce:	89bb      	ldrh	r3, [r7, #12]
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	d002      	beq.n	80095da <pbuf_header_impl+0xae>
 80095d4:	89bb      	ldrh	r3, [r7, #12]
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d124      	bne.n	8009624 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80095da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	da0d      	bge.n	80095fe <pbuf_header_impl+0xd2>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	895b      	ldrh	r3, [r3, #10]
 80095e6:	89fa      	ldrh	r2, [r7, #14]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d808      	bhi.n	80095fe <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	685a      	ldr	r2, [r3, #4]
 80095f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80095f4:	425b      	negs	r3, r3
 80095f6:	441a      	add	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	605a      	str	r2, [r3, #4]
 80095fc:	e011      	b.n	8009622 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 80095fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009602:	2b00      	cmp	r3, #0
 8009604:	dd0b      	ble.n	800961e <pbuf_header_impl+0xf2>
 8009606:	787b      	ldrb	r3, [r7, #1]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d008      	beq.n	800961e <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	685a      	ldr	r2, [r3, #4]
 8009610:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009614:	425b      	negs	r3, r3
 8009616:	441a      	add	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	605a      	str	r2, [r3, #4]
 800961c:	e001      	b.n	8009622 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800961e:	2301      	movs	r3, #1
 8009620:	e018      	b.n	8009654 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8009622:	e008      	b.n	8009636 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8009624:	4b0d      	ldr	r3, [pc, #52]	; (800965c <pbuf_header_impl+0x130>)
 8009626:	f240 2277 	movw	r2, #631	; 0x277
 800962a:	4910      	ldr	r1, [pc, #64]	; (800966c <pbuf_header_impl+0x140>)
 800962c:	480d      	ldr	r0, [pc, #52]	; (8009664 <pbuf_header_impl+0x138>)
 800962e:	f008 fc69 	bl	8011f04 <iprintf>
    return 1;
 8009632:	2301      	movs	r3, #1
 8009634:	e00e      	b.n	8009654 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	895a      	ldrh	r2, [r3, #10]
 800963a:	887b      	ldrh	r3, [r7, #2]
 800963c:	4413      	add	r3, r2
 800963e:	b29a      	uxth	r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	891a      	ldrh	r2, [r3, #8]
 8009648:	887b      	ldrh	r3, [r7, #2]
 800964a:	4413      	add	r3, r2
 800964c:	b29a      	uxth	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8009652:	2300      	movs	r3, #0
}
 8009654:	4618      	mov	r0, r3
 8009656:	3710      	adds	r7, #16
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}
 800965c:	0801317c 	.word	0x0801317c
 8009660:	080133b4 	.word	0x080133b4
 8009664:	080131c8 	.word	0x080131c8
 8009668:	080133c0 	.word	0x080133c0
 800966c:	080133e0 	.word	0x080133e0

08009670 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	460b      	mov	r3, r1
 800967a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800967c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009680:	2200      	movs	r2, #0
 8009682:	4619      	mov	r1, r3
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f7ff ff51 	bl	800952c <pbuf_header_impl>
 800968a:	4603      	mov	r3, r0
}
 800968c:	4618      	mov	r0, r3
 800968e:	3708      	adds	r7, #8
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	460b      	mov	r3, r1
 800969e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 80096a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80096a4:	2201      	movs	r2, #1
 80096a6:	4619      	mov	r1, r3
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f7ff ff3f 	bl	800952c <pbuf_header_impl>
 80096ae:	4603      	mov	r3, r0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b088      	sub	sp, #32
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d10b      	bne.n	80096de <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d106      	bne.n	80096da <pbuf_free+0x22>
 80096cc:	4b41      	ldr	r3, [pc, #260]	; (80097d4 <pbuf_free+0x11c>)
 80096ce:	f240 22d2 	movw	r2, #722	; 0x2d2
 80096d2:	4941      	ldr	r1, [pc, #260]	; (80097d8 <pbuf_free+0x120>)
 80096d4:	4841      	ldr	r0, [pc, #260]	; (80097dc <pbuf_free+0x124>)
 80096d6:	f008 fc15 	bl	8011f04 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80096da:	2300      	movs	r3, #0
 80096dc:	e076      	b.n	80097cc <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	7b1b      	ldrb	r3, [r3, #12]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d012      	beq.n	800970c <pbuf_free+0x54>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	7b1b      	ldrb	r3, [r3, #12]
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d00e      	beq.n	800970c <pbuf_free+0x54>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	7b1b      	ldrb	r3, [r3, #12]
 80096f2:	2b02      	cmp	r3, #2
 80096f4:	d00a      	beq.n	800970c <pbuf_free+0x54>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	7b1b      	ldrb	r3, [r3, #12]
 80096fa:	2b03      	cmp	r3, #3
 80096fc:	d006      	beq.n	800970c <pbuf_free+0x54>
 80096fe:	4b35      	ldr	r3, [pc, #212]	; (80097d4 <pbuf_free+0x11c>)
 8009700:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8009704:	4936      	ldr	r1, [pc, #216]	; (80097e0 <pbuf_free+0x128>)
 8009706:	4835      	ldr	r0, [pc, #212]	; (80097dc <pbuf_free+0x124>)
 8009708:	f008 fbfc 	bl	8011f04 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800970c:	2300      	movs	r3, #0
 800970e:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8009710:	e058      	b.n	80097c4 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8009712:	f008 fa3d 	bl	8011b90 <sys_arch_protect>
 8009716:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	89db      	ldrh	r3, [r3, #14]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d106      	bne.n	800972e <pbuf_free+0x76>
 8009720:	4b2c      	ldr	r3, [pc, #176]	; (80097d4 <pbuf_free+0x11c>)
 8009722:	f240 22eb 	movw	r2, #747	; 0x2eb
 8009726:	492f      	ldr	r1, [pc, #188]	; (80097e4 <pbuf_free+0x12c>)
 8009728:	482c      	ldr	r0, [pc, #176]	; (80097dc <pbuf_free+0x124>)
 800972a:	f008 fbeb 	bl	8011f04 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	89db      	ldrh	r3, [r3, #14]
 8009732:	3b01      	subs	r3, #1
 8009734:	b29a      	uxth	r2, r3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	81da      	strh	r2, [r3, #14]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	89db      	ldrh	r3, [r3, #14]
 800973e:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 8009740:	69b8      	ldr	r0, [r7, #24]
 8009742:	f008 fa33 	bl	8011bac <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009746:	8afb      	ldrh	r3, [r7, #22]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d139      	bne.n	80097c0 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	7b1b      	ldrb	r3, [r3, #12]
 8009756:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	7b5b      	ldrb	r3, [r3, #13]
 800975c:	f003 0302 	and.w	r3, r3, #2
 8009760:	2b00      	cmp	r3, #0
 8009762:	d011      	beq.n	8009788 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	691b      	ldr	r3, [r3, #16]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d106      	bne.n	800977e <pbuf_free+0xc6>
 8009770:	4b18      	ldr	r3, [pc, #96]	; (80097d4 <pbuf_free+0x11c>)
 8009772:	f240 22f9 	movw	r2, #761	; 0x2f9
 8009776:	491c      	ldr	r1, [pc, #112]	; (80097e8 <pbuf_free+0x130>)
 8009778:	4818      	ldr	r0, [pc, #96]	; (80097dc <pbuf_free+0x124>)
 800977a:	f008 fbc3 	bl	8011f04 <iprintf>
        pc->custom_free_function(p);
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	4798      	blx	r3
 8009786:	e015      	b.n	80097b4 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8009788:	89fb      	ldrh	r3, [r7, #14]
 800978a:	2b03      	cmp	r3, #3
 800978c:	d104      	bne.n	8009798 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800978e:	6879      	ldr	r1, [r7, #4]
 8009790:	200c      	movs	r0, #12
 8009792:	f7ff f9dd 	bl	8008b50 <memp_free>
 8009796:	e00d      	b.n	80097b4 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8009798:	89fb      	ldrh	r3, [r7, #14]
 800979a:	2b01      	cmp	r3, #1
 800979c:	d002      	beq.n	80097a4 <pbuf_free+0xec>
 800979e:	89fb      	ldrh	r3, [r7, #14]
 80097a0:	2b02      	cmp	r3, #2
 80097a2:	d104      	bne.n	80097ae <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 80097a4:	6879      	ldr	r1, [r7, #4]
 80097a6:	200b      	movs	r0, #11
 80097a8:	f7ff f9d2 	bl	8008b50 <memp_free>
 80097ac:	e002      	b.n	80097b4 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7fe feb4 	bl	800851c <mem_free>
        }
      }
      count++;
 80097b4:	7ffb      	ldrb	r3, [r7, #31]
 80097b6:	3301      	adds	r3, #1
 80097b8:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	607b      	str	r3, [r7, #4]
 80097be:	e001      	b.n	80097c4 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 80097c0:	2300      	movs	r3, #0
 80097c2:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d1a3      	bne.n	8009712 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80097ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3720      	adds	r7, #32
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	0801317c 	.word	0x0801317c
 80097d8:	080133b4 	.word	0x080133b4
 80097dc:	080131c8 	.word	0x080131c8
 80097e0:	080133f0 	.word	0x080133f0
 80097e4:	08013408 	.word	0x08013408
 80097e8:	08013420 	.word	0x08013420

080097ec <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b085      	sub	sp, #20
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80097f4:	2300      	movs	r3, #0
 80097f6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80097f8:	e005      	b.n	8009806 <pbuf_clen+0x1a>
    ++len;
 80097fa:	89fb      	ldrh	r3, [r7, #14]
 80097fc:	3301      	adds	r3, #1
 80097fe:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d1f6      	bne.n	80097fa <pbuf_clen+0xe>
  }
  return len;
 800980c:	89fb      	ldrh	r3, [r7, #14]
}
 800980e:	4618      	mov	r0, r3
 8009810:	3714      	adds	r7, #20
 8009812:	46bd      	mov	sp, r7
 8009814:	bc80      	pop	{r7}
 8009816:	4770      	bx	lr

08009818 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d016      	beq.n	8009854 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 8009826:	f008 f9b3 	bl	8011b90 <sys_arch_protect>
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	89db      	ldrh	r3, [r3, #14]
 8009830:	3301      	adds	r3, #1
 8009832:	b29a      	uxth	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	81da      	strh	r2, [r3, #14]
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f008 f9b7 	bl	8011bac <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	89db      	ldrh	r3, [r3, #14]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d106      	bne.n	8009854 <pbuf_ref+0x3c>
 8009846:	4b05      	ldr	r3, [pc, #20]	; (800985c <pbuf_ref+0x44>)
 8009848:	f240 3239 	movw	r2, #825	; 0x339
 800984c:	4904      	ldr	r1, [pc, #16]	; (8009860 <pbuf_ref+0x48>)
 800984e:	4805      	ldr	r0, [pc, #20]	; (8009864 <pbuf_ref+0x4c>)
 8009850:	f008 fb58 	bl	8011f04 <iprintf>
  }
}
 8009854:	bf00      	nop
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}
 800985c:	0801317c 	.word	0x0801317c
 8009860:	08013444 	.word	0x08013444
 8009864:	080131c8 	.word	0x080131c8

08009868 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d002      	beq.n	800987e <pbuf_cat+0x16>
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d107      	bne.n	800988e <pbuf_cat+0x26>
 800987e:	4b20      	ldr	r3, [pc, #128]	; (8009900 <pbuf_cat+0x98>)
 8009880:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8009884:	491f      	ldr	r1, [pc, #124]	; (8009904 <pbuf_cat+0x9c>)
 8009886:	4820      	ldr	r0, [pc, #128]	; (8009908 <pbuf_cat+0xa0>)
 8009888:	f008 fb3c 	bl	8011f04 <iprintf>
 800988c:	e034      	b.n	80098f8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	60fb      	str	r3, [r7, #12]
 8009892:	e00a      	b.n	80098aa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	891a      	ldrh	r2, [r3, #8]
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	891b      	ldrh	r3, [r3, #8]
 800989c:	4413      	add	r3, r2
 800989e:	b29a      	uxth	r2, r3
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	60fb      	str	r3, [r7, #12]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d1f0      	bne.n	8009894 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	891a      	ldrh	r2, [r3, #8]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	895b      	ldrh	r3, [r3, #10]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d006      	beq.n	80098cc <pbuf_cat+0x64>
 80098be:	4b10      	ldr	r3, [pc, #64]	; (8009900 <pbuf_cat+0x98>)
 80098c0:	f240 3255 	movw	r2, #853	; 0x355
 80098c4:	4911      	ldr	r1, [pc, #68]	; (800990c <pbuf_cat+0xa4>)
 80098c6:	4810      	ldr	r0, [pc, #64]	; (8009908 <pbuf_cat+0xa0>)
 80098c8:	f008 fb1c 	bl	8011f04 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d006      	beq.n	80098e2 <pbuf_cat+0x7a>
 80098d4:	4b0a      	ldr	r3, [pc, #40]	; (8009900 <pbuf_cat+0x98>)
 80098d6:	f240 3256 	movw	r2, #854	; 0x356
 80098da:	490d      	ldr	r1, [pc, #52]	; (8009910 <pbuf_cat+0xa8>)
 80098dc:	480a      	ldr	r0, [pc, #40]	; (8009908 <pbuf_cat+0xa0>)
 80098de:	f008 fb11 	bl	8011f04 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	891a      	ldrh	r2, [r3, #8]
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	891b      	ldrh	r3, [r3, #8]
 80098ea:	4413      	add	r3, r2
 80098ec:	b29a      	uxth	r2, r3
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	683a      	ldr	r2, [r7, #0]
 80098f6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80098f8:	3710      	adds	r7, #16
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	0801317c 	.word	0x0801317c
 8009904:	08013458 	.word	0x08013458
 8009908:	080131c8 	.word	0x080131c8
 800990c:	08013490 	.word	0x08013490
 8009910:	080134c0 	.word	0x080134c0

08009914 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800991e:	6839      	ldr	r1, [r7, #0]
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f7ff ffa1 	bl	8009868 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8009926:	6838      	ldr	r0, [r7, #0]
 8009928:	f7ff ff76 	bl	8009818 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800992c:	bf00      	nop
 800992e:	3708      	adds	r7, #8
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800993e:	2300      	movs	r3, #0
 8009940:	81fb      	strh	r3, [r7, #14]
 8009942:	2300      	movs	r3, #0
 8009944:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d008      	beq.n	800995e <pbuf_copy+0x2a>
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d005      	beq.n	800995e <pbuf_copy+0x2a>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	891a      	ldrh	r2, [r3, #8]
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	891b      	ldrh	r3, [r3, #8]
 800995a:	429a      	cmp	r2, r3
 800995c:	d209      	bcs.n	8009972 <pbuf_copy+0x3e>
 800995e:	4b54      	ldr	r3, [pc, #336]	; (8009ab0 <pbuf_copy+0x17c>)
 8009960:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8009964:	4953      	ldr	r1, [pc, #332]	; (8009ab4 <pbuf_copy+0x180>)
 8009966:	4854      	ldr	r0, [pc, #336]	; (8009ab8 <pbuf_copy+0x184>)
 8009968:	f008 facc 	bl	8011f04 <iprintf>
 800996c:	f06f 030f 	mvn.w	r3, #15
 8009970:	e099      	b.n	8009aa6 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	895b      	ldrh	r3, [r3, #10]
 8009976:	461a      	mov	r2, r3
 8009978:	89fb      	ldrh	r3, [r7, #14]
 800997a:	1ad2      	subs	r2, r2, r3
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	895b      	ldrh	r3, [r3, #10]
 8009980:	4619      	mov	r1, r3
 8009982:	89bb      	ldrh	r3, [r7, #12]
 8009984:	1acb      	subs	r3, r1, r3
 8009986:	429a      	cmp	r2, r3
 8009988:	db05      	blt.n	8009996 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	895a      	ldrh	r2, [r3, #10]
 800998e:	89bb      	ldrh	r3, [r7, #12]
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	817b      	strh	r3, [r7, #10]
 8009994:	e004      	b.n	80099a0 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	895a      	ldrh	r2, [r3, #10]
 800999a:	89fb      	ldrh	r3, [r7, #14]
 800999c:	1ad3      	subs	r3, r2, r3
 800999e:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	685a      	ldr	r2, [r3, #4]
 80099a4:	89fb      	ldrh	r3, [r7, #14]
 80099a6:	18d0      	adds	r0, r2, r3
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	685a      	ldr	r2, [r3, #4]
 80099ac:	89bb      	ldrh	r3, [r7, #12]
 80099ae:	4413      	add	r3, r2
 80099b0:	897a      	ldrh	r2, [r7, #10]
 80099b2:	4619      	mov	r1, r3
 80099b4:	f008 fa35 	bl	8011e22 <memcpy>
    offset_to += len;
 80099b8:	89fa      	ldrh	r2, [r7, #14]
 80099ba:	897b      	ldrh	r3, [r7, #10]
 80099bc:	4413      	add	r3, r2
 80099be:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 80099c0:	89ba      	ldrh	r2, [r7, #12]
 80099c2:	897b      	ldrh	r3, [r7, #10]
 80099c4:	4413      	add	r3, r2
 80099c6:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	895b      	ldrh	r3, [r3, #10]
 80099cc:	89fa      	ldrh	r2, [r7, #14]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d906      	bls.n	80099e0 <pbuf_copy+0xac>
 80099d2:	4b37      	ldr	r3, [pc, #220]	; (8009ab0 <pbuf_copy+0x17c>)
 80099d4:	f240 32cd 	movw	r2, #973	; 0x3cd
 80099d8:	4938      	ldr	r1, [pc, #224]	; (8009abc <pbuf_copy+0x188>)
 80099da:	4837      	ldr	r0, [pc, #220]	; (8009ab8 <pbuf_copy+0x184>)
 80099dc:	f008 fa92 	bl	8011f04 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	895b      	ldrh	r3, [r3, #10]
 80099e4:	89ba      	ldrh	r2, [r7, #12]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d906      	bls.n	80099f8 <pbuf_copy+0xc4>
 80099ea:	4b31      	ldr	r3, [pc, #196]	; (8009ab0 <pbuf_copy+0x17c>)
 80099ec:	f240 32ce 	movw	r2, #974	; 0x3ce
 80099f0:	4933      	ldr	r1, [pc, #204]	; (8009ac0 <pbuf_copy+0x18c>)
 80099f2:	4831      	ldr	r0, [pc, #196]	; (8009ab8 <pbuf_copy+0x184>)
 80099f4:	f008 fa86 	bl	8011f04 <iprintf>
    if (offset_from >= p_from->len) {
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	895b      	ldrh	r3, [r3, #10]
 80099fc:	89ba      	ldrh	r2, [r7, #12]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d304      	bcc.n	8009a0c <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8009a02:	2300      	movs	r3, #0
 8009a04:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	895b      	ldrh	r3, [r3, #10]
 8009a10:	89fa      	ldrh	r2, [r7, #14]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d114      	bne.n	8009a40 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8009a16:	2300      	movs	r3, #0
 8009a18:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d10c      	bne.n	8009a40 <pbuf_copy+0x10c>
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d009      	beq.n	8009a40 <pbuf_copy+0x10c>
 8009a2c:	4b20      	ldr	r3, [pc, #128]	; (8009ab0 <pbuf_copy+0x17c>)
 8009a2e:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8009a32:	4924      	ldr	r1, [pc, #144]	; (8009ac4 <pbuf_copy+0x190>)
 8009a34:	4820      	ldr	r0, [pc, #128]	; (8009ab8 <pbuf_copy+0x184>)
 8009a36:	f008 fa65 	bl	8011f04 <iprintf>
 8009a3a:	f06f 030f 	mvn.w	r3, #15
 8009a3e:	e032      	b.n	8009aa6 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d013      	beq.n	8009a6e <pbuf_copy+0x13a>
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	895a      	ldrh	r2, [r3, #10]
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	891b      	ldrh	r3, [r3, #8]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d10d      	bne.n	8009a6e <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d009      	beq.n	8009a6e <pbuf_copy+0x13a>
 8009a5a:	4b15      	ldr	r3, [pc, #84]	; (8009ab0 <pbuf_copy+0x17c>)
 8009a5c:	f240 32dd 	movw	r2, #989	; 0x3dd
 8009a60:	4919      	ldr	r1, [pc, #100]	; (8009ac8 <pbuf_copy+0x194>)
 8009a62:	4815      	ldr	r0, [pc, #84]	; (8009ab8 <pbuf_copy+0x184>)
 8009a64:	f008 fa4e 	bl	8011f04 <iprintf>
 8009a68:	f06f 0305 	mvn.w	r3, #5
 8009a6c:	e01b      	b.n	8009aa6 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d013      	beq.n	8009a9c <pbuf_copy+0x168>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	895a      	ldrh	r2, [r3, #10]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	891b      	ldrh	r3, [r3, #8]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d10d      	bne.n	8009a9c <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d009      	beq.n	8009a9c <pbuf_copy+0x168>
 8009a88:	4b09      	ldr	r3, [pc, #36]	; (8009ab0 <pbuf_copy+0x17c>)
 8009a8a:	f240 32e2 	movw	r2, #994	; 0x3e2
 8009a8e:	490e      	ldr	r1, [pc, #56]	; (8009ac8 <pbuf_copy+0x194>)
 8009a90:	4809      	ldr	r0, [pc, #36]	; (8009ab8 <pbuf_copy+0x184>)
 8009a92:	f008 fa37 	bl	8011f04 <iprintf>
 8009a96:	f06f 0305 	mvn.w	r3, #5
 8009a9a:	e004      	b.n	8009aa6 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	f47f af67 	bne.w	8009972 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	0801317c 	.word	0x0801317c
 8009ab4:	0801350c 	.word	0x0801350c
 8009ab8:	080131c8 	.word	0x080131c8
 8009abc:	0801353c 	.word	0x0801353c
 8009ac0:	08013554 	.word	0x08013554
 8009ac4:	08013570 	.word	0x08013570
 8009ac8:	08013580 	.word	0x08013580

08009acc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b088      	sub	sp, #32
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	4611      	mov	r1, r2
 8009ad8:	461a      	mov	r2, r3
 8009ada:	460b      	mov	r3, r1
 8009adc:	80fb      	strh	r3, [r7, #6]
 8009ade:	4613      	mov	r3, r2
 8009ae0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d108      	bne.n	8009afe <pbuf_copy_partial+0x32>
 8009aec:	4b30      	ldr	r3, [pc, #192]	; (8009bb0 <pbuf_copy_partial+0xe4>)
 8009aee:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8009af2:	4930      	ldr	r1, [pc, #192]	; (8009bb4 <pbuf_copy_partial+0xe8>)
 8009af4:	4830      	ldr	r0, [pc, #192]	; (8009bb8 <pbuf_copy_partial+0xec>)
 8009af6:	f008 fa05 	bl	8011f04 <iprintf>
 8009afa:	2300      	movs	r3, #0
 8009afc:	e054      	b.n	8009ba8 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d108      	bne.n	8009b16 <pbuf_copy_partial+0x4a>
 8009b04:	4b2a      	ldr	r3, [pc, #168]	; (8009bb0 <pbuf_copy_partial+0xe4>)
 8009b06:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8009b0a:	492c      	ldr	r1, [pc, #176]	; (8009bbc <pbuf_copy_partial+0xf0>)
 8009b0c:	482a      	ldr	r0, [pc, #168]	; (8009bb8 <pbuf_copy_partial+0xec>)
 8009b0e:	f008 f9f9 	bl	8011f04 <iprintf>
 8009b12:	2300      	movs	r3, #0
 8009b14:	e048      	b.n	8009ba8 <pbuf_copy_partial+0xdc>

  left = 0;
 8009b16:	2300      	movs	r3, #0
 8009b18:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d002      	beq.n	8009b26 <pbuf_copy_partial+0x5a>
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d101      	bne.n	8009b2a <pbuf_copy_partial+0x5e>
    return 0;
 8009b26:	2300      	movs	r3, #0
 8009b28:	e03e      	b.n	8009ba8 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	61fb      	str	r3, [r7, #28]
 8009b2e:	e034      	b.n	8009b9a <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8009b30:	88bb      	ldrh	r3, [r7, #4]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00a      	beq.n	8009b4c <pbuf_copy_partial+0x80>
 8009b36:	69fb      	ldr	r3, [r7, #28]
 8009b38:	895b      	ldrh	r3, [r3, #10]
 8009b3a:	88ba      	ldrh	r2, [r7, #4]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d305      	bcc.n	8009b4c <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	895b      	ldrh	r3, [r3, #10]
 8009b44:	88ba      	ldrh	r2, [r7, #4]
 8009b46:	1ad3      	subs	r3, r2, r3
 8009b48:	80bb      	strh	r3, [r7, #4]
 8009b4a:	e023      	b.n	8009b94 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	895a      	ldrh	r2, [r3, #10]
 8009b50:	88bb      	ldrh	r3, [r7, #4]
 8009b52:	1ad3      	subs	r3, r2, r3
 8009b54:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8009b56:	8b3a      	ldrh	r2, [r7, #24]
 8009b58:	88fb      	ldrh	r3, [r7, #6]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d901      	bls.n	8009b62 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8009b5e:	88fb      	ldrh	r3, [r7, #6]
 8009b60:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8009b62:	8b7b      	ldrh	r3, [r7, #26]
 8009b64:	68ba      	ldr	r2, [r7, #8]
 8009b66:	18d0      	adds	r0, r2, r3
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	685a      	ldr	r2, [r3, #4]
 8009b6c:	88bb      	ldrh	r3, [r7, #4]
 8009b6e:	4413      	add	r3, r2
 8009b70:	8b3a      	ldrh	r2, [r7, #24]
 8009b72:	4619      	mov	r1, r3
 8009b74:	f008 f955 	bl	8011e22 <memcpy>
      copied_total += buf_copy_len;
 8009b78:	8afa      	ldrh	r2, [r7, #22]
 8009b7a:	8b3b      	ldrh	r3, [r7, #24]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8009b80:	8b7a      	ldrh	r2, [r7, #26]
 8009b82:	8b3b      	ldrh	r3, [r7, #24]
 8009b84:	4413      	add	r3, r2
 8009b86:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8009b88:	88fa      	ldrh	r2, [r7, #6]
 8009b8a:	8b3b      	ldrh	r3, [r7, #24]
 8009b8c:	1ad3      	subs	r3, r2, r3
 8009b8e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8009b90:	2300      	movs	r3, #0
 8009b92:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	61fb      	str	r3, [r7, #28]
 8009b9a:	88fb      	ldrh	r3, [r7, #6]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d002      	beq.n	8009ba6 <pbuf_copy_partial+0xda>
 8009ba0:	69fb      	ldr	r3, [r7, #28]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d1c4      	bne.n	8009b30 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8009ba6:	8afb      	ldrh	r3, [r7, #22]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3720      	adds	r7, #32
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	0801317c 	.word	0x0801317c
 8009bb4:	080135ac 	.word	0x080135ac
 8009bb8:	080131c8 	.word	0x080131c8
 8009bbc:	080135cc 	.word	0x080135cc

08009bc0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8009bc4:	bf00      	nop
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bc80      	pop	{r7}
 8009bca:	4770      	bx	lr

08009bcc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009bd0:	f000 ff8a 	bl	800aae8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8009bd4:	4b07      	ldr	r3, [pc, #28]	; (8009bf4 <tcp_tmr+0x28>)
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	3301      	adds	r3, #1
 8009bda:	b2da      	uxtb	r2, r3
 8009bdc:	4b05      	ldr	r3, [pc, #20]	; (8009bf4 <tcp_tmr+0x28>)
 8009bde:	701a      	strb	r2, [r3, #0]
 8009be0:	4b04      	ldr	r3, [pc, #16]	; (8009bf4 <tcp_tmr+0x28>)
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	f003 0301 	and.w	r3, r3, #1
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d001      	beq.n	8009bf0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8009bec:	f000 fcba 	bl	800a564 <tcp_slowtmr>
  }
}
 8009bf0:	bf00      	nop
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	200042fd 	.word	0x200042fd

08009bf8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b085      	sub	sp, #20
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	60fb      	str	r3, [r7, #12]
 8009c06:	e00a      	b.n	8009c1e <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c0c:	683a      	ldr	r2, [r7, #0]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d102      	bne.n	8009c18 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2200      	movs	r2, #0
 8009c16:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	60fb      	str	r3, [r7, #12]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d1f1      	bne.n	8009c08 <tcp_remove_listener+0x10>
      }
   }
}
 8009c24:	bf00      	nop
 8009c26:	bf00      	nop
 8009c28:	3714      	adds	r7, #20
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bc80      	pop	{r7}
 8009c2e:	4770      	bx	lr

08009c30 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d105      	bne.n	8009c4a <tcp_listen_closed+0x1a>
 8009c3e:	4b13      	ldr	r3, [pc, #76]	; (8009c8c <tcp_listen_closed+0x5c>)
 8009c40:	22c0      	movs	r2, #192	; 0xc0
 8009c42:	4913      	ldr	r1, [pc, #76]	; (8009c90 <tcp_listen_closed+0x60>)
 8009c44:	4813      	ldr	r0, [pc, #76]	; (8009c94 <tcp_listen_closed+0x64>)
 8009c46:	f008 f95d 	bl	8011f04 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	7d1b      	ldrb	r3, [r3, #20]
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d005      	beq.n	8009c5e <tcp_listen_closed+0x2e>
 8009c52:	4b0e      	ldr	r3, [pc, #56]	; (8009c8c <tcp_listen_closed+0x5c>)
 8009c54:	22c1      	movs	r2, #193	; 0xc1
 8009c56:	4910      	ldr	r1, [pc, #64]	; (8009c98 <tcp_listen_closed+0x68>)
 8009c58:	480e      	ldr	r0, [pc, #56]	; (8009c94 <tcp_listen_closed+0x64>)
 8009c5a:	f008 f953 	bl	8011f04 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009c5e:	2301      	movs	r3, #1
 8009c60:	60fb      	str	r3, [r7, #12]
 8009c62:	e00b      	b.n	8009c7c <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8009c64:	4a0d      	ldr	r2, [pc, #52]	; (8009c9c <tcp_listen_closed+0x6c>)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	6879      	ldr	r1, [r7, #4]
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7ff ffc1 	bl	8009bf8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	3301      	adds	r3, #1
 8009c7a:	60fb      	str	r3, [r7, #12]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2b03      	cmp	r3, #3
 8009c80:	d9f0      	bls.n	8009c64 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8009c82:	bf00      	nop
 8009c84:	bf00      	nop
 8009c86:	3710      	adds	r7, #16
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	08013700 	.word	0x08013700
 8009c90:	08013730 	.word	0x08013730
 8009c94:	0801373c 	.word	0x0801373c
 8009c98:	08013764 	.word	0x08013764
 8009c9c:	08014b84 	.word	0x08014b84

08009ca0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009ca0:	b5b0      	push	{r4, r5, r7, lr}
 8009ca2:	b086      	sub	sp, #24
 8009ca4:	af02      	add	r7, sp, #8
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	460b      	mov	r3, r1
 8009caa:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009cac:	78fb      	ldrb	r3, [r7, #3]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d075      	beq.n	8009d9e <tcp_close_shutdown+0xfe>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	7d1b      	ldrb	r3, [r3, #20]
 8009cb6:	2b04      	cmp	r3, #4
 8009cb8:	d003      	beq.n	8009cc2 <tcp_close_shutdown+0x22>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	7d1b      	ldrb	r3, [r3, #20]
 8009cbe:	2b07      	cmp	r3, #7
 8009cc0:	d16d      	bne.n	8009d9e <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d104      	bne.n	8009cd4 <tcp_close_shutdown+0x34>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cce:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009cd2:	d064      	beq.n	8009d9e <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	7e9b      	ldrb	r3, [r3, #26]
 8009cd8:	f003 0310 	and.w	r3, r3, #16
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d106      	bne.n	8009cee <tcp_close_shutdown+0x4e>
 8009ce0:	4b5b      	ldr	r3, [pc, #364]	; (8009e50 <tcp_close_shutdown+0x1b0>)
 8009ce2:	f240 120f 	movw	r2, #271	; 0x10f
 8009ce6:	495b      	ldr	r1, [pc, #364]	; (8009e54 <tcp_close_shutdown+0x1b4>)
 8009ce8:	485b      	ldr	r0, [pc, #364]	; (8009e58 <tcp_close_shutdown+0x1b8>)
 8009cea:	f008 f90b 	bl	8011f04 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009cf6:	687c      	ldr	r4, [r7, #4]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	1d1d      	adds	r5, r3, #4
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	8adb      	ldrh	r3, [r3, #22]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	8b12      	ldrh	r2, [r2, #24]
 8009d04:	9201      	str	r2, [sp, #4]
 8009d06:	9300      	str	r3, [sp, #0]
 8009d08:	462b      	mov	r3, r5
 8009d0a:	4622      	mov	r2, r4
 8009d0c:	f004 fee8 	bl	800eae0 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f001 fa23 	bl	800b15c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009d16:	4b51      	ldr	r3, [pc, #324]	; (8009e5c <tcp_close_shutdown+0x1bc>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d105      	bne.n	8009d2c <tcp_close_shutdown+0x8c>
 8009d20:	4b4e      	ldr	r3, [pc, #312]	; (8009e5c <tcp_close_shutdown+0x1bc>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	4a4d      	ldr	r2, [pc, #308]	; (8009e5c <tcp_close_shutdown+0x1bc>)
 8009d28:	6013      	str	r3, [r2, #0]
 8009d2a:	e013      	b.n	8009d54 <tcp_close_shutdown+0xb4>
 8009d2c:	4b4b      	ldr	r3, [pc, #300]	; (8009e5c <tcp_close_shutdown+0x1bc>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	60fb      	str	r3, [r7, #12]
 8009d32:	e00c      	b.n	8009d4e <tcp_close_shutdown+0xae>
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d104      	bne.n	8009d48 <tcp_close_shutdown+0xa8>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	68da      	ldr	r2, [r3, #12]
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	60da      	str	r2, [r3, #12]
 8009d46:	e005      	b.n	8009d54 <tcp_close_shutdown+0xb4>
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	60fb      	str	r3, [r7, #12]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d1ef      	bne.n	8009d34 <tcp_close_shutdown+0x94>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	60da      	str	r2, [r3, #12]
 8009d5a:	4b41      	ldr	r3, [pc, #260]	; (8009e60 <tcp_close_shutdown+0x1c0>)
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	7d1b      	ldrb	r3, [r3, #20]
 8009d64:	2b04      	cmp	r3, #4
 8009d66:	d10c      	bne.n	8009d82 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	220a      	movs	r2, #10
 8009d6c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009d6e:	4b3d      	ldr	r3, [pc, #244]	; (8009e64 <tcp_close_shutdown+0x1c4>)
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	60da      	str	r2, [r3, #12]
 8009d76:	4a3b      	ldr	r2, [pc, #236]	; (8009e64 <tcp_close_shutdown+0x1c4>)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6013      	str	r3, [r2, #0]
 8009d7c:	f005 f8f8 	bl	800ef70 <tcp_timer_needed>
 8009d80:	e00b      	b.n	8009d9a <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8009d82:	4b39      	ldr	r3, [pc, #228]	; (8009e68 <tcp_close_shutdown+0x1c8>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d102      	bne.n	8009d92 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8009d8c:	f003 fd48 	bl	800d820 <tcp_trigger_input_pcb_close>
 8009d90:	e003      	b.n	8009d9a <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8009d92:	6879      	ldr	r1, [r7, #4]
 8009d94:	2001      	movs	r0, #1
 8009d96:	f7fe fedb 	bl	8008b50 <memp_free>
        }
      }
      return ERR_OK;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	e053      	b.n	8009e46 <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	7d1b      	ldrb	r3, [r3, #20]
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	d03d      	beq.n	8009e22 <tcp_close_shutdown+0x182>
 8009da6:	2b02      	cmp	r3, #2
 8009da8:	dc47      	bgt.n	8009e3a <tcp_close_shutdown+0x19a>
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d002      	beq.n	8009db4 <tcp_close_shutdown+0x114>
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d02b      	beq.n	8009e0a <tcp_close_shutdown+0x16a>
 8009db2:	e042      	b.n	8009e3a <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	8adb      	ldrh	r3, [r3, #22]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d021      	beq.n	8009e00 <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8009dbc:	4b2b      	ldr	r3, [pc, #172]	; (8009e6c <tcp_close_shutdown+0x1cc>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d105      	bne.n	8009dd2 <tcp_close_shutdown+0x132>
 8009dc6:	4b29      	ldr	r3, [pc, #164]	; (8009e6c <tcp_close_shutdown+0x1cc>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	68db      	ldr	r3, [r3, #12]
 8009dcc:	4a27      	ldr	r2, [pc, #156]	; (8009e6c <tcp_close_shutdown+0x1cc>)
 8009dce:	6013      	str	r3, [r2, #0]
 8009dd0:	e013      	b.n	8009dfa <tcp_close_shutdown+0x15a>
 8009dd2:	4b26      	ldr	r3, [pc, #152]	; (8009e6c <tcp_close_shutdown+0x1cc>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	60bb      	str	r3, [r7, #8]
 8009dd8:	e00c      	b.n	8009df4 <tcp_close_shutdown+0x154>
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	68db      	ldr	r3, [r3, #12]
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d104      	bne.n	8009dee <tcp_close_shutdown+0x14e>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	68da      	ldr	r2, [r3, #12]
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	60da      	str	r2, [r3, #12]
 8009dec:	e005      	b.n	8009dfa <tcp_close_shutdown+0x15a>
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	60bb      	str	r3, [r7, #8]
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d1ef      	bne.n	8009dda <tcp_close_shutdown+0x13a>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8009e00:	6879      	ldr	r1, [r7, #4]
 8009e02:	2001      	movs	r0, #1
 8009e04:	f7fe fea4 	bl	8008b50 <memp_free>
    break;
 8009e08:	e01c      	b.n	8009e44 <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f7ff ff10 	bl	8009c30 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009e10:	6879      	ldr	r1, [r7, #4]
 8009e12:	4817      	ldr	r0, [pc, #92]	; (8009e70 <tcp_close_shutdown+0x1d0>)
 8009e14:	f001 f9e4 	bl	800b1e0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009e18:	6879      	ldr	r1, [r7, #4]
 8009e1a:	2002      	movs	r0, #2
 8009e1c:	f7fe fe98 	bl	8008b50 <memp_free>
    break;
 8009e20:	e010      	b.n	8009e44 <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8009e22:	6879      	ldr	r1, [r7, #4]
 8009e24:	480d      	ldr	r0, [pc, #52]	; (8009e5c <tcp_close_shutdown+0x1bc>)
 8009e26:	f001 f9db 	bl	800b1e0 <tcp_pcb_remove>
 8009e2a:	4b0d      	ldr	r3, [pc, #52]	; (8009e60 <tcp_close_shutdown+0x1c0>)
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8009e30:	6879      	ldr	r1, [r7, #4]
 8009e32:	2001      	movs	r0, #1
 8009e34:	f7fe fe8c 	bl	8008b50 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8009e38:	e004      	b.n	8009e44 <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 f81a 	bl	8009e74 <tcp_close_shutdown_fin>
 8009e40:	4603      	mov	r3, r0
 8009e42:	e000      	b.n	8009e46 <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3710      	adds	r7, #16
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	08013700 	.word	0x08013700
 8009e54:	0801377c 	.word	0x0801377c
 8009e58:	0801373c 	.word	0x0801373c
 8009e5c:	2000b128 	.word	0x2000b128
 8009e60:	2000b124 	.word	0x2000b124
 8009e64:	2000b138 	.word	0x2000b138
 8009e68:	2000b13c 	.word	0x2000b13c
 8009e6c:	2000b134 	.word	0x2000b134
 8009e70:	2000b130 	.word	0x2000b130

08009e74 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d106      	bne.n	8009e90 <tcp_close_shutdown_fin+0x1c>
 8009e82:	4b2e      	ldr	r3, [pc, #184]	; (8009f3c <tcp_close_shutdown_fin+0xc8>)
 8009e84:	f240 124d 	movw	r2, #333	; 0x14d
 8009e88:	492d      	ldr	r1, [pc, #180]	; (8009f40 <tcp_close_shutdown_fin+0xcc>)
 8009e8a:	482e      	ldr	r0, [pc, #184]	; (8009f44 <tcp_close_shutdown_fin+0xd0>)
 8009e8c:	f008 f83a 	bl	8011f04 <iprintf>

  switch (pcb->state) {
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	7d1b      	ldrb	r3, [r3, #20]
 8009e94:	2b07      	cmp	r3, #7
 8009e96:	d020      	beq.n	8009eda <tcp_close_shutdown_fin+0x66>
 8009e98:	2b07      	cmp	r3, #7
 8009e9a:	dc2b      	bgt.n	8009ef4 <tcp_close_shutdown_fin+0x80>
 8009e9c:	2b03      	cmp	r3, #3
 8009e9e:	d002      	beq.n	8009ea6 <tcp_close_shutdown_fin+0x32>
 8009ea0:	2b04      	cmp	r3, #4
 8009ea2:	d00d      	beq.n	8009ec0 <tcp_close_shutdown_fin+0x4c>
 8009ea4:	e026      	b.n	8009ef4 <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f003 fd44 	bl	800d934 <tcp_send_fin>
 8009eac:	4603      	mov	r3, r0
 8009eae:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d11f      	bne.n	8009ef8 <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2205      	movs	r2, #5
 8009ebc:	751a      	strb	r2, [r3, #20]
    }
    break;
 8009ebe:	e01b      	b.n	8009ef8 <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f003 fd37 	bl	800d934 <tcp_send_fin>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d114      	bne.n	8009efc <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2205      	movs	r2, #5
 8009ed6:	751a      	strb	r2, [r3, #20]
    }
    break;
 8009ed8:	e010      	b.n	8009efc <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f003 fd2a 	bl	800d934 <tcp_send_fin>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d109      	bne.n	8009f00 <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2209      	movs	r2, #9
 8009ef0:	751a      	strb	r2, [r3, #20]
    }
    break;
 8009ef2:	e005      	b.n	8009f00 <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	e01c      	b.n	8009f32 <tcp_close_shutdown_fin+0xbe>
    break;
 8009ef8:	bf00      	nop
 8009efa:	e002      	b.n	8009f02 <tcp_close_shutdown_fin+0x8e>
    break;
 8009efc:	bf00      	nop
 8009efe:	e000      	b.n	8009f02 <tcp_close_shutdown_fin+0x8e>
    break;
 8009f00:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d103      	bne.n	8009f12 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f004 fb64 	bl	800e5d8 <tcp_output>
 8009f10:	e00d      	b.n	8009f2e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8009f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f1a:	d108      	bne.n	8009f2e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	7e9b      	ldrb	r3, [r3, #26]
 8009f20:	f043 0308 	orr.w	r3, r3, #8
 8009f24:	b2da      	uxtb	r2, r3
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	e001      	b.n	8009f32 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8009f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3710      	adds	r7, #16
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	08013700 	.word	0x08013700
 8009f40:	08013730 	.word	0x08013730
 8009f44:	0801373c 	.word	0x0801373c

08009f48 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	7d1b      	ldrb	r3, [r3, #20]
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d006      	beq.n	8009f66 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	7e9b      	ldrb	r3, [r3, #26]
 8009f5c:	f043 0310 	orr.w	r3, r3, #16
 8009f60:	b2da      	uxtb	r2, r3
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009f66:	2101      	movs	r1, #1
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f7ff fe99 	bl	8009ca0 <tcp_close_shutdown>
 8009f6e:	4603      	mov	r3, r0
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3708      	adds	r7, #8
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b08c      	sub	sp, #48	; 0x30
 8009f7c:	af02      	add	r7, sp, #8
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	7d1b      	ldrb	r3, [r3, #20]
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d106      	bne.n	8009f98 <tcp_abandon+0x20>
 8009f8a:	4b4d      	ldr	r3, [pc, #308]	; (800a0c0 <tcp_abandon+0x148>)
 8009f8c:	f240 12df 	movw	r2, #479	; 0x1df
 8009f90:	494c      	ldr	r1, [pc, #304]	; (800a0c4 <tcp_abandon+0x14c>)
 8009f92:	484d      	ldr	r0, [pc, #308]	; (800a0c8 <tcp_abandon+0x150>)
 8009f94:	f007 ffb6 	bl	8011f04 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	7d1b      	ldrb	r3, [r3, #20]
 8009f9c:	2b0a      	cmp	r3, #10
 8009f9e:	d108      	bne.n	8009fb2 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009fa0:	6879      	ldr	r1, [r7, #4]
 8009fa2:	484a      	ldr	r0, [pc, #296]	; (800a0cc <tcp_abandon+0x154>)
 8009fa4:	f001 f91c 	bl	800b1e0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8009fa8:	6879      	ldr	r1, [r7, #4]
 8009faa:	2001      	movs	r0, #1
 8009fac:	f7fe fdd0 	bl	8008b50 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8009fb0:	e081      	b.n	800a0b6 <tcp_abandon+0x13e>
    int send_rst = 0;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fbe:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc4:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fcc:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	7d1b      	ldrb	r3, [r3, #20]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d126      	bne.n	800a02a <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	8adb      	ldrh	r3, [r3, #22]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d02e      	beq.n	800a042 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009fe4:	4b3a      	ldr	r3, [pc, #232]	; (800a0d0 <tcp_abandon+0x158>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d105      	bne.n	8009ffa <tcp_abandon+0x82>
 8009fee:	4b38      	ldr	r3, [pc, #224]	; (800a0d0 <tcp_abandon+0x158>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	4a36      	ldr	r2, [pc, #216]	; (800a0d0 <tcp_abandon+0x158>)
 8009ff6:	6013      	str	r3, [r2, #0]
 8009ff8:	e013      	b.n	800a022 <tcp_abandon+0xaa>
 8009ffa:	4b35      	ldr	r3, [pc, #212]	; (800a0d0 <tcp_abandon+0x158>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	61fb      	str	r3, [r7, #28]
 800a000:	e00c      	b.n	800a01c <tcp_abandon+0xa4>
 800a002:	69fb      	ldr	r3, [r7, #28]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	429a      	cmp	r2, r3
 800a00a:	d104      	bne.n	800a016 <tcp_abandon+0x9e>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	68da      	ldr	r2, [r3, #12]
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	60da      	str	r2, [r3, #12]
 800a014:	e005      	b.n	800a022 <tcp_abandon+0xaa>
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	61fb      	str	r3, [r7, #28]
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d1ef      	bne.n	800a002 <tcp_abandon+0x8a>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	60da      	str	r2, [r3, #12]
 800a028:	e00b      	b.n	800a042 <tcp_abandon+0xca>
      send_rst = reset;
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	8adb      	ldrh	r3, [r3, #22]
 800a032:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a034:	6879      	ldr	r1, [r7, #4]
 800a036:	4827      	ldr	r0, [pc, #156]	; (800a0d4 <tcp_abandon+0x15c>)
 800a038:	f001 f8d2 	bl	800b1e0 <tcp_pcb_remove>
 800a03c:	4b26      	ldr	r3, [pc, #152]	; (800a0d8 <tcp_abandon+0x160>)
 800a03e:	2201      	movs	r2, #1
 800a040:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a046:	2b00      	cmp	r3, #0
 800a048:	d004      	beq.n	800a054 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a04e:	4618      	mov	r0, r3
 800a050:	f000 fe17 	bl	800ac82 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d004      	beq.n	800a066 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a060:	4618      	mov	r0, r3
 800a062:	f000 fe0e 	bl	800ac82 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d004      	beq.n	800a078 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a072:	4618      	mov	r0, r3
 800a074:	f000 fe05 	bl	800ac82 <tcp_segs_free>
    if (send_rst) {
 800a078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00c      	beq.n	800a098 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	1d19      	adds	r1, r3, #4
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	8b1b      	ldrh	r3, [r3, #24]
 800a088:	9301      	str	r3, [sp, #4]
 800a08a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a08c:	9300      	str	r3, [sp, #0]
 800a08e:	460b      	mov	r3, r1
 800a090:	6979      	ldr	r1, [r7, #20]
 800a092:	69b8      	ldr	r0, [r7, #24]
 800a094:	f004 fd24 	bl	800eae0 <tcp_rst>
    last_state = pcb->state;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	7d1b      	ldrb	r3, [r3, #20]
 800a09c:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800a09e:	6879      	ldr	r1, [r7, #4]
 800a0a0:	2001      	movs	r0, #1
 800a0a2:	f7fe fd55 	bl	8008b50 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d004      	beq.n	800a0b6 <tcp_abandon+0x13e>
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	f06f 010c 	mvn.w	r1, #12
 800a0b2:	68f8      	ldr	r0, [r7, #12]
 800a0b4:	4798      	blx	r3
}
 800a0b6:	bf00      	nop
 800a0b8:	3728      	adds	r7, #40	; 0x28
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	08013700 	.word	0x08013700
 800a0c4:	08013798 	.word	0x08013798
 800a0c8:	0801373c 	.word	0x0801373c
 800a0cc:	2000b138 	.word	0x2000b138
 800a0d0:	2000b134 	.word	0x2000b134
 800a0d4:	2000b128 	.word	0x2000b128
 800a0d8:	2000b124 	.word	0x2000b124

0800a0dc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800a0e4:	2101      	movs	r1, #1
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f7ff ff46 	bl	8009f78 <tcp_abandon>
}
 800a0ec:	bf00      	nop
 800a0ee:	3708      	adds	r7, #8
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b088      	sub	sp, #32
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	4613      	mov	r3, r2
 800a100:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800a102:	2304      	movs	r3, #4
 800a104:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d101      	bne.n	800a110 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800a10c:	4b3c      	ldr	r3, [pc, #240]	; (800a200 <tcp_bind+0x10c>)
 800a10e:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d002      	beq.n	800a11c <tcp_bind+0x28>
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d102      	bne.n	800a122 <tcp_bind+0x2e>
    return ERR_VAL;
 800a11c:	f06f 0305 	mvn.w	r3, #5
 800a120:	e06a      	b.n	800a1f8 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	7d1b      	ldrb	r3, [r3, #20]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d009      	beq.n	800a13e <tcp_bind+0x4a>
 800a12a:	4b36      	ldr	r3, [pc, #216]	; (800a204 <tcp_bind+0x110>)
 800a12c:	f44f 7211 	mov.w	r2, #580	; 0x244
 800a130:	4935      	ldr	r1, [pc, #212]	; (800a208 <tcp_bind+0x114>)
 800a132:	4836      	ldr	r0, [pc, #216]	; (800a20c <tcp_bind+0x118>)
 800a134:	f007 fee6 	bl	8011f04 <iprintf>
 800a138:	f06f 0305 	mvn.w	r3, #5
 800a13c:	e05c      	b.n	800a1f8 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 800a13e:	88fb      	ldrh	r3, [r7, #6]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d109      	bne.n	800a158 <tcp_bind+0x64>
    port = tcp_new_port();
 800a144:	f000 f9ca 	bl	800a4dc <tcp_new_port>
 800a148:	4603      	mov	r3, r0
 800a14a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800a14c:	88fb      	ldrh	r3, [r7, #6]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d135      	bne.n	800a1be <tcp_bind+0xca>
      return ERR_BUF;
 800a152:	f06f 0301 	mvn.w	r3, #1
 800a156:	e04f      	b.n	800a1f8 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800a158:	2300      	movs	r3, #0
 800a15a:	61fb      	str	r3, [r7, #28]
 800a15c:	e02b      	b.n	800a1b6 <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800a15e:	4a2c      	ldr	r2, [pc, #176]	; (800a210 <tcp_bind+0x11c>)
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	61bb      	str	r3, [r7, #24]
 800a16a:	e01e      	b.n	800a1aa <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	8adb      	ldrh	r3, [r3, #22]
 800a170:	88fa      	ldrh	r2, [r7, #6]
 800a172:	429a      	cmp	r2, r3
 800a174:	d116      	bne.n	800a1a4 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800a176:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d010      	beq.n	800a19e <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d00c      	beq.n	800a19e <tcp_bind+0xaa>
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d009      	beq.n	800a19e <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d005      	beq.n	800a19e <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d102      	bne.n	800a1a4 <tcp_bind+0xb0>
              return ERR_USE;
 800a19e:	f06f 0307 	mvn.w	r3, #7
 800a1a2:	e029      	b.n	800a1f8 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800a1a4:	69bb      	ldr	r3, [r7, #24]
 800a1a6:	68db      	ldr	r3, [r3, #12]
 800a1a8:	61bb      	str	r3, [r7, #24]
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d1dd      	bne.n	800a16c <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	61fb      	str	r3, [r7, #28]
 800a1b6:	69fa      	ldr	r2, [r7, #28]
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	dbcf      	blt.n	800a15e <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00c      	beq.n	800a1de <tcp_bind+0xea>
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d008      	beq.n	800a1de <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d002      	beq.n	800a1d8 <tcp_bind+0xe4>
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	e000      	b.n	800a1da <tcp_bind+0xe6>
 800a1d8:	2300      	movs	r3, #0
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	88fa      	ldrh	r2, [r7, #6]
 800a1e2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800a1e4:	4b0b      	ldr	r3, [pc, #44]	; (800a214 <tcp_bind+0x120>)
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	60da      	str	r2, [r3, #12]
 800a1ec:	4a09      	ldr	r2, [pc, #36]	; (800a214 <tcp_bind+0x120>)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	6013      	str	r3, [r2, #0]
 800a1f2:	f004 febd 	bl	800ef70 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800a1f6:	2300      	movs	r3, #0
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3720      	adds	r7, #32
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	08014bac 	.word	0x08014bac
 800a204:	08013700 	.word	0x08013700
 800a208:	080137cc 	.word	0x080137cc
 800a20c:	0801373c 	.word	0x0801373c
 800a210:	08014b84 	.word	0x08014b84
 800a214:	2000b134 	.word	0x2000b134

0800a218 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	4613      	mov	r3, r2
 800a224:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 800a226:	68b8      	ldr	r0, [r7, #8]
 800a228:	f7ff ff58 	bl	800a0dc <tcp_abort>

  return ERR_ABRT;
 800a22c:	f06f 030c 	mvn.w	r3, #12
}
 800a230:	4618      	mov	r0, r3
 800a232:	3710      	adds	r7, #16
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	460b      	mov	r3, r1
 800a242:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800a244:	78fb      	ldrb	r3, [r7, #3]
 800a246:	2200      	movs	r2, #0
 800a248:	4619      	mov	r1, r3
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 f806 	bl	800a25c <tcp_listen_with_backlog_and_err>
 800a250:	4603      	mov	r3, r0
}
 800a252:	4618      	mov	r0, r3
 800a254:	3708      	adds	r7, #8
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
	...

0800a25c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b088      	sub	sp, #32
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	460b      	mov	r3, r1
 800a266:	607a      	str	r2, [r7, #4]
 800a268:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800a26a:	2300      	movs	r3, #0
 800a26c:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	7d1b      	ldrb	r3, [r3, #20]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d009      	beq.n	800a28a <tcp_listen_with_backlog_and_err+0x2e>
 800a276:	4b3f      	ldr	r3, [pc, #252]	; (800a374 <tcp_listen_with_backlog_and_err+0x118>)
 800a278:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 800a27c:	493e      	ldr	r1, [pc, #248]	; (800a378 <tcp_listen_with_backlog_and_err+0x11c>)
 800a27e:	483f      	ldr	r0, [pc, #252]	; (800a37c <tcp_listen_with_backlog_and_err+0x120>)
 800a280:	f007 fe40 	bl	8011f04 <iprintf>
 800a284:	23f1      	movs	r3, #241	; 0xf1
 800a286:	76fb      	strb	r3, [r7, #27]
 800a288:	e069      	b.n	800a35e <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	7d1b      	ldrb	r3, [r3, #20]
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d104      	bne.n	800a29c <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800a296:	23f7      	movs	r3, #247	; 0xf7
 800a298:	76fb      	strb	r3, [r7, #27]
    goto done;
 800a29a:	e060      	b.n	800a35e <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800a29c:	2002      	movs	r0, #2
 800a29e:	f7fe fc05 	bl	8008aac <memp_malloc>
 800a2a2:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d102      	bne.n	800a2b0 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 800a2aa:	23ff      	movs	r3, #255	; 0xff
 800a2ac:	76fb      	strb	r3, [r7, #27]
    goto done;
 800a2ae:	e056      	b.n	800a35e <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	691a      	ldr	r2, [r3, #16]
 800a2b4:	69fb      	ldr	r3, [r7, #28]
 800a2b6:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	8ada      	ldrh	r2, [r3, #22]
 800a2bc:	69fb      	ldr	r3, [r7, #28]
 800a2be:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	7d5a      	ldrb	r2, [r3, #21]
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	7a1a      	ldrb	r2, [r3, #8]
 800a2d2:	69fb      	ldr	r3, [r7, #28]
 800a2d4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	7a9a      	ldrb	r2, [r3, #10]
 800a2da:	69fb      	ldr	r3, [r7, #28]
 800a2dc:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	7a5a      	ldrb	r2, [r3, #9]
 800a2e2:	69fb      	ldr	r3, [r7, #28]
 800a2e4:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	69fb      	ldr	r3, [r7, #28]
 800a2ec:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	8adb      	ldrh	r3, [r3, #22]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d021      	beq.n	800a33a <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800a2f6:	4b22      	ldr	r3, [pc, #136]	; (800a380 <tcp_listen_with_backlog_and_err+0x124>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	68fa      	ldr	r2, [r7, #12]
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d105      	bne.n	800a30c <tcp_listen_with_backlog_and_err+0xb0>
 800a300:	4b1f      	ldr	r3, [pc, #124]	; (800a380 <tcp_listen_with_backlog_and_err+0x124>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	4a1e      	ldr	r2, [pc, #120]	; (800a380 <tcp_listen_with_backlog_and_err+0x124>)
 800a308:	6013      	str	r3, [r2, #0]
 800a30a:	e013      	b.n	800a334 <tcp_listen_with_backlog_and_err+0xd8>
 800a30c:	4b1c      	ldr	r3, [pc, #112]	; (800a380 <tcp_listen_with_backlog_and_err+0x124>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	617b      	str	r3, [r7, #20]
 800a312:	e00c      	b.n	800a32e <tcp_listen_with_backlog_and_err+0xd2>
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	68db      	ldr	r3, [r3, #12]
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d104      	bne.n	800a328 <tcp_listen_with_backlog_and_err+0xcc>
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	68da      	ldr	r2, [r3, #12]
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	60da      	str	r2, [r3, #12]
 800a326:	e005      	b.n	800a334 <tcp_listen_with_backlog_and_err+0xd8>
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	617b      	str	r3, [r7, #20]
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d1ef      	bne.n	800a314 <tcp_listen_with_backlog_and_err+0xb8>
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2200      	movs	r2, #0
 800a338:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 800a33a:	68f9      	ldr	r1, [r7, #12]
 800a33c:	2001      	movs	r0, #1
 800a33e:	f7fe fc07 	bl	8008b50 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	4a0f      	ldr	r2, [pc, #60]	; (800a384 <tcp_listen_with_backlog_and_err+0x128>)
 800a346:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800a348:	4b0f      	ldr	r3, [pc, #60]	; (800a388 <tcp_listen_with_backlog_and_err+0x12c>)
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	69fb      	ldr	r3, [r7, #28]
 800a34e:	60da      	str	r2, [r3, #12]
 800a350:	4a0d      	ldr	r2, [pc, #52]	; (800a388 <tcp_listen_with_backlog_and_err+0x12c>)
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	6013      	str	r3, [r2, #0]
 800a356:	f004 fe0b 	bl	800ef70 <tcp_timer_needed>
  res = ERR_OK;
 800a35a:	2300      	movs	r3, #0
 800a35c:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d002      	beq.n	800a36a <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	7efa      	ldrb	r2, [r7, #27]
 800a368:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800a36a:	69fb      	ldr	r3, [r7, #28]
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3720      	adds	r7, #32
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}
 800a374:	08013700 	.word	0x08013700
 800a378:	080137f4 	.word	0x080137f4
 800a37c:	0801373c 	.word	0x0801373c
 800a380:	2000b134 	.word	0x2000b134
 800a384:	0800a219 	.word	0x0800a219
 800a388:	2000b130 	.word	0x2000b130

0800a38c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a39c:	4413      	add	r3, r2
 800a39e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800a3a8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800a3ac:	bf28      	it	cs
 800a3ae:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800a3b2:	b292      	uxth	r2, r2
 800a3b4:	4413      	add	r3, r2
 800a3b6:	68fa      	ldr	r2, [r7, #12]
 800a3b8:	1ad3      	subs	r3, r2, r3
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	db08      	blt.n	800a3d0 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ca:	68fa      	ldr	r2, [r7, #12]
 800a3cc:	1ad3      	subs	r3, r2, r3
 800a3ce:	e020      	b.n	800a412 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d8:	1ad3      	subs	r3, r2, r3
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	dd03      	ble.n	800a3e6 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a3e4:	e014      	b.n	800a410 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ee:	1ad3      	subs	r3, r2, r3
 800a3f0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3f8:	d306      	bcc.n	800a408 <tcp_update_rcv_ann_wnd+0x7c>
 800a3fa:	4b08      	ldr	r3, [pc, #32]	; (800a41c <tcp_update_rcv_ann_wnd+0x90>)
 800a3fc:	f44f 7242 	mov.w	r2, #776	; 0x308
 800a400:	4907      	ldr	r1, [pc, #28]	; (800a420 <tcp_update_rcv_ann_wnd+0x94>)
 800a402:	4808      	ldr	r0, [pc, #32]	; (800a424 <tcp_update_rcv_ann_wnd+0x98>)
 800a404:	f007 fd7e 	bl	8011f04 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	b29a      	uxth	r2, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800a410:	2300      	movs	r3, #0
  }
}
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	bf00      	nop
 800a41c:	08013700 	.word	0x08013700
 800a420:	08013818 	.word	0x08013818
 800a424:	0801373c 	.word	0x0801373c

0800a428 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b084      	sub	sp, #16
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	460b      	mov	r3, r1
 800a432:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	7d1b      	ldrb	r3, [r3, #20]
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d106      	bne.n	800a44a <tcp_recved+0x22>
 800a43c:	4b23      	ldr	r3, [pc, #140]	; (800a4cc <tcp_recved+0xa4>)
 800a43e:	f240 321f 	movw	r2, #799	; 0x31f
 800a442:	4923      	ldr	r1, [pc, #140]	; (800a4d0 <tcp_recved+0xa8>)
 800a444:	4823      	ldr	r0, [pc, #140]	; (800a4d4 <tcp_recved+0xac>)
 800a446:	f007 fd5d 	bl	8011f04 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a44e:	887b      	ldrh	r3, [r7, #2]
 800a450:	4413      	add	r3, r2
 800a452:	b29a      	uxth	r2, r3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a45c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a460:	d904      	bls.n	800a46c <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a468:	851a      	strh	r2, [r3, #40]	; 0x28
 800a46a:	e017      	b.n	800a49c <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a470:	2b00      	cmp	r3, #0
 800a472:	d113      	bne.n	800a49c <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	7d1b      	ldrb	r3, [r3, #20]
 800a478:	2b07      	cmp	r3, #7
 800a47a:	d003      	beq.n	800a484 <tcp_recved+0x5c>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	7d1b      	ldrb	r3, [r3, #20]
 800a480:	2b09      	cmp	r3, #9
 800a482:	d104      	bne.n	800a48e <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a48a:	851a      	strh	r2, [r3, #40]	; 0x28
 800a48c:	e006      	b.n	800a49c <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800a48e:	4b0f      	ldr	r3, [pc, #60]	; (800a4cc <tcp_recved+0xa4>)
 800a490:	f240 322d 	movw	r2, #813	; 0x32d
 800a494:	4910      	ldr	r1, [pc, #64]	; (800a4d8 <tcp_recved+0xb0>)
 800a496:	480f      	ldr	r0, [pc, #60]	; (800a4d4 <tcp_recved+0xac>)
 800a498:	f007 fd34 	bl	8011f04 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f7ff ff75 	bl	800a38c <tcp_update_rcv_ann_wnd>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a4ac:	db09      	blt.n	800a4c2 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	7e9b      	ldrb	r3, [r3, #26]
 800a4b2:	f043 0302 	orr.w	r3, r3, #2
 800a4b6:	b2da      	uxtb	r2, r3
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f004 f88b 	bl	800e5d8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a4c2:	bf00      	nop
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	08013700 	.word	0x08013700
 800a4d0:	08013834 	.word	0x08013834
 800a4d4:	0801373c 	.word	0x0801373c
 800a4d8:	0801385c 	.word	0x0801385c

0800a4dc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b083      	sub	sp, #12
 800a4e0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800a4e6:	4b1d      	ldr	r3, [pc, #116]	; (800a55c <tcp_new_port+0x80>)
 800a4e8:	881b      	ldrh	r3, [r3, #0]
 800a4ea:	1c5a      	adds	r2, r3, #1
 800a4ec:	b291      	uxth	r1, r2
 800a4ee:	4a1b      	ldr	r2, [pc, #108]	; (800a55c <tcp_new_port+0x80>)
 800a4f0:	8011      	strh	r1, [r2, #0]
 800a4f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d103      	bne.n	800a502 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800a4fa:	4b18      	ldr	r3, [pc, #96]	; (800a55c <tcp_new_port+0x80>)
 800a4fc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800a500:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a502:	2300      	movs	r3, #0
 800a504:	71fb      	strb	r3, [r7, #7]
 800a506:	e01e      	b.n	800a546 <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a508:	79fb      	ldrb	r3, [r7, #7]
 800a50a:	4a15      	ldr	r2, [pc, #84]	; (800a560 <tcp_new_port+0x84>)
 800a50c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	603b      	str	r3, [r7, #0]
 800a514:	e011      	b.n	800a53a <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	8ada      	ldrh	r2, [r3, #22]
 800a51a:	4b10      	ldr	r3, [pc, #64]	; (800a55c <tcp_new_port+0x80>)
 800a51c:	881b      	ldrh	r3, [r3, #0]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d108      	bne.n	800a534 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800a522:	88bb      	ldrh	r3, [r7, #4]
 800a524:	3301      	adds	r3, #1
 800a526:	80bb      	strh	r3, [r7, #4]
 800a528:	88bb      	ldrh	r3, [r7, #4]
 800a52a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a52e:	d3da      	bcc.n	800a4e6 <tcp_new_port+0xa>
          return 0;
 800a530:	2300      	movs	r3, #0
 800a532:	e00d      	b.n	800a550 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	603b      	str	r3, [r7, #0]
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d1ea      	bne.n	800a516 <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a540:	79fb      	ldrb	r3, [r7, #7]
 800a542:	3301      	adds	r3, #1
 800a544:	71fb      	strb	r3, [r7, #7]
 800a546:	79fb      	ldrb	r3, [r7, #7]
 800a548:	2b03      	cmp	r3, #3
 800a54a:	d9dd      	bls.n	800a508 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800a54c:	4b03      	ldr	r3, [pc, #12]	; (800a55c <tcp_new_port+0x80>)
 800a54e:	881b      	ldrh	r3, [r3, #0]
}
 800a550:	4618      	mov	r0, r3
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	bc80      	pop	{r7}
 800a558:	4770      	bx	lr
 800a55a:	bf00      	nop
 800a55c:	20000010 	.word	0x20000010
 800a560:	08014b84 	.word	0x08014b84

0800a564 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a564:	b5b0      	push	{r4, r5, r7, lr}
 800a566:	b08c      	sub	sp, #48	; 0x30
 800a568:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a56a:	2300      	movs	r3, #0
 800a56c:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800a56e:	4b97      	ldr	r3, [pc, #604]	; (800a7cc <tcp_slowtmr+0x268>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	3301      	adds	r3, #1
 800a574:	4a95      	ldr	r2, [pc, #596]	; (800a7cc <tcp_slowtmr+0x268>)
 800a576:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a578:	4b95      	ldr	r3, [pc, #596]	; (800a7d0 <tcp_slowtmr+0x26c>)
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	3301      	adds	r3, #1
 800a57e:	b2da      	uxtb	r2, r3
 800a580:	4b93      	ldr	r3, [pc, #588]	; (800a7d0 <tcp_slowtmr+0x26c>)
 800a582:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800a584:	2300      	movs	r3, #0
 800a586:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800a588:	4b92      	ldr	r3, [pc, #584]	; (800a7d4 <tcp_slowtmr+0x270>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800a58e:	e227      	b.n	800a9e0 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a592:	7d1b      	ldrb	r3, [r3, #20]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d106      	bne.n	800a5a6 <tcp_slowtmr+0x42>
 800a598:	4b8f      	ldr	r3, [pc, #572]	; (800a7d8 <tcp_slowtmr+0x274>)
 800a59a:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800a59e:	498f      	ldr	r1, [pc, #572]	; (800a7dc <tcp_slowtmr+0x278>)
 800a5a0:	488f      	ldr	r0, [pc, #572]	; (800a7e0 <tcp_slowtmr+0x27c>)
 800a5a2:	f007 fcaf 	bl	8011f04 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a8:	7d1b      	ldrb	r3, [r3, #20]
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d106      	bne.n	800a5bc <tcp_slowtmr+0x58>
 800a5ae:	4b8a      	ldr	r3, [pc, #552]	; (800a7d8 <tcp_slowtmr+0x274>)
 800a5b0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800a5b4:	498b      	ldr	r1, [pc, #556]	; (800a7e4 <tcp_slowtmr+0x280>)
 800a5b6:	488a      	ldr	r0, [pc, #552]	; (800a7e0 <tcp_slowtmr+0x27c>)
 800a5b8:	f007 fca4 	bl	8011f04 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5be:	7d1b      	ldrb	r3, [r3, #20]
 800a5c0:	2b0a      	cmp	r3, #10
 800a5c2:	d106      	bne.n	800a5d2 <tcp_slowtmr+0x6e>
 800a5c4:	4b84      	ldr	r3, [pc, #528]	; (800a7d8 <tcp_slowtmr+0x274>)
 800a5c6:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800a5ca:	4987      	ldr	r1, [pc, #540]	; (800a7e8 <tcp_slowtmr+0x284>)
 800a5cc:	4884      	ldr	r0, [pc, #528]	; (800a7e0 <tcp_slowtmr+0x27c>)
 800a5ce:	f007 fc99 	bl	8011f04 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d4:	7f5a      	ldrb	r2, [r3, #29]
 800a5d6:	4b7e      	ldr	r3, [pc, #504]	; (800a7d0 <tcp_slowtmr+0x26c>)
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d103      	bne.n	800a5e6 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800a5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800a5e4:	e1fc      	b.n	800a9e0 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800a5e6:	4b7a      	ldr	r3, [pc, #488]	; (800a7d0 <tcp_slowtmr+0x26c>)
 800a5e8:	781a      	ldrb	r2, [r3, #0]
 800a5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ec:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f8:	7d1b      	ldrb	r3, [r3, #20]
 800a5fa:	2b02      	cmp	r3, #2
 800a5fc:	d108      	bne.n	800a610 <tcp_slowtmr+0xac>
 800a5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a600:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a604:	2b05      	cmp	r3, #5
 800a606:	d903      	bls.n	800a610 <tcp_slowtmr+0xac>
      ++pcb_remove;
 800a608:	7ffb      	ldrb	r3, [r7, #31]
 800a60a:	3301      	adds	r3, #1
 800a60c:	77fb      	strb	r3, [r7, #31]
 800a60e:	e0a2      	b.n	800a756 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800a610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a612:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a616:	2b0b      	cmp	r3, #11
 800a618:	d903      	bls.n	800a622 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800a61a:	7ffb      	ldrb	r3, [r7, #31]
 800a61c:	3301      	adds	r3, #1
 800a61e:	77fb      	strb	r3, [r7, #31]
 800a620:	e099      	b.n	800a756 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800a622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a624:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d032      	beq.n	800a692 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800a62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800a632:	3b01      	subs	r3, #1
 800a634:	4a6d      	ldr	r2, [pc, #436]	; (800a7ec <tcp_slowtmr+0x288>)
 800a636:	5cd3      	ldrb	r3, [r2, r3]
 800a638:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800a63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800a640:	7cfa      	ldrb	r2, [r7, #19]
 800a642:	429a      	cmp	r2, r3
 800a644:	d907      	bls.n	800a656 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800a646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a648:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800a64c:	3301      	adds	r3, #1
 800a64e:	b2da      	uxtb	r2, r3
 800a650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a652:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800a656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a658:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800a65c:	7cfa      	ldrb	r2, [r7, #19]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d879      	bhi.n	800a756 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800a662:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a664:	f004 fbc3 	bl	800edee <tcp_zero_window_probe>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d173      	bne.n	800a756 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800a66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a670:	2200      	movs	r2, #0
 800a672:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a678:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800a67c:	2b06      	cmp	r3, #6
 800a67e:	d86a      	bhi.n	800a756 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800a680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a682:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800a686:	3301      	adds	r3, #1
 800a688:	b2da      	uxtb	r2, r3
 800a68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800a690:	e061      	b.n	800a756 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800a692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a694:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a698:	2b00      	cmp	r3, #0
 800a69a:	db08      	blt.n	800a6ae <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800a69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	b21a      	sxth	r2, r3
 800a6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ac:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800a6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d04f      	beq.n	800a756 <tcp_slowtmr+0x1f2>
 800a6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b8:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800a6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6be:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	db47      	blt.n	800a756 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800a6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c8:	7d1b      	ldrb	r3, [r3, #20]
 800a6ca:	2b02      	cmp	r3, #2
 800a6cc:	d018      	beq.n	800a700 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800a6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a6d4:	2b0c      	cmp	r3, #12
 800a6d6:	bf28      	it	cs
 800a6d8:	230c      	movcs	r3, #12
 800a6da:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6de:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a6e2:	10db      	asrs	r3, r3, #3
 800a6e4:	b21b      	sxth	r3, r3
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a6ee:	4413      	add	r3, r2
 800a6f0:	7dfa      	ldrb	r2, [r7, #23]
 800a6f2:	493f      	ldr	r1, [pc, #252]	; (800a7f0 <tcp_slowtmr+0x28c>)
 800a6f4:	5c8a      	ldrb	r2, [r1, r2]
 800a6f6:	4093      	lsls	r3, r2
 800a6f8:	b21a      	sxth	r2, r3
 800a6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800a700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a702:	2200      	movs	r2, #0
 800a704:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a708:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a712:	4293      	cmp	r3, r2
 800a714:	bf28      	it	cs
 800a716:	4613      	movcs	r3, r2
 800a718:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800a71a:	8abb      	ldrh	r3, [r7, #20]
 800a71c:	085b      	lsrs	r3, r3, #1
 800a71e:	b29a      	uxth	r2, r3
 800a720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a722:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a728:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a730:	005b      	lsls	r3, r3, #1
 800a732:	b29b      	uxth	r3, r3
 800a734:	429a      	cmp	r2, r3
 800a736:	d206      	bcs.n	800a746 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800a738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a73c:	005b      	lsls	r3, r3, #1
 800a73e:	b29a      	uxth	r2, r3
 800a740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a742:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800a746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a748:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800a750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a752:	f004 fa3b 	bl	800ebcc <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800a756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a758:	7d1b      	ldrb	r3, [r3, #20]
 800a75a:	2b06      	cmp	r3, #6
 800a75c:	d10f      	bne.n	800a77e <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800a75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a760:	7e9b      	ldrb	r3, [r3, #26]
 800a762:	f003 0310 	and.w	r3, r3, #16
 800a766:	2b00      	cmp	r3, #0
 800a768:	d009      	beq.n	800a77e <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a76a:	4b18      	ldr	r3, [pc, #96]	; (800a7cc <tcp_slowtmr+0x268>)
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a770:	6a1b      	ldr	r3, [r3, #32]
 800a772:	1ad3      	subs	r3, r2, r3
 800a774:	2b28      	cmp	r3, #40	; 0x28
 800a776:	d902      	bls.n	800a77e <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800a778:	7ffb      	ldrb	r3, [r7, #31]
 800a77a:	3301      	adds	r3, #1
 800a77c:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a780:	7a1b      	ldrb	r3, [r3, #8]
 800a782:	f003 0308 	and.w	r3, r3, #8
 800a786:	2b00      	cmp	r3, #0
 800a788:	d05d      	beq.n	800a846 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800a78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78c:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a78e:	2b04      	cmp	r3, #4
 800a790:	d003      	beq.n	800a79a <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800a792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a794:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800a796:	2b07      	cmp	r3, #7
 800a798:	d155      	bne.n	800a846 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a79a:	4b0c      	ldr	r3, [pc, #48]	; (800a7cc <tcp_slowtmr+0x268>)
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a0:	6a1b      	ldr	r3, [r3, #32]
 800a7a2:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800a7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7aa:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800a7ae:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800a7b2:	4910      	ldr	r1, [pc, #64]	; (800a7f4 <tcp_slowtmr+0x290>)
 800a7b4:	fba1 1303 	umull	r1, r3, r1, r3
 800a7b8:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d91c      	bls.n	800a7f8 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800a7be:	7ffb      	ldrb	r3, [r7, #31]
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800a7c4:	7fbb      	ldrb	r3, [r7, #30]
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	77bb      	strb	r3, [r7, #30]
 800a7ca:	e03c      	b.n	800a846 <tcp_slowtmr+0x2e2>
 800a7cc:	2000b12c 	.word	0x2000b12c
 800a7d0:	200042fe 	.word	0x200042fe
 800a7d4:	2000b128 	.word	0x2000b128
 800a7d8:	08013700 	.word	0x08013700
 800a7dc:	080138b0 	.word	0x080138b0
 800a7e0:	0801373c 	.word	0x0801373c
 800a7e4:	080138dc 	.word	0x080138dc
 800a7e8:	08013908 	.word	0x08013908
 800a7ec:	08014b7c 	.word	0x08014b7c
 800a7f0:	08014b6c 	.word	0x08014b6c
 800a7f4:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a7f8:	4b97      	ldr	r3, [pc, #604]	; (800aa58 <tcp_slowtmr+0x4f4>)
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fe:	6a1b      	ldr	r3, [r3, #32]
 800a800:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a804:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800a808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800a80e:	4618      	mov	r0, r3
 800a810:	4b92      	ldr	r3, [pc, #584]	; (800aa5c <tcp_slowtmr+0x4f8>)
 800a812:	fb03 f300 	mul.w	r3, r3, r0
 800a816:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800a818:	4991      	ldr	r1, [pc, #580]	; (800aa60 <tcp_slowtmr+0x4fc>)
 800a81a:	fba1 1303 	umull	r1, r3, r1, r3
 800a81e:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a820:	429a      	cmp	r2, r3
 800a822:	d910      	bls.n	800a846 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800a824:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a826:	f004 faa5 	bl	800ed74 <tcp_keepalive>
 800a82a:	4603      	mov	r3, r0
 800a82c:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800a82e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d107      	bne.n	800a846 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800a836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a838:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800a83c:	3301      	adds	r3, #1
 800a83e:	b2da      	uxtb	r2, r3
 800a840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a842:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800a846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d016      	beq.n	800a87c <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800a84e:	4b82      	ldr	r3, [pc, #520]	; (800aa58 <tcp_slowtmr+0x4f4>)
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a854:	6a1b      	ldr	r3, [r3, #32]
 800a856:	1ad2      	subs	r2, r2, r3
 800a858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a85e:	4619      	mov	r1, r3
 800a860:	460b      	mov	r3, r1
 800a862:	005b      	lsls	r3, r3, #1
 800a864:	440b      	add	r3, r1
 800a866:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800a868:	429a      	cmp	r2, r3
 800a86a:	d307      	bcc.n	800a87c <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800a86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a870:	4618      	mov	r0, r3
 800a872:	f000 fa06 	bl	800ac82 <tcp_segs_free>
      pcb->ooseq = NULL;
 800a876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a878:	2200      	movs	r2, #0
 800a87a:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800a87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87e:	7d1b      	ldrb	r3, [r3, #20]
 800a880:	2b03      	cmp	r3, #3
 800a882:	d109      	bne.n	800a898 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a884:	4b74      	ldr	r3, [pc, #464]	; (800aa58 <tcp_slowtmr+0x4f4>)
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a88a:	6a1b      	ldr	r3, [r3, #32]
 800a88c:	1ad3      	subs	r3, r2, r3
 800a88e:	2b28      	cmp	r3, #40	; 0x28
 800a890:	d902      	bls.n	800a898 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800a892:	7ffb      	ldrb	r3, [r7, #31]
 800a894:	3301      	adds	r3, #1
 800a896:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800a898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89a:	7d1b      	ldrb	r3, [r3, #20]
 800a89c:	2b09      	cmp	r3, #9
 800a89e:	d109      	bne.n	800a8b4 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a8a0:	4b6d      	ldr	r3, [pc, #436]	; (800aa58 <tcp_slowtmr+0x4f4>)
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a6:	6a1b      	ldr	r3, [r3, #32]
 800a8a8:	1ad3      	subs	r3, r2, r3
 800a8aa:	2bf0      	cmp	r3, #240	; 0xf0
 800a8ac:	d902      	bls.n	800a8b4 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800a8ae:	7ffb      	ldrb	r3, [r7, #31]
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a8b4:	7ffb      	ldrb	r3, [r7, #31]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d05d      	beq.n	800a976 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800a8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8c0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800a8c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8c4:	f000 fc4a 	bl	800b15c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800a8c8:	6a3b      	ldr	r3, [r7, #32]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d010      	beq.n	800a8f0 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a8ce:	4b65      	ldr	r3, [pc, #404]	; (800aa64 <tcp_slowtmr+0x500>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d106      	bne.n	800a8e6 <tcp_slowtmr+0x382>
 800a8d8:	4b63      	ldr	r3, [pc, #396]	; (800aa68 <tcp_slowtmr+0x504>)
 800a8da:	f240 4289 	movw	r2, #1161	; 0x489
 800a8de:	4963      	ldr	r1, [pc, #396]	; (800aa6c <tcp_slowtmr+0x508>)
 800a8e0:	4863      	ldr	r0, [pc, #396]	; (800aa70 <tcp_slowtmr+0x50c>)
 800a8e2:	f007 fb0f 	bl	8011f04 <iprintf>
        prev->next = pcb->next;
 800a8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e8:	68da      	ldr	r2, [r3, #12]
 800a8ea:	6a3b      	ldr	r3, [r7, #32]
 800a8ec:	60da      	str	r2, [r3, #12]
 800a8ee:	e00f      	b.n	800a910 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a8f0:	4b5c      	ldr	r3, [pc, #368]	; (800aa64 <tcp_slowtmr+0x500>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d006      	beq.n	800a908 <tcp_slowtmr+0x3a4>
 800a8fa:	4b5b      	ldr	r3, [pc, #364]	; (800aa68 <tcp_slowtmr+0x504>)
 800a8fc:	f240 428d 	movw	r2, #1165	; 0x48d
 800a900:	495c      	ldr	r1, [pc, #368]	; (800aa74 <tcp_slowtmr+0x510>)
 800a902:	485b      	ldr	r0, [pc, #364]	; (800aa70 <tcp_slowtmr+0x50c>)
 800a904:	f007 fafe 	bl	8011f04 <iprintf>
        tcp_active_pcbs = pcb->next;
 800a908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	4a55      	ldr	r2, [pc, #340]	; (800aa64 <tcp_slowtmr+0x500>)
 800a90e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800a910:	7fbb      	ldrb	r3, [r7, #30]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d010      	beq.n	800a938 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a918:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a91e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800a920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a922:	1d1d      	adds	r5, r3, #4
 800a924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a926:	8adb      	ldrh	r3, [r3, #22]
 800a928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a92a:	8b12      	ldrh	r2, [r2, #24]
 800a92c:	9201      	str	r2, [sp, #4]
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	462b      	mov	r3, r5
 800a932:	4622      	mov	r2, r4
 800a934:	f004 f8d4 	bl	800eae0 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800a938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93a:	691b      	ldr	r3, [r3, #16]
 800a93c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a940:	7d1b      	ldrb	r3, [r3, #20]
 800a942:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a946:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94a:	68db      	ldr	r3, [r3, #12]
 800a94c:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800a94e:	6839      	ldr	r1, [r7, #0]
 800a950:	2001      	movs	r0, #1
 800a952:	f7fe f8fd 	bl	8008b50 <memp_free>

      tcp_active_pcbs_changed = 0;
 800a956:	4b48      	ldr	r3, [pc, #288]	; (800aa78 <tcp_slowtmr+0x514>)
 800a958:	2200      	movs	r2, #0
 800a95a:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d004      	beq.n	800a96c <tcp_slowtmr+0x408>
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f06f 010c 	mvn.w	r1, #12
 800a968:	68b8      	ldr	r0, [r7, #8]
 800a96a:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a96c:	4b42      	ldr	r3, [pc, #264]	; (800aa78 <tcp_slowtmr+0x514>)
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d035      	beq.n	800a9e0 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800a974:	e606      	b.n	800a584 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800a976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a978:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800a97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97c:	68db      	ldr	r3, [r3, #12]
 800a97e:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800a980:	6a3b      	ldr	r3, [r7, #32]
 800a982:	7edb      	ldrb	r3, [r3, #27]
 800a984:	3301      	adds	r3, #1
 800a986:	b2da      	uxtb	r2, r3
 800a988:	6a3b      	ldr	r3, [r7, #32]
 800a98a:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800a98c:	6a3b      	ldr	r3, [r7, #32]
 800a98e:	7eda      	ldrb	r2, [r3, #27]
 800a990:	6a3b      	ldr	r3, [r7, #32]
 800a992:	7f1b      	ldrb	r3, [r3, #28]
 800a994:	429a      	cmp	r2, r3
 800a996:	d323      	bcc.n	800a9e0 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800a998:	6a3b      	ldr	r3, [r7, #32]
 800a99a:	2200      	movs	r2, #0
 800a99c:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800a99e:	4b36      	ldr	r3, [pc, #216]	; (800aa78 <tcp_slowtmr+0x514>)
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a9a4:	6a3b      	ldr	r3, [r7, #32]
 800a9a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00a      	beq.n	800a9c4 <tcp_slowtmr+0x460>
 800a9ae:	6a3b      	ldr	r3, [r7, #32]
 800a9b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9b4:	6a3a      	ldr	r2, [r7, #32]
 800a9b6:	6912      	ldr	r2, [r2, #16]
 800a9b8:	6a39      	ldr	r1, [r7, #32]
 800a9ba:	4610      	mov	r0, r2
 800a9bc:	4798      	blx	r3
 800a9be:	4603      	mov	r3, r0
 800a9c0:	777b      	strb	r3, [r7, #29]
 800a9c2:	e001      	b.n	800a9c8 <tcp_slowtmr+0x464>
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800a9c8:	4b2b      	ldr	r3, [pc, #172]	; (800aa78 <tcp_slowtmr+0x514>)
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d000      	beq.n	800a9d2 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800a9d0:	e5d8      	b.n	800a584 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a9d2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d102      	bne.n	800a9e0 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800a9da:	6a38      	ldr	r0, [r7, #32]
 800a9dc:	f003 fdfc 	bl	800e5d8 <tcp_output>
  while (pcb != NULL) {
 800a9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	f47f add4 	bne.w	800a590 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800a9ec:	4b23      	ldr	r3, [pc, #140]	; (800aa7c <tcp_slowtmr+0x518>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800a9f2:	e068      	b.n	800aac6 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f6:	7d1b      	ldrb	r3, [r3, #20]
 800a9f8:	2b0a      	cmp	r3, #10
 800a9fa:	d006      	beq.n	800aa0a <tcp_slowtmr+0x4a6>
 800a9fc:	4b1a      	ldr	r3, [pc, #104]	; (800aa68 <tcp_slowtmr+0x504>)
 800a9fe:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800aa02:	491f      	ldr	r1, [pc, #124]	; (800aa80 <tcp_slowtmr+0x51c>)
 800aa04:	481a      	ldr	r0, [pc, #104]	; (800aa70 <tcp_slowtmr+0x50c>)
 800aa06:	f007 fa7d 	bl	8011f04 <iprintf>
    pcb_remove = 0;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800aa0e:	4b12      	ldr	r3, [pc, #72]	; (800aa58 <tcp_slowtmr+0x4f4>)
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa14:	6a1b      	ldr	r3, [r3, #32]
 800aa16:	1ad3      	subs	r3, r2, r3
 800aa18:	2bf0      	cmp	r3, #240	; 0xf0
 800aa1a:	d902      	bls.n	800aa22 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800aa1c:	7ffb      	ldrb	r3, [r7, #31]
 800aa1e:	3301      	adds	r3, #1
 800aa20:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800aa22:	7ffb      	ldrb	r3, [r7, #31]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d049      	beq.n	800aabc <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800aa28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa2a:	f000 fb97 	bl	800b15c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800aa2e:	6a3b      	ldr	r3, [r7, #32]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d029      	beq.n	800aa88 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800aa34:	4b11      	ldr	r3, [pc, #68]	; (800aa7c <tcp_slowtmr+0x518>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d106      	bne.n	800aa4c <tcp_slowtmr+0x4e8>
 800aa3e:	4b0a      	ldr	r3, [pc, #40]	; (800aa68 <tcp_slowtmr+0x504>)
 800aa40:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800aa44:	490f      	ldr	r1, [pc, #60]	; (800aa84 <tcp_slowtmr+0x520>)
 800aa46:	480a      	ldr	r0, [pc, #40]	; (800aa70 <tcp_slowtmr+0x50c>)
 800aa48:	f007 fa5c 	bl	8011f04 <iprintf>
        prev->next = pcb->next;
 800aa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4e:	68da      	ldr	r2, [r3, #12]
 800aa50:	6a3b      	ldr	r3, [r7, #32]
 800aa52:	60da      	str	r2, [r3, #12]
 800aa54:	e028      	b.n	800aaa8 <tcp_slowtmr+0x544>
 800aa56:	bf00      	nop
 800aa58:	2000b12c 	.word	0x2000b12c
 800aa5c:	000124f8 	.word	0x000124f8
 800aa60:	10624dd3 	.word	0x10624dd3
 800aa64:	2000b128 	.word	0x2000b128
 800aa68:	08013700 	.word	0x08013700
 800aa6c:	08013938 	.word	0x08013938
 800aa70:	0801373c 	.word	0x0801373c
 800aa74:	08013964 	.word	0x08013964
 800aa78:	2000b124 	.word	0x2000b124
 800aa7c:	2000b138 	.word	0x2000b138
 800aa80:	08013990 	.word	0x08013990
 800aa84:	080139c0 	.word	0x080139c0
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800aa88:	4b13      	ldr	r3, [pc, #76]	; (800aad8 <tcp_slowtmr+0x574>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d006      	beq.n	800aaa0 <tcp_slowtmr+0x53c>
 800aa92:	4b12      	ldr	r3, [pc, #72]	; (800aadc <tcp_slowtmr+0x578>)
 800aa94:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800aa98:	4911      	ldr	r1, [pc, #68]	; (800aae0 <tcp_slowtmr+0x57c>)
 800aa9a:	4812      	ldr	r0, [pc, #72]	; (800aae4 <tcp_slowtmr+0x580>)
 800aa9c:	f007 fa32 	bl	8011f04 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800aaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	4a0c      	ldr	r2, [pc, #48]	; (800aad8 <tcp_slowtmr+0x574>)
 800aaa6:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800aaa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaaa:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800aaac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaae:	68db      	ldr	r3, [r3, #12]
 800aab0:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800aab2:	69b9      	ldr	r1, [r7, #24]
 800aab4:	2001      	movs	r0, #1
 800aab6:	f7fe f84b 	bl	8008b50 <memp_free>
 800aaba:	e004      	b.n	800aac6 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800aabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aabe:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800aac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac2:	68db      	ldr	r3, [r3, #12]
 800aac4:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800aac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d193      	bne.n	800a9f4 <tcp_slowtmr+0x490>
    }
  }
}
 800aacc:	bf00      	nop
 800aace:	bf00      	nop
 800aad0:	3728      	adds	r7, #40	; 0x28
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bdb0      	pop	{r4, r5, r7, pc}
 800aad6:	bf00      	nop
 800aad8:	2000b138 	.word	0x2000b138
 800aadc:	08013700 	.word	0x08013700
 800aae0:	080139e8 	.word	0x080139e8
 800aae4:	0801373c 	.word	0x0801373c

0800aae8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800aaee:	4b2d      	ldr	r3, [pc, #180]	; (800aba4 <tcp_fasttmr+0xbc>)
 800aaf0:	781b      	ldrb	r3, [r3, #0]
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	b2da      	uxtb	r2, r3
 800aaf6:	4b2b      	ldr	r3, [pc, #172]	; (800aba4 <tcp_fasttmr+0xbc>)
 800aaf8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800aafa:	4b2b      	ldr	r3, [pc, #172]	; (800aba8 <tcp_fasttmr+0xc0>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ab00:	e048      	b.n	800ab94 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	7f5a      	ldrb	r2, [r3, #29]
 800ab06:	4b27      	ldr	r3, [pc, #156]	; (800aba4 <tcp_fasttmr+0xbc>)
 800ab08:	781b      	ldrb	r3, [r3, #0]
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d03f      	beq.n	800ab8e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ab0e:	4b25      	ldr	r3, [pc, #148]	; (800aba4 <tcp_fasttmr+0xbc>)
 800ab10:	781a      	ldrb	r2, [r3, #0]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	7e9b      	ldrb	r3, [r3, #26]
 800ab1a:	f003 0301 	and.w	r3, r3, #1
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d010      	beq.n	800ab44 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	7e9b      	ldrb	r3, [r3, #26]
 800ab26:	f043 0302 	orr.w	r3, r3, #2
 800ab2a:	b2da      	uxtb	r2, r3
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f003 fd51 	bl	800e5d8 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	7e9b      	ldrb	r3, [r3, #26]
 800ab3a:	f023 0303 	bic.w	r3, r3, #3
 800ab3e:	b2da      	uxtb	r2, r3
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	7e9b      	ldrb	r3, [r3, #26]
 800ab48:	f003 0308 	and.w	r3, r3, #8
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d009      	beq.n	800ab64 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	7e9b      	ldrb	r3, [r3, #26]
 800ab54:	f023 0308 	bic.w	r3, r3, #8
 800ab58:	b2da      	uxtb	r2, r3
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f7ff f988 	bl	8009e74 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00a      	beq.n	800ab88 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ab72:	4b0e      	ldr	r3, [pc, #56]	; (800abac <tcp_fasttmr+0xc4>)
 800ab74:	2200      	movs	r2, #0
 800ab76:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 f819 	bl	800abb0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ab7e:	4b0b      	ldr	r3, [pc, #44]	; (800abac <tcp_fasttmr+0xc4>)
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d000      	beq.n	800ab88 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ab86:	e7b8      	b.n	800aafa <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	607b      	str	r3, [r7, #4]
 800ab8c:	e002      	b.n	800ab94 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d1b3      	bne.n	800ab02 <tcp_fasttmr+0x1a>
    }
  }
}
 800ab9a:	bf00      	nop
 800ab9c:	bf00      	nop
 800ab9e:	3708      	adds	r7, #8
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	200042fe 	.word	0x200042fe
 800aba8:	2000b128 	.word	0x2000b128
 800abac:	2000b124 	.word	0x2000b124

0800abb0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800abb0:	b590      	push	{r4, r7, lr}
 800abb2:	b085      	sub	sp, #20
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abbc:	7b5b      	ldrb	r3, [r3, #13]
 800abbe:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abc4:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2200      	movs	r2, #0
 800abca:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d00b      	beq.n	800abee <tcp_process_refused_data+0x3e>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6918      	ldr	r0, [r3, #16]
 800abe0:	2300      	movs	r3, #0
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	6879      	ldr	r1, [r7, #4]
 800abe6:	47a0      	blx	r4
 800abe8:	4603      	mov	r3, r0
 800abea:	73fb      	strb	r3, [r7, #15]
 800abec:	e007      	b.n	800abfe <tcp_process_refused_data+0x4e>
 800abee:	2300      	movs	r3, #0
 800abf0:	68ba      	ldr	r2, [r7, #8]
 800abf2:	6879      	ldr	r1, [r7, #4]
 800abf4:	2000      	movs	r0, #0
 800abf6:	f000 f89b 	bl	800ad30 <tcp_recv_null>
 800abfa:	4603      	mov	r3, r0
 800abfc:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800abfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d12a      	bne.n	800ac5c <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800ac06:	7bbb      	ldrb	r3, [r7, #14]
 800ac08:	f003 0320 	and.w	r3, r3, #32
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d033      	beq.n	800ac78 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac14:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ac18:	d005      	beq.n	800ac26 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac1e:	3301      	adds	r3, #1
 800ac20:	b29a      	uxth	r2, r3
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00b      	beq.n	800ac48 <tcp_process_refused_data+0x98>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6918      	ldr	r0, [r3, #16]
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	6879      	ldr	r1, [r7, #4]
 800ac40:	47a0      	blx	r4
 800ac42:	4603      	mov	r3, r0
 800ac44:	73fb      	strb	r3, [r7, #15]
 800ac46:	e001      	b.n	800ac4c <tcp_process_refused_data+0x9c>
 800ac48:	2300      	movs	r3, #0
 800ac4a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ac4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac50:	f113 0f0d 	cmn.w	r3, #13
 800ac54:	d110      	bne.n	800ac78 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800ac56:	f06f 030c 	mvn.w	r3, #12
 800ac5a:	e00e      	b.n	800ac7a <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800ac5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac60:	f113 0f0d 	cmn.w	r3, #13
 800ac64:	d102      	bne.n	800ac6c <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ac66:	f06f 030c 	mvn.w	r3, #12
 800ac6a:	e006      	b.n	800ac7a <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	68ba      	ldr	r2, [r7, #8]
 800ac70:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800ac72:	f06f 0304 	mvn.w	r3, #4
 800ac76:	e000      	b.n	800ac7a <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800ac78:	2300      	movs	r3, #0
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3714      	adds	r7, #20
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd90      	pop	{r4, r7, pc}

0800ac82 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b084      	sub	sp, #16
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ac8a:	e007      	b.n	800ac9c <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 f80a 	bl	800acac <tcp_seg_free>
    seg = next;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d1f4      	bne.n	800ac8c <tcp_segs_free+0xa>
  }
}
 800aca2:	bf00      	nop
 800aca4:	bf00      	nop
 800aca6:	3710      	adds	r7, #16
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00c      	beq.n	800acd4 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d004      	beq.n	800accc <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7fe fcf6 	bl	80096b8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800accc:	6879      	ldr	r1, [r7, #4]
 800acce:	2003      	movs	r0, #3
 800acd0:	f7fd ff3e 	bl	8008b50 <memp_free>
  }
}
 800acd4:	bf00      	nop
 800acd6:	3708      	adds	r7, #8
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	460b      	mov	r3, r1
 800ace6:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	78fa      	ldrb	r2, [r7, #3]
 800acec:	755a      	strb	r2, [r3, #21]
}
 800acee:	bf00      	nop
 800acf0:	370c      	adds	r7, #12
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bc80      	pop	{r7}
 800acf6:	4770      	bx	lr

0800acf8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ad00:	2003      	movs	r0, #3
 800ad02:	f7fd fed3 	bl	8008aac <memp_malloc>
 800ad06:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d101      	bne.n	800ad12 <tcp_seg_copy+0x1a>
    return NULL;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	e00a      	b.n	800ad28 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ad12:	2210      	movs	r2, #16
 800ad14:	6879      	ldr	r1, [r7, #4]
 800ad16:	68f8      	ldr	r0, [r7, #12]
 800ad18:	f007 f883 	bl	8011e22 <memcpy>
  pbuf_ref(cseg->p);
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	4618      	mov	r0, r3
 800ad22:	f7fe fd79 	bl	8009818 <pbuf_ref>
  return cseg;
 800ad26:	68fb      	ldr	r3, [r7, #12]
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3710      	adds	r7, #16
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b084      	sub	sp, #16
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	60f8      	str	r0, [r7, #12]
 800ad38:	60b9      	str	r1, [r7, #8]
 800ad3a:	607a      	str	r2, [r7, #4]
 800ad3c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d009      	beq.n	800ad58 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	891b      	ldrh	r3, [r3, #8]
 800ad48:	4619      	mov	r1, r3
 800ad4a:	68b8      	ldr	r0, [r7, #8]
 800ad4c:	f7ff fb6c 	bl	800a428 <tcp_recved>
    pbuf_free(p);
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f7fe fcb1 	bl	80096b8 <pbuf_free>
 800ad56:	e008      	b.n	800ad6a <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800ad58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d104      	bne.n	800ad6a <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800ad60:	68b8      	ldr	r0, [r7, #8]
 800ad62:	f7ff f8f1 	bl	8009f48 <tcp_close>
 800ad66:	4603      	mov	r3, r0
 800ad68:	e000      	b.n	800ad6c <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800ad6a:	2300      	movs	r3, #0
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b086      	sub	sp, #24
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ad7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	db01      	blt.n	800ad8a <tcp_kill_prio+0x16>
 800ad86:	79fb      	ldrb	r3, [r7, #7]
 800ad88:	e000      	b.n	800ad8c <tcp_kill_prio+0x18>
 800ad8a:	237f      	movs	r3, #127	; 0x7f
 800ad8c:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ad92:	2300      	movs	r3, #0
 800ad94:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ad96:	4b16      	ldr	r3, [pc, #88]	; (800adf0 <tcp_kill_prio+0x7c>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	617b      	str	r3, [r7, #20]
 800ad9c:	e01a      	b.n	800add4 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	7d5b      	ldrb	r3, [r3, #21]
 800ada2:	7afa      	ldrb	r2, [r7, #11]
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d312      	bcc.n	800adce <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ada8:	4b12      	ldr	r3, [pc, #72]	; (800adf4 <tcp_kill_prio+0x80>)
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	6a1b      	ldr	r3, [r3, #32]
 800adb0:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800adb2:	68fa      	ldr	r2, [r7, #12]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d80a      	bhi.n	800adce <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800adb8:	4b0e      	ldr	r3, [pc, #56]	; (800adf4 <tcp_kill_prio+0x80>)
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	6a1b      	ldr	r3, [r3, #32]
 800adc0:	1ad3      	subs	r3, r2, r3
 800adc2:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	7d5b      	ldrb	r3, [r3, #21]
 800adcc:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	68db      	ldr	r3, [r3, #12]
 800add2:	617b      	str	r3, [r7, #20]
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d1e1      	bne.n	800ad9e <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d002      	beq.n	800ade6 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ade0:	6938      	ldr	r0, [r7, #16]
 800ade2:	f7ff f97b 	bl	800a0dc <tcp_abort>
  }
}
 800ade6:	bf00      	nop
 800ade8:	3718      	adds	r7, #24
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	2000b128 	.word	0x2000b128
 800adf4:	2000b12c 	.word	0x2000b12c

0800adf8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b086      	sub	sp, #24
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	4603      	mov	r3, r0
 800ae00:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ae02:	79fb      	ldrb	r3, [r7, #7]
 800ae04:	2b08      	cmp	r3, #8
 800ae06:	d009      	beq.n	800ae1c <tcp_kill_state+0x24>
 800ae08:	79fb      	ldrb	r3, [r7, #7]
 800ae0a:	2b09      	cmp	r3, #9
 800ae0c:	d006      	beq.n	800ae1c <tcp_kill_state+0x24>
 800ae0e:	4b1a      	ldr	r3, [pc, #104]	; (800ae78 <tcp_kill_state+0x80>)
 800ae10:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ae14:	4919      	ldr	r1, [pc, #100]	; (800ae7c <tcp_kill_state+0x84>)
 800ae16:	481a      	ldr	r0, [pc, #104]	; (800ae80 <tcp_kill_state+0x88>)
 800ae18:	f007 f874 	bl	8011f04 <iprintf>

  inactivity = 0;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ae20:	2300      	movs	r3, #0
 800ae22:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ae24:	4b17      	ldr	r3, [pc, #92]	; (800ae84 <tcp_kill_state+0x8c>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	617b      	str	r3, [r7, #20]
 800ae2a:	e017      	b.n	800ae5c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	7d1b      	ldrb	r3, [r3, #20]
 800ae30:	79fa      	ldrb	r2, [r7, #7]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d10f      	bne.n	800ae56 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ae36:	4b14      	ldr	r3, [pc, #80]	; (800ae88 <tcp_kill_state+0x90>)
 800ae38:	681a      	ldr	r2, [r3, #0]
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	6a1b      	ldr	r3, [r3, #32]
 800ae3e:	1ad3      	subs	r3, r2, r3
 800ae40:	68fa      	ldr	r2, [r7, #12]
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d807      	bhi.n	800ae56 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ae46:	4b10      	ldr	r3, [pc, #64]	; (800ae88 <tcp_kill_state+0x90>)
 800ae48:	681a      	ldr	r2, [r3, #0]
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	6a1b      	ldr	r3, [r3, #32]
 800ae4e:	1ad3      	subs	r3, r2, r3
 800ae50:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	68db      	ldr	r3, [r3, #12]
 800ae5a:	617b      	str	r3, [r7, #20]
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d1e4      	bne.n	800ae2c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d003      	beq.n	800ae70 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ae68:	2100      	movs	r1, #0
 800ae6a:	6938      	ldr	r0, [r7, #16]
 800ae6c:	f7ff f884 	bl	8009f78 <tcp_abandon>
  }
}
 800ae70:	bf00      	nop
 800ae72:	3718      	adds	r7, #24
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	08013700 	.word	0x08013700
 800ae7c:	08013a10 	.word	0x08013a10
 800ae80:	0801373c 	.word	0x0801373c
 800ae84:	2000b128 	.word	0x2000b128
 800ae88:	2000b12c 	.word	0x2000b12c

0800ae8c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ae92:	2300      	movs	r3, #0
 800ae94:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ae96:	2300      	movs	r3, #0
 800ae98:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ae9a:	4b12      	ldr	r3, [pc, #72]	; (800aee4 <tcp_kill_timewait+0x58>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	60fb      	str	r3, [r7, #12]
 800aea0:	e012      	b.n	800aec8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800aea2:	4b11      	ldr	r3, [pc, #68]	; (800aee8 <tcp_kill_timewait+0x5c>)
 800aea4:	681a      	ldr	r2, [r3, #0]
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	6a1b      	ldr	r3, [r3, #32]
 800aeaa:	1ad3      	subs	r3, r2, r3
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d807      	bhi.n	800aec2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800aeb2:	4b0d      	ldr	r3, [pc, #52]	; (800aee8 <tcp_kill_timewait+0x5c>)
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	6a1b      	ldr	r3, [r3, #32]
 800aeba:	1ad3      	subs	r3, r2, r3
 800aebc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	68db      	ldr	r3, [r3, #12]
 800aec6:	60fb      	str	r3, [r7, #12]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d1e9      	bne.n	800aea2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d002      	beq.n	800aeda <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800aed4:	68b8      	ldr	r0, [r7, #8]
 800aed6:	f7ff f901 	bl	800a0dc <tcp_abort>
  }
}
 800aeda:	bf00      	nop
 800aedc:	3710      	adds	r7, #16
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}
 800aee2:	bf00      	nop
 800aee4:	2000b138 	.word	0x2000b138
 800aee8:	2000b12c 	.word	0x2000b12c

0800aeec <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	4603      	mov	r3, r0
 800aef4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800aef6:	2001      	movs	r0, #1
 800aef8:	f7fd fdd8 	bl	8008aac <memp_malloc>
 800aefc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d124      	bne.n	800af4e <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800af04:	f7ff ffc2 	bl	800ae8c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800af08:	2001      	movs	r0, #1
 800af0a:	f7fd fdcf 	bl	8008aac <memp_malloc>
 800af0e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d11b      	bne.n	800af4e <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800af16:	2009      	movs	r0, #9
 800af18:	f7ff ff6e 	bl	800adf8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800af1c:	2001      	movs	r0, #1
 800af1e:	f7fd fdc5 	bl	8008aac <memp_malloc>
 800af22:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d111      	bne.n	800af4e <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800af2a:	2008      	movs	r0, #8
 800af2c:	f7ff ff64 	bl	800adf8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800af30:	2001      	movs	r0, #1
 800af32:	f7fd fdbb 	bl	8008aac <memp_malloc>
 800af36:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d107      	bne.n	800af4e <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800af3e:	79fb      	ldrb	r3, [r7, #7]
 800af40:	4618      	mov	r0, r3
 800af42:	f7ff ff17 	bl	800ad74 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800af46:	2001      	movs	r0, #1
 800af48:	f7fd fdb0 	bl	8008aac <memp_malloc>
 800af4c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d03f      	beq.n	800afd4 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800af54:	2298      	movs	r2, #152	; 0x98
 800af56:	2100      	movs	r1, #0
 800af58:	68f8      	ldr	r0, [r7, #12]
 800af5a:	f006 ff70 	bl	8011e3e <memset>
    pcb->prio = prio;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	79fa      	ldrb	r2, [r7, #7]
 800af62:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800af6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800af74:	855a      	strh	r2, [r3, #42]	; 0x2a
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	22ff      	movs	r2, #255	; 0xff
 800af82:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f44f 7206 	mov.w	r2, #536	; 0x218
 800af8a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2206      	movs	r2, #6
 800af90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2206      	movs	r2, #6
 800af98:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800afa0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	2201      	movs	r2, #1
 800afa6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800afaa:	4b0d      	ldr	r3, [pc, #52]	; (800afe0 <tcp_alloc+0xf4>)
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800afb2:	4b0c      	ldr	r3, [pc, #48]	; (800afe4 <tcp_alloc+0xf8>)
 800afb4:	781a      	ldrb	r2, [r3, #0]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800afc0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	4a08      	ldr	r2, [pc, #32]	; (800afe8 <tcp_alloc+0xfc>)
 800afc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	4a07      	ldr	r2, [pc, #28]	; (800afec <tcp_alloc+0x100>)
 800afd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800afd4:	68fb      	ldr	r3, [r7, #12]
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3710      	adds	r7, #16
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	2000b12c 	.word	0x2000b12c
 800afe4:	200042fe 	.word	0x200042fe
 800afe8:	0800ad31 	.word	0x0800ad31
 800afec:	006ddd00 	.word	0x006ddd00

0800aff0 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800aff4:	2040      	movs	r0, #64	; 0x40
 800aff6:	f7ff ff79 	bl	800aeec <tcp_alloc>
 800affa:	4603      	mov	r3, r0
}
 800affc:	4618      	mov	r0, r3
 800affe:	bd80      	pop	{r7, pc}

0800b000 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800b000:	b480      	push	{r7}
 800b002:	b083      	sub	sp, #12
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d002      	beq.n	800b016 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	683a      	ldr	r2, [r7, #0]
 800b014:	611a      	str	r2, [r3, #16]
  }
}
 800b016:	bf00      	nop
 800b018:	370c      	adds	r7, #12
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bc80      	pop	{r7}
 800b01e:	4770      	bx	lr

0800b020 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d00e      	beq.n	800b04e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	7d1b      	ldrb	r3, [r3, #20]
 800b034:	2b01      	cmp	r3, #1
 800b036:	d106      	bne.n	800b046 <tcp_recv+0x26>
 800b038:	4b07      	ldr	r3, [pc, #28]	; (800b058 <tcp_recv+0x38>)
 800b03a:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800b03e:	4907      	ldr	r1, [pc, #28]	; (800b05c <tcp_recv+0x3c>)
 800b040:	4807      	ldr	r0, [pc, #28]	; (800b060 <tcp_recv+0x40>)
 800b042:	f006 ff5f 	bl	8011f04 <iprintf>
    pcb->recv = recv;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	683a      	ldr	r2, [r7, #0]
 800b04a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800b04e:	bf00      	nop
 800b050:	3708      	adds	r7, #8
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	08013700 	.word	0x08013700
 800b05c:	08013a20 	.word	0x08013a20
 800b060:	0801373c 	.word	0x0801373c

0800b064 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b082      	sub	sp, #8
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d00d      	beq.n	800b090 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	7d1b      	ldrb	r3, [r3, #20]
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d106      	bne.n	800b08a <tcp_sent+0x26>
 800b07c:	4b06      	ldr	r3, [pc, #24]	; (800b098 <tcp_sent+0x34>)
 800b07e:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800b082:	4906      	ldr	r1, [pc, #24]	; (800b09c <tcp_sent+0x38>)
 800b084:	4806      	ldr	r0, [pc, #24]	; (800b0a0 <tcp_sent+0x3c>)
 800b086:	f006 ff3d 	bl	8011f04 <iprintf>
    pcb->sent = sent;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	683a      	ldr	r2, [r7, #0]
 800b08e:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 800b090:	bf00      	nop
 800b092:	3708      	adds	r7, #8
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}
 800b098:	08013700 	.word	0x08013700
 800b09c:	08013a48 	.word	0x08013a48
 800b0a0:	0801373c 	.word	0x0801373c

0800b0a4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b082      	sub	sp, #8
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d00e      	beq.n	800b0d2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	7d1b      	ldrb	r3, [r3, #20]
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d106      	bne.n	800b0ca <tcp_err+0x26>
 800b0bc:	4b07      	ldr	r3, [pc, #28]	; (800b0dc <tcp_err+0x38>)
 800b0be:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800b0c2:	4907      	ldr	r1, [pc, #28]	; (800b0e0 <tcp_err+0x3c>)
 800b0c4:	4807      	ldr	r0, [pc, #28]	; (800b0e4 <tcp_err+0x40>)
 800b0c6:	f006 ff1d 	bl	8011f04 <iprintf>
    pcb->errf = err;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	683a      	ldr	r2, [r7, #0]
 800b0ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800b0d2:	bf00      	nop
 800b0d4:	3708      	adds	r7, #8
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	08013700 	.word	0x08013700
 800b0e0:	08013a70 	.word	0x08013a70
 800b0e4:	0801373c 	.word	0x0801373c

0800b0e8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b085      	sub	sp, #20
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d008      	beq.n	800b10a <tcp_accept+0x22>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	7d1b      	ldrb	r3, [r3, #20]
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d104      	bne.n	800b10a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	683a      	ldr	r2, [r7, #0]
 800b108:	619a      	str	r2, [r3, #24]
  }
}
 800b10a:	bf00      	nop
 800b10c:	3714      	adds	r7, #20
 800b10e:	46bd      	mov	sp, r7
 800b110:	bc80      	pop	{r7}
 800b112:	4770      	bx	lr

0800b114 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	60f8      	str	r0, [r7, #12]
 800b11c:	60b9      	str	r1, [r7, #8]
 800b11e:	4613      	mov	r3, r2
 800b120:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	7d1b      	ldrb	r3, [r3, #20]
 800b126:	2b01      	cmp	r3, #1
 800b128:	d106      	bne.n	800b138 <tcp_poll+0x24>
 800b12a:	4b09      	ldr	r3, [pc, #36]	; (800b150 <tcp_poll+0x3c>)
 800b12c:	f240 7203 	movw	r2, #1795	; 0x703
 800b130:	4908      	ldr	r1, [pc, #32]	; (800b154 <tcp_poll+0x40>)
 800b132:	4809      	ldr	r0, [pc, #36]	; (800b158 <tcp_poll+0x44>)
 800b134:	f006 fee6 	bl	8011f04 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	68ba      	ldr	r2, [r7, #8]
 800b13c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	79fa      	ldrb	r2, [r7, #7]
 800b144:	771a      	strb	r2, [r3, #28]
}
 800b146:	bf00      	nop
 800b148:	3710      	adds	r7, #16
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	08013700 	.word	0x08013700
 800b154:	08013a98 	.word	0x08013a98
 800b158:	0801373c 	.word	0x0801373c

0800b15c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	7d1b      	ldrb	r3, [r3, #20]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d034      	beq.n	800b1d6 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800b170:	2b0a      	cmp	r3, #10
 800b172:	d030      	beq.n	800b1d6 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d02c      	beq.n	800b1d6 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b180:	2b00      	cmp	r3, #0
 800b182:	d007      	beq.n	800b194 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b188:	4618      	mov	r0, r3
 800b18a:	f7fe fa95 	bl	80096b8 <pbuf_free>
      pcb->refused_data = NULL;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2200      	movs	r2, #0
 800b192:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b198:	4618      	mov	r0, r3
 800b19a:	f7ff fd72 	bl	800ac82 <tcp_segs_free>
    pcb->ooseq = NULL;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1aa:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f7ff fd66 	bl	800ac82 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7ff fd61 	bl	800ac82 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	669a      	str	r2, [r3, #104]	; 0x68
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800b1d6:	bf00      	nop
 800b1d8:	3708      	adds	r7, #8
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
	...

0800b1e0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	683a      	ldr	r2, [r7, #0]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d105      	bne.n	800b200 <tcp_pcb_remove+0x20>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	68da      	ldr	r2, [r3, #12]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	601a      	str	r2, [r3, #0]
 800b1fe:	e013      	b.n	800b228 <tcp_pcb_remove+0x48>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	60fb      	str	r3, [r7, #12]
 800b206:	e00c      	b.n	800b222 <tcp_pcb_remove+0x42>
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	683a      	ldr	r2, [r7, #0]
 800b20e:	429a      	cmp	r2, r3
 800b210:	d104      	bne.n	800b21c <tcp_pcb_remove+0x3c>
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	68da      	ldr	r2, [r3, #12]
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	60da      	str	r2, [r3, #12]
 800b21a:	e005      	b.n	800b228 <tcp_pcb_remove+0x48>
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	60fb      	str	r3, [r7, #12]
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d1ef      	bne.n	800b208 <tcp_pcb_remove+0x28>
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	2200      	movs	r2, #0
 800b22c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800b22e:	6838      	ldr	r0, [r7, #0]
 800b230:	f7ff ff94 	bl	800b15c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	7d1b      	ldrb	r3, [r3, #20]
 800b238:	2b0a      	cmp	r3, #10
 800b23a:	d013      	beq.n	800b264 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800b240:	2b01      	cmp	r3, #1
 800b242:	d00f      	beq.n	800b264 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	7e9b      	ldrb	r3, [r3, #26]
 800b248:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d009      	beq.n	800b264 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	7e9b      	ldrb	r3, [r3, #26]
 800b254:	f043 0302 	orr.w	r3, r3, #2
 800b258:	b2da      	uxtb	r2, r3
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800b25e:	6838      	ldr	r0, [r7, #0]
 800b260:	f003 f9ba 	bl	800e5d8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	7d1b      	ldrb	r3, [r3, #20]
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d020      	beq.n	800b2ae <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b270:	2b00      	cmp	r3, #0
 800b272:	d006      	beq.n	800b282 <tcp_pcb_remove+0xa2>
 800b274:	4b13      	ldr	r3, [pc, #76]	; (800b2c4 <tcp_pcb_remove+0xe4>)
 800b276:	f240 7253 	movw	r2, #1875	; 0x753
 800b27a:	4913      	ldr	r1, [pc, #76]	; (800b2c8 <tcp_pcb_remove+0xe8>)
 800b27c:	4813      	ldr	r0, [pc, #76]	; (800b2cc <tcp_pcb_remove+0xec>)
 800b27e:	f006 fe41 	bl	8011f04 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b286:	2b00      	cmp	r3, #0
 800b288:	d006      	beq.n	800b298 <tcp_pcb_remove+0xb8>
 800b28a:	4b0e      	ldr	r3, [pc, #56]	; (800b2c4 <tcp_pcb_remove+0xe4>)
 800b28c:	f240 7254 	movw	r2, #1876	; 0x754
 800b290:	490f      	ldr	r1, [pc, #60]	; (800b2d0 <tcp_pcb_remove+0xf0>)
 800b292:	480e      	ldr	r0, [pc, #56]	; (800b2cc <tcp_pcb_remove+0xec>)
 800b294:	f006 fe36 	bl	8011f04 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d006      	beq.n	800b2ae <tcp_pcb_remove+0xce>
 800b2a0:	4b08      	ldr	r3, [pc, #32]	; (800b2c4 <tcp_pcb_remove+0xe4>)
 800b2a2:	f240 7256 	movw	r2, #1878	; 0x756
 800b2a6:	490b      	ldr	r1, [pc, #44]	; (800b2d4 <tcp_pcb_remove+0xf4>)
 800b2a8:	4808      	ldr	r0, [pc, #32]	; (800b2cc <tcp_pcb_remove+0xec>)
 800b2aa:	f006 fe2b 	bl	8011f04 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b2ba:	bf00      	nop
 800b2bc:	3710      	adds	r7, #16
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	08013700 	.word	0x08013700
 800b2c8:	08013ab8 	.word	0x08013ab8
 800b2cc:	0801373c 	.word	0x0801373c
 800b2d0:	08013ad0 	.word	0x08013ad0
 800b2d4:	08013aec 	.word	0x08013aec

0800b2d8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b2e0:	4b06      	ldr	r3, [pc, #24]	; (800b2fc <tcp_next_iss+0x24>)
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	4b06      	ldr	r3, [pc, #24]	; (800b300 <tcp_next_iss+0x28>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4413      	add	r3, r2
 800b2ea:	4a04      	ldr	r2, [pc, #16]	; (800b2fc <tcp_next_iss+0x24>)
 800b2ec:	6013      	str	r3, [r2, #0]
  return iss;
 800b2ee:	4b03      	ldr	r3, [pc, #12]	; (800b2fc <tcp_next_iss+0x24>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	370c      	adds	r7, #12
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bc80      	pop	{r7}
 800b2fa:	4770      	bx	lr
 800b2fc:	20000014 	.word	0x20000014
 800b300:	2000b12c 	.word	0x2000b12c

0800b304 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b084      	sub	sp, #16
 800b308:	af00      	add	r7, sp, #0
 800b30a:	4603      	mov	r3, r0
 800b30c:	6039      	str	r1, [r7, #0]
 800b30e:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800b310:	6838      	ldr	r0, [r7, #0]
 800b312:	f005 f9c5 	bl	80106a0 <ip4_route>
 800b316:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d101      	bne.n	800b322 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800b31e:	88fb      	ldrh	r3, [r7, #6]
 800b320:	e010      	b.n	800b344 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b326:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b328:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d008      	beq.n	800b342 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800b330:	897b      	ldrh	r3, [r7, #10]
 800b332:	3b28      	subs	r3, #40	; 0x28
 800b334:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b336:	893a      	ldrh	r2, [r7, #8]
 800b338:	88fb      	ldrh	r3, [r7, #6]
 800b33a:	4293      	cmp	r3, r2
 800b33c:	bf28      	it	cs
 800b33e:	4613      	movcs	r3, r2
 800b340:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800b342:	88fb      	ldrh	r3, [r7, #6]
}
 800b344:	4618      	mov	r0, r3
 800b346:	3710      	adds	r7, #16
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b35a:	e011      	b.n	800b380 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681a      	ldr	r2, [r3, #0]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	429a      	cmp	r2, r3
 800b366:	d108      	bne.n	800b37a <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	68db      	ldr	r3, [r3, #12]
 800b36c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b36e:	68f8      	ldr	r0, [r7, #12]
 800b370:	f7fe feb4 	bl	800a0dc <tcp_abort>
      pcb = next;
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	60fb      	str	r3, [r7, #12]
 800b378:	e002      	b.n	800b380 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	68db      	ldr	r3, [r3, #12]
 800b37e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d1ea      	bne.n	800b35c <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800b386:	bf00      	nop
 800b388:	bf00      	nop
 800b38a:	3710      	adds	r7, #16
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d02c      	beq.n	800b3fa <tcp_netif_ip_addr_changed+0x6a>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d028      	beq.n	800b3fa <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b3a8:	4b16      	ldr	r3, [pc, #88]	; (800b404 <tcp_netif_ip_addr_changed+0x74>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f7ff ffcc 	bl	800b34c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b3b4:	4b14      	ldr	r3, [pc, #80]	; (800b408 <tcp_netif_ip_addr_changed+0x78>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f7ff ffc6 	bl	800b34c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d019      	beq.n	800b3fa <tcp_netif_ip_addr_changed+0x6a>
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d015      	beq.n	800b3fa <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800b3ce:	4b0f      	ldr	r3, [pc, #60]	; (800b40c <tcp_netif_ip_addr_changed+0x7c>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	60fb      	str	r3, [r7, #12]
 800b3d4:	e00e      	b.n	800b3f4 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	68db      	ldr	r3, [r3, #12]
 800b3da:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681a      	ldr	r2, [r3, #0]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d103      	bne.n	800b3f0 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	60fb      	str	r3, [r7, #12]
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d1ed      	bne.n	800b3d6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800b3fa:	bf00      	nop
 800b3fc:	3710      	adds	r7, #16
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	2000b128 	.word	0x2000b128
 800b408:	2000b134 	.word	0x2000b134
 800b40c:	2000b130 	.word	0x2000b130

0800b410 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b410:	b590      	push	{r4, r7, lr}
 800b412:	b08b      	sub	sp, #44	; 0x2c
 800b414:	af02      	add	r7, sp, #8
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	4a82      	ldr	r2, [pc, #520]	; (800b628 <tcp_input+0x218>)
 800b420:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	895b      	ldrh	r3, [r3, #10]
 800b426:	2b13      	cmp	r3, #19
 800b428:	f240 838a 	bls.w	800bb40 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b42c:	4b7f      	ldr	r3, [pc, #508]	; (800b62c <tcp_input+0x21c>)
 800b42e:	695b      	ldr	r3, [r3, #20]
 800b430:	4a7e      	ldr	r2, [pc, #504]	; (800b62c <tcp_input+0x21c>)
 800b432:	6812      	ldr	r2, [r2, #0]
 800b434:	4611      	mov	r1, r2
 800b436:	4618      	mov	r0, r3
 800b438:	f005 fbae 	bl	8010b98 <ip4_addr_isbroadcast_u32>
 800b43c:	4603      	mov	r3, r0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	f040 8380 	bne.w	800bb44 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b444:	4b79      	ldr	r3, [pc, #484]	; (800b62c <tcp_input+0x21c>)
 800b446:	695b      	ldr	r3, [r3, #20]
 800b448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b44c:	2be0      	cmp	r3, #224	; 0xe0
 800b44e:	f000 8379 	beq.w	800bb44 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800b452:	4b75      	ldr	r3, [pc, #468]	; (800b628 <tcp_input+0x218>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	899b      	ldrh	r3, [r3, #12]
 800b458:	b29b      	uxth	r3, r3
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7fc ff3a 	bl	80082d4 <lwip_htons>
 800b460:	4603      	mov	r3, r0
 800b462:	0b1b      	lsrs	r3, r3, #12
 800b464:	b29b      	uxth	r3, r3
 800b466:	b2db      	uxtb	r3, r3
 800b468:	009b      	lsls	r3, r3, #2
 800b46a:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b46c:	7cbb      	ldrb	r3, [r7, #18]
 800b46e:	2b13      	cmp	r3, #19
 800b470:	f240 836a 	bls.w	800bb48 <tcp_input+0x738>
 800b474:	7cbb      	ldrb	r3, [r7, #18]
 800b476:	b29a      	uxth	r2, r3
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	891b      	ldrh	r3, [r3, #8]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	f200 8363 	bhi.w	800bb48 <tcp_input+0x738>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800b482:	7cbb      	ldrb	r3, [r7, #18]
 800b484:	b29b      	uxth	r3, r3
 800b486:	3b14      	subs	r3, #20
 800b488:	b29a      	uxth	r2, r3
 800b48a:	4b69      	ldr	r3, [pc, #420]	; (800b630 <tcp_input+0x220>)
 800b48c:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b48e:	4b69      	ldr	r3, [pc, #420]	; (800b634 <tcp_input+0x224>)
 800b490:	2200      	movs	r2, #0
 800b492:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	895a      	ldrh	r2, [r3, #10]
 800b498:	7cbb      	ldrb	r3, [r7, #18]
 800b49a:	b29b      	uxth	r3, r3
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d30d      	bcc.n	800b4bc <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b4a0:	4b63      	ldr	r3, [pc, #396]	; (800b630 <tcp_input+0x220>)
 800b4a2:	881a      	ldrh	r2, [r3, #0]
 800b4a4:	4b64      	ldr	r3, [pc, #400]	; (800b638 <tcp_input+0x228>)
 800b4a6:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800b4a8:	7cbb      	ldrb	r3, [r7, #18]
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	425b      	negs	r3, r3
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	b21b      	sxth	r3, r3
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f7fe f8db 	bl	8009670 <pbuf_header>
 800b4ba:	e055      	b.n	800b568 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d105      	bne.n	800b4d0 <tcp_input+0xc0>
 800b4c4:	4b5d      	ldr	r3, [pc, #372]	; (800b63c <tcp_input+0x22c>)
 800b4c6:	22b2      	movs	r2, #178	; 0xb2
 800b4c8:	495d      	ldr	r1, [pc, #372]	; (800b640 <tcp_input+0x230>)
 800b4ca:	485e      	ldr	r0, [pc, #376]	; (800b644 <tcp_input+0x234>)
 800b4cc:	f006 fd1a 	bl	8011f04 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800b4d0:	f06f 0113 	mvn.w	r1, #19
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f7fe f8cb 	bl	8009670 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	895a      	ldrh	r2, [r3, #10]
 800b4de:	4b56      	ldr	r3, [pc, #344]	; (800b638 <tcp_input+0x228>)
 800b4e0:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800b4e2:	4b53      	ldr	r3, [pc, #332]	; (800b630 <tcp_input+0x220>)
 800b4e4:	881a      	ldrh	r2, [r3, #0]
 800b4e6:	4b54      	ldr	r3, [pc, #336]	; (800b638 <tcp_input+0x228>)
 800b4e8:	881b      	ldrh	r3, [r3, #0]
 800b4ea:	1ad3      	subs	r3, r2, r3
 800b4ec:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800b4ee:	4b52      	ldr	r3, [pc, #328]	; (800b638 <tcp_input+0x228>)
 800b4f0:	881b      	ldrh	r3, [r3, #0]
 800b4f2:	425b      	negs	r3, r3
 800b4f4:	b29b      	uxth	r3, r3
 800b4f6:	b21b      	sxth	r3, r3
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f7fe f8b8 	bl	8009670 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	895b      	ldrh	r3, [r3, #10]
 800b506:	8a3a      	ldrh	r2, [r7, #16]
 800b508:	429a      	cmp	r2, r3
 800b50a:	f200 831f 	bhi.w	800bb4c <tcp_input+0x73c>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	4a47      	ldr	r2, [pc, #284]	; (800b634 <tcp_input+0x224>)
 800b516:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	8a3b      	ldrh	r3, [r7, #16]
 800b51e:	425b      	negs	r3, r3
 800b520:	b29b      	uxth	r3, r3
 800b522:	b21b      	sxth	r3, r3
 800b524:	4619      	mov	r1, r3
 800b526:	4610      	mov	r0, r2
 800b528:	f7fe f8a2 	bl	8009670 <pbuf_header>
    p->tot_len -= opt2len;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	891a      	ldrh	r2, [r3, #8]
 800b530:	8a3b      	ldrh	r3, [r7, #16]
 800b532:	1ad3      	subs	r3, r2, r3
 800b534:	b29a      	uxth	r2, r3
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	895b      	ldrh	r3, [r3, #10]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d005      	beq.n	800b54e <tcp_input+0x13e>
 800b542:	4b3e      	ldr	r3, [pc, #248]	; (800b63c <tcp_input+0x22c>)
 800b544:	22cf      	movs	r2, #207	; 0xcf
 800b546:	4940      	ldr	r1, [pc, #256]	; (800b648 <tcp_input+0x238>)
 800b548:	483e      	ldr	r0, [pc, #248]	; (800b644 <tcp_input+0x234>)
 800b54a:	f006 fcdb 	bl	8011f04 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	891a      	ldrh	r2, [r3, #8]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	891b      	ldrh	r3, [r3, #8]
 800b558:	429a      	cmp	r2, r3
 800b55a:	d005      	beq.n	800b568 <tcp_input+0x158>
 800b55c:	4b37      	ldr	r3, [pc, #220]	; (800b63c <tcp_input+0x22c>)
 800b55e:	22d0      	movs	r2, #208	; 0xd0
 800b560:	493a      	ldr	r1, [pc, #232]	; (800b64c <tcp_input+0x23c>)
 800b562:	4838      	ldr	r0, [pc, #224]	; (800b644 <tcp_input+0x234>)
 800b564:	f006 fcce 	bl	8011f04 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b568:	4b2f      	ldr	r3, [pc, #188]	; (800b628 <tcp_input+0x218>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	881b      	ldrh	r3, [r3, #0]
 800b56e:	b29b      	uxth	r3, r3
 800b570:	4a2d      	ldr	r2, [pc, #180]	; (800b628 <tcp_input+0x218>)
 800b572:	6814      	ldr	r4, [r2, #0]
 800b574:	4618      	mov	r0, r3
 800b576:	f7fc fead 	bl	80082d4 <lwip_htons>
 800b57a:	4603      	mov	r3, r0
 800b57c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b57e:	4b2a      	ldr	r3, [pc, #168]	; (800b628 <tcp_input+0x218>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	885b      	ldrh	r3, [r3, #2]
 800b584:	b29b      	uxth	r3, r3
 800b586:	4a28      	ldr	r2, [pc, #160]	; (800b628 <tcp_input+0x218>)
 800b588:	6814      	ldr	r4, [r2, #0]
 800b58a:	4618      	mov	r0, r3
 800b58c:	f7fc fea2 	bl	80082d4 <lwip_htons>
 800b590:	4603      	mov	r3, r0
 800b592:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b594:	4b24      	ldr	r3, [pc, #144]	; (800b628 <tcp_input+0x218>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	4a23      	ldr	r2, [pc, #140]	; (800b628 <tcp_input+0x218>)
 800b59c:	6814      	ldr	r4, [r2, #0]
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7fc fea5 	bl	80082ee <lwip_htonl>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	6063      	str	r3, [r4, #4]
 800b5a8:	6863      	ldr	r3, [r4, #4]
 800b5aa:	4a29      	ldr	r2, [pc, #164]	; (800b650 <tcp_input+0x240>)
 800b5ac:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b5ae:	4b1e      	ldr	r3, [pc, #120]	; (800b628 <tcp_input+0x218>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	689b      	ldr	r3, [r3, #8]
 800b5b4:	4a1c      	ldr	r2, [pc, #112]	; (800b628 <tcp_input+0x218>)
 800b5b6:	6814      	ldr	r4, [r2, #0]
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7fc fe98 	bl	80082ee <lwip_htonl>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	60a3      	str	r3, [r4, #8]
 800b5c2:	68a3      	ldr	r3, [r4, #8]
 800b5c4:	4a23      	ldr	r2, [pc, #140]	; (800b654 <tcp_input+0x244>)
 800b5c6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b5c8:	4b17      	ldr	r3, [pc, #92]	; (800b628 <tcp_input+0x218>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	89db      	ldrh	r3, [r3, #14]
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	4a15      	ldr	r2, [pc, #84]	; (800b628 <tcp_input+0x218>)
 800b5d2:	6814      	ldr	r4, [r2, #0]
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7fc fe7d 	bl	80082d4 <lwip_htons>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b5de:	4b12      	ldr	r3, [pc, #72]	; (800b628 <tcp_input+0x218>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	899b      	ldrh	r3, [r3, #12]
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f7fc fe74 	bl	80082d4 <lwip_htons>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5f4:	b2da      	uxtb	r2, r3
 800b5f6:	4b18      	ldr	r3, [pc, #96]	; (800b658 <tcp_input+0x248>)
 800b5f8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	891a      	ldrh	r2, [r3, #8]
 800b5fe:	4b16      	ldr	r3, [pc, #88]	; (800b658 <tcp_input+0x248>)
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	f003 0303 	and.w	r3, r3, #3
 800b606:	2b00      	cmp	r3, #0
 800b608:	bf14      	ite	ne
 800b60a:	2301      	movne	r3, #1
 800b60c:	2300      	moveq	r3, #0
 800b60e:	b2db      	uxtb	r3, r3
 800b610:	b29b      	uxth	r3, r3
 800b612:	4413      	add	r3, r2
 800b614:	b29a      	uxth	r2, r3
 800b616:	4b11      	ldr	r3, [pc, #68]	; (800b65c <tcp_input+0x24c>)
 800b618:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800b61a:	2300      	movs	r3, #0
 800b61c:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b61e:	4b10      	ldr	r3, [pc, #64]	; (800b660 <tcp_input+0x250>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	61fb      	str	r3, [r7, #28]
 800b624:	e082      	b.n	800b72c <tcp_input+0x31c>
 800b626:	bf00      	nop
 800b628:	20004310 	.word	0x20004310
 800b62c:	20007a18 	.word	0x20007a18
 800b630:	20004314 	.word	0x20004314
 800b634:	20004318 	.word	0x20004318
 800b638:	20004316 	.word	0x20004316
 800b63c:	08013b04 	.word	0x08013b04
 800b640:	08013b38 	.word	0x08013b38
 800b644:	08013b48 	.word	0x08013b48
 800b648:	08013b70 	.word	0x08013b70
 800b64c:	08013b7c 	.word	0x08013b7c
 800b650:	20004320 	.word	0x20004320
 800b654:	20004324 	.word	0x20004324
 800b658:	2000432c 	.word	0x2000432c
 800b65c:	2000432a 	.word	0x2000432a
 800b660:	2000b128 	.word	0x2000b128
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b664:	69fb      	ldr	r3, [r7, #28]
 800b666:	7d1b      	ldrb	r3, [r3, #20]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d105      	bne.n	800b678 <tcp_input+0x268>
 800b66c:	4b8f      	ldr	r3, [pc, #572]	; (800b8ac <tcp_input+0x49c>)
 800b66e:	22e2      	movs	r2, #226	; 0xe2
 800b670:	498f      	ldr	r1, [pc, #572]	; (800b8b0 <tcp_input+0x4a0>)
 800b672:	4890      	ldr	r0, [pc, #576]	; (800b8b4 <tcp_input+0x4a4>)
 800b674:	f006 fc46 	bl	8011f04 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b678:	69fb      	ldr	r3, [r7, #28]
 800b67a:	7d1b      	ldrb	r3, [r3, #20]
 800b67c:	2b0a      	cmp	r3, #10
 800b67e:	d105      	bne.n	800b68c <tcp_input+0x27c>
 800b680:	4b8a      	ldr	r3, [pc, #552]	; (800b8ac <tcp_input+0x49c>)
 800b682:	22e3      	movs	r2, #227	; 0xe3
 800b684:	498c      	ldr	r1, [pc, #560]	; (800b8b8 <tcp_input+0x4a8>)
 800b686:	488b      	ldr	r0, [pc, #556]	; (800b8b4 <tcp_input+0x4a4>)
 800b688:	f006 fc3c 	bl	8011f04 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b68c:	69fb      	ldr	r3, [r7, #28]
 800b68e:	7d1b      	ldrb	r3, [r3, #20]
 800b690:	2b01      	cmp	r3, #1
 800b692:	d105      	bne.n	800b6a0 <tcp_input+0x290>
 800b694:	4b85      	ldr	r3, [pc, #532]	; (800b8ac <tcp_input+0x49c>)
 800b696:	22e4      	movs	r2, #228	; 0xe4
 800b698:	4988      	ldr	r1, [pc, #544]	; (800b8bc <tcp_input+0x4ac>)
 800b69a:	4886      	ldr	r0, [pc, #536]	; (800b8b4 <tcp_input+0x4a4>)
 800b69c:	f006 fc32 	bl	8011f04 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800b6a0:	69fb      	ldr	r3, [r7, #28]
 800b6a2:	8b1a      	ldrh	r2, [r3, #24]
 800b6a4:	4b86      	ldr	r3, [pc, #536]	; (800b8c0 <tcp_input+0x4b0>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	881b      	ldrh	r3, [r3, #0]
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d138      	bne.n	800b722 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800b6b0:	69fb      	ldr	r3, [r7, #28]
 800b6b2:	8ada      	ldrh	r2, [r3, #22]
 800b6b4:	4b82      	ldr	r3, [pc, #520]	; (800b8c0 <tcp_input+0x4b0>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	885b      	ldrh	r3, [r3, #2]
 800b6ba:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d130      	bne.n	800b722 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b6c0:	69fb      	ldr	r3, [r7, #28]
 800b6c2:	685a      	ldr	r2, [r3, #4]
 800b6c4:	4b7f      	ldr	r3, [pc, #508]	; (800b8c4 <tcp_input+0x4b4>)
 800b6c6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d12a      	bne.n	800b722 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b6cc:	69fb      	ldr	r3, [r7, #28]
 800b6ce:	681a      	ldr	r2, [r3, #0]
 800b6d0:	4b7c      	ldr	r3, [pc, #496]	; (800b8c4 <tcp_input+0x4b4>)
 800b6d2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d124      	bne.n	800b722 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b6d8:	69fb      	ldr	r3, [r7, #28]
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	69fa      	ldr	r2, [r7, #28]
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d105      	bne.n	800b6ee <tcp_input+0x2de>
 800b6e2:	4b72      	ldr	r3, [pc, #456]	; (800b8ac <tcp_input+0x49c>)
 800b6e4:	22ec      	movs	r2, #236	; 0xec
 800b6e6:	4978      	ldr	r1, [pc, #480]	; (800b8c8 <tcp_input+0x4b8>)
 800b6e8:	4872      	ldr	r0, [pc, #456]	; (800b8b4 <tcp_input+0x4a4>)
 800b6ea:	f006 fc0b 	bl	8011f04 <iprintf>
      if (prev != NULL) {
 800b6ee:	69bb      	ldr	r3, [r7, #24]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d00a      	beq.n	800b70a <tcp_input+0x2fa>
        prev->next = pcb->next;
 800b6f4:	69fb      	ldr	r3, [r7, #28]
 800b6f6:	68da      	ldr	r2, [r3, #12]
 800b6f8:	69bb      	ldr	r3, [r7, #24]
 800b6fa:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800b6fc:	4b73      	ldr	r3, [pc, #460]	; (800b8cc <tcp_input+0x4bc>)
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	69fb      	ldr	r3, [r7, #28]
 800b702:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800b704:	4a71      	ldr	r2, [pc, #452]	; (800b8cc <tcp_input+0x4bc>)
 800b706:	69fb      	ldr	r3, [r7, #28]
 800b708:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b70a:	69fb      	ldr	r3, [r7, #28]
 800b70c:	68db      	ldr	r3, [r3, #12]
 800b70e:	69fa      	ldr	r2, [r7, #28]
 800b710:	429a      	cmp	r2, r3
 800b712:	d10f      	bne.n	800b734 <tcp_input+0x324>
 800b714:	4b65      	ldr	r3, [pc, #404]	; (800b8ac <tcp_input+0x49c>)
 800b716:	22f4      	movs	r2, #244	; 0xf4
 800b718:	496d      	ldr	r1, [pc, #436]	; (800b8d0 <tcp_input+0x4c0>)
 800b71a:	4866      	ldr	r0, [pc, #408]	; (800b8b4 <tcp_input+0x4a4>)
 800b71c:	f006 fbf2 	bl	8011f04 <iprintf>
      break;
 800b720:	e008      	b.n	800b734 <tcp_input+0x324>
    }
    prev = pcb;
 800b722:	69fb      	ldr	r3, [r7, #28]
 800b724:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b726:	69fb      	ldr	r3, [r7, #28]
 800b728:	68db      	ldr	r3, [r3, #12]
 800b72a:	61fb      	str	r3, [r7, #28]
 800b72c:	69fb      	ldr	r3, [r7, #28]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d198      	bne.n	800b664 <tcp_input+0x254>
 800b732:	e000      	b.n	800b736 <tcp_input+0x326>
      break;
 800b734:	bf00      	nop
  }

  if (pcb == NULL) {
 800b736:	69fb      	ldr	r3, [r7, #28]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d173      	bne.n	800b824 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b73c:	4b65      	ldr	r3, [pc, #404]	; (800b8d4 <tcp_input+0x4c4>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	61fb      	str	r3, [r7, #28]
 800b742:	e02f      	b.n	800b7a4 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b744:	69fb      	ldr	r3, [r7, #28]
 800b746:	7d1b      	ldrb	r3, [r3, #20]
 800b748:	2b0a      	cmp	r3, #10
 800b74a:	d005      	beq.n	800b758 <tcp_input+0x348>
 800b74c:	4b57      	ldr	r3, [pc, #348]	; (800b8ac <tcp_input+0x49c>)
 800b74e:	22fe      	movs	r2, #254	; 0xfe
 800b750:	4961      	ldr	r1, [pc, #388]	; (800b8d8 <tcp_input+0x4c8>)
 800b752:	4858      	ldr	r0, [pc, #352]	; (800b8b4 <tcp_input+0x4a4>)
 800b754:	f006 fbd6 	bl	8011f04 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800b758:	69fb      	ldr	r3, [r7, #28]
 800b75a:	8b1a      	ldrh	r2, [r3, #24]
 800b75c:	4b58      	ldr	r3, [pc, #352]	; (800b8c0 <tcp_input+0x4b0>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	881b      	ldrh	r3, [r3, #0]
 800b762:	b29b      	uxth	r3, r3
 800b764:	429a      	cmp	r2, r3
 800b766:	d11a      	bne.n	800b79e <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800b768:	69fb      	ldr	r3, [r7, #28]
 800b76a:	8ada      	ldrh	r2, [r3, #22]
 800b76c:	4b54      	ldr	r3, [pc, #336]	; (800b8c0 <tcp_input+0x4b0>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	885b      	ldrh	r3, [r3, #2]
 800b772:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800b774:	429a      	cmp	r2, r3
 800b776:	d112      	bne.n	800b79e <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b778:	69fb      	ldr	r3, [r7, #28]
 800b77a:	685a      	ldr	r2, [r3, #4]
 800b77c:	4b51      	ldr	r3, [pc, #324]	; (800b8c4 <tcp_input+0x4b4>)
 800b77e:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b780:	429a      	cmp	r2, r3
 800b782:	d10c      	bne.n	800b79e <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b784:	69fb      	ldr	r3, [r7, #28]
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	4b4e      	ldr	r3, [pc, #312]	; (800b8c4 <tcp_input+0x4b4>)
 800b78a:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d106      	bne.n	800b79e <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800b790:	69f8      	ldr	r0, [r7, #28]
 800b792:	f000 fb15 	bl	800bdc0 <tcp_timewait_input>
        pbuf_free(p);
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f7fd ff8e 	bl	80096b8 <pbuf_free>
        return;
 800b79c:	e1dc      	b.n	800bb58 <tcp_input+0x748>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b79e:	69fb      	ldr	r3, [r7, #28]
 800b7a0:	68db      	ldr	r3, [r3, #12]
 800b7a2:	61fb      	str	r3, [r7, #28]
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d1cc      	bne.n	800b744 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b7ae:	4b4b      	ldr	r3, [pc, #300]	; (800b8dc <tcp_input+0x4cc>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	617b      	str	r3, [r7, #20]
 800b7b4:	e019      	b.n	800b7ea <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	8ada      	ldrh	r2, [r3, #22]
 800b7ba:	4b41      	ldr	r3, [pc, #260]	; (800b8c0 <tcp_input+0x4b0>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	885b      	ldrh	r3, [r3, #2]
 800b7c0:	b29b      	uxth	r3, r3
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d10c      	bne.n	800b7e0 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	4b3e      	ldr	r3, [pc, #248]	; (800b8c4 <tcp_input+0x4b4>)
 800b7cc:	695b      	ldr	r3, [r3, #20]
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d00f      	beq.n	800b7f2 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d00d      	beq.n	800b7f4 <tcp_input+0x3e4>
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d009      	beq.n	800b7f4 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	617b      	str	r3, [r7, #20]
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d1e2      	bne.n	800b7b6 <tcp_input+0x3a6>
 800b7f0:	e000      	b.n	800b7f4 <tcp_input+0x3e4>
            break;
 800b7f2:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d014      	beq.n	800b824 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800b7fa:	69bb      	ldr	r3, [r7, #24]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d00a      	beq.n	800b816 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	68da      	ldr	r2, [r3, #12]
 800b804:	69bb      	ldr	r3, [r7, #24]
 800b806:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b808:	4b34      	ldr	r3, [pc, #208]	; (800b8dc <tcp_input+0x4cc>)
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b810:	4a32      	ldr	r2, [pc, #200]	; (800b8dc <tcp_input+0x4cc>)
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800b816:	6978      	ldr	r0, [r7, #20]
 800b818:	f000 f9f2 	bl	800bc00 <tcp_listen_input>
      pbuf_free(p);
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f7fd ff4b 	bl	80096b8 <pbuf_free>
      return;
 800b822:	e199      	b.n	800bb58 <tcp_input+0x748>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800b824:	69fb      	ldr	r3, [r7, #28]
 800b826:	2b00      	cmp	r3, #0
 800b828:	f000 8164 	beq.w	800baf4 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800b82c:	4b2c      	ldr	r3, [pc, #176]	; (800b8e0 <tcp_input+0x4d0>)
 800b82e:	2200      	movs	r2, #0
 800b830:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	891a      	ldrh	r2, [r3, #8]
 800b836:	4b2a      	ldr	r3, [pc, #168]	; (800b8e0 <tcp_input+0x4d0>)
 800b838:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b83a:	4a29      	ldr	r2, [pc, #164]	; (800b8e0 <tcp_input+0x4d0>)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b840:	4b1f      	ldr	r3, [pc, #124]	; (800b8c0 <tcp_input+0x4b0>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4a26      	ldr	r2, [pc, #152]	; (800b8e0 <tcp_input+0x4d0>)
 800b846:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b848:	4b26      	ldr	r3, [pc, #152]	; (800b8e4 <tcp_input+0x4d4>)
 800b84a:	2200      	movs	r2, #0
 800b84c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800b84e:	4b26      	ldr	r3, [pc, #152]	; (800b8e8 <tcp_input+0x4d8>)
 800b850:	2200      	movs	r2, #0
 800b852:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800b854:	4b25      	ldr	r3, [pc, #148]	; (800b8ec <tcp_input+0x4dc>)
 800b856:	2200      	movs	r2, #0
 800b858:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800b85a:	4b25      	ldr	r3, [pc, #148]	; (800b8f0 <tcp_input+0x4e0>)
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	f003 0308 	and.w	r3, r3, #8
 800b862:	2b00      	cmp	r3, #0
 800b864:	d006      	beq.n	800b874 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	7b5b      	ldrb	r3, [r3, #13]
 800b86a:	f043 0301 	orr.w	r3, r3, #1
 800b86e:	b2da      	uxtb	r2, r3
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800b874:	69fb      	ldr	r3, [r7, #28]
 800b876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d03d      	beq.n	800b8f8 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b87c:	69f8      	ldr	r0, [r7, #28]
 800b87e:	f7ff f997 	bl	800abb0 <tcp_process_refused_data>
 800b882:	4603      	mov	r3, r0
 800b884:	f113 0f0d 	cmn.w	r3, #13
 800b888:	d007      	beq.n	800b89a <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b88a:	69fb      	ldr	r3, [r7, #28]
 800b88c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d032      	beq.n	800b8f8 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b892:	4b18      	ldr	r3, [pc, #96]	; (800b8f4 <tcp_input+0x4e4>)
 800b894:	881b      	ldrh	r3, [r3, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d02e      	beq.n	800b8f8 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b89a:	69fb      	ldr	r3, [r7, #28]
 800b89c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	f040 8108 	bne.w	800bab4 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b8a4:	69f8      	ldr	r0, [r7, #28]
 800b8a6:	f002 fe3b 	bl	800e520 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b8aa:	e103      	b.n	800bab4 <tcp_input+0x6a4>
 800b8ac:	08013b04 	.word	0x08013b04
 800b8b0:	08013b9c 	.word	0x08013b9c
 800b8b4:	08013b48 	.word	0x08013b48
 800b8b8:	08013bc4 	.word	0x08013bc4
 800b8bc:	08013bf0 	.word	0x08013bf0
 800b8c0:	20004310 	.word	0x20004310
 800b8c4:	20007a18 	.word	0x20007a18
 800b8c8:	08013c18 	.word	0x08013c18
 800b8cc:	2000b128 	.word	0x2000b128
 800b8d0:	08013c44 	.word	0x08013c44
 800b8d4:	2000b138 	.word	0x2000b138
 800b8d8:	08013c70 	.word	0x08013c70
 800b8dc:	2000b130 	.word	0x2000b130
 800b8e0:	20004300 	.word	0x20004300
 800b8e4:	20004330 	.word	0x20004330
 800b8e8:	2000432d 	.word	0x2000432d
 800b8ec:	20004328 	.word	0x20004328
 800b8f0:	2000432c 	.word	0x2000432c
 800b8f4:	2000432a 	.word	0x2000432a
      }
    }
    tcp_input_pcb = pcb;
 800b8f8:	4a99      	ldr	r2, [pc, #612]	; (800bb60 <tcp_input+0x750>)
 800b8fa:	69fb      	ldr	r3, [r7, #28]
 800b8fc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b8fe:	69f8      	ldr	r0, [r7, #28]
 800b900:	f000 fac6 	bl	800be90 <tcp_process>
 800b904:	4603      	mov	r3, r0
 800b906:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b908:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b90c:	f113 0f0d 	cmn.w	r3, #13
 800b910:	f000 80d2 	beq.w	800bab8 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 800b914:	4b93      	ldr	r3, [pc, #588]	; (800bb64 <tcp_input+0x754>)
 800b916:	781b      	ldrb	r3, [r3, #0]
 800b918:	f003 0308 	and.w	r3, r3, #8
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d016      	beq.n	800b94e <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b920:	69fb      	ldr	r3, [r7, #28]
 800b922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b926:	2b00      	cmp	r3, #0
 800b928:	d008      	beq.n	800b93c <tcp_input+0x52c>
 800b92a:	69fb      	ldr	r3, [r7, #28]
 800b92c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b930:	69fa      	ldr	r2, [r7, #28]
 800b932:	6912      	ldr	r2, [r2, #16]
 800b934:	f06f 010d 	mvn.w	r1, #13
 800b938:	4610      	mov	r0, r2
 800b93a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b93c:	69f9      	ldr	r1, [r7, #28]
 800b93e:	488a      	ldr	r0, [pc, #552]	; (800bb68 <tcp_input+0x758>)
 800b940:	f7ff fc4e 	bl	800b1e0 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800b944:	69f9      	ldr	r1, [r7, #28]
 800b946:	2001      	movs	r0, #1
 800b948:	f7fd f902 	bl	8008b50 <memp_free>
 800b94c:	e0bf      	b.n	800bace <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 800b94e:	2300      	movs	r3, #0
 800b950:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b952:	4b86      	ldr	r3, [pc, #536]	; (800bb6c <tcp_input+0x75c>)
 800b954:	881b      	ldrh	r3, [r3, #0]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d01b      	beq.n	800b992 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b95a:	4b84      	ldr	r3, [pc, #528]	; (800bb6c <tcp_input+0x75c>)
 800b95c:	881b      	ldrh	r3, [r3, #0]
 800b95e:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b960:	69fb      	ldr	r3, [r7, #28]
 800b962:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b964:	2b00      	cmp	r3, #0
 800b966:	d009      	beq.n	800b97c <tcp_input+0x56c>
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b96c:	69fa      	ldr	r2, [r7, #28]
 800b96e:	6910      	ldr	r0, [r2, #16]
 800b970:	89fa      	ldrh	r2, [r7, #14]
 800b972:	69f9      	ldr	r1, [r7, #28]
 800b974:	4798      	blx	r3
 800b976:	4603      	mov	r3, r0
 800b978:	74fb      	strb	r3, [r7, #19]
 800b97a:	e001      	b.n	800b980 <tcp_input+0x570>
 800b97c:	2300      	movs	r3, #0
 800b97e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b980:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b984:	f113 0f0d 	cmn.w	r3, #13
 800b988:	f000 8098 	beq.w	800babc <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b98c:	4b77      	ldr	r3, [pc, #476]	; (800bb6c <tcp_input+0x75c>)
 800b98e:	2200      	movs	r2, #0
 800b990:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b992:	69f8      	ldr	r0, [r7, #28]
 800b994:	f000 f902 	bl	800bb9c <tcp_input_delayed_close>
 800b998:	4603      	mov	r3, r0
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	f040 8090 	bne.w	800bac0 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b9a0:	4b73      	ldr	r3, [pc, #460]	; (800bb70 <tcp_input+0x760>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d041      	beq.n	800ba2c <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b9a8:	69fb      	ldr	r3, [r7, #28]
 800b9aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d006      	beq.n	800b9be <tcp_input+0x5ae>
 800b9b0:	4b70      	ldr	r3, [pc, #448]	; (800bb74 <tcp_input+0x764>)
 800b9b2:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800b9b6:	4970      	ldr	r1, [pc, #448]	; (800bb78 <tcp_input+0x768>)
 800b9b8:	4870      	ldr	r0, [pc, #448]	; (800bb7c <tcp_input+0x76c>)
 800b9ba:	f006 faa3 	bl	8011f04 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b9be:	69fb      	ldr	r3, [r7, #28]
 800b9c0:	7e9b      	ldrb	r3, [r3, #26]
 800b9c2:	f003 0310 	and.w	r3, r3, #16
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d008      	beq.n	800b9dc <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b9ca:	4b69      	ldr	r3, [pc, #420]	; (800bb70 <tcp_input+0x760>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7fd fe72 	bl	80096b8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b9d4:	69f8      	ldr	r0, [r7, #28]
 800b9d6:	f7fe fb81 	bl	800a0dc <tcp_abort>
            goto aborted;
 800b9da:	e078      	b.n	800bace <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b9dc:	69fb      	ldr	r3, [r7, #28]
 800b9de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d00c      	beq.n	800ba00 <tcp_input+0x5f0>
 800b9e6:	69fb      	ldr	r3, [r7, #28]
 800b9e8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800b9ec:	69fb      	ldr	r3, [r7, #28]
 800b9ee:	6918      	ldr	r0, [r3, #16]
 800b9f0:	4b5f      	ldr	r3, [pc, #380]	; (800bb70 <tcp_input+0x760>)
 800b9f2:	681a      	ldr	r2, [r3, #0]
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	69f9      	ldr	r1, [r7, #28]
 800b9f8:	47a0      	blx	r4
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	74fb      	strb	r3, [r7, #19]
 800b9fe:	e008      	b.n	800ba12 <tcp_input+0x602>
 800ba00:	4b5b      	ldr	r3, [pc, #364]	; (800bb70 <tcp_input+0x760>)
 800ba02:	681a      	ldr	r2, [r3, #0]
 800ba04:	2300      	movs	r3, #0
 800ba06:	69f9      	ldr	r1, [r7, #28]
 800ba08:	2000      	movs	r0, #0
 800ba0a:	f7ff f991 	bl	800ad30 <tcp_recv_null>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ba12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba16:	f113 0f0d 	cmn.w	r3, #13
 800ba1a:	d053      	beq.n	800bac4 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ba1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d003      	beq.n	800ba2c <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ba24:	4b52      	ldr	r3, [pc, #328]	; (800bb70 <tcp_input+0x760>)
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	69fb      	ldr	r3, [r7, #28]
 800ba2a:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ba2c:	4b4d      	ldr	r3, [pc, #308]	; (800bb64 <tcp_input+0x754>)
 800ba2e:	781b      	ldrb	r3, [r3, #0]
 800ba30:	f003 0320 	and.w	r3, r3, #32
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d030      	beq.n	800ba9a <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800ba38:	69fb      	ldr	r3, [r7, #28]
 800ba3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d009      	beq.n	800ba54 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ba40:	69fb      	ldr	r3, [r7, #28]
 800ba42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba44:	7b5a      	ldrb	r2, [r3, #13]
 800ba46:	69fb      	ldr	r3, [r7, #28]
 800ba48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba4a:	f042 0220 	orr.w	r2, r2, #32
 800ba4e:	b2d2      	uxtb	r2, r2
 800ba50:	735a      	strb	r2, [r3, #13]
 800ba52:	e022      	b.n	800ba9a <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ba54:	69fb      	ldr	r3, [r7, #28]
 800ba56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba58:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ba5c:	d005      	beq.n	800ba6a <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800ba5e:	69fb      	ldr	r3, [r7, #28]
 800ba60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba62:	3301      	adds	r3, #1
 800ba64:	b29a      	uxth	r2, r3
 800ba66:	69fb      	ldr	r3, [r7, #28]
 800ba68:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ba6a:	69fb      	ldr	r3, [r7, #28]
 800ba6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d00b      	beq.n	800ba8c <tcp_input+0x67c>
 800ba74:	69fb      	ldr	r3, [r7, #28]
 800ba76:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800ba7a:	69fb      	ldr	r3, [r7, #28]
 800ba7c:	6918      	ldr	r0, [r3, #16]
 800ba7e:	2300      	movs	r3, #0
 800ba80:	2200      	movs	r2, #0
 800ba82:	69f9      	ldr	r1, [r7, #28]
 800ba84:	47a0      	blx	r4
 800ba86:	4603      	mov	r3, r0
 800ba88:	74fb      	strb	r3, [r7, #19]
 800ba8a:	e001      	b.n	800ba90 <tcp_input+0x680>
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ba90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba94:	f113 0f0d 	cmn.w	r3, #13
 800ba98:	d016      	beq.n	800bac8 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ba9a:	4b31      	ldr	r3, [pc, #196]	; (800bb60 <tcp_input+0x750>)
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800baa0:	69f8      	ldr	r0, [r7, #28]
 800baa2:	f000 f87b 	bl	800bb9c <tcp_input_delayed_close>
 800baa6:	4603      	mov	r3, r0
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d10f      	bne.n	800bacc <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800baac:	69f8      	ldr	r0, [r7, #28]
 800baae:	f002 fd93 	bl	800e5d8 <tcp_output>
 800bab2:	e00c      	b.n	800bace <tcp_input+0x6be>
        goto aborted;
 800bab4:	bf00      	nop
 800bab6:	e00a      	b.n	800bace <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800bab8:	bf00      	nop
 800baba:	e008      	b.n	800bace <tcp_input+0x6be>
              goto aborted;
 800babc:	bf00      	nop
 800babe:	e006      	b.n	800bace <tcp_input+0x6be>
          goto aborted;
 800bac0:	bf00      	nop
 800bac2:	e004      	b.n	800bace <tcp_input+0x6be>
            goto aborted;
 800bac4:	bf00      	nop
 800bac6:	e002      	b.n	800bace <tcp_input+0x6be>
              goto aborted;
 800bac8:	bf00      	nop
 800baca:	e000      	b.n	800bace <tcp_input+0x6be>
          goto aborted;
 800bacc:	bf00      	nop
    tcp_input_pcb = NULL;
 800bace:	4b24      	ldr	r3, [pc, #144]	; (800bb60 <tcp_input+0x750>)
 800bad0:	2200      	movs	r2, #0
 800bad2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800bad4:	4b26      	ldr	r3, [pc, #152]	; (800bb70 <tcp_input+0x760>)
 800bad6:	2200      	movs	r2, #0
 800bad8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800bada:	4b29      	ldr	r3, [pc, #164]	; (800bb80 <tcp_input+0x770>)
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d039      	beq.n	800bb56 <tcp_input+0x746>
    {
      pbuf_free(inseg.p);
 800bae2:	4b27      	ldr	r3, [pc, #156]	; (800bb80 <tcp_input+0x770>)
 800bae4:	685b      	ldr	r3, [r3, #4]
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7fd fde6 	bl	80096b8 <pbuf_free>
      inseg.p = NULL;
 800baec:	4b24      	ldr	r3, [pc, #144]	; (800bb80 <tcp_input+0x770>)
 800baee:	2200      	movs	r2, #0
 800baf0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800baf2:	e030      	b.n	800bb56 <tcp_input+0x746>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800baf4:	4b23      	ldr	r3, [pc, #140]	; (800bb84 <tcp_input+0x774>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	899b      	ldrh	r3, [r3, #12]
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7fc fbe9 	bl	80082d4 <lwip_htons>
 800bb02:	4603      	mov	r3, r0
 800bb04:	f003 0304 	and.w	r3, r3, #4
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d115      	bne.n	800bb38 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb0c:	4b1e      	ldr	r3, [pc, #120]	; (800bb88 <tcp_input+0x778>)
 800bb0e:	6818      	ldr	r0, [r3, #0]
 800bb10:	4b1e      	ldr	r3, [pc, #120]	; (800bb8c <tcp_input+0x77c>)
 800bb12:	881b      	ldrh	r3, [r3, #0]
 800bb14:	461a      	mov	r2, r3
 800bb16:	4b1e      	ldr	r3, [pc, #120]	; (800bb90 <tcp_input+0x780>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bb1c:	4b19      	ldr	r3, [pc, #100]	; (800bb84 <tcp_input+0x774>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb20:	885b      	ldrh	r3, [r3, #2]
 800bb22:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bb24:	4a17      	ldr	r2, [pc, #92]	; (800bb84 <tcp_input+0x774>)
 800bb26:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb28:	8812      	ldrh	r2, [r2, #0]
 800bb2a:	b292      	uxth	r2, r2
 800bb2c:	9201      	str	r2, [sp, #4]
 800bb2e:	9300      	str	r3, [sp, #0]
 800bb30:	4b18      	ldr	r3, [pc, #96]	; (800bb94 <tcp_input+0x784>)
 800bb32:	4a19      	ldr	r2, [pc, #100]	; (800bb98 <tcp_input+0x788>)
 800bb34:	f002 ffd4 	bl	800eae0 <tcp_rst>
    pbuf_free(p);
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f7fd fdbd 	bl	80096b8 <pbuf_free>
  return;
 800bb3e:	e00a      	b.n	800bb56 <tcp_input+0x746>
    goto dropped;
 800bb40:	bf00      	nop
 800bb42:	e004      	b.n	800bb4e <tcp_input+0x73e>
    goto dropped;
 800bb44:	bf00      	nop
 800bb46:	e002      	b.n	800bb4e <tcp_input+0x73e>
    goto dropped;
 800bb48:	bf00      	nop
 800bb4a:	e000      	b.n	800bb4e <tcp_input+0x73e>
      goto dropped;
 800bb4c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f7fd fdb2 	bl	80096b8 <pbuf_free>
 800bb54:	e000      	b.n	800bb58 <tcp_input+0x748>
  return;
 800bb56:	bf00      	nop
}
 800bb58:	3724      	adds	r7, #36	; 0x24
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd90      	pop	{r4, r7, pc}
 800bb5e:	bf00      	nop
 800bb60:	2000b13c 	.word	0x2000b13c
 800bb64:	2000432d 	.word	0x2000432d
 800bb68:	2000b128 	.word	0x2000b128
 800bb6c:	20004328 	.word	0x20004328
 800bb70:	20004330 	.word	0x20004330
 800bb74:	08013b04 	.word	0x08013b04
 800bb78:	08013ca0 	.word	0x08013ca0
 800bb7c:	08013b48 	.word	0x08013b48
 800bb80:	20004300 	.word	0x20004300
 800bb84:	20004310 	.word	0x20004310
 800bb88:	20004324 	.word	0x20004324
 800bb8c:	2000432a 	.word	0x2000432a
 800bb90:	20004320 	.word	0x20004320
 800bb94:	20007a28 	.word	0x20007a28
 800bb98:	20007a2c 	.word	0x20007a2c

0800bb9c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b082      	sub	sp, #8
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800bba4:	4b14      	ldr	r3, [pc, #80]	; (800bbf8 <tcp_input_delayed_close+0x5c>)
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	f003 0310 	and.w	r3, r3, #16
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d01d      	beq.n	800bbec <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	7e9b      	ldrb	r3, [r3, #26]
 800bbb4:	f003 0310 	and.w	r3, r3, #16
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d10d      	bne.n	800bbd8 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d008      	beq.n	800bbd8 <tcp_input_delayed_close+0x3c>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbcc:	687a      	ldr	r2, [r7, #4]
 800bbce:	6912      	ldr	r2, [r2, #16]
 800bbd0:	f06f 010e 	mvn.w	r1, #14
 800bbd4:	4610      	mov	r0, r2
 800bbd6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bbd8:	6879      	ldr	r1, [r7, #4]
 800bbda:	4808      	ldr	r0, [pc, #32]	; (800bbfc <tcp_input_delayed_close+0x60>)
 800bbdc:	f7ff fb00 	bl	800b1e0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800bbe0:	6879      	ldr	r1, [r7, #4]
 800bbe2:	2001      	movs	r0, #1
 800bbe4:	f7fc ffb4 	bl	8008b50 <memp_free>
    return 1;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	e000      	b.n	800bbee <tcp_input_delayed_close+0x52>
  }
  return 0;
 800bbec:	2300      	movs	r3, #0
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3708      	adds	r7, #8
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
 800bbf6:	bf00      	nop
 800bbf8:	2000432d 	.word	0x2000432d
 800bbfc:	2000b128 	.word	0x2000b128

0800bc00 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b088      	sub	sp, #32
 800bc04:	af02      	add	r7, sp, #8
 800bc06:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800bc08:	4b63      	ldr	r3, [pc, #396]	; (800bd98 <tcp_listen_input+0x198>)
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	f003 0304 	and.w	r3, r3, #4
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	f040 80bb 	bne.w	800bd8c <tcp_listen_input+0x18c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800bc16:	4b60      	ldr	r3, [pc, #384]	; (800bd98 <tcp_listen_input+0x198>)
 800bc18:	781b      	ldrb	r3, [r3, #0]
 800bc1a:	f003 0310 	and.w	r3, r3, #16
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d016      	beq.n	800bc50 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bc22:	4b5e      	ldr	r3, [pc, #376]	; (800bd9c <tcp_listen_input+0x19c>)
 800bc24:	6818      	ldr	r0, [r3, #0]
 800bc26:	4b5e      	ldr	r3, [pc, #376]	; (800bda0 <tcp_listen_input+0x1a0>)
 800bc28:	881b      	ldrh	r3, [r3, #0]
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	4b5d      	ldr	r3, [pc, #372]	; (800bda4 <tcp_listen_input+0x1a4>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bc32:	4b5d      	ldr	r3, [pc, #372]	; (800bda8 <tcp_listen_input+0x1a8>)
 800bc34:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bc36:	885b      	ldrh	r3, [r3, #2]
 800bc38:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bc3a:	4a5b      	ldr	r2, [pc, #364]	; (800bda8 <tcp_listen_input+0x1a8>)
 800bc3c:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bc3e:	8812      	ldrh	r2, [r2, #0]
 800bc40:	b292      	uxth	r2, r2
 800bc42:	9201      	str	r2, [sp, #4]
 800bc44:	9300      	str	r3, [sp, #0]
 800bc46:	4b59      	ldr	r3, [pc, #356]	; (800bdac <tcp_listen_input+0x1ac>)
 800bc48:	4a59      	ldr	r2, [pc, #356]	; (800bdb0 <tcp_listen_input+0x1b0>)
 800bc4a:	f002 ff49 	bl	800eae0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800bc4e:	e09f      	b.n	800bd90 <tcp_listen_input+0x190>
  } else if (flags & TCP_SYN) {
 800bc50:	4b51      	ldr	r3, [pc, #324]	; (800bd98 <tcp_listen_input+0x198>)
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	f003 0302 	and.w	r3, r3, #2
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	f000 8099 	beq.w	800bd90 <tcp_listen_input+0x190>
    npcb = tcp_alloc(pcb->prio);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	7d5b      	ldrb	r3, [r3, #21]
 800bc62:	4618      	mov	r0, r3
 800bc64:	f7ff f942 	bl	800aeec <tcp_alloc>
 800bc68:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d111      	bne.n	800bc94 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	699b      	ldr	r3, [r3, #24]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d00a      	beq.n	800bc8e <tcp_listen_input+0x8e>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	699b      	ldr	r3, [r3, #24]
 800bc7c:	687a      	ldr	r2, [r7, #4]
 800bc7e:	6910      	ldr	r0, [r2, #16]
 800bc80:	f04f 32ff 	mov.w	r2, #4294967295
 800bc84:	2100      	movs	r1, #0
 800bc86:	4798      	blx	r3
 800bc88:	4603      	mov	r3, r0
 800bc8a:	73bb      	strb	r3, [r7, #14]
      return;
 800bc8c:	e081      	b.n	800bd92 <tcp_listen_input+0x192>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800bc8e:	23f0      	movs	r3, #240	; 0xf0
 800bc90:	73bb      	strb	r3, [r7, #14]
      return;
 800bc92:	e07e      	b.n	800bd92 <tcp_listen_input+0x192>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800bc94:	4b47      	ldr	r3, [pc, #284]	; (800bdb4 <tcp_listen_input+0x1b4>)
 800bc96:	695a      	ldr	r2, [r3, #20]
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800bc9c:	4b45      	ldr	r3, [pc, #276]	; (800bdb4 <tcp_listen_input+0x1b4>)
 800bc9e:	691a      	ldr	r2, [r3, #16]
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	8ada      	ldrh	r2, [r3, #22]
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800bcac:	4b3e      	ldr	r3, [pc, #248]	; (800bda8 <tcp_listen_input+0x1a8>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	881b      	ldrh	r3, [r3, #0]
 800bcb2:	b29a      	uxth	r2, r3
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	2203      	movs	r2, #3
 800bcbc:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800bcbe:	4b39      	ldr	r3, [pc, #228]	; (800bda4 <tcp_listen_input+0x1a4>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	1c5a      	adds	r2, r3, #1
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800bcd0:	6978      	ldr	r0, [r7, #20]
 800bcd2:	f7ff fb01 	bl	800b2d8 <tcp_next_iss>
 800bcd6:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	693a      	ldr	r2, [r7, #16]
 800bcdc:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	693a      	ldr	r2, [r7, #16]
 800bce2:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	693a      	ldr	r2, [r7, #16]
 800bce8:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	693a      	ldr	r2, [r7, #16]
 800bcee:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800bcf0:	4b2c      	ldr	r3, [pc, #176]	; (800bda4 <tcp_listen_input+0x1a4>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	1e5a      	subs	r2, r3, #1
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	691a      	ldr	r2, [r3, #16]
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	687a      	ldr	r2, [r7, #4]
 800bd06:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	7a1b      	ldrb	r3, [r3, #8]
 800bd0c:	f003 030c 	and.w	r3, r3, #12
 800bd10:	b2da      	uxtb	r2, r3
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800bd16:	4b28      	ldr	r3, [pc, #160]	; (800bdb8 <tcp_listen_input+0x1b8>)
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	60da      	str	r2, [r3, #12]
 800bd1e:	4a26      	ldr	r2, [pc, #152]	; (800bdb8 <tcp_listen_input+0x1b8>)
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	6013      	str	r3, [r2, #0]
 800bd24:	f003 f924 	bl	800ef70 <tcp_timer_needed>
 800bd28:	4b24      	ldr	r3, [pc, #144]	; (800bdbc <tcp_listen_input+0x1bc>)
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800bd2e:	6978      	ldr	r0, [r7, #20]
 800bd30:	f001 fd10 	bl	800d754 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800bd34:	4b1c      	ldr	r3, [pc, #112]	; (800bda8 <tcp_listen_input+0x1a8>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	89db      	ldrh	r3, [r3, #14]
 800bd3a:	b29a      	uxth	r2, r3
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	3304      	adds	r3, #4
 800bd56:	4619      	mov	r1, r3
 800bd58:	4610      	mov	r0, r2
 800bd5a:	f7ff fad3 	bl	800b304 <tcp_eff_send_mss_impl>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	461a      	mov	r2, r3
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800bd66:	2112      	movs	r1, #18
 800bd68:	6978      	ldr	r0, [r7, #20]
 800bd6a:	f002 fadd 	bl	800e328 <tcp_enqueue_flags>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800bd72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d004      	beq.n	800bd84 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800bd7a:	2100      	movs	r1, #0
 800bd7c:	6978      	ldr	r0, [r7, #20]
 800bd7e:	f7fe f8fb 	bl	8009f78 <tcp_abandon>
      return;
 800bd82:	e006      	b.n	800bd92 <tcp_listen_input+0x192>
    tcp_output(npcb);
 800bd84:	6978      	ldr	r0, [r7, #20]
 800bd86:	f002 fc27 	bl	800e5d8 <tcp_output>
  return;
 800bd8a:	e001      	b.n	800bd90 <tcp_listen_input+0x190>
    return;
 800bd8c:	bf00      	nop
 800bd8e:	e000      	b.n	800bd92 <tcp_listen_input+0x192>
  return;
 800bd90:	bf00      	nop
}
 800bd92:	3718      	adds	r7, #24
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}
 800bd98:	2000432c 	.word	0x2000432c
 800bd9c:	20004324 	.word	0x20004324
 800bda0:	2000432a 	.word	0x2000432a
 800bda4:	20004320 	.word	0x20004320
 800bda8:	20004310 	.word	0x20004310
 800bdac:	20007a28 	.word	0x20007a28
 800bdb0:	20007a2c 	.word	0x20007a2c
 800bdb4:	20007a18 	.word	0x20007a18
 800bdb8:	2000b128 	.word	0x2000b128
 800bdbc:	2000b124 	.word	0x2000b124

0800bdc0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af02      	add	r7, sp, #8
 800bdc6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800bdc8:	4b29      	ldr	r3, [pc, #164]	; (800be70 <tcp_timewait_input+0xb0>)
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	f003 0304 	and.w	r3, r3, #4
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d146      	bne.n	800be62 <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800bdd4:	4b26      	ldr	r3, [pc, #152]	; (800be70 <tcp_timewait_input+0xb0>)
 800bdd6:	781b      	ldrb	r3, [r3, #0]
 800bdd8:	f003 0302 	and.w	r3, r3, #2
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d027      	beq.n	800be30 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800bde0:	4b24      	ldr	r3, [pc, #144]	; (800be74 <tcp_timewait_input+0xb4>)
 800bde2:	681a      	ldr	r2, [r3, #0]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bde8:	1ad3      	subs	r3, r2, r3
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	db2a      	blt.n	800be44 <tcp_timewait_input+0x84>
 800bdee:	4b21      	ldr	r3, [pc, #132]	; (800be74 <tcp_timewait_input+0xb4>)
 800bdf0:	681a      	ldr	r2, [r3, #0]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf6:	6879      	ldr	r1, [r7, #4]
 800bdf8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bdfa:	440b      	add	r3, r1
 800bdfc:	1ad3      	subs	r3, r2, r3
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	dc20      	bgt.n	800be44 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800be02:	4b1d      	ldr	r3, [pc, #116]	; (800be78 <tcp_timewait_input+0xb8>)
 800be04:	6818      	ldr	r0, [r3, #0]
 800be06:	4b1d      	ldr	r3, [pc, #116]	; (800be7c <tcp_timewait_input+0xbc>)
 800be08:	881b      	ldrh	r3, [r3, #0]
 800be0a:	461a      	mov	r2, r3
 800be0c:	4b19      	ldr	r3, [pc, #100]	; (800be74 <tcp_timewait_input+0xb4>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800be12:	4b1b      	ldr	r3, [pc, #108]	; (800be80 <tcp_timewait_input+0xc0>)
 800be14:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800be16:	885b      	ldrh	r3, [r3, #2]
 800be18:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800be1a:	4a19      	ldr	r2, [pc, #100]	; (800be80 <tcp_timewait_input+0xc0>)
 800be1c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800be1e:	8812      	ldrh	r2, [r2, #0]
 800be20:	b292      	uxth	r2, r2
 800be22:	9201      	str	r2, [sp, #4]
 800be24:	9300      	str	r3, [sp, #0]
 800be26:	4b17      	ldr	r3, [pc, #92]	; (800be84 <tcp_timewait_input+0xc4>)
 800be28:	4a17      	ldr	r2, [pc, #92]	; (800be88 <tcp_timewait_input+0xc8>)
 800be2a:	f002 fe59 	bl	800eae0 <tcp_rst>
      return;
 800be2e:	e01b      	b.n	800be68 <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 800be30:	4b0f      	ldr	r3, [pc, #60]	; (800be70 <tcp_timewait_input+0xb0>)
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	f003 0301 	and.w	r3, r3, #1
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d003      	beq.n	800be44 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800be3c:	4b13      	ldr	r3, [pc, #76]	; (800be8c <tcp_timewait_input+0xcc>)
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800be44:	4b0d      	ldr	r3, [pc, #52]	; (800be7c <tcp_timewait_input+0xbc>)
 800be46:	881b      	ldrh	r3, [r3, #0]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d00c      	beq.n	800be66 <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	7e9b      	ldrb	r3, [r3, #26]
 800be50:	f043 0302 	orr.w	r3, r3, #2
 800be54:	b2da      	uxtb	r2, r3
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f002 fbbc 	bl	800e5d8 <tcp_output>
  }
  return;
 800be60:	e001      	b.n	800be66 <tcp_timewait_input+0xa6>
    return;
 800be62:	bf00      	nop
 800be64:	e000      	b.n	800be68 <tcp_timewait_input+0xa8>
  return;
 800be66:	bf00      	nop
}
 800be68:	3708      	adds	r7, #8
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	2000432c 	.word	0x2000432c
 800be74:	20004320 	.word	0x20004320
 800be78:	20004324 	.word	0x20004324
 800be7c:	2000432a 	.word	0x2000432a
 800be80:	20004310 	.word	0x20004310
 800be84:	20007a28 	.word	0x20007a28
 800be88:	20007a2c 	.word	0x20007a2c
 800be8c:	2000b12c 	.word	0x2000b12c

0800be90 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b08a      	sub	sp, #40	; 0x28
 800be94:	af02      	add	r7, sp, #8
 800be96:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800be98:	2300      	movs	r3, #0
 800be9a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800be9c:	2300      	movs	r3, #0
 800be9e:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800bea0:	4ba4      	ldr	r3, [pc, #656]	; (800c134 <tcp_process+0x2a4>)
 800bea2:	781b      	ldrb	r3, [r3, #0]
 800bea4:	f003 0304 	and.w	r3, r3, #4
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d04e      	beq.n	800bf4a <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	7d1b      	ldrb	r3, [r3, #20]
 800beb0:	2b02      	cmp	r3, #2
 800beb2:	d108      	bne.n	800bec6 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800beb8:	4b9f      	ldr	r3, [pc, #636]	; (800c138 <tcp_process+0x2a8>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	429a      	cmp	r2, r3
 800bebe:	d123      	bne.n	800bf08 <tcp_process+0x78>
        acceptable = 1;
 800bec0:	2301      	movs	r3, #1
 800bec2:	76fb      	strb	r3, [r7, #27]
 800bec4:	e020      	b.n	800bf08 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800beca:	4b9c      	ldr	r3, [pc, #624]	; (800c13c <tcp_process+0x2ac>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	429a      	cmp	r2, r3
 800bed0:	d102      	bne.n	800bed8 <tcp_process+0x48>
        acceptable = 1;
 800bed2:	2301      	movs	r3, #1
 800bed4:	76fb      	strb	r3, [r7, #27]
 800bed6:	e017      	b.n	800bf08 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bed8:	4b98      	ldr	r3, [pc, #608]	; (800c13c <tcp_process+0x2ac>)
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee0:	1ad3      	subs	r3, r2, r3
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	db10      	blt.n	800bf08 <tcp_process+0x78>
 800bee6:	4b95      	ldr	r3, [pc, #596]	; (800c13c <tcp_process+0x2ac>)
 800bee8:	681a      	ldr	r2, [r3, #0]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beee:	6879      	ldr	r1, [r7, #4]
 800bef0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bef2:	440b      	add	r3, r1
 800bef4:	1ad3      	subs	r3, r2, r3
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	dc06      	bgt.n	800bf08 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	7e9b      	ldrb	r3, [r3, #26]
 800befe:	f043 0302 	orr.w	r3, r3, #2
 800bf02:	b2da      	uxtb	r2, r3
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800bf08:	7efb      	ldrb	r3, [r7, #27]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d01b      	beq.n	800bf46 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	7d1b      	ldrb	r3, [r3, #20]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d106      	bne.n	800bf24 <tcp_process+0x94>
 800bf16:	4b8a      	ldr	r3, [pc, #552]	; (800c140 <tcp_process+0x2b0>)
 800bf18:	f240 22e7 	movw	r2, #743	; 0x2e7
 800bf1c:	4989      	ldr	r1, [pc, #548]	; (800c144 <tcp_process+0x2b4>)
 800bf1e:	488a      	ldr	r0, [pc, #552]	; (800c148 <tcp_process+0x2b8>)
 800bf20:	f005 fff0 	bl	8011f04 <iprintf>
      recv_flags |= TF_RESET;
 800bf24:	4b89      	ldr	r3, [pc, #548]	; (800c14c <tcp_process+0x2bc>)
 800bf26:	781b      	ldrb	r3, [r3, #0]
 800bf28:	f043 0308 	orr.w	r3, r3, #8
 800bf2c:	b2da      	uxtb	r2, r3
 800bf2e:	4b87      	ldr	r3, [pc, #540]	; (800c14c <tcp_process+0x2bc>)
 800bf30:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	7e9b      	ldrb	r3, [r3, #26]
 800bf36:	f023 0301 	bic.w	r3, r3, #1
 800bf3a:	b2da      	uxtb	r2, r3
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800bf40:	f06f 030d 	mvn.w	r3, #13
 800bf44:	e34d      	b.n	800c5e2 <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800bf46:	2300      	movs	r3, #0
 800bf48:	e34b      	b.n	800c5e2 <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800bf4a:	4b7a      	ldr	r3, [pc, #488]	; (800c134 <tcp_process+0x2a4>)
 800bf4c:	781b      	ldrb	r3, [r3, #0]
 800bf4e:	f003 0302 	and.w	r3, r3, #2
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d010      	beq.n	800bf78 <tcp_process+0xe8>
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	7d1b      	ldrb	r3, [r3, #20]
 800bf5a:	2b02      	cmp	r3, #2
 800bf5c:	d00c      	beq.n	800bf78 <tcp_process+0xe8>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	7d1b      	ldrb	r3, [r3, #20]
 800bf62:	2b03      	cmp	r3, #3
 800bf64:	d008      	beq.n	800bf78 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	7e9b      	ldrb	r3, [r3, #26]
 800bf6a:	f043 0302 	orr.w	r3, r3, #2
 800bf6e:	b2da      	uxtb	r2, r3
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800bf74:	2300      	movs	r3, #0
 800bf76:	e334      	b.n	800c5e2 <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	7e9b      	ldrb	r3, [r3, #26]
 800bf7c:	f003 0310 	and.w	r3, r3, #16
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d103      	bne.n	800bf8c <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800bf84:	4b72      	ldr	r3, [pc, #456]	; (800c150 <tcp_process+0x2c0>)
 800bf86:	681a      	ldr	r2, [r3, #0]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f001 fbdd 	bl	800d754 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	7d1b      	ldrb	r3, [r3, #20]
 800bf9e:	3b02      	subs	r3, #2
 800bfa0:	2b07      	cmp	r3, #7
 800bfa2:	f200 830e 	bhi.w	800c5c2 <tcp_process+0x732>
 800bfa6:	a201      	add	r2, pc, #4	; (adr r2, 800bfac <tcp_process+0x11c>)
 800bfa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfac:	0800bfcd 	.word	0x0800bfcd
 800bfb0:	0800c1c5 	.word	0x0800c1c5
 800bfb4:	0800c31d 	.word	0x0800c31d
 800bfb8:	0800c347 	.word	0x0800c347
 800bfbc:	0800c471 	.word	0x0800c471
 800bfc0:	0800c31d 	.word	0x0800c31d
 800bfc4:	0800c4fd 	.word	0x0800c4fd
 800bfc8:	0800c58d 	.word	0x0800c58d
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800bfcc:	4b59      	ldr	r3, [pc, #356]	; (800c134 <tcp_process+0x2a4>)
 800bfce:	781b      	ldrb	r3, [r3, #0]
 800bfd0:	f003 0310 	and.w	r3, r3, #16
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	f000 80cb 	beq.w	800c170 <tcp_process+0x2e0>
 800bfda:	4b56      	ldr	r3, [pc, #344]	; (800c134 <tcp_process+0x2a4>)
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	f003 0302 	and.w	r3, r3, #2
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	f000 80c4 	beq.w	800c170 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfec:	1c5a      	adds	r2, r3, #1
 800bfee:	4b52      	ldr	r3, [pc, #328]	; (800c138 <tcp_process+0x2a8>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	429a      	cmp	r2, r3
 800bff4:	f040 80bc 	bne.w	800c170 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800bff8:	4b50      	ldr	r3, [pc, #320]	; (800c13c <tcp_process+0x2ac>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	1c5a      	adds	r2, r3, #1
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800c00a:	4b4b      	ldr	r3, [pc, #300]	; (800c138 <tcp_process+0x2a8>)
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800c012:	4b50      	ldr	r3, [pc, #320]	; (800c154 <tcp_process+0x2c4>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	89db      	ldrh	r3, [r3, #14]
 800c018:	b29a      	uxth	r2, r3
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c02c:	4b43      	ldr	r3, [pc, #268]	; (800c13c <tcp_process+0x2ac>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	1e5a      	subs	r2, r3, #1
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2204      	movs	r2, #4
 800c03a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	3304      	adds	r3, #4
 800c044:	4619      	mov	r1, r3
 800c046:	4610      	mov	r0, r2
 800c048:	f7ff f95c 	bl	800b304 <tcp_eff_send_mss_impl>
 800c04c:	4603      	mov	r3, r0
 800c04e:	461a      	mov	r2, r3
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c058:	005b      	lsls	r3, r3, #1
 800c05a:	f241 121c 	movw	r2, #4380	; 0x111c
 800c05e:	429a      	cmp	r2, r3
 800c060:	bf38      	it	cc
 800c062:	461a      	movcc	r2, r3
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	4293      	cmp	r3, r2
 800c06c:	bf28      	it	cs
 800c06e:	4613      	movcs	r3, r2
 800c070:	b29a      	uxth	r2, r3
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d106      	bne.n	800c090 <tcp_process+0x200>
 800c082:	4b2f      	ldr	r3, [pc, #188]	; (800c140 <tcp_process+0x2b0>)
 800c084:	f240 321a 	movw	r2, #794	; 0x31a
 800c088:	4933      	ldr	r1, [pc, #204]	; (800c158 <tcp_process+0x2c8>)
 800c08a:	482f      	ldr	r0, [pc, #188]	; (800c148 <tcp_process+0x2b8>)
 800c08c:	f005 ff3a 	bl	8011f04 <iprintf>
      --pcb->snd_queuelen;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c096:	3b01      	subs	r3, #1
 800c098:	b29a      	uxth	r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0a4:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800c0a6:	69fb      	ldr	r3, [r7, #28]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d111      	bne.n	800c0d0 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c0b0:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800c0b2:	69fb      	ldr	r3, [r7, #28]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d106      	bne.n	800c0c6 <tcp_process+0x236>
 800c0b8:	4b21      	ldr	r3, [pc, #132]	; (800c140 <tcp_process+0x2b0>)
 800c0ba:	f240 3222 	movw	r2, #802	; 0x322
 800c0be:	4927      	ldr	r1, [pc, #156]	; (800c15c <tcp_process+0x2cc>)
 800c0c0:	4821      	ldr	r0, [pc, #132]	; (800c148 <tcp_process+0x2b8>)
 800c0c2:	f005 ff1f 	bl	8011f04 <iprintf>
        pcb->unsent = rseg->next;
 800c0c6:	69fb      	ldr	r3, [r7, #28]
 800c0c8:	681a      	ldr	r2, [r3, #0]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	669a      	str	r2, [r3, #104]	; 0x68
 800c0ce:	e003      	b.n	800c0d8 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800c0d0:	69fb      	ldr	r3, [r7, #28]
 800c0d2:	681a      	ldr	r2, [r3, #0]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800c0d8:	69f8      	ldr	r0, [r7, #28]
 800c0da:	f7fe fde7 	bl	800acac <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d104      	bne.n	800c0f0 <tcp_process+0x260>
        pcb->rtime = -1;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c0ec:	861a      	strh	r2, [r3, #48]	; 0x30
 800c0ee:	e006      	b.n	800c0fe <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c104:	2b00      	cmp	r3, #0
 800c106:	d00a      	beq.n	800c11e <tcp_process+0x28e>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	6910      	ldr	r0, [r2, #16]
 800c112:	2200      	movs	r2, #0
 800c114:	6879      	ldr	r1, [r7, #4]
 800c116:	4798      	blx	r3
 800c118:	4603      	mov	r3, r0
 800c11a:	76bb      	strb	r3, [r7, #26]
 800c11c:	e001      	b.n	800c122 <tcp_process+0x292>
 800c11e:	2300      	movs	r3, #0
 800c120:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800c122:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c126:	f113 0f0d 	cmn.w	r3, #13
 800c12a:	d119      	bne.n	800c160 <tcp_process+0x2d0>
        return ERR_ABRT;
 800c12c:	f06f 030c 	mvn.w	r3, #12
 800c130:	e257      	b.n	800c5e2 <tcp_process+0x752>
 800c132:	bf00      	nop
 800c134:	2000432c 	.word	0x2000432c
 800c138:	20004324 	.word	0x20004324
 800c13c:	20004320 	.word	0x20004320
 800c140:	08013b04 	.word	0x08013b04
 800c144:	08013cbc 	.word	0x08013cbc
 800c148:	08013b48 	.word	0x08013b48
 800c14c:	2000432d 	.word	0x2000432d
 800c150:	2000b12c 	.word	0x2000b12c
 800c154:	20004310 	.word	0x20004310
 800c158:	08013cdc 	.word	0x08013cdc
 800c15c:	08013cf4 	.word	0x08013cf4
      }
      tcp_ack_now(pcb);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	7e9b      	ldrb	r3, [r3, #26]
 800c164:	f043 0302 	orr.w	r3, r3, #2
 800c168:	b2da      	uxtb	r2, r3
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800c16e:	e22a      	b.n	800c5c6 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800c170:	4b9f      	ldr	r3, [pc, #636]	; (800c3f0 <tcp_process+0x560>)
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	f003 0310 	and.w	r3, r3, #16
 800c178:	2b00      	cmp	r3, #0
 800c17a:	f000 8224 	beq.w	800c5c6 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c17e:	4b9d      	ldr	r3, [pc, #628]	; (800c3f4 <tcp_process+0x564>)
 800c180:	6818      	ldr	r0, [r3, #0]
 800c182:	4b9d      	ldr	r3, [pc, #628]	; (800c3f8 <tcp_process+0x568>)
 800c184:	881b      	ldrh	r3, [r3, #0]
 800c186:	461a      	mov	r2, r3
 800c188:	4b9c      	ldr	r3, [pc, #624]	; (800c3fc <tcp_process+0x56c>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c18e:	4b9c      	ldr	r3, [pc, #624]	; (800c400 <tcp_process+0x570>)
 800c190:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c192:	885b      	ldrh	r3, [r3, #2]
 800c194:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c196:	4a9a      	ldr	r2, [pc, #616]	; (800c400 <tcp_process+0x570>)
 800c198:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c19a:	8812      	ldrh	r2, [r2, #0]
 800c19c:	b292      	uxth	r2, r2
 800c19e:	9201      	str	r2, [sp, #4]
 800c1a0:	9300      	str	r3, [sp, #0]
 800c1a2:	4b98      	ldr	r3, [pc, #608]	; (800c404 <tcp_process+0x574>)
 800c1a4:	4a98      	ldr	r2, [pc, #608]	; (800c408 <tcp_process+0x578>)
 800c1a6:	f002 fc9b 	bl	800eae0 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c1b0:	2b05      	cmp	r3, #5
 800c1b2:	f200 8208 	bhi.w	800c5c6 <tcp_process+0x736>
        pcb->rtime = 0;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f002 fd05 	bl	800ebcc <tcp_rexmit_rto>
    break;
 800c1c2:	e200      	b.n	800c5c6 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800c1c4:	4b8a      	ldr	r3, [pc, #552]	; (800c3f0 <tcp_process+0x560>)
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	f003 0310 	and.w	r3, r3, #16
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	f000 8091 	beq.w	800c2f4 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800c1d2:	4b88      	ldr	r3, [pc, #544]	; (800c3f4 <tcp_process+0x564>)
 800c1d4:	681a      	ldr	r2, [r3, #0]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1da:	1ad3      	subs	r3, r2, r3
 800c1dc:	3b01      	subs	r3, #1
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	db71      	blt.n	800c2c6 <tcp_process+0x436>
 800c1e2:	4b84      	ldr	r3, [pc, #528]	; (800c3f4 <tcp_process+0x564>)
 800c1e4:	681a      	ldr	r2, [r3, #0]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1ea:	1ad3      	subs	r3, r2, r3
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	dc6a      	bgt.n	800c2c6 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2204      	movs	r2, #4
 800c1f4:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d00b      	beq.n	800c216 <tcp_process+0x386>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c202:	699b      	ldr	r3, [r3, #24]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d106      	bne.n	800c216 <tcp_process+0x386>
 800c208:	4b80      	ldr	r3, [pc, #512]	; (800c40c <tcp_process+0x57c>)
 800c20a:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c20e:	4980      	ldr	r1, [pc, #512]	; (800c410 <tcp_process+0x580>)
 800c210:	4880      	ldr	r0, [pc, #512]	; (800c414 <tcp_process+0x584>)
 800c212:	f005 fe77 	bl	8011f04 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d102      	bne.n	800c224 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800c21e:	23fa      	movs	r3, #250	; 0xfa
 800c220:	76bb      	strb	r3, [r7, #26]
 800c222:	e011      	b.n	800c248 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c228:	699b      	ldr	r3, [r3, #24]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d00a      	beq.n	800c244 <tcp_process+0x3b4>
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c232:	699b      	ldr	r3, [r3, #24]
 800c234:	687a      	ldr	r2, [r7, #4]
 800c236:	6910      	ldr	r0, [r2, #16]
 800c238:	2200      	movs	r2, #0
 800c23a:	6879      	ldr	r1, [r7, #4]
 800c23c:	4798      	blx	r3
 800c23e:	4603      	mov	r3, r0
 800c240:	76bb      	strb	r3, [r7, #26]
 800c242:	e001      	b.n	800c248 <tcp_process+0x3b8>
 800c244:	23f0      	movs	r3, #240	; 0xf0
 800c246:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800c248:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d00a      	beq.n	800c266 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800c250:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c254:	f113 0f0d 	cmn.w	r3, #13
 800c258:	d002      	beq.n	800c260 <tcp_process+0x3d0>
            tcp_abort(pcb);
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f7fd ff3e 	bl	800a0dc <tcp_abort>
          }
          return ERR_ABRT;
 800c260:	f06f 030c 	mvn.w	r3, #12
 800c264:	e1bd      	b.n	800c5e2 <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 fa42 	bl	800c6f0 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800c26c:	4b6a      	ldr	r3, [pc, #424]	; (800c418 <tcp_process+0x588>)
 800c26e:	881b      	ldrh	r3, [r3, #0]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d005      	beq.n	800c280 <tcp_process+0x3f0>
          recv_acked--;
 800c274:	4b68      	ldr	r3, [pc, #416]	; (800c418 <tcp_process+0x588>)
 800c276:	881b      	ldrh	r3, [r3, #0]
 800c278:	3b01      	subs	r3, #1
 800c27a:	b29a      	uxth	r2, r3
 800c27c:	4b66      	ldr	r3, [pc, #408]	; (800c418 <tcp_process+0x588>)
 800c27e:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c284:	005b      	lsls	r3, r3, #1
 800c286:	f241 121c 	movw	r2, #4380	; 0x111c
 800c28a:	429a      	cmp	r2, r3
 800c28c:	bf38      	it	cc
 800c28e:	461a      	movcc	r2, r3
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	4293      	cmp	r3, r2
 800c298:	bf28      	it	cs
 800c29a:	4613      	movcs	r3, r2
 800c29c:	b29a      	uxth	r2, r3
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800c2a4:	4b5d      	ldr	r3, [pc, #372]	; (800c41c <tcp_process+0x58c>)
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	f003 0320 	and.w	r3, r3, #32
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d034      	beq.n	800c31a <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	7e9b      	ldrb	r3, [r3, #26]
 800c2b4:	f043 0302 	orr.w	r3, r3, #2
 800c2b8:	b2da      	uxtb	r2, r3
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2207      	movs	r2, #7
 800c2c2:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800c2c4:	e029      	b.n	800c31a <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c2c6:	4b4b      	ldr	r3, [pc, #300]	; (800c3f4 <tcp_process+0x564>)
 800c2c8:	6818      	ldr	r0, [r3, #0]
 800c2ca:	4b4b      	ldr	r3, [pc, #300]	; (800c3f8 <tcp_process+0x568>)
 800c2cc:	881b      	ldrh	r3, [r3, #0]
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	4b4a      	ldr	r3, [pc, #296]	; (800c3fc <tcp_process+0x56c>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c2d6:	4b4a      	ldr	r3, [pc, #296]	; (800c400 <tcp_process+0x570>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c2da:	885b      	ldrh	r3, [r3, #2]
 800c2dc:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c2de:	4a48      	ldr	r2, [pc, #288]	; (800c400 <tcp_process+0x570>)
 800c2e0:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c2e2:	8812      	ldrh	r2, [r2, #0]
 800c2e4:	b292      	uxth	r2, r2
 800c2e6:	9201      	str	r2, [sp, #4]
 800c2e8:	9300      	str	r3, [sp, #0]
 800c2ea:	4b46      	ldr	r3, [pc, #280]	; (800c404 <tcp_process+0x574>)
 800c2ec:	4a46      	ldr	r2, [pc, #280]	; (800c408 <tcp_process+0x578>)
 800c2ee:	f002 fbf7 	bl	800eae0 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800c2f2:	e16a      	b.n	800c5ca <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c2f4:	4b3e      	ldr	r3, [pc, #248]	; (800c3f0 <tcp_process+0x560>)
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	f003 0302 	and.w	r3, r3, #2
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	f000 8164 	beq.w	800c5ca <tcp_process+0x73a>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c306:	1e5a      	subs	r2, r3, #1
 800c308:	4b3c      	ldr	r3, [pc, #240]	; (800c3fc <tcp_process+0x56c>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	429a      	cmp	r2, r3
 800c30e:	f040 815c 	bne.w	800c5ca <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f002 fc90 	bl	800ec38 <tcp_rexmit>
    break;
 800c318:	e157      	b.n	800c5ca <tcp_process+0x73a>
 800c31a:	e156      	b.n	800c5ca <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f000 f9e7 	bl	800c6f0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c322:	4b3e      	ldr	r3, [pc, #248]	; (800c41c <tcp_process+0x58c>)
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	f003 0320 	and.w	r3, r3, #32
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	f000 814f 	beq.w	800c5ce <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	7e9b      	ldrb	r3, [r3, #26]
 800c334:	f043 0302 	orr.w	r3, r3, #2
 800c338:	b2da      	uxtb	r2, r3
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2207      	movs	r2, #7
 800c342:	751a      	strb	r2, [r3, #20]
    }
    break;
 800c344:	e143      	b.n	800c5ce <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 f9d2 	bl	800c6f0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800c34c:	4b33      	ldr	r3, [pc, #204]	; (800c41c <tcp_process+0x58c>)
 800c34e:	781b      	ldrb	r3, [r3, #0]
 800c350:	f003 0320 	and.w	r3, r3, #32
 800c354:	2b00      	cmp	r3, #0
 800c356:	d074      	beq.n	800c442 <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c358:	4b25      	ldr	r3, [pc, #148]	; (800c3f0 <tcp_process+0x560>)
 800c35a:	781b      	ldrb	r3, [r3, #0]
 800c35c:	f003 0310 	and.w	r3, r3, #16
 800c360:	2b00      	cmp	r3, #0
 800c362:	d063      	beq.n	800c42c <tcp_process+0x59c>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c368:	4b22      	ldr	r3, [pc, #136]	; (800c3f4 <tcp_process+0x564>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d15d      	bne.n	800c42c <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c374:	2b00      	cmp	r3, #0
 800c376:	d159      	bne.n	800c42c <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	7e9b      	ldrb	r3, [r3, #26]
 800c37c:	f043 0302 	orr.w	r3, r3, #2
 800c380:	b2da      	uxtb	r2, r3
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f7fe fee8 	bl	800b15c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c38c:	4b24      	ldr	r3, [pc, #144]	; (800c420 <tcp_process+0x590>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	429a      	cmp	r2, r3
 800c394:	d105      	bne.n	800c3a2 <tcp_process+0x512>
 800c396:	4b22      	ldr	r3, [pc, #136]	; (800c420 <tcp_process+0x590>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	68db      	ldr	r3, [r3, #12]
 800c39c:	4a20      	ldr	r2, [pc, #128]	; (800c420 <tcp_process+0x590>)
 800c39e:	6013      	str	r3, [r2, #0]
 800c3a0:	e013      	b.n	800c3ca <tcp_process+0x53a>
 800c3a2:	4b1f      	ldr	r3, [pc, #124]	; (800c420 <tcp_process+0x590>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	617b      	str	r3, [r7, #20]
 800c3a8:	e00c      	b.n	800c3c4 <tcp_process+0x534>
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	68db      	ldr	r3, [r3, #12]
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d104      	bne.n	800c3be <tcp_process+0x52e>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	68da      	ldr	r2, [r3, #12]
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	60da      	str	r2, [r3, #12]
 800c3bc:	e005      	b.n	800c3ca <tcp_process+0x53a>
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	68db      	ldr	r3, [r3, #12]
 800c3c2:	617b      	str	r3, [r7, #20]
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d1ef      	bne.n	800c3aa <tcp_process+0x51a>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	60da      	str	r2, [r3, #12]
 800c3d0:	4b14      	ldr	r3, [pc, #80]	; (800c424 <tcp_process+0x594>)
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	220a      	movs	r2, #10
 800c3da:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c3dc:	4b12      	ldr	r3, [pc, #72]	; (800c428 <tcp_process+0x598>)
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	60da      	str	r2, [r3, #12]
 800c3e4:	4a10      	ldr	r2, [pc, #64]	; (800c428 <tcp_process+0x598>)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6013      	str	r3, [r2, #0]
 800c3ea:	f002 fdc1 	bl	800ef70 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800c3ee:	e0f0      	b.n	800c5d2 <tcp_process+0x742>
 800c3f0:	2000432c 	.word	0x2000432c
 800c3f4:	20004324 	.word	0x20004324
 800c3f8:	2000432a 	.word	0x2000432a
 800c3fc:	20004320 	.word	0x20004320
 800c400:	20004310 	.word	0x20004310
 800c404:	20007a28 	.word	0x20007a28
 800c408:	20007a2c 	.word	0x20007a2c
 800c40c:	08013b04 	.word	0x08013b04
 800c410:	08013d08 	.word	0x08013d08
 800c414:	08013b48 	.word	0x08013b48
 800c418:	20004328 	.word	0x20004328
 800c41c:	2000432d 	.word	0x2000432d
 800c420:	2000b128 	.word	0x2000b128
 800c424:	2000b124 	.word	0x2000b124
 800c428:	2000b138 	.word	0x2000b138
        tcp_ack_now(pcb);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	7e9b      	ldrb	r3, [r3, #26]
 800c430:	f043 0302 	orr.w	r3, r3, #2
 800c434:	b2da      	uxtb	r2, r3
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2208      	movs	r2, #8
 800c43e:	751a      	strb	r2, [r3, #20]
    break;
 800c440:	e0c7      	b.n	800c5d2 <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c442:	4b6a      	ldr	r3, [pc, #424]	; (800c5ec <tcp_process+0x75c>)
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	f003 0310 	and.w	r3, r3, #16
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	f000 80c1 	beq.w	800c5d2 <tcp_process+0x742>
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c454:	4b66      	ldr	r3, [pc, #408]	; (800c5f0 <tcp_process+0x760>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	429a      	cmp	r2, r3
 800c45a:	f040 80ba 	bne.w	800c5d2 <tcp_process+0x742>
               pcb->unsent == NULL) {
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c462:	2b00      	cmp	r3, #0
 800c464:	f040 80b5 	bne.w	800c5d2 <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2206      	movs	r2, #6
 800c46c:	751a      	strb	r2, [r3, #20]
    break;
 800c46e:	e0b0      	b.n	800c5d2 <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f000 f93d 	bl	800c6f0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800c476:	4b5f      	ldr	r3, [pc, #380]	; (800c5f4 <tcp_process+0x764>)
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	f003 0320 	and.w	r3, r3, #32
 800c47e:	2b00      	cmp	r3, #0
 800c480:	f000 80a9 	beq.w	800c5d6 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	7e9b      	ldrb	r3, [r3, #26]
 800c488:	f043 0302 	orr.w	r3, r3, #2
 800c48c:	b2da      	uxtb	r2, r3
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f7fe fe62 	bl	800b15c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c498:	4b57      	ldr	r3, [pc, #348]	; (800c5f8 <tcp_process+0x768>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	687a      	ldr	r2, [r7, #4]
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d105      	bne.n	800c4ae <tcp_process+0x61e>
 800c4a2:	4b55      	ldr	r3, [pc, #340]	; (800c5f8 <tcp_process+0x768>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	68db      	ldr	r3, [r3, #12]
 800c4a8:	4a53      	ldr	r2, [pc, #332]	; (800c5f8 <tcp_process+0x768>)
 800c4aa:	6013      	str	r3, [r2, #0]
 800c4ac:	e013      	b.n	800c4d6 <tcp_process+0x646>
 800c4ae:	4b52      	ldr	r3, [pc, #328]	; (800c5f8 <tcp_process+0x768>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	613b      	str	r3, [r7, #16]
 800c4b4:	e00c      	b.n	800c4d0 <tcp_process+0x640>
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	68db      	ldr	r3, [r3, #12]
 800c4ba:	687a      	ldr	r2, [r7, #4]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d104      	bne.n	800c4ca <tcp_process+0x63a>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	68da      	ldr	r2, [r3, #12]
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	60da      	str	r2, [r3, #12]
 800c4c8:	e005      	b.n	800c4d6 <tcp_process+0x646>
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	68db      	ldr	r3, [r3, #12]
 800c4ce:	613b      	str	r3, [r7, #16]
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d1ef      	bne.n	800c4b6 <tcp_process+0x626>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	60da      	str	r2, [r3, #12]
 800c4dc:	4b47      	ldr	r3, [pc, #284]	; (800c5fc <tcp_process+0x76c>)
 800c4de:	2201      	movs	r2, #1
 800c4e0:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	220a      	movs	r2, #10
 800c4e6:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800c4e8:	4b45      	ldr	r3, [pc, #276]	; (800c600 <tcp_process+0x770>)
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	60da      	str	r2, [r3, #12]
 800c4f0:	4a43      	ldr	r2, [pc, #268]	; (800c600 <tcp_process+0x770>)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6013      	str	r3, [r2, #0]
 800c4f6:	f002 fd3b 	bl	800ef70 <tcp_timer_needed>
    }
    break;
 800c4fa:	e06c      	b.n	800c5d6 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f000 f8f7 	bl	800c6f0 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c502:	4b3a      	ldr	r3, [pc, #232]	; (800c5ec <tcp_process+0x75c>)
 800c504:	781b      	ldrb	r3, [r3, #0]
 800c506:	f003 0310 	and.w	r3, r3, #16
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d065      	beq.n	800c5da <tcp_process+0x74a>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c512:	4b37      	ldr	r3, [pc, #220]	; (800c5f0 <tcp_process+0x760>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	429a      	cmp	r2, r3
 800c518:	d15f      	bne.n	800c5da <tcp_process+0x74a>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d15b      	bne.n	800c5da <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f7fe fe1a 	bl	800b15c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c528:	4b33      	ldr	r3, [pc, #204]	; (800c5f8 <tcp_process+0x768>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	429a      	cmp	r2, r3
 800c530:	d105      	bne.n	800c53e <tcp_process+0x6ae>
 800c532:	4b31      	ldr	r3, [pc, #196]	; (800c5f8 <tcp_process+0x768>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	68db      	ldr	r3, [r3, #12]
 800c538:	4a2f      	ldr	r2, [pc, #188]	; (800c5f8 <tcp_process+0x768>)
 800c53a:	6013      	str	r3, [r2, #0]
 800c53c:	e013      	b.n	800c566 <tcp_process+0x6d6>
 800c53e:	4b2e      	ldr	r3, [pc, #184]	; (800c5f8 <tcp_process+0x768>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	60fb      	str	r3, [r7, #12]
 800c544:	e00c      	b.n	800c560 <tcp_process+0x6d0>
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	68db      	ldr	r3, [r3, #12]
 800c54a:	687a      	ldr	r2, [r7, #4]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d104      	bne.n	800c55a <tcp_process+0x6ca>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	68da      	ldr	r2, [r3, #12]
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	60da      	str	r2, [r3, #12]
 800c558:	e005      	b.n	800c566 <tcp_process+0x6d6>
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	68db      	ldr	r3, [r3, #12]
 800c55e:	60fb      	str	r3, [r7, #12]
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d1ef      	bne.n	800c546 <tcp_process+0x6b6>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2200      	movs	r2, #0
 800c56a:	60da      	str	r2, [r3, #12]
 800c56c:	4b23      	ldr	r3, [pc, #140]	; (800c5fc <tcp_process+0x76c>)
 800c56e:	2201      	movs	r2, #1
 800c570:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	220a      	movs	r2, #10
 800c576:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800c578:	4b21      	ldr	r3, [pc, #132]	; (800c600 <tcp_process+0x770>)
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	60da      	str	r2, [r3, #12]
 800c580:	4a1f      	ldr	r2, [pc, #124]	; (800c600 <tcp_process+0x770>)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6013      	str	r3, [r2, #0]
 800c586:	f002 fcf3 	bl	800ef70 <tcp_timer_needed>
    }
    break;
 800c58a:	e026      	b.n	800c5da <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 f8af 	bl	800c6f0 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c592:	4b16      	ldr	r3, [pc, #88]	; (800c5ec <tcp_process+0x75c>)
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	f003 0310 	and.w	r3, r3, #16
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d01f      	beq.n	800c5de <tcp_process+0x74e>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c5a2:	4b13      	ldr	r3, [pc, #76]	; (800c5f0 <tcp_process+0x760>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d119      	bne.n	800c5de <tcp_process+0x74e>
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d115      	bne.n	800c5de <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800c5b2:	4b10      	ldr	r3, [pc, #64]	; (800c5f4 <tcp_process+0x764>)
 800c5b4:	781b      	ldrb	r3, [r3, #0]
 800c5b6:	f043 0310 	orr.w	r3, r3, #16
 800c5ba:	b2da      	uxtb	r2, r3
 800c5bc:	4b0d      	ldr	r3, [pc, #52]	; (800c5f4 <tcp_process+0x764>)
 800c5be:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c5c0:	e00d      	b.n	800c5de <tcp_process+0x74e>
  default:
    break;
 800c5c2:	bf00      	nop
 800c5c4:	e00c      	b.n	800c5e0 <tcp_process+0x750>
    break;
 800c5c6:	bf00      	nop
 800c5c8:	e00a      	b.n	800c5e0 <tcp_process+0x750>
    break;
 800c5ca:	bf00      	nop
 800c5cc:	e008      	b.n	800c5e0 <tcp_process+0x750>
    break;
 800c5ce:	bf00      	nop
 800c5d0:	e006      	b.n	800c5e0 <tcp_process+0x750>
    break;
 800c5d2:	bf00      	nop
 800c5d4:	e004      	b.n	800c5e0 <tcp_process+0x750>
    break;
 800c5d6:	bf00      	nop
 800c5d8:	e002      	b.n	800c5e0 <tcp_process+0x750>
    break;
 800c5da:	bf00      	nop
 800c5dc:	e000      	b.n	800c5e0 <tcp_process+0x750>
    break;
 800c5de:	bf00      	nop
  }
  return ERR_OK;
 800c5e0:	2300      	movs	r3, #0
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3720      	adds	r7, #32
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
 800c5ea:	bf00      	nop
 800c5ec:	2000432c 	.word	0x2000432c
 800c5f0:	20004324 	.word	0x20004324
 800c5f4:	2000432d 	.word	0x2000432d
 800c5f8:	2000b128 	.word	0x2000b128
 800c5fc:	2000b124 	.word	0x2000b124
 800c600:	2000b138 	.word	0x2000b138

0800c604 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c604:	b590      	push	{r4, r7, lr}
 800c606:	b085      	sub	sp, #20
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	68db      	ldr	r3, [r3, #12]
 800c612:	899b      	ldrh	r3, [r3, #12]
 800c614:	b29b      	uxth	r3, r3
 800c616:	4618      	mov	r0, r3
 800c618:	f7fb fe5c 	bl	80082d4 <lwip_htons>
 800c61c:	4603      	mov	r3, r0
 800c61e:	f003 0301 	and.w	r3, r3, #1
 800c622:	2b00      	cmp	r3, #0
 800c624:	d027      	beq.n	800c676 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800c626:	6838      	ldr	r0, [r7, #0]
 800c628:	f7fe fb2b 	bl	800ac82 <tcp_segs_free>
    next = NULL;
 800c62c:	2300      	movs	r3, #0
 800c62e:	603b      	str	r3, [r7, #0]
 800c630:	e055      	b.n	800c6de <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	68db      	ldr	r3, [r3, #12]
 800c636:	899b      	ldrh	r3, [r3, #12]
 800c638:	b29b      	uxth	r3, r3
 800c63a:	4618      	mov	r0, r3
 800c63c:	f7fb fe4a 	bl	80082d4 <lwip_htons>
 800c640:	4603      	mov	r3, r0
 800c642:	f003 0301 	and.w	r3, r3, #1
 800c646:	2b00      	cmp	r3, #0
 800c648:	d00d      	beq.n	800c666 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	68db      	ldr	r3, [r3, #12]
 800c64e:	899b      	ldrh	r3, [r3, #12]
 800c650:	b29c      	uxth	r4, r3
 800c652:	2001      	movs	r0, #1
 800c654:	f7fb fe3e 	bl	80082d4 <lwip_htons>
 800c658:	4603      	mov	r3, r0
 800c65a:	461a      	mov	r2, r3
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	68db      	ldr	r3, [r3, #12]
 800c660:	4322      	orrs	r2, r4
 800c662:	b292      	uxth	r2, r2
 800c664:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800c670:	68f8      	ldr	r0, [r7, #12]
 800c672:	f7fe fb1b 	bl	800acac <tcp_seg_free>
    while (next &&
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d00e      	beq.n	800c69a <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	891b      	ldrh	r3, [r3, #8]
 800c680:	461a      	mov	r2, r3
 800c682:	4b1a      	ldr	r3, [pc, #104]	; (800c6ec <tcp_oos_insert_segment+0xe8>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	441a      	add	r2, r3
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	68db      	ldr	r3, [r3, #12]
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	6839      	ldr	r1, [r7, #0]
 800c690:	8909      	ldrh	r1, [r1, #8]
 800c692:	440b      	add	r3, r1
 800c694:	1ad3      	subs	r3, r2, r3
    while (next &&
 800c696:	2b00      	cmp	r3, #0
 800c698:	dacb      	bge.n	800c632 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d01e      	beq.n	800c6de <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	891b      	ldrh	r3, [r3, #8]
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	4b11      	ldr	r3, [pc, #68]	; (800c6ec <tcp_oos_insert_segment+0xe8>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	441a      	add	r2, r3
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	68db      	ldr	r3, [r3, #12]
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	dd12      	ble.n	800c6de <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	68db      	ldr	r3, [r3, #12]
 800c6bc:	685b      	ldr	r3, [r3, #4]
 800c6be:	b29a      	uxth	r2, r3
 800c6c0:	4b0a      	ldr	r3, [pc, #40]	; (800c6ec <tcp_oos_insert_segment+0xe8>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	1ad3      	subs	r3, r2, r3
 800c6c8:	b29a      	uxth	r2, r3
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	685a      	ldr	r2, [r3, #4]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	891b      	ldrh	r3, [r3, #8]
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	4610      	mov	r0, r2
 800c6da:	f7fc fe79 	bl	80093d0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	683a      	ldr	r2, [r7, #0]
 800c6e2:	601a      	str	r2, [r3, #0]
}
 800c6e4:	bf00      	nop
 800c6e6:	3714      	adds	r7, #20
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd90      	pop	{r4, r7, pc}
 800c6ec:	20004320 	.word	0x20004320

0800c6f0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6f2:	b08d      	sub	sp, #52	; 0x34
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	7d1b      	ldrb	r3, [r3, #20]
 800c700:	2b03      	cmp	r3, #3
 800c702:	d806      	bhi.n	800c712 <tcp_receive+0x22>
 800c704:	4ba6      	ldr	r3, [pc, #664]	; (800c9a0 <tcp_receive+0x2b0>)
 800c706:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800c70a:	49a6      	ldr	r1, [pc, #664]	; (800c9a4 <tcp_receive+0x2b4>)
 800c70c:	48a6      	ldr	r0, [pc, #664]	; (800c9a8 <tcp_receive+0x2b8>)
 800c70e:	f005 fbf9 	bl	8011f04 <iprintf>

  if (flags & TCP_ACK) {
 800c712:	4ba6      	ldr	r3, [pc, #664]	; (800c9ac <tcp_receive+0x2bc>)
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	f003 0310 	and.w	r3, r3, #16
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	f000 82bf 	beq.w	800cc9e <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c726:	461a      	mov	r2, r3
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c72c:	4413      	add	r3, r2
 800c72e:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c734:	4b9e      	ldr	r3, [pc, #632]	; (800c9b0 <tcp_receive+0x2c0>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	1ad3      	subs	r3, r2, r3
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	db1b      	blt.n	800c776 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c742:	4b9b      	ldr	r3, [pc, #620]	; (800c9b0 <tcp_receive+0x2c0>)
 800c744:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c746:	429a      	cmp	r2, r3
 800c748:	d106      	bne.n	800c758 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c74e:	4b99      	ldr	r3, [pc, #612]	; (800c9b4 <tcp_receive+0x2c4>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	1ad3      	subs	r3, r2, r3
 800c754:	2b00      	cmp	r3, #0
 800c756:	db0e      	blt.n	800c776 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c75c:	4b95      	ldr	r3, [pc, #596]	; (800c9b4 <tcp_receive+0x2c4>)
 800c75e:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c760:	429a      	cmp	r2, r3
 800c762:	d141      	bne.n	800c7e8 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c764:	4b94      	ldr	r3, [pc, #592]	; (800c9b8 <tcp_receive+0x2c8>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	89db      	ldrh	r3, [r3, #14]
 800c76a:	b29a      	uxth	r2, r3
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c772:	429a      	cmp	r2, r3
 800c774:	d938      	bls.n	800c7e8 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c776:	4b90      	ldr	r3, [pc, #576]	; (800c9b8 <tcp_receive+0x2c8>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	89db      	ldrh	r3, [r3, #14]
 800c77c:	b29a      	uxth	r2, r3
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c790:	429a      	cmp	r2, r3
 800c792:	d205      	bcs.n	800c7a0 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800c7a0:	4b83      	ldr	r3, [pc, #524]	; (800c9b0 <tcp_receive+0x2c0>)
 800c7a2:	681a      	ldr	r2, [r3, #0]
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800c7a8:	4b82      	ldr	r3, [pc, #520]	; (800c9b4 <tcp_receive+0x2c4>)
 800c7aa:	681a      	ldr	r2, [r3, #0]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d10d      	bne.n	800c7d6 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d111      	bne.n	800c7e8 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800c7d4:	e008      	b.n	800c7e8 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d003      	beq.n	800c7e8 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c7e8:	4b72      	ldr	r3, [pc, #456]	; (800c9b4 <tcp_receive+0x2c4>)
 800c7ea:	681a      	ldr	r2, [r3, #0]
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7f0:	1ad3      	subs	r3, r2, r3
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	dc53      	bgt.n	800c89e <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800c7f6:	4b71      	ldr	r3, [pc, #452]	; (800c9bc <tcp_receive+0x2cc>)
 800c7f8:	881b      	ldrh	r3, [r3, #0]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d146      	bne.n	800c88c <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800c808:	4413      	add	r3, r2
 800c80a:	697a      	ldr	r2, [r7, #20]
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d13d      	bne.n	800c88c <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c816:	2b00      	cmp	r3, #0
 800c818:	db38      	blt.n	800c88c <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c81e:	4b65      	ldr	r3, [pc, #404]	; (800c9b4 <tcp_receive+0x2c4>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	429a      	cmp	r2, r3
 800c824:	d132      	bne.n	800c88c <tcp_receive+0x19c>
              found_dupack = 1;
 800c826:	2301      	movs	r3, #1
 800c828:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c830:	2bff      	cmp	r3, #255	; 0xff
 800c832:	d007      	beq.n	800c844 <tcp_receive+0x154>
                ++pcb->dupacks;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c83a:	3301      	adds	r3, #1
 800c83c:	b2da      	uxtb	r2, r3
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c84a:	2b03      	cmp	r3, #3
 800c84c:	d916      	bls.n	800c87c <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c858:	4413      	add	r3, r2
 800c85a:	b29a      	uxth	r2, r3
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c862:	429a      	cmp	r2, r3
 800c864:	d912      	bls.n	800c88c <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c870:	4413      	add	r3, r2
 800c872:	b29a      	uxth	r2, r3
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c87a:	e007      	b.n	800c88c <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c882:	2b03      	cmp	r3, #3
 800c884:	d102      	bne.n	800c88c <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f002 fa26 	bl	800ecd8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c88c:	69fb      	ldr	r3, [r7, #28]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	f040 8169 	bne.w	800cb66 <tcp_receive+0x476>
        pcb->dupacks = 0;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2200      	movs	r2, #0
 800c898:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c89c:	e163      	b.n	800cb66 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800c89e:	4b45      	ldr	r3, [pc, #276]	; (800c9b4 <tcp_receive+0x2c4>)
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8a6:	1ad3      	subs	r3, r2, r3
 800c8a8:	3b01      	subs	r3, #1
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	f2c0 8107 	blt.w	800cabe <tcp_receive+0x3ce>
 800c8b0:	4b40      	ldr	r3, [pc, #256]	; (800c9b4 <tcp_receive+0x2c4>)
 800c8b2:	681a      	ldr	r2, [r3, #0]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8b8:	1ad3      	subs	r3, r2, r3
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	f300 80ff 	bgt.w	800cabe <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	7e9b      	ldrb	r3, [r3, #26]
 800c8c4:	f003 0304 	and.w	r3, r3, #4
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d00c      	beq.n	800c8e6 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	7e9b      	ldrb	r3, [r3, #26]
 800c8d0:	f023 0304 	bic.w	r3, r3, #4
 800c8d4:	b2da      	uxtb	r2, r3
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c8f4:	10db      	asrs	r3, r3, #3
 800c8f6:	b21b      	sxth	r3, r3
 800c8f8:	b29a      	uxth	r2, r3
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c900:	b29b      	uxth	r3, r3
 800c902:	4413      	add	r3, r2
 800c904:	b29b      	uxth	r3, r3
 800c906:	b21a      	sxth	r2, r3
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2200      	movs	r2, #0
 800c912:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800c916:	4b27      	ldr	r3, [pc, #156]	; (800c9b4 <tcp_receive+0x2c4>)
 800c918:	681a      	ldr	r2, [r3, #0]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	7d1b      	ldrb	r3, [r3, #20]
 800c922:	2b03      	cmp	r3, #3
 800c924:	f240 8094 	bls.w	800ca50 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c934:	429a      	cmp	r2, r3
 800c936:	d216      	bcs.n	800c966 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c942:	4413      	add	r3, r2
 800c944:	b29a      	uxth	r2, r3
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d97f      	bls.n	800ca50 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c95a:	4413      	add	r3, r2
 800c95c:	b29a      	uxth	r2, r3
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c964:	e074      	b.n	800ca50 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c970:	4619      	mov	r1, r3
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c976:	fb03 f301 	mul.w	r3, r3, r1
 800c97a:	6879      	ldr	r1, [r7, #4]
 800c97c:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800c980:	fb93 f3f1 	sdiv	r3, r3, r1
 800c984:	b29b      	uxth	r3, r3
 800c986:	4413      	add	r3, r2
 800c988:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c990:	8a7a      	ldrh	r2, [r7, #18]
 800c992:	429a      	cmp	r2, r3
 800c994:	d95c      	bls.n	800ca50 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	8a7a      	ldrh	r2, [r7, #18]
 800c99a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800c99e:	e057      	b.n	800ca50 <tcp_receive+0x360>
 800c9a0:	08013b04 	.word	0x08013b04
 800c9a4:	08013d28 	.word	0x08013d28
 800c9a8:	08013b48 	.word	0x08013b48
 800c9ac:	2000432c 	.word	0x2000432c
 800c9b0:	20004320 	.word	0x20004320
 800c9b4:	20004324 	.word	0x20004324
 800c9b8:	20004310 	.word	0x20004310
 800c9bc:	2000432a 	.word	0x2000432a
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9ca:	681a      	ldr	r2, [r3, #0]
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800c9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d8:	685b      	ldr	r3, [r3, #4]
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7fc ff06 	bl	80097ec <pbuf_clen>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	429c      	cmp	r4, r3
 800c9e4:	d206      	bcs.n	800c9f4 <tcp_receive+0x304>
 800c9e6:	4b70      	ldr	r3, [pc, #448]	; (800cba8 <tcp_receive+0x4b8>)
 800c9e8:	f240 429e 	movw	r2, #1182	; 0x49e
 800c9ec:	496f      	ldr	r1, [pc, #444]	; (800cbac <tcp_receive+0x4bc>)
 800c9ee:	4870      	ldr	r0, [pc, #448]	; (800cbb0 <tcp_receive+0x4c0>)
 800c9f0:	f005 fa88 	bl	8011f04 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800c9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f6:	685b      	ldr	r3, [r3, #4]
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f7fc fef7 	bl	80097ec <pbuf_clen>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	461a      	mov	r2, r3
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ca08:	1a9b      	subs	r3, r3, r2
 800ca0a:	b29a      	uxth	r2, r3
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800ca12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca14:	891a      	ldrh	r2, [r3, #8]
 800ca16:	4b67      	ldr	r3, [pc, #412]	; (800cbb4 <tcp_receive+0x4c4>)
 800ca18:	881b      	ldrh	r3, [r3, #0]
 800ca1a:	4413      	add	r3, r2
 800ca1c:	b29a      	uxth	r2, r3
 800ca1e:	4b65      	ldr	r3, [pc, #404]	; (800cbb4 <tcp_receive+0x4c4>)
 800ca20:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800ca22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca24:	f7fe f942 	bl	800acac <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d00e      	beq.n	800ca50 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d10a      	bne.n	800ca50 <tcp_receive+0x360>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d106      	bne.n	800ca50 <tcp_receive+0x360>
 800ca42:	4b59      	ldr	r3, [pc, #356]	; (800cba8 <tcp_receive+0x4b8>)
 800ca44:	f240 42a6 	movw	r2, #1190	; 0x4a6
 800ca48:	495b      	ldr	r1, [pc, #364]	; (800cbb8 <tcp_receive+0x4c8>)
 800ca4a:	4859      	ldr	r0, [pc, #356]	; (800cbb0 <tcp_receive+0x4c0>)
 800ca4c:	f005 fa5a 	bl	8011f04 <iprintf>
      while (pcb->unacked != NULL &&
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d022      	beq.n	800ca9e <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca5c:	68db      	ldr	r3, [r3, #12]
 800ca5e:	685b      	ldr	r3, [r3, #4]
 800ca60:	4618      	mov	r0, r3
 800ca62:	f7fb fc44 	bl	80082ee <lwip_htonl>
 800ca66:	4604      	mov	r4, r0
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca6c:	891b      	ldrh	r3, [r3, #8]
 800ca6e:	461d      	mov	r5, r3
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca74:	68db      	ldr	r3, [r3, #12]
 800ca76:	899b      	ldrh	r3, [r3, #12]
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f7fb fc2a 	bl	80082d4 <lwip_htons>
 800ca80:	4603      	mov	r3, r0
 800ca82:	f003 0303 	and.w	r3, r3, #3
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d001      	beq.n	800ca8e <tcp_receive+0x39e>
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	e000      	b.n	800ca90 <tcp_receive+0x3a0>
 800ca8e:	2300      	movs	r3, #0
 800ca90:	442b      	add	r3, r5
 800ca92:	18e2      	adds	r2, r4, r3
 800ca94:	4b49      	ldr	r3, [pc, #292]	; (800cbbc <tcp_receive+0x4cc>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	dd90      	ble.n	800c9c0 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d104      	bne.n	800cab0 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800caac:	861a      	strh	r2, [r3, #48]	; 0x30
 800caae:	e002      	b.n	800cab6 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2200      	movs	r2, #0
 800cab4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2200      	movs	r2, #0
 800caba:	76da      	strb	r2, [r3, #27]
 800cabc:	e002      	b.n	800cac4 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f001 fd2e 	bl	800e520 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800cac4:	e04f      	b.n	800cb66 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800caca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cad0:	681a      	ldr	r2, [r3, #0]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d103      	bne.n	800cae6 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2200      	movs	r2, #0
 800cae2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800caec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7fc fe7b 	bl	80097ec <pbuf_clen>
 800caf6:	4603      	mov	r3, r0
 800caf8:	429c      	cmp	r4, r3
 800cafa:	d206      	bcs.n	800cb0a <tcp_receive+0x41a>
 800cafc:	4b2a      	ldr	r3, [pc, #168]	; (800cba8 <tcp_receive+0x4b8>)
 800cafe:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800cb02:	492a      	ldr	r1, [pc, #168]	; (800cbac <tcp_receive+0x4bc>)
 800cb04:	482a      	ldr	r0, [pc, #168]	; (800cbb0 <tcp_receive+0x4c0>)
 800cb06:	f005 f9fd 	bl	8011f04 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800cb0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f7fc fe6c 	bl	80097ec <pbuf_clen>
 800cb14:	4603      	mov	r3, r0
 800cb16:	461a      	mov	r2, r3
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cb1e:	1a9b      	subs	r3, r3, r2
 800cb20:	b29a      	uxth	r2, r3
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800cb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb2a:	891a      	ldrh	r2, [r3, #8]
 800cb2c:	4b21      	ldr	r3, [pc, #132]	; (800cbb4 <tcp_receive+0x4c4>)
 800cb2e:	881b      	ldrh	r3, [r3, #0]
 800cb30:	4413      	add	r3, r2
 800cb32:	b29a      	uxth	r2, r3
 800cb34:	4b1f      	ldr	r3, [pc, #124]	; (800cbb4 <tcp_receive+0x4c4>)
 800cb36:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800cb38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb3a:	f7fe f8b7 	bl	800acac <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d00e      	beq.n	800cb66 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d10a      	bne.n	800cb66 <tcp_receive+0x476>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d106      	bne.n	800cb66 <tcp_receive+0x476>
 800cb58:	4b13      	ldr	r3, [pc, #76]	; (800cba8 <tcp_receive+0x4b8>)
 800cb5a:	f240 42dc 	movw	r2, #1244	; 0x4dc
 800cb5e:	4916      	ldr	r1, [pc, #88]	; (800cbb8 <tcp_receive+0x4c8>)
 800cb60:	4813      	ldr	r0, [pc, #76]	; (800cbb0 <tcp_receive+0x4c0>)
 800cb62:	f005 f9cf 	bl	8011f04 <iprintf>
    while (pcb->unsent != NULL &&
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d036      	beq.n	800cbdc <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800cb6e:	4b13      	ldr	r3, [pc, #76]	; (800cbbc <tcp_receive+0x4cc>)
 800cb70:	681c      	ldr	r4, [r3, #0]
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb76:	68db      	ldr	r3, [r3, #12]
 800cb78:	685b      	ldr	r3, [r3, #4]
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7fb fbb7 	bl	80082ee <lwip_htonl>
 800cb80:	4605      	mov	r5, r0
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb86:	891b      	ldrh	r3, [r3, #8]
 800cb88:	461e      	mov	r6, r3
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb8e:	68db      	ldr	r3, [r3, #12]
 800cb90:	899b      	ldrh	r3, [r3, #12]
 800cb92:	b29b      	uxth	r3, r3
 800cb94:	4618      	mov	r0, r3
 800cb96:	f7fb fb9d 	bl	80082d4 <lwip_htons>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	f003 0303 	and.w	r3, r3, #3
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d00d      	beq.n	800cbc0 <tcp_receive+0x4d0>
 800cba4:	2301      	movs	r3, #1
 800cba6:	e00c      	b.n	800cbc2 <tcp_receive+0x4d2>
 800cba8:	08013b04 	.word	0x08013b04
 800cbac:	08013d44 	.word	0x08013d44
 800cbb0:	08013b48 	.word	0x08013b48
 800cbb4:	20004328 	.word	0x20004328
 800cbb8:	08013d6c 	.word	0x08013d6c
 800cbbc:	20004324 	.word	0x20004324
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	4433      	add	r3, r6
 800cbc4:	442b      	add	r3, r5
 800cbc6:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	db07      	blt.n	800cbdc <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800cbcc:	4b8d      	ldr	r3, [pc, #564]	; (800ce04 <tcp_receive+0x714>)
 800cbce:	681a      	ldr	r2, [r3, #0]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbd4:	1ad3      	subs	r3, r2, r3
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	f77f af75 	ble.w	800cac6 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cbe2:	4b89      	ldr	r3, [pc, #548]	; (800ce08 <tcp_receive+0x718>)
 800cbe4:	881b      	ldrh	r3, [r3, #0]
 800cbe6:	4413      	add	r3, r2
 800cbe8:	b29a      	uxth	r2, r3
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d052      	beq.n	800cc9e <tcp_receive+0x5ae>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbfc:	4b81      	ldr	r3, [pc, #516]	; (800ce04 <tcp_receive+0x714>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	1ad3      	subs	r3, r2, r3
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	da4b      	bge.n	800cc9e <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800cc06:	4b81      	ldr	r3, [pc, #516]	; (800ce0c <tcp_receive+0x71c>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	b29a      	uxth	r2, r3
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc10:	b29b      	uxth	r3, r3
 800cc12:	1ad3      	subs	r3, r2, r3
 800cc14:	b29b      	uxth	r3, r3
 800cc16:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800cc18:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cc20:	10db      	asrs	r3, r3, #3
 800cc22:	b21b      	sxth	r3, r3
 800cc24:	b29b      	uxth	r3, r3
 800cc26:	1ad3      	subs	r3, r2, r3
 800cc28:	b29b      	uxth	r3, r3
 800cc2a:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cc32:	b29a      	uxth	r2, r3
 800cc34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc36:	4413      	add	r3, r2
 800cc38:	b29b      	uxth	r3, r3
 800cc3a:	b21a      	sxth	r2, r3
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800cc40:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	da03      	bge.n	800cc50 <tcp_receive+0x560>
        m = -m;
 800cc48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc4a:	425b      	negs	r3, r3
 800cc4c:	b29b      	uxth	r3, r3
 800cc4e:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800cc50:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cc58:	109b      	asrs	r3, r3, #2
 800cc5a:	b21b      	sxth	r3, r3
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	1ad3      	subs	r3, r2, r3
 800cc60:	b29b      	uxth	r3, r3
 800cc62:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cc6a:	b29a      	uxth	r2, r3
 800cc6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc6e:	4413      	add	r3, r2
 800cc70:	b29b      	uxth	r3, r3
 800cc72:	b21a      	sxth	r2, r3
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cc7e:	10db      	asrs	r3, r3, #3
 800cc80:	b21b      	sxth	r3, r3
 800cc82:	b29a      	uxth	r2, r3
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	4413      	add	r3, r2
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	b21a      	sxth	r2, r3
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800cc9e:	4b5c      	ldr	r3, [pc, #368]	; (800ce10 <tcp_receive+0x720>)
 800cca0:	881b      	ldrh	r3, [r3, #0]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	f000 84f1 	beq.w	800d68a <tcp_receive+0xf9a>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	7d1b      	ldrb	r3, [r3, #20]
 800ccac:	2b06      	cmp	r3, #6
 800ccae:	f200 84ec 	bhi.w	800d68a <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccb6:	4b57      	ldr	r3, [pc, #348]	; (800ce14 <tcp_receive+0x724>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	1ad3      	subs	r3, r2, r3
 800ccbc:	3b01      	subs	r3, #1
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	f2c0 80b8 	blt.w	800ce34 <tcp_receive+0x744>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccc8:	4b51      	ldr	r3, [pc, #324]	; (800ce10 <tcp_receive+0x720>)
 800ccca:	881b      	ldrh	r3, [r3, #0]
 800cccc:	4619      	mov	r1, r3
 800ccce:	4b51      	ldr	r3, [pc, #324]	; (800ce14 <tcp_receive+0x724>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	440b      	add	r3, r1
 800ccd4:	1ad3      	subs	r3, r2, r3
 800ccd6:	3301      	adds	r3, #1
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	f300 80ab 	bgt.w	800ce34 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800ccde:	4b4e      	ldr	r3, [pc, #312]	; (800ce18 <tcp_receive+0x728>)
 800cce0:	685b      	ldr	r3, [r3, #4]
 800cce2:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cce8:	4b4a      	ldr	r3, [pc, #296]	; (800ce14 <tcp_receive+0x724>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	1ad3      	subs	r3, r2, r3
 800ccee:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ccf0:	4b49      	ldr	r3, [pc, #292]	; (800ce18 <tcp_receive+0x728>)
 800ccf2:	685b      	ldr	r3, [r3, #4]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d106      	bne.n	800cd06 <tcp_receive+0x616>
 800ccf8:	4b48      	ldr	r3, [pc, #288]	; (800ce1c <tcp_receive+0x72c>)
 800ccfa:	f240 523c 	movw	r2, #1340	; 0x53c
 800ccfe:	4948      	ldr	r1, [pc, #288]	; (800ce20 <tcp_receive+0x730>)
 800cd00:	4848      	ldr	r0, [pc, #288]	; (800ce24 <tcp_receive+0x734>)
 800cd02:	f005 f8ff 	bl	8011f04 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800cd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd08:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	dd06      	ble.n	800cd1e <tcp_receive+0x62e>
 800cd10:	4b42      	ldr	r3, [pc, #264]	; (800ce1c <tcp_receive+0x72c>)
 800cd12:	f240 523d 	movw	r2, #1341	; 0x53d
 800cd16:	4944      	ldr	r1, [pc, #272]	; (800ce28 <tcp_receive+0x738>)
 800cd18:	4842      	ldr	r0, [pc, #264]	; (800ce24 <tcp_receive+0x734>)
 800cd1a:	f005 f8f3 	bl	8011f04 <iprintf>
      if (inseg.p->len < off) {
 800cd1e:	4b3e      	ldr	r3, [pc, #248]	; (800ce18 <tcp_receive+0x728>)
 800cd20:	685b      	ldr	r3, [r3, #4]
 800cd22:	895b      	ldrh	r3, [r3, #10]
 800cd24:	461a      	mov	r2, r3
 800cd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	dd3e      	ble.n	800cdaa <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800cd2c:	4b3a      	ldr	r3, [pc, #232]	; (800ce18 <tcp_receive+0x728>)
 800cd2e:	685b      	ldr	r3, [r3, #4]
 800cd30:	891b      	ldrh	r3, [r3, #8]
 800cd32:	461a      	mov	r2, r3
 800cd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd36:	4293      	cmp	r3, r2
 800cd38:	dd06      	ble.n	800cd48 <tcp_receive+0x658>
 800cd3a:	4b38      	ldr	r3, [pc, #224]	; (800ce1c <tcp_receive+0x72c>)
 800cd3c:	f240 523f 	movw	r2, #1343	; 0x53f
 800cd40:	493a      	ldr	r1, [pc, #232]	; (800ce2c <tcp_receive+0x73c>)
 800cd42:	4838      	ldr	r0, [pc, #224]	; (800ce24 <tcp_receive+0x734>)
 800cd44:	f005 f8de 	bl	8011f04 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800cd48:	4b33      	ldr	r3, [pc, #204]	; (800ce18 <tcp_receive+0x728>)
 800cd4a:	685b      	ldr	r3, [r3, #4]
 800cd4c:	891a      	ldrh	r2, [r3, #8]
 800cd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd50:	b29b      	uxth	r3, r3
 800cd52:	1ad3      	subs	r3, r2, r3
 800cd54:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800cd56:	e00e      	b.n	800cd76 <tcp_receive+0x686>
          off -= p->len;
 800cd58:	69bb      	ldr	r3, [r7, #24]
 800cd5a:	895b      	ldrh	r3, [r3, #10]
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd60:	1a9b      	subs	r3, r3, r2
 800cd62:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800cd64:	69bb      	ldr	r3, [r7, #24]
 800cd66:	8a3a      	ldrh	r2, [r7, #16]
 800cd68:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800cd6a:	69bb      	ldr	r3, [r7, #24]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800cd70:	69bb      	ldr	r3, [r7, #24]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800cd76:	69bb      	ldr	r3, [r7, #24]
 800cd78:	895b      	ldrh	r3, [r3, #10]
 800cd7a:	461a      	mov	r2, r3
 800cd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	dcea      	bgt.n	800cd58 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800cd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd84:	b29b      	uxth	r3, r3
 800cd86:	425b      	negs	r3, r3
 800cd88:	b29b      	uxth	r3, r3
 800cd8a:	b21b      	sxth	r3, r3
 800cd8c:	4619      	mov	r1, r3
 800cd8e:	69b8      	ldr	r0, [r7, #24]
 800cd90:	f7fc fc6e 	bl	8009670 <pbuf_header>
 800cd94:	4603      	mov	r3, r0
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d01c      	beq.n	800cdd4 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800cd9a:	4b20      	ldr	r3, [pc, #128]	; (800ce1c <tcp_receive+0x72c>)
 800cd9c:	f240 524c 	movw	r2, #1356	; 0x54c
 800cda0:	4923      	ldr	r1, [pc, #140]	; (800ce30 <tcp_receive+0x740>)
 800cda2:	4820      	ldr	r0, [pc, #128]	; (800ce24 <tcp_receive+0x734>)
 800cda4:	f005 f8ae 	bl	8011f04 <iprintf>
 800cda8:	e014      	b.n	800cdd4 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800cdaa:	4b1b      	ldr	r3, [pc, #108]	; (800ce18 <tcp_receive+0x728>)
 800cdac:	685b      	ldr	r3, [r3, #4]
 800cdae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdb0:	b292      	uxth	r2, r2
 800cdb2:	4252      	negs	r2, r2
 800cdb4:	b292      	uxth	r2, r2
 800cdb6:	b212      	sxth	r2, r2
 800cdb8:	4611      	mov	r1, r2
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f7fc fc58 	bl	8009670 <pbuf_header>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d006      	beq.n	800cdd4 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800cdc6:	4b15      	ldr	r3, [pc, #84]	; (800ce1c <tcp_receive+0x72c>)
 800cdc8:	f240 5251 	movw	r2, #1361	; 0x551
 800cdcc:	4918      	ldr	r1, [pc, #96]	; (800ce30 <tcp_receive+0x740>)
 800cdce:	4815      	ldr	r0, [pc, #84]	; (800ce24 <tcp_receive+0x734>)
 800cdd0:	f005 f898 	bl	8011f04 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800cdd4:	4b10      	ldr	r3, [pc, #64]	; (800ce18 <tcp_receive+0x728>)
 800cdd6:	891a      	ldrh	r2, [r3, #8]
 800cdd8:	4b0e      	ldr	r3, [pc, #56]	; (800ce14 <tcp_receive+0x724>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	b299      	uxth	r1, r3
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde2:	b29b      	uxth	r3, r3
 800cde4:	1acb      	subs	r3, r1, r3
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	4413      	add	r3, r2
 800cdea:	b29a      	uxth	r2, r3
 800cdec:	4b0a      	ldr	r3, [pc, #40]	; (800ce18 <tcp_receive+0x728>)
 800cdee:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdf4:	4a07      	ldr	r2, [pc, #28]	; (800ce14 <tcp_receive+0x724>)
 800cdf6:	6013      	str	r3, [r2, #0]
 800cdf8:	4b07      	ldr	r3, [pc, #28]	; (800ce18 <tcp_receive+0x728>)
 800cdfa:	68db      	ldr	r3, [r3, #12]
 800cdfc:	4a05      	ldr	r2, [pc, #20]	; (800ce14 <tcp_receive+0x724>)
 800cdfe:	6812      	ldr	r2, [r2, #0]
 800ce00:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ce02:	e025      	b.n	800ce50 <tcp_receive+0x760>
 800ce04:	20004324 	.word	0x20004324
 800ce08:	20004328 	.word	0x20004328
 800ce0c:	2000b12c 	.word	0x2000b12c
 800ce10:	2000432a 	.word	0x2000432a
 800ce14:	20004320 	.word	0x20004320
 800ce18:	20004300 	.word	0x20004300
 800ce1c:	08013b04 	.word	0x08013b04
 800ce20:	08013d8c 	.word	0x08013d8c
 800ce24:	08013b48 	.word	0x08013b48
 800ce28:	08013d9c 	.word	0x08013d9c
 800ce2c:	08013dac 	.word	0x08013dac
 800ce30:	08013dbc 	.word	0x08013dbc
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ce34:	4b87      	ldr	r3, [pc, #540]	; (800d054 <tcp_receive+0x964>)
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce3c:	1ad3      	subs	r3, r2, r3
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	da06      	bge.n	800ce50 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	7e9b      	ldrb	r3, [r3, #26]
 800ce46:	f043 0302 	orr.w	r3, r3, #2
 800ce4a:	b2da      	uxtb	r2, r3
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ce50:	4b80      	ldr	r3, [pc, #512]	; (800d054 <tcp_receive+0x964>)
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce58:	1ad3      	subs	r3, r2, r3
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	f2c0 8410 	blt.w	800d680 <tcp_receive+0xf90>
 800ce60:	4b7c      	ldr	r3, [pc, #496]	; (800d054 <tcp_receive+0x964>)
 800ce62:	681a      	ldr	r2, [r3, #0]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce68:	6879      	ldr	r1, [r7, #4]
 800ce6a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ce6c:	440b      	add	r3, r1
 800ce6e:	1ad3      	subs	r3, r2, r3
 800ce70:	3301      	adds	r3, #1
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	f300 8404 	bgt.w	800d680 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce7c:	4b75      	ldr	r3, [pc, #468]	; (800d054 <tcp_receive+0x964>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	429a      	cmp	r2, r3
 800ce82:	f040 8287 	bne.w	800d394 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ce86:	4b74      	ldr	r3, [pc, #464]	; (800d058 <tcp_receive+0x968>)
 800ce88:	891c      	ldrh	r4, [r3, #8]
 800ce8a:	4b73      	ldr	r3, [pc, #460]	; (800d058 <tcp_receive+0x968>)
 800ce8c:	68db      	ldr	r3, [r3, #12]
 800ce8e:	899b      	ldrh	r3, [r3, #12]
 800ce90:	b29b      	uxth	r3, r3
 800ce92:	4618      	mov	r0, r3
 800ce94:	f7fb fa1e 	bl	80082d4 <lwip_htons>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	f003 0303 	and.w	r3, r3, #3
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d001      	beq.n	800cea6 <tcp_receive+0x7b6>
 800cea2:	2301      	movs	r3, #1
 800cea4:	e000      	b.n	800cea8 <tcp_receive+0x7b8>
 800cea6:	2300      	movs	r3, #0
 800cea8:	4423      	add	r3, r4
 800ceaa:	b29a      	uxth	r2, r3
 800ceac:	4b6b      	ldr	r3, [pc, #428]	; (800d05c <tcp_receive+0x96c>)
 800ceae:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ceb4:	4b69      	ldr	r3, [pc, #420]	; (800d05c <tcp_receive+0x96c>)
 800ceb6:	881b      	ldrh	r3, [r3, #0]
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d26e      	bcs.n	800cf9a <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cebc:	4b66      	ldr	r3, [pc, #408]	; (800d058 <tcp_receive+0x968>)
 800cebe:	68db      	ldr	r3, [r3, #12]
 800cec0:	899b      	ldrh	r3, [r3, #12]
 800cec2:	b29b      	uxth	r3, r3
 800cec4:	4618      	mov	r0, r3
 800cec6:	f7fb fa05 	bl	80082d4 <lwip_htons>
 800ceca:	4603      	mov	r3, r0
 800cecc:	f003 0301 	and.w	r3, r3, #1
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d01b      	beq.n	800cf0c <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ced4:	4b60      	ldr	r3, [pc, #384]	; (800d058 <tcp_receive+0x968>)
 800ced6:	68db      	ldr	r3, [r3, #12]
 800ced8:	899b      	ldrh	r3, [r3, #12]
 800ceda:	b29b      	uxth	r3, r3
 800cedc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cee0:	b29c      	uxth	r4, r3
 800cee2:	4b5d      	ldr	r3, [pc, #372]	; (800d058 <tcp_receive+0x968>)
 800cee4:	68db      	ldr	r3, [r3, #12]
 800cee6:	899b      	ldrh	r3, [r3, #12]
 800cee8:	b29b      	uxth	r3, r3
 800ceea:	4618      	mov	r0, r3
 800ceec:	f7fb f9f2 	bl	80082d4 <lwip_htons>
 800cef0:	4603      	mov	r3, r0
 800cef2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800cef6:	b29b      	uxth	r3, r3
 800cef8:	4618      	mov	r0, r3
 800cefa:	f7fb f9eb 	bl	80082d4 <lwip_htons>
 800cefe:	4603      	mov	r3, r0
 800cf00:	461a      	mov	r2, r3
 800cf02:	4b55      	ldr	r3, [pc, #340]	; (800d058 <tcp_receive+0x968>)
 800cf04:	68db      	ldr	r3, [r3, #12]
 800cf06:	4322      	orrs	r2, r4
 800cf08:	b292      	uxth	r2, r2
 800cf0a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cf10:	4b51      	ldr	r3, [pc, #324]	; (800d058 <tcp_receive+0x968>)
 800cf12:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cf14:	4b50      	ldr	r3, [pc, #320]	; (800d058 <tcp_receive+0x968>)
 800cf16:	68db      	ldr	r3, [r3, #12]
 800cf18:	899b      	ldrh	r3, [r3, #12]
 800cf1a:	b29b      	uxth	r3, r3
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7fb f9d9 	bl	80082d4 <lwip_htons>
 800cf22:	4603      	mov	r3, r0
 800cf24:	f003 0302 	and.w	r3, r3, #2
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d005      	beq.n	800cf38 <tcp_receive+0x848>
            inseg.len -= 1;
 800cf2c:	4b4a      	ldr	r3, [pc, #296]	; (800d058 <tcp_receive+0x968>)
 800cf2e:	891b      	ldrh	r3, [r3, #8]
 800cf30:	3b01      	subs	r3, #1
 800cf32:	b29a      	uxth	r2, r3
 800cf34:	4b48      	ldr	r3, [pc, #288]	; (800d058 <tcp_receive+0x968>)
 800cf36:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800cf38:	4b47      	ldr	r3, [pc, #284]	; (800d058 <tcp_receive+0x968>)
 800cf3a:	685b      	ldr	r3, [r3, #4]
 800cf3c:	4a46      	ldr	r2, [pc, #280]	; (800d058 <tcp_receive+0x968>)
 800cf3e:	8912      	ldrh	r2, [r2, #8]
 800cf40:	4611      	mov	r1, r2
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7fc fa44 	bl	80093d0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800cf48:	4b43      	ldr	r3, [pc, #268]	; (800d058 <tcp_receive+0x968>)
 800cf4a:	891c      	ldrh	r4, [r3, #8]
 800cf4c:	4b42      	ldr	r3, [pc, #264]	; (800d058 <tcp_receive+0x968>)
 800cf4e:	68db      	ldr	r3, [r3, #12]
 800cf50:	899b      	ldrh	r3, [r3, #12]
 800cf52:	b29b      	uxth	r3, r3
 800cf54:	4618      	mov	r0, r3
 800cf56:	f7fb f9bd 	bl	80082d4 <lwip_htons>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	f003 0303 	and.w	r3, r3, #3
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d001      	beq.n	800cf68 <tcp_receive+0x878>
 800cf64:	2301      	movs	r3, #1
 800cf66:	e000      	b.n	800cf6a <tcp_receive+0x87a>
 800cf68:	2300      	movs	r3, #0
 800cf6a:	4423      	add	r3, r4
 800cf6c:	b29a      	uxth	r2, r3
 800cf6e:	4b3b      	ldr	r3, [pc, #236]	; (800d05c <tcp_receive+0x96c>)
 800cf70:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cf72:	4b3a      	ldr	r3, [pc, #232]	; (800d05c <tcp_receive+0x96c>)
 800cf74:	881b      	ldrh	r3, [r3, #0]
 800cf76:	461a      	mov	r2, r3
 800cf78:	4b36      	ldr	r3, [pc, #216]	; (800d054 <tcp_receive+0x964>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	441a      	add	r2, r3
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf82:	6879      	ldr	r1, [r7, #4]
 800cf84:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cf86:	440b      	add	r3, r1
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	d006      	beq.n	800cf9a <tcp_receive+0x8aa>
 800cf8c:	4b34      	ldr	r3, [pc, #208]	; (800d060 <tcp_receive+0x970>)
 800cf8e:	f240 527e 	movw	r2, #1406	; 0x57e
 800cf92:	4934      	ldr	r1, [pc, #208]	; (800d064 <tcp_receive+0x974>)
 800cf94:	4834      	ldr	r0, [pc, #208]	; (800d068 <tcp_receive+0x978>)
 800cf96:	f004 ffb5 	bl	8011f04 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	f000 80e1 	beq.w	800d166 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cfa4:	4b2c      	ldr	r3, [pc, #176]	; (800d058 <tcp_receive+0x968>)
 800cfa6:	68db      	ldr	r3, [r3, #12]
 800cfa8:	899b      	ldrh	r3, [r3, #12]
 800cfaa:	b29b      	uxth	r3, r3
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7fb f991 	bl	80082d4 <lwip_htons>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	f003 0301 	and.w	r3, r3, #1
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d010      	beq.n	800cfde <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800cfbc:	e00a      	b.n	800cfd4 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfc2:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfc8:	681a      	ldr	r2, [r3, #0]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800cfce:	68b8      	ldr	r0, [r7, #8]
 800cfd0:	f7fd fe6c 	bl	800acac <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d1f0      	bne.n	800cfbe <tcp_receive+0x8ce>
 800cfdc:	e0c3      	b.n	800d166 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfe2:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800cfe4:	e04f      	b.n	800d086 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cfe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe8:	68db      	ldr	r3, [r3, #12]
 800cfea:	899b      	ldrh	r3, [r3, #12]
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7fb f970 	bl	80082d4 <lwip_htons>
 800cff4:	4603      	mov	r3, r0
 800cff6:	f003 0301 	and.w	r3, r3, #1
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d03b      	beq.n	800d076 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800cffe:	4b16      	ldr	r3, [pc, #88]	; (800d058 <tcp_receive+0x968>)
 800d000:	68db      	ldr	r3, [r3, #12]
 800d002:	899b      	ldrh	r3, [r3, #12]
 800d004:	b29b      	uxth	r3, r3
 800d006:	4618      	mov	r0, r3
 800d008:	f7fb f964 	bl	80082d4 <lwip_htons>
 800d00c:	4603      	mov	r3, r0
 800d00e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d012:	2b00      	cmp	r3, #0
 800d014:	d12f      	bne.n	800d076 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800d016:	4b10      	ldr	r3, [pc, #64]	; (800d058 <tcp_receive+0x968>)
 800d018:	68db      	ldr	r3, [r3, #12]
 800d01a:	899b      	ldrh	r3, [r3, #12]
 800d01c:	b29c      	uxth	r4, r3
 800d01e:	2001      	movs	r0, #1
 800d020:	f7fb f958 	bl	80082d4 <lwip_htons>
 800d024:	4603      	mov	r3, r0
 800d026:	461a      	mov	r2, r3
 800d028:	4b0b      	ldr	r3, [pc, #44]	; (800d058 <tcp_receive+0x968>)
 800d02a:	68db      	ldr	r3, [r3, #12]
 800d02c:	4322      	orrs	r2, r4
 800d02e:	b292      	uxth	r2, r2
 800d030:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800d032:	4b09      	ldr	r3, [pc, #36]	; (800d058 <tcp_receive+0x968>)
 800d034:	891c      	ldrh	r4, [r3, #8]
 800d036:	4b08      	ldr	r3, [pc, #32]	; (800d058 <tcp_receive+0x968>)
 800d038:	68db      	ldr	r3, [r3, #12]
 800d03a:	899b      	ldrh	r3, [r3, #12]
 800d03c:	b29b      	uxth	r3, r3
 800d03e:	4618      	mov	r0, r3
 800d040:	f7fb f948 	bl	80082d4 <lwip_htons>
 800d044:	4603      	mov	r3, r0
 800d046:	f003 0303 	and.w	r3, r3, #3
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d00e      	beq.n	800d06c <tcp_receive+0x97c>
 800d04e:	2301      	movs	r3, #1
 800d050:	e00d      	b.n	800d06e <tcp_receive+0x97e>
 800d052:	bf00      	nop
 800d054:	20004320 	.word	0x20004320
 800d058:	20004300 	.word	0x20004300
 800d05c:	2000432a 	.word	0x2000432a
 800d060:	08013b04 	.word	0x08013b04
 800d064:	08013dd0 	.word	0x08013dd0
 800d068:	08013b48 	.word	0x08013b48
 800d06c:	2300      	movs	r3, #0
 800d06e:	4423      	add	r3, r4
 800d070:	b29a      	uxth	r2, r3
 800d072:	4b95      	ldr	r3, [pc, #596]	; (800d2c8 <tcp_receive+0xbd8>)
 800d074:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800d076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d078:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800d07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800d080:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d082:	f7fd fe13 	bl	800acac <tcp_seg_free>
            while (next &&
 800d086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d00e      	beq.n	800d0aa <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800d08c:	4b8e      	ldr	r3, [pc, #568]	; (800d2c8 <tcp_receive+0xbd8>)
 800d08e:	881b      	ldrh	r3, [r3, #0]
 800d090:	461a      	mov	r2, r3
 800d092:	4b8e      	ldr	r3, [pc, #568]	; (800d2cc <tcp_receive+0xbdc>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	441a      	add	r2, r3
 800d098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d09a:	68db      	ldr	r3, [r3, #12]
 800d09c:	685b      	ldr	r3, [r3, #4]
 800d09e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d0a0:	8909      	ldrh	r1, [r1, #8]
 800d0a2:	440b      	add	r3, r1
 800d0a4:	1ad3      	subs	r3, r2, r3
            while (next &&
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	da9d      	bge.n	800cfe6 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800d0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d057      	beq.n	800d160 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 800d0b0:	4b85      	ldr	r3, [pc, #532]	; (800d2c8 <tcp_receive+0xbd8>)
 800d0b2:	881b      	ldrh	r3, [r3, #0]
 800d0b4:	461a      	mov	r2, r3
 800d0b6:	4b85      	ldr	r3, [pc, #532]	; (800d2cc <tcp_receive+0xbdc>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	441a      	add	r2, r3
 800d0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0be:	68db      	ldr	r3, [r3, #12]
 800d0c0:	685b      	ldr	r3, [r3, #4]
 800d0c2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	dd4b      	ble.n	800d160 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800d0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ca:	68db      	ldr	r3, [r3, #12]
 800d0cc:	685b      	ldr	r3, [r3, #4]
 800d0ce:	b29a      	uxth	r2, r3
 800d0d0:	4b7e      	ldr	r3, [pc, #504]	; (800d2cc <tcp_receive+0xbdc>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	b29b      	uxth	r3, r3
 800d0d6:	1ad3      	subs	r3, r2, r3
 800d0d8:	b29a      	uxth	r2, r3
 800d0da:	4b7d      	ldr	r3, [pc, #500]	; (800d2d0 <tcp_receive+0xbe0>)
 800d0dc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d0de:	4b7c      	ldr	r3, [pc, #496]	; (800d2d0 <tcp_receive+0xbe0>)
 800d0e0:	68db      	ldr	r3, [r3, #12]
 800d0e2:	899b      	ldrh	r3, [r3, #12]
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f7fb f8f4 	bl	80082d4 <lwip_htons>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	f003 0302 	and.w	r3, r3, #2
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d005      	beq.n	800d102 <tcp_receive+0xa12>
                inseg.len -= 1;
 800d0f6:	4b76      	ldr	r3, [pc, #472]	; (800d2d0 <tcp_receive+0xbe0>)
 800d0f8:	891b      	ldrh	r3, [r3, #8]
 800d0fa:	3b01      	subs	r3, #1
 800d0fc:	b29a      	uxth	r2, r3
 800d0fe:	4b74      	ldr	r3, [pc, #464]	; (800d2d0 <tcp_receive+0xbe0>)
 800d100:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d102:	4b73      	ldr	r3, [pc, #460]	; (800d2d0 <tcp_receive+0xbe0>)
 800d104:	685b      	ldr	r3, [r3, #4]
 800d106:	4a72      	ldr	r2, [pc, #456]	; (800d2d0 <tcp_receive+0xbe0>)
 800d108:	8912      	ldrh	r2, [r2, #8]
 800d10a:	4611      	mov	r1, r2
 800d10c:	4618      	mov	r0, r3
 800d10e:	f7fc f95f 	bl	80093d0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d112:	4b6f      	ldr	r3, [pc, #444]	; (800d2d0 <tcp_receive+0xbe0>)
 800d114:	891c      	ldrh	r4, [r3, #8]
 800d116:	4b6e      	ldr	r3, [pc, #440]	; (800d2d0 <tcp_receive+0xbe0>)
 800d118:	68db      	ldr	r3, [r3, #12]
 800d11a:	899b      	ldrh	r3, [r3, #12]
 800d11c:	b29b      	uxth	r3, r3
 800d11e:	4618      	mov	r0, r3
 800d120:	f7fb f8d8 	bl	80082d4 <lwip_htons>
 800d124:	4603      	mov	r3, r0
 800d126:	f003 0303 	and.w	r3, r3, #3
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d001      	beq.n	800d132 <tcp_receive+0xa42>
 800d12e:	2301      	movs	r3, #1
 800d130:	e000      	b.n	800d134 <tcp_receive+0xa44>
 800d132:	2300      	movs	r3, #0
 800d134:	4423      	add	r3, r4
 800d136:	b29a      	uxth	r2, r3
 800d138:	4b63      	ldr	r3, [pc, #396]	; (800d2c8 <tcp_receive+0xbd8>)
 800d13a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d13c:	4b62      	ldr	r3, [pc, #392]	; (800d2c8 <tcp_receive+0xbd8>)
 800d13e:	881b      	ldrh	r3, [r3, #0]
 800d140:	461a      	mov	r2, r3
 800d142:	4b62      	ldr	r3, [pc, #392]	; (800d2cc <tcp_receive+0xbdc>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	441a      	add	r2, r3
 800d148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d14a:	68db      	ldr	r3, [r3, #12]
 800d14c:	685b      	ldr	r3, [r3, #4]
 800d14e:	429a      	cmp	r2, r3
 800d150:	d006      	beq.n	800d160 <tcp_receive+0xa70>
 800d152:	4b60      	ldr	r3, [pc, #384]	; (800d2d4 <tcp_receive+0xbe4>)
 800d154:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800d158:	495f      	ldr	r1, [pc, #380]	; (800d2d8 <tcp_receive+0xbe8>)
 800d15a:	4860      	ldr	r0, [pc, #384]	; (800d2dc <tcp_receive+0xbec>)
 800d15c:	f004 fed2 	bl	8011f04 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d164:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d166:	4b58      	ldr	r3, [pc, #352]	; (800d2c8 <tcp_receive+0xbd8>)
 800d168:	881b      	ldrh	r3, [r3, #0]
 800d16a:	461a      	mov	r2, r3
 800d16c:	4b57      	ldr	r3, [pc, #348]	; (800d2cc <tcp_receive+0xbdc>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	441a      	add	r2, r3
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d17a:	4b53      	ldr	r3, [pc, #332]	; (800d2c8 <tcp_receive+0xbd8>)
 800d17c:	881b      	ldrh	r3, [r3, #0]
 800d17e:	429a      	cmp	r2, r3
 800d180:	d206      	bcs.n	800d190 <tcp_receive+0xaa0>
 800d182:	4b54      	ldr	r3, [pc, #336]	; (800d2d4 <tcp_receive+0xbe4>)
 800d184:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800d188:	4955      	ldr	r1, [pc, #340]	; (800d2e0 <tcp_receive+0xbf0>)
 800d18a:	4854      	ldr	r0, [pc, #336]	; (800d2dc <tcp_receive+0xbec>)
 800d18c:	f004 feba 	bl	8011f04 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d194:	4b4c      	ldr	r3, [pc, #304]	; (800d2c8 <tcp_receive+0xbd8>)
 800d196:	881b      	ldrh	r3, [r3, #0]
 800d198:	1ad3      	subs	r3, r2, r3
 800d19a:	b29a      	uxth	r2, r3
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f7fd f8f3 	bl	800a38c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d1a6:	4b4a      	ldr	r3, [pc, #296]	; (800d2d0 <tcp_receive+0xbe0>)
 800d1a8:	685b      	ldr	r3, [r3, #4]
 800d1aa:	891b      	ldrh	r3, [r3, #8]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d006      	beq.n	800d1be <tcp_receive+0xace>
          recv_data = inseg.p;
 800d1b0:	4b47      	ldr	r3, [pc, #284]	; (800d2d0 <tcp_receive+0xbe0>)
 800d1b2:	685b      	ldr	r3, [r3, #4]
 800d1b4:	4a4b      	ldr	r2, [pc, #300]	; (800d2e4 <tcp_receive+0xbf4>)
 800d1b6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d1b8:	4b45      	ldr	r3, [pc, #276]	; (800d2d0 <tcp_receive+0xbe0>)
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d1be:	4b44      	ldr	r3, [pc, #272]	; (800d2d0 <tcp_receive+0xbe0>)
 800d1c0:	68db      	ldr	r3, [r3, #12]
 800d1c2:	899b      	ldrh	r3, [r3, #12]
 800d1c4:	b29b      	uxth	r3, r3
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7fb f884 	bl	80082d4 <lwip_htons>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	f003 0301 	and.w	r3, r3, #1
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	f000 80b4 	beq.w	800d340 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d1d8:	4b43      	ldr	r3, [pc, #268]	; (800d2e8 <tcp_receive+0xbf8>)
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	f043 0320 	orr.w	r3, r3, #32
 800d1e0:	b2da      	uxtb	r2, r3
 800d1e2:	4b41      	ldr	r3, [pc, #260]	; (800d2e8 <tcp_receive+0xbf8>)
 800d1e4:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d1e6:	e0ab      	b.n	800d340 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1ec:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1f2:	68db      	ldr	r3, [r3, #12]
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	4a35      	ldr	r2, [pc, #212]	; (800d2cc <tcp_receive+0xbdc>)
 800d1f8:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	891b      	ldrh	r3, [r3, #8]
 800d1fe:	461c      	mov	r4, r3
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	68db      	ldr	r3, [r3, #12]
 800d204:	899b      	ldrh	r3, [r3, #12]
 800d206:	b29b      	uxth	r3, r3
 800d208:	4618      	mov	r0, r3
 800d20a:	f7fb f863 	bl	80082d4 <lwip_htons>
 800d20e:	4603      	mov	r3, r0
 800d210:	f003 0303 	and.w	r3, r3, #3
 800d214:	2b00      	cmp	r3, #0
 800d216:	d001      	beq.n	800d21c <tcp_receive+0xb2c>
 800d218:	2301      	movs	r3, #1
 800d21a:	e000      	b.n	800d21e <tcp_receive+0xb2e>
 800d21c:	2300      	movs	r3, #0
 800d21e:	191a      	adds	r2, r3, r4
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d224:	441a      	add	r2, r3
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d22e:	461c      	mov	r4, r3
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	891b      	ldrh	r3, [r3, #8]
 800d234:	461d      	mov	r5, r3
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	68db      	ldr	r3, [r3, #12]
 800d23a:	899b      	ldrh	r3, [r3, #12]
 800d23c:	b29b      	uxth	r3, r3
 800d23e:	4618      	mov	r0, r3
 800d240:	f7fb f848 	bl	80082d4 <lwip_htons>
 800d244:	4603      	mov	r3, r0
 800d246:	f003 0303 	and.w	r3, r3, #3
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d001      	beq.n	800d252 <tcp_receive+0xb62>
 800d24e:	2301      	movs	r3, #1
 800d250:	e000      	b.n	800d254 <tcp_receive+0xb64>
 800d252:	2300      	movs	r3, #0
 800d254:	442b      	add	r3, r5
 800d256:	429c      	cmp	r4, r3
 800d258:	d206      	bcs.n	800d268 <tcp_receive+0xb78>
 800d25a:	4b1e      	ldr	r3, [pc, #120]	; (800d2d4 <tcp_receive+0xbe4>)
 800d25c:	f240 52dd 	movw	r2, #1501	; 0x5dd
 800d260:	4922      	ldr	r1, [pc, #136]	; (800d2ec <tcp_receive+0xbfc>)
 800d262:	481e      	ldr	r0, [pc, #120]	; (800d2dc <tcp_receive+0xbec>)
 800d264:	f004 fe4e 	bl	8011f04 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	891b      	ldrh	r3, [r3, #8]
 800d26c:	461c      	mov	r4, r3
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	68db      	ldr	r3, [r3, #12]
 800d272:	899b      	ldrh	r3, [r3, #12]
 800d274:	b29b      	uxth	r3, r3
 800d276:	4618      	mov	r0, r3
 800d278:	f7fb f82c 	bl	80082d4 <lwip_htons>
 800d27c:	4603      	mov	r3, r0
 800d27e:	f003 0303 	and.w	r3, r3, #3
 800d282:	2b00      	cmp	r3, #0
 800d284:	d001      	beq.n	800d28a <tcp_receive+0xb9a>
 800d286:	2301      	movs	r3, #1
 800d288:	e000      	b.n	800d28c <tcp_receive+0xb9c>
 800d28a:	2300      	movs	r3, #0
 800d28c:	1919      	adds	r1, r3, r4
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d292:	b28b      	uxth	r3, r1
 800d294:	1ad3      	subs	r3, r2, r3
 800d296:	b29a      	uxth	r2, r3
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f7fd f875 	bl	800a38c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	891b      	ldrh	r3, [r3, #8]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d028      	beq.n	800d2fe <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d2ac:	4b0d      	ldr	r3, [pc, #52]	; (800d2e4 <tcp_receive+0xbf4>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d01d      	beq.n	800d2f0 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 800d2b4:	4b0b      	ldr	r3, [pc, #44]	; (800d2e4 <tcp_receive+0xbf4>)
 800d2b6:	681a      	ldr	r2, [r3, #0]
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	685b      	ldr	r3, [r3, #4]
 800d2bc:	4619      	mov	r1, r3
 800d2be:	4610      	mov	r0, r2
 800d2c0:	f7fc fad2 	bl	8009868 <pbuf_cat>
 800d2c4:	e018      	b.n	800d2f8 <tcp_receive+0xc08>
 800d2c6:	bf00      	nop
 800d2c8:	2000432a 	.word	0x2000432a
 800d2cc:	20004320 	.word	0x20004320
 800d2d0:	20004300 	.word	0x20004300
 800d2d4:	08013b04 	.word	0x08013b04
 800d2d8:	08013e08 	.word	0x08013e08
 800d2dc:	08013b48 	.word	0x08013b48
 800d2e0:	08013e44 	.word	0x08013e44
 800d2e4:	20004330 	.word	0x20004330
 800d2e8:	2000432d 	.word	0x2000432d
 800d2ec:	08013e64 	.word	0x08013e64
            } else {
              recv_data = cseg->p;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	685b      	ldr	r3, [r3, #4]
 800d2f4:	4a71      	ldr	r2, [pc, #452]	; (800d4bc <tcp_receive+0xdcc>)
 800d2f6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	68db      	ldr	r3, [r3, #12]
 800d302:	899b      	ldrh	r3, [r3, #12]
 800d304:	b29b      	uxth	r3, r3
 800d306:	4618      	mov	r0, r3
 800d308:	f7fa ffe4 	bl	80082d4 <lwip_htons>
 800d30c:	4603      	mov	r3, r0
 800d30e:	f003 0301 	and.w	r3, r3, #1
 800d312:	2b00      	cmp	r3, #0
 800d314:	d00d      	beq.n	800d332 <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d316:	4b6a      	ldr	r3, [pc, #424]	; (800d4c0 <tcp_receive+0xdd0>)
 800d318:	781b      	ldrb	r3, [r3, #0]
 800d31a:	f043 0320 	orr.w	r3, r3, #32
 800d31e:	b2da      	uxtb	r2, r3
 800d320:	4b67      	ldr	r3, [pc, #412]	; (800d4c0 <tcp_receive+0xdd0>)
 800d322:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	7d1b      	ldrb	r3, [r3, #20]
 800d328:	2b04      	cmp	r3, #4
 800d32a:	d102      	bne.n	800d332 <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2207      	movs	r2, #7
 800d330:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681a      	ldr	r2, [r3, #0]
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800d33a:	68f8      	ldr	r0, [r7, #12]
 800d33c:	f7fd fcb6 	bl	800acac <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d344:	2b00      	cmp	r3, #0
 800d346:	d008      	beq.n	800d35a <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d34c:	68db      	ldr	r3, [r3, #12]
 800d34e:	685a      	ldr	r2, [r3, #4]
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800d354:	429a      	cmp	r2, r3
 800d356:	f43f af47 	beq.w	800d1e8 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	7e9b      	ldrb	r3, [r3, #26]
 800d35e:	f003 0301 	and.w	r3, r3, #1
 800d362:	2b00      	cmp	r3, #0
 800d364:	d00e      	beq.n	800d384 <tcp_receive+0xc94>
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	7e9b      	ldrb	r3, [r3, #26]
 800d36a:	f023 0301 	bic.w	r3, r3, #1
 800d36e:	b2da      	uxtb	r2, r3
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	769a      	strb	r2, [r3, #26]
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	7e9b      	ldrb	r3, [r3, #26]
 800d378:	f043 0302 	orr.w	r3, r3, #2
 800d37c:	b2da      	uxtb	r2, r3
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d382:	e181      	b.n	800d688 <tcp_receive+0xf98>
        tcp_ack(pcb);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	7e9b      	ldrb	r3, [r3, #26]
 800d388:	f043 0301 	orr.w	r3, r3, #1
 800d38c:	b2da      	uxtb	r2, r3
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d392:	e179      	b.n	800d688 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f001 f8c3 	bl	800e520 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d106      	bne.n	800d3b0 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800d3a2:	4848      	ldr	r0, [pc, #288]	; (800d4c4 <tcp_receive+0xdd4>)
 800d3a4:	f7fd fca8 	bl	800acf8 <tcp_seg_copy>
 800d3a8:	4602      	mov	r2, r0
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800d3ae:	e16b      	b.n	800d688 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d3ba:	e150      	b.n	800d65e <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 800d3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3be:	68db      	ldr	r3, [r3, #12]
 800d3c0:	685a      	ldr	r2, [r3, #4]
 800d3c2:	4b41      	ldr	r3, [pc, #260]	; (800d4c8 <tcp_receive+0xdd8>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d11d      	bne.n	800d406 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800d3ca:	4b3e      	ldr	r3, [pc, #248]	; (800d4c4 <tcp_receive+0xdd4>)
 800d3cc:	891a      	ldrh	r2, [r3, #8]
 800d3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d0:	891b      	ldrh	r3, [r3, #8]
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	f240 8148 	bls.w	800d668 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800d3d8:	483a      	ldr	r0, [pc, #232]	; (800d4c4 <tcp_receive+0xdd4>)
 800d3da:	f7fd fc8d 	bl	800acf8 <tcp_seg_copy>
 800d3de:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	f000 8142 	beq.w	800d66c <tcp_receive+0xf7c>
                  if (prev != NULL) {
 800d3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d003      	beq.n	800d3f6 <tcp_receive+0xd06>
                    prev->next = cseg;
 800d3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f0:	68fa      	ldr	r2, [r7, #12]
 800d3f2:	601a      	str	r2, [r3, #0]
 800d3f4:	e002      	b.n	800d3fc <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	68fa      	ldr	r2, [r7, #12]
 800d3fa:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800d3fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d3fe:	68f8      	ldr	r0, [r7, #12]
 800d400:	f7ff f900 	bl	800c604 <tcp_oos_insert_segment>
                }
                break;
 800d404:	e132      	b.n	800d66c <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800d406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d117      	bne.n	800d43c <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800d40c:	4b2e      	ldr	r3, [pc, #184]	; (800d4c8 <tcp_receive+0xdd8>)
 800d40e:	681a      	ldr	r2, [r3, #0]
 800d410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d412:	68db      	ldr	r3, [r3, #12]
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	1ad3      	subs	r3, r2, r3
 800d418:	2b00      	cmp	r3, #0
 800d41a:	da57      	bge.n	800d4cc <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800d41c:	4829      	ldr	r0, [pc, #164]	; (800d4c4 <tcp_receive+0xdd4>)
 800d41e:	f7fd fc6b 	bl	800acf8 <tcp_seg_copy>
 800d422:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	2b00      	cmp	r3, #0
 800d428:	f000 8122 	beq.w	800d670 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	68fa      	ldr	r2, [r7, #12]
 800d430:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800d432:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d434:	68f8      	ldr	r0, [r7, #12]
 800d436:	f7ff f8e5 	bl	800c604 <tcp_oos_insert_segment>
                  }
                  break;
 800d43a:	e119      	b.n	800d670 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800d43c:	4b22      	ldr	r3, [pc, #136]	; (800d4c8 <tcp_receive+0xdd8>)
 800d43e:	681a      	ldr	r2, [r3, #0]
 800d440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d442:	68db      	ldr	r3, [r3, #12]
 800d444:	685b      	ldr	r3, [r3, #4]
 800d446:	1ad3      	subs	r3, r2, r3
 800d448:	3b01      	subs	r3, #1
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	db3e      	blt.n	800d4cc <tcp_receive+0xddc>
 800d44e:	4b1e      	ldr	r3, [pc, #120]	; (800d4c8 <tcp_receive+0xdd8>)
 800d450:	681a      	ldr	r2, [r3, #0]
 800d452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d454:	68db      	ldr	r3, [r3, #12]
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	1ad3      	subs	r3, r2, r3
 800d45a:	3301      	adds	r3, #1
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	dc35      	bgt.n	800d4cc <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800d460:	4818      	ldr	r0, [pc, #96]	; (800d4c4 <tcp_receive+0xdd4>)
 800d462:	f7fd fc49 	bl	800acf8 <tcp_seg_copy>
 800d466:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	f000 8102 	beq.w	800d674 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800d470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d472:	68db      	ldr	r3, [r3, #12]
 800d474:	685b      	ldr	r3, [r3, #4]
 800d476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d478:	8912      	ldrh	r2, [r2, #8]
 800d47a:	441a      	add	r2, r3
 800d47c:	4b12      	ldr	r3, [pc, #72]	; (800d4c8 <tcp_receive+0xdd8>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	1ad3      	subs	r3, r2, r3
 800d482:	2b00      	cmp	r3, #0
 800d484:	dd12      	ble.n	800d4ac <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800d486:	4b10      	ldr	r3, [pc, #64]	; (800d4c8 <tcp_receive+0xdd8>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	b29a      	uxth	r2, r3
 800d48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d48e:	68db      	ldr	r3, [r3, #12]
 800d490:	685b      	ldr	r3, [r3, #4]
 800d492:	b29b      	uxth	r3, r3
 800d494:	1ad3      	subs	r3, r2, r3
 800d496:	b29a      	uxth	r2, r3
 800d498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d49a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800d49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d49e:	685a      	ldr	r2, [r3, #4]
 800d4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a2:	891b      	ldrh	r3, [r3, #8]
 800d4a4:	4619      	mov	r1, r3
 800d4a6:	4610      	mov	r0, r2
 800d4a8:	f7fb ff92 	bl	80093d0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800d4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ae:	68fa      	ldr	r2, [r7, #12]
 800d4b0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800d4b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d4b4:	68f8      	ldr	r0, [r7, #12]
 800d4b6:	f7ff f8a5 	bl	800c604 <tcp_oos_insert_segment>
                  }
                  break;
 800d4ba:	e0db      	b.n	800d674 <tcp_receive+0xf84>
 800d4bc:	20004330 	.word	0x20004330
 800d4c0:	2000432d 	.word	0x2000432d
 800d4c4:	20004300 	.word	0x20004300
 800d4c8:	20004320 	.word	0x20004320
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800d4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	f040 80bf 	bne.w	800d654 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800d4d6:	4b7c      	ldr	r3, [pc, #496]	; (800d6c8 <tcp_receive+0xfd8>)
 800d4d8:	681a      	ldr	r2, [r3, #0]
 800d4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4dc:	68db      	ldr	r3, [r3, #12]
 800d4de:	685b      	ldr	r3, [r3, #4]
 800d4e0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	f340 80b6 	ble.w	800d654 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ea:	68db      	ldr	r3, [r3, #12]
 800d4ec:	899b      	ldrh	r3, [r3, #12]
 800d4ee:	b29b      	uxth	r3, r3
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	f7fa feef 	bl	80082d4 <lwip_htons>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	f003 0301 	and.w	r3, r3, #1
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	f040 80bb 	bne.w	800d678 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800d502:	4872      	ldr	r0, [pc, #456]	; (800d6cc <tcp_receive+0xfdc>)
 800d504:	f7fd fbf8 	bl	800acf8 <tcp_seg_copy>
 800d508:	4602      	mov	r2, r0
 800d50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d50c:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800d50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	2b00      	cmp	r3, #0
 800d514:	f000 80b2 	beq.w	800d67c <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800d518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d51a:	68db      	ldr	r3, [r3, #12]
 800d51c:	685b      	ldr	r3, [r3, #4]
 800d51e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d520:	8912      	ldrh	r2, [r2, #8]
 800d522:	441a      	add	r2, r3
 800d524:	4b68      	ldr	r3, [pc, #416]	; (800d6c8 <tcp_receive+0xfd8>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	1ad3      	subs	r3, r2, r3
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	dd12      	ble.n	800d554 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800d52e:	4b66      	ldr	r3, [pc, #408]	; (800d6c8 <tcp_receive+0xfd8>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	b29a      	uxth	r2, r3
 800d534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d536:	68db      	ldr	r3, [r3, #12]
 800d538:	685b      	ldr	r3, [r3, #4]
 800d53a:	b29b      	uxth	r3, r3
 800d53c:	1ad3      	subs	r3, r2, r3
 800d53e:	b29a      	uxth	r2, r3
 800d540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d542:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800d544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d546:	685a      	ldr	r2, [r3, #4]
 800d548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d54a:	891b      	ldrh	r3, [r3, #8]
 800d54c:	4619      	mov	r1, r3
 800d54e:	4610      	mov	r0, r2
 800d550:	f7fb ff3e 	bl	80093d0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800d554:	4b5e      	ldr	r3, [pc, #376]	; (800d6d0 <tcp_receive+0xfe0>)
 800d556:	881b      	ldrh	r3, [r3, #0]
 800d558:	461a      	mov	r2, r3
 800d55a:	4b5b      	ldr	r3, [pc, #364]	; (800d6c8 <tcp_receive+0xfd8>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	441a      	add	r2, r3
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d564:	6879      	ldr	r1, [r7, #4]
 800d566:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d568:	440b      	add	r3, r1
 800d56a:	1ad3      	subs	r3, r2, r3
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	f340 8085 	ble.w	800d67c <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800d572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	68db      	ldr	r3, [r3, #12]
 800d578:	899b      	ldrh	r3, [r3, #12]
 800d57a:	b29b      	uxth	r3, r3
 800d57c:	4618      	mov	r0, r3
 800d57e:	f7fa fea9 	bl	80082d4 <lwip_htons>
 800d582:	4603      	mov	r3, r0
 800d584:	f003 0301 	and.w	r3, r3, #1
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d01e      	beq.n	800d5ca <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800d58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	68db      	ldr	r3, [r3, #12]
 800d592:	899b      	ldrh	r3, [r3, #12]
 800d594:	b29b      	uxth	r3, r3
 800d596:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d59a:	b29c      	uxth	r4, r3
 800d59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	68db      	ldr	r3, [r3, #12]
 800d5a2:	899b      	ldrh	r3, [r3, #12]
 800d5a4:	b29b      	uxth	r3, r3
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f7fa fe94 	bl	80082d4 <lwip_htons>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d5b2:	b29b      	uxth	r3, r3
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f7fa fe8d 	bl	80082d4 <lwip_htons>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	461a      	mov	r2, r3
 800d5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	68db      	ldr	r3, [r3, #12]
 800d5c4:	4322      	orrs	r2, r4
 800d5c6:	b292      	uxth	r2, r2
 800d5c8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ce:	b29a      	uxth	r2, r3
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5d4:	4413      	add	r3, r2
 800d5d6:	b299      	uxth	r1, r3
 800d5d8:	4b3b      	ldr	r3, [pc, #236]	; (800d6c8 <tcp_receive+0xfd8>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	b29a      	uxth	r2, r3
 800d5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	1a8a      	subs	r2, r1, r2
 800d5e4:	b292      	uxth	r2, r2
 800d5e6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800d5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	685a      	ldr	r2, [r3, #4]
 800d5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	891b      	ldrh	r3, [r3, #8]
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	4610      	mov	r0, r2
 800d5f8:	f7fb feea 	bl	80093d0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800d5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	891c      	ldrh	r4, [r3, #8]
 800d602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	68db      	ldr	r3, [r3, #12]
 800d608:	899b      	ldrh	r3, [r3, #12]
 800d60a:	b29b      	uxth	r3, r3
 800d60c:	4618      	mov	r0, r3
 800d60e:	f7fa fe61 	bl	80082d4 <lwip_htons>
 800d612:	4603      	mov	r3, r0
 800d614:	f003 0303 	and.w	r3, r3, #3
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d001      	beq.n	800d620 <tcp_receive+0xf30>
 800d61c:	2301      	movs	r3, #1
 800d61e:	e000      	b.n	800d622 <tcp_receive+0xf32>
 800d620:	2300      	movs	r3, #0
 800d622:	4423      	add	r3, r4
 800d624:	b29a      	uxth	r2, r3
 800d626:	4b2a      	ldr	r3, [pc, #168]	; (800d6d0 <tcp_receive+0xfe0>)
 800d628:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d62a:	4b29      	ldr	r3, [pc, #164]	; (800d6d0 <tcp_receive+0xfe0>)
 800d62c:	881b      	ldrh	r3, [r3, #0]
 800d62e:	461a      	mov	r2, r3
 800d630:	4b25      	ldr	r3, [pc, #148]	; (800d6c8 <tcp_receive+0xfd8>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	441a      	add	r2, r3
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d63a:	6879      	ldr	r1, [r7, #4]
 800d63c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d63e:	440b      	add	r3, r1
 800d640:	429a      	cmp	r2, r3
 800d642:	d01b      	beq.n	800d67c <tcp_receive+0xf8c>
 800d644:	4b23      	ldr	r3, [pc, #140]	; (800d6d4 <tcp_receive+0xfe4>)
 800d646:	f240 627a 	movw	r2, #1658	; 0x67a
 800d64a:	4923      	ldr	r1, [pc, #140]	; (800d6d8 <tcp_receive+0xfe8>)
 800d64c:	4823      	ldr	r0, [pc, #140]	; (800d6dc <tcp_receive+0xfec>)
 800d64e:	f004 fc59 	bl	8011f04 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800d652:	e013      	b.n	800d67c <tcp_receive+0xf8c>
              }
            }
            prev = next;
 800d654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d656:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d660:	2b00      	cmp	r3, #0
 800d662:	f47f aeab 	bne.w	800d3bc <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 800d666:	e00f      	b.n	800d688 <tcp_receive+0xf98>
                break;
 800d668:	bf00      	nop
 800d66a:	e00d      	b.n	800d688 <tcp_receive+0xf98>
                break;
 800d66c:	bf00      	nop
 800d66e:	e00b      	b.n	800d688 <tcp_receive+0xf98>
                  break;
 800d670:	bf00      	nop
 800d672:	e009      	b.n	800d688 <tcp_receive+0xf98>
                  break;
 800d674:	bf00      	nop
 800d676:	e007      	b.n	800d688 <tcp_receive+0xf98>
                  break;
 800d678:	bf00      	nop
 800d67a:	e005      	b.n	800d688 <tcp_receive+0xf98>
                break;
 800d67c:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800d67e:	e003      	b.n	800d688 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f000 ff4d 	bl	800e520 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d686:	e01a      	b.n	800d6be <tcp_receive+0xfce>
 800d688:	e019      	b.n	800d6be <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800d68a:	4b0f      	ldr	r3, [pc, #60]	; (800d6c8 <tcp_receive+0xfd8>)
 800d68c:	681a      	ldr	r2, [r3, #0]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d692:	1ad3      	subs	r3, r2, r3
 800d694:	2b00      	cmp	r3, #0
 800d696:	db0a      	blt.n	800d6ae <tcp_receive+0xfbe>
 800d698:	4b0b      	ldr	r3, [pc, #44]	; (800d6c8 <tcp_receive+0xfd8>)
 800d69a:	681a      	ldr	r2, [r3, #0]
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6a0:	6879      	ldr	r1, [r7, #4]
 800d6a2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d6a4:	440b      	add	r3, r1
 800d6a6:	1ad3      	subs	r3, r2, r3
 800d6a8:	3301      	adds	r3, #1
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	dd07      	ble.n	800d6be <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	7e9b      	ldrb	r3, [r3, #26]
 800d6b2:	f043 0302 	orr.w	r3, r3, #2
 800d6b6:	b2da      	uxtb	r2, r3
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800d6bc:	e7ff      	b.n	800d6be <tcp_receive+0xfce>
 800d6be:	bf00      	nop
 800d6c0:	3734      	adds	r7, #52	; 0x34
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6c6:	bf00      	nop
 800d6c8:	20004320 	.word	0x20004320
 800d6cc:	20004300 	.word	0x20004300
 800d6d0:	2000432a 	.word	0x2000432a
 800d6d4:	08013b04 	.word	0x08013b04
 800d6d8:	08013dd0 	.word	0x08013dd0
 800d6dc:	08013b48 	.word	0x08013b48

0800d6e0 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	b083      	sub	sp, #12
 800d6e4:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800d6e6:	4b17      	ldr	r3, [pc, #92]	; (800d744 <tcp_getoptbyte+0x64>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d005      	beq.n	800d6fa <tcp_getoptbyte+0x1a>
 800d6ee:	4b16      	ldr	r3, [pc, #88]	; (800d748 <tcp_getoptbyte+0x68>)
 800d6f0:	881a      	ldrh	r2, [r3, #0]
 800d6f2:	4b16      	ldr	r3, [pc, #88]	; (800d74c <tcp_getoptbyte+0x6c>)
 800d6f4:	881b      	ldrh	r3, [r3, #0]
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d20e      	bcs.n	800d718 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800d6fa:	4b15      	ldr	r3, [pc, #84]	; (800d750 <tcp_getoptbyte+0x70>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	3314      	adds	r3, #20
 800d700:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800d702:	4b11      	ldr	r3, [pc, #68]	; (800d748 <tcp_getoptbyte+0x68>)
 800d704:	881b      	ldrh	r3, [r3, #0]
 800d706:	1c5a      	adds	r2, r3, #1
 800d708:	b291      	uxth	r1, r2
 800d70a:	4a0f      	ldr	r2, [pc, #60]	; (800d748 <tcp_getoptbyte+0x68>)
 800d70c:	8011      	strh	r1, [r2, #0]
 800d70e:	461a      	mov	r2, r3
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	4413      	add	r3, r2
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	e010      	b.n	800d73a <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800d718:	4b0b      	ldr	r3, [pc, #44]	; (800d748 <tcp_getoptbyte+0x68>)
 800d71a:	881b      	ldrh	r3, [r3, #0]
 800d71c:	1c5a      	adds	r2, r3, #1
 800d71e:	b291      	uxth	r1, r2
 800d720:	4a09      	ldr	r2, [pc, #36]	; (800d748 <tcp_getoptbyte+0x68>)
 800d722:	8011      	strh	r1, [r2, #0]
 800d724:	b2da      	uxtb	r2, r3
 800d726:	4b09      	ldr	r3, [pc, #36]	; (800d74c <tcp_getoptbyte+0x6c>)
 800d728:	881b      	ldrh	r3, [r3, #0]
 800d72a:	b2db      	uxtb	r3, r3
 800d72c:	1ad3      	subs	r3, r2, r3
 800d72e:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800d730:	4b04      	ldr	r3, [pc, #16]	; (800d744 <tcp_getoptbyte+0x64>)
 800d732:	681a      	ldr	r2, [r3, #0]
 800d734:	79fb      	ldrb	r3, [r7, #7]
 800d736:	4413      	add	r3, r2
 800d738:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	370c      	adds	r7, #12
 800d73e:	46bd      	mov	sp, r7
 800d740:	bc80      	pop	{r7}
 800d742:	4770      	bx	lr
 800d744:	20004318 	.word	0x20004318
 800d748:	2000431c 	.word	0x2000431c
 800d74c:	20004316 	.word	0x20004316
 800d750:	20004310 	.word	0x20004310

0800d754 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b084      	sub	sp, #16
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800d75c:	4b2e      	ldr	r3, [pc, #184]	; (800d818 <tcp_parseopt+0xc4>)
 800d75e:	881b      	ldrh	r3, [r3, #0]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d055      	beq.n	800d810 <tcp_parseopt+0xbc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d764:	4b2d      	ldr	r3, [pc, #180]	; (800d81c <tcp_parseopt+0xc8>)
 800d766:	2200      	movs	r2, #0
 800d768:	801a      	strh	r2, [r3, #0]
 800d76a:	e045      	b.n	800d7f8 <tcp_parseopt+0xa4>
      u8_t opt = tcp_getoptbyte();
 800d76c:	f7ff ffb8 	bl	800d6e0 <tcp_getoptbyte>
 800d770:	4603      	mov	r3, r0
 800d772:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800d774:	7bfb      	ldrb	r3, [r7, #15]
 800d776:	2b02      	cmp	r3, #2
 800d778:	d006      	beq.n	800d788 <tcp_parseopt+0x34>
 800d77a:	2b02      	cmp	r3, #2
 800d77c:	dc2b      	bgt.n	800d7d6 <tcp_parseopt+0x82>
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d041      	beq.n	800d806 <tcp_parseopt+0xb2>
 800d782:	2b01      	cmp	r3, #1
 800d784:	d127      	bne.n	800d7d6 <tcp_parseopt+0x82>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case LWIP_TCP_OPT_NOP:
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
 800d786:	e037      	b.n	800d7f8 <tcp_parseopt+0xa4>
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d788:	f7ff ffaa 	bl	800d6e0 <tcp_getoptbyte>
 800d78c:	4603      	mov	r3, r0
 800d78e:	2b04      	cmp	r3, #4
 800d790:	d13b      	bne.n	800d80a <tcp_parseopt+0xb6>
 800d792:	4b22      	ldr	r3, [pc, #136]	; (800d81c <tcp_parseopt+0xc8>)
 800d794:	881b      	ldrh	r3, [r3, #0]
 800d796:	3301      	adds	r3, #1
 800d798:	4a1f      	ldr	r2, [pc, #124]	; (800d818 <tcp_parseopt+0xc4>)
 800d79a:	8812      	ldrh	r2, [r2, #0]
 800d79c:	4293      	cmp	r3, r2
 800d79e:	da34      	bge.n	800d80a <tcp_parseopt+0xb6>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800d7a0:	f7ff ff9e 	bl	800d6e0 <tcp_getoptbyte>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	b29b      	uxth	r3, r3
 800d7a8:	021b      	lsls	r3, r3, #8
 800d7aa:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800d7ac:	f7ff ff98 	bl	800d6e0 <tcp_getoptbyte>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	b29a      	uxth	r2, r3
 800d7b4:	89bb      	ldrh	r3, [r7, #12]
 800d7b6:	4313      	orrs	r3, r2
 800d7b8:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800d7ba:	89bb      	ldrh	r3, [r7, #12]
 800d7bc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d7c0:	d804      	bhi.n	800d7cc <tcp_parseopt+0x78>
 800d7c2:	89bb      	ldrh	r3, [r7, #12]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d001      	beq.n	800d7cc <tcp_parseopt+0x78>
 800d7c8:	89ba      	ldrh	r2, [r7, #12]
 800d7ca:	e001      	b.n	800d7d0 <tcp_parseopt+0x7c>
 800d7cc:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 800d7d4:	e010      	b.n	800d7f8 <tcp_parseopt+0xa4>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800d7d6:	f7ff ff83 	bl	800d6e0 <tcp_getoptbyte>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800d7de:	7afb      	ldrb	r3, [r7, #11]
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d914      	bls.n	800d80e <tcp_parseopt+0xba>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800d7e4:	7afb      	ldrb	r3, [r7, #11]
 800d7e6:	b29a      	uxth	r2, r3
 800d7e8:	4b0c      	ldr	r3, [pc, #48]	; (800d81c <tcp_parseopt+0xc8>)
 800d7ea:	881b      	ldrh	r3, [r3, #0]
 800d7ec:	4413      	add	r3, r2
 800d7ee:	b29b      	uxth	r3, r3
 800d7f0:	3b02      	subs	r3, #2
 800d7f2:	b29a      	uxth	r2, r3
 800d7f4:	4b09      	ldr	r3, [pc, #36]	; (800d81c <tcp_parseopt+0xc8>)
 800d7f6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d7f8:	4b08      	ldr	r3, [pc, #32]	; (800d81c <tcp_parseopt+0xc8>)
 800d7fa:	881a      	ldrh	r2, [r3, #0]
 800d7fc:	4b06      	ldr	r3, [pc, #24]	; (800d818 <tcp_parseopt+0xc4>)
 800d7fe:	881b      	ldrh	r3, [r3, #0]
 800d800:	429a      	cmp	r2, r3
 800d802:	d3b3      	bcc.n	800d76c <tcp_parseopt+0x18>
 800d804:	e004      	b.n	800d810 <tcp_parseopt+0xbc>
        return;
 800d806:	bf00      	nop
 800d808:	e002      	b.n	800d810 <tcp_parseopt+0xbc>
          return;
 800d80a:	bf00      	nop
 800d80c:	e000      	b.n	800d810 <tcp_parseopt+0xbc>
          return;
 800d80e:	bf00      	nop
      }
    }
  }
}
 800d810:	3710      	adds	r7, #16
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}
 800d816:	bf00      	nop
 800d818:	20004314 	.word	0x20004314
 800d81c:	2000431c 	.word	0x2000431c

0800d820 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d820:	b480      	push	{r7}
 800d822:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d824:	4b05      	ldr	r3, [pc, #20]	; (800d83c <tcp_trigger_input_pcb_close+0x1c>)
 800d826:	781b      	ldrb	r3, [r3, #0]
 800d828:	f043 0310 	orr.w	r3, r3, #16
 800d82c:	b2da      	uxtb	r2, r3
 800d82e:	4b03      	ldr	r3, [pc, #12]	; (800d83c <tcp_trigger_input_pcb_close+0x1c>)
 800d830:	701a      	strb	r2, [r3, #0]
}
 800d832:	bf00      	nop
 800d834:	46bd      	mov	sp, r7
 800d836:	bc80      	pop	{r7}
 800d838:	4770      	bx	lr
 800d83a:	bf00      	nop
 800d83c:	2000432d 	.word	0x2000432d

0800d840 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b086      	sub	sp, #24
 800d844:	af00      	add	r7, sp, #0
 800d846:	60f8      	str	r0, [r7, #12]
 800d848:	607b      	str	r3, [r7, #4]
 800d84a:	460b      	mov	r3, r1
 800d84c:	817b      	strh	r3, [r7, #10]
 800d84e:	4613      	mov	r3, r2
 800d850:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d852:	897a      	ldrh	r2, [r7, #10]
 800d854:	893b      	ldrh	r3, [r7, #8]
 800d856:	4413      	add	r3, r2
 800d858:	b29b      	uxth	r3, r3
 800d85a:	3314      	adds	r3, #20
 800d85c:	b29b      	uxth	r3, r3
 800d85e:	2200      	movs	r2, #0
 800d860:	4619      	mov	r1, r3
 800d862:	2001      	movs	r0, #1
 800d864:	f7fb fbb6 	bl	8008fd4 <pbuf_alloc>
 800d868:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d056      	beq.n	800d91e <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d870:	897b      	ldrh	r3, [r7, #10]
 800d872:	3313      	adds	r3, #19
 800d874:	697a      	ldr	r2, [r7, #20]
 800d876:	8952      	ldrh	r2, [r2, #10]
 800d878:	4293      	cmp	r3, r2
 800d87a:	db05      	blt.n	800d888 <tcp_output_alloc_header+0x48>
 800d87c:	4b2a      	ldr	r3, [pc, #168]	; (800d928 <tcp_output_alloc_header+0xe8>)
 800d87e:	2272      	movs	r2, #114	; 0x72
 800d880:	492a      	ldr	r1, [pc, #168]	; (800d92c <tcp_output_alloc_header+0xec>)
 800d882:	482b      	ldr	r0, [pc, #172]	; (800d930 <tcp_output_alloc_header+0xf0>)
 800d884:	f004 fb3e 	bl	8011f04 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	685b      	ldr	r3, [r3, #4]
 800d88c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	8adb      	ldrh	r3, [r3, #22]
 800d892:	4618      	mov	r0, r3
 800d894:	f7fa fd1e 	bl	80082d4 <lwip_htons>
 800d898:	4603      	mov	r3, r0
 800d89a:	461a      	mov	r2, r3
 800d89c:	693b      	ldr	r3, [r7, #16]
 800d89e:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	8b1b      	ldrh	r3, [r3, #24]
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f7fa fd15 	bl	80082d4 <lwip_htons>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	687a      	ldr	r2, [r7, #4]
 800d8b6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f7fa fd16 	bl	80082ee <lwip_htonl>
 800d8c2:	4602      	mov	r2, r0
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800d8c8:	897b      	ldrh	r3, [r7, #10]
 800d8ca:	089b      	lsrs	r3, r3, #2
 800d8cc:	b29b      	uxth	r3, r3
 800d8ce:	3305      	adds	r3, #5
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	031b      	lsls	r3, r3, #12
 800d8d4:	b29b      	uxth	r3, r3
 800d8d6:	f043 0310 	orr.w	r3, r3, #16
 800d8da:	b29b      	uxth	r3, r3
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f7fa fcf9 	bl	80082d4 <lwip_htons>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	461a      	mov	r2, r3
 800d8e6:	693b      	ldr	r3, [r7, #16]
 800d8e8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f7fa fcf0 	bl	80082d4 <lwip_htons>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	461a      	mov	r2, r3
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d8fc:	693b      	ldr	r3, [r7, #16]
 800d8fe:	2200      	movs	r2, #0
 800d900:	741a      	strb	r2, [r3, #16]
 800d902:	2200      	movs	r2, #0
 800d904:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d906:	693b      	ldr	r3, [r7, #16]
 800d908:	2200      	movs	r2, #0
 800d90a:	749a      	strb	r2, [r3, #18]
 800d90c:	2200      	movs	r2, #0
 800d90e:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d914:	68fa      	ldr	r2, [r7, #12]
 800d916:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d918:	441a      	add	r2, r3
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800d91e:	697b      	ldr	r3, [r7, #20]
}
 800d920:	4618      	mov	r0, r3
 800d922:	3718      	adds	r7, #24
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}
 800d928:	08013e8c 	.word	0x08013e8c
 800d92c:	08013ec0 	.word	0x08013ec0
 800d930:	08013ef0 	.word	0x08013ef0

0800d934 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d934:	b590      	push	{r4, r7, lr}
 800d936:	b085      	sub	sp, #20
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d940:	2b00      	cmp	r3, #0
 800d942:	d02d      	beq.n	800d9a0 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d948:	60fb      	str	r3, [r7, #12]
 800d94a:	e002      	b.n	800d952 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d1f8      	bne.n	800d94c <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	68db      	ldr	r3, [r3, #12]
 800d95e:	899b      	ldrh	r3, [r3, #12]
 800d960:	b29b      	uxth	r3, r3
 800d962:	4618      	mov	r0, r3
 800d964:	f7fa fcb6 	bl	80082d4 <lwip_htons>
 800d968:	4603      	mov	r3, r0
 800d96a:	f003 0307 	and.w	r3, r3, #7
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d116      	bne.n	800d9a0 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	68db      	ldr	r3, [r3, #12]
 800d976:	899b      	ldrh	r3, [r3, #12]
 800d978:	b29c      	uxth	r4, r3
 800d97a:	2001      	movs	r0, #1
 800d97c:	f7fa fcaa 	bl	80082d4 <lwip_htons>
 800d980:	4603      	mov	r3, r0
 800d982:	461a      	mov	r2, r3
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	68db      	ldr	r3, [r3, #12]
 800d988:	4322      	orrs	r2, r4
 800d98a:	b292      	uxth	r2, r2
 800d98c:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	7e9b      	ldrb	r3, [r3, #26]
 800d992:	f043 0320 	orr.w	r3, r3, #32
 800d996:	b2da      	uxtb	r2, r3
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800d99c:	2300      	movs	r3, #0
 800d99e:	e004      	b.n	800d9aa <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d9a0:	2101      	movs	r1, #1
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f000 fcc0 	bl	800e328 <tcp_enqueue_flags>
 800d9a8:	4603      	mov	r3, r0
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3714      	adds	r7, #20
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd90      	pop	{r4, r7, pc}
	...

0800d9b4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800d9b4:	b590      	push	{r4, r7, lr}
 800d9b6:	b087      	sub	sp, #28
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	60f8      	str	r0, [r7, #12]
 800d9bc:	60b9      	str	r1, [r7, #8]
 800d9be:	603b      	str	r3, [r7, #0]
 800d9c0:	4613      	mov	r3, r2
 800d9c2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d9c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d9c8:	009b      	lsls	r3, r3, #2
 800d9ca:	b2db      	uxtb	r3, r3
 800d9cc:	f003 0304 	and.w	r3, r3, #4
 800d9d0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d9d2:	2003      	movs	r0, #3
 800d9d4:	f7fb f86a 	bl	8008aac <memp_malloc>
 800d9d8:	6138      	str	r0, [r7, #16]
 800d9da:	693b      	ldr	r3, [r7, #16]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d104      	bne.n	800d9ea <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d9e0:	68b8      	ldr	r0, [r7, #8]
 800d9e2:	f7fb fe69 	bl	80096b8 <pbuf_free>
    return NULL;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	e061      	b.n	800daae <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 800d9ea:	693b      	ldr	r3, [r7, #16]
 800d9ec:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d9f0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d9f8:	693b      	ldr	r3, [r7, #16]
 800d9fa:	68ba      	ldr	r2, [r7, #8]
 800d9fc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	891a      	ldrh	r2, [r3, #8]
 800da02:	7dfb      	ldrb	r3, [r7, #23]
 800da04:	b29b      	uxth	r3, r3
 800da06:	429a      	cmp	r2, r3
 800da08:	d205      	bcs.n	800da16 <tcp_create_segment+0x62>
 800da0a:	4b2b      	ldr	r3, [pc, #172]	; (800dab8 <tcp_create_segment+0x104>)
 800da0c:	22ba      	movs	r2, #186	; 0xba
 800da0e:	492b      	ldr	r1, [pc, #172]	; (800dabc <tcp_create_segment+0x108>)
 800da10:	482b      	ldr	r0, [pc, #172]	; (800dac0 <tcp_create_segment+0x10c>)
 800da12:	f004 fa77 	bl	8011f04 <iprintf>
  seg->len = p->tot_len - optlen;
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	891a      	ldrh	r2, [r3, #8]
 800da1a:	7dfb      	ldrb	r3, [r7, #23]
 800da1c:	b29b      	uxth	r3, r3
 800da1e:	1ad3      	subs	r3, r2, r3
 800da20:	b29a      	uxth	r2, r3
 800da22:	693b      	ldr	r3, [r7, #16]
 800da24:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800da26:	2114      	movs	r1, #20
 800da28:	68b8      	ldr	r0, [r7, #8]
 800da2a:	f7fb fe21 	bl	8009670 <pbuf_header>
 800da2e:	4603      	mov	r3, r0
 800da30:	2b00      	cmp	r3, #0
 800da32:	d004      	beq.n	800da3e <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800da34:	6938      	ldr	r0, [r7, #16]
 800da36:	f7fd f939 	bl	800acac <tcp_seg_free>
    return NULL;
 800da3a:	2300      	movs	r3, #0
 800da3c:	e037      	b.n	800daae <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	685b      	ldr	r3, [r3, #4]
 800da42:	685a      	ldr	r2, [r3, #4]
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	8ada      	ldrh	r2, [r3, #22]
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	68dc      	ldr	r4, [r3, #12]
 800da50:	4610      	mov	r0, r2
 800da52:	f7fa fc3f 	bl	80082d4 <lwip_htons>
 800da56:	4603      	mov	r3, r0
 800da58:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	8b1a      	ldrh	r2, [r3, #24]
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	68dc      	ldr	r4, [r3, #12]
 800da62:	4610      	mov	r0, r2
 800da64:	f7fa fc36 	bl	80082d4 <lwip_htons>
 800da68:	4603      	mov	r3, r0
 800da6a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	68dc      	ldr	r4, [r3, #12]
 800da70:	6838      	ldr	r0, [r7, #0]
 800da72:	f7fa fc3c 	bl	80082ee <lwip_htonl>
 800da76:	4603      	mov	r3, r0
 800da78:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800da7a:	7dfb      	ldrb	r3, [r7, #23]
 800da7c:	089b      	lsrs	r3, r3, #2
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	b29b      	uxth	r3, r3
 800da82:	3305      	adds	r3, #5
 800da84:	b29b      	uxth	r3, r3
 800da86:	031b      	lsls	r3, r3, #12
 800da88:	b29a      	uxth	r2, r3
 800da8a:	79fb      	ldrb	r3, [r7, #7]
 800da8c:	b29b      	uxth	r3, r3
 800da8e:	4313      	orrs	r3, r2
 800da90:	b29a      	uxth	r2, r3
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	68dc      	ldr	r4, [r3, #12]
 800da96:	4610      	mov	r0, r2
 800da98:	f7fa fc1c 	bl	80082d4 <lwip_htons>
 800da9c:	4603      	mov	r3, r0
 800da9e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	68db      	ldr	r3, [r3, #12]
 800daa4:	2200      	movs	r2, #0
 800daa6:	749a      	strb	r2, [r3, #18]
 800daa8:	2200      	movs	r2, #0
 800daaa:	74da      	strb	r2, [r3, #19]
  return seg;
 800daac:	693b      	ldr	r3, [r7, #16]
}
 800daae:	4618      	mov	r0, r3
 800dab0:	371c      	adds	r7, #28
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd90      	pop	{r4, r7, pc}
 800dab6:	bf00      	nop
 800dab8:	08013e8c 	.word	0x08013e8c
 800dabc:	08013f18 	.word	0x08013f18
 800dac0:	08013ef0 	.word	0x08013ef0

0800dac4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b086      	sub	sp, #24
 800dac8:	af00      	add	r7, sp, #0
 800daca:	607b      	str	r3, [r7, #4]
 800dacc:	4603      	mov	r3, r0
 800dace:	73fb      	strb	r3, [r7, #15]
 800dad0:	460b      	mov	r3, r1
 800dad2:	81bb      	strh	r3, [r7, #12]
 800dad4:	4613      	mov	r3, r2
 800dad6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800dad8:	89bb      	ldrh	r3, [r7, #12]
 800dada:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800dadc:	89ba      	ldrh	r2, [r7, #12]
 800dade:	897b      	ldrh	r3, [r7, #10]
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d221      	bcs.n	800db28 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800dae4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dae8:	f003 0302 	and.w	r3, r3, #2
 800daec:	2b00      	cmp	r3, #0
 800daee:	d111      	bne.n	800db14 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 800daf0:	6a3b      	ldr	r3, [r7, #32]
 800daf2:	7e9b      	ldrb	r3, [r3, #26]
 800daf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d115      	bne.n	800db28 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 800dafc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800db00:	2b00      	cmp	r3, #0
 800db02:	d007      	beq.n	800db14 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 800db04:	6a3b      	ldr	r3, [r7, #32]
 800db06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d103      	bne.n	800db14 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 800db0c:	6a3b      	ldr	r3, [r7, #32]
 800db0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 800db10:	2b00      	cmp	r3, #0
 800db12:	d009      	beq.n	800db28 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800db14:	89bb      	ldrh	r3, [r7, #12]
 800db16:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800db1a:	f023 0203 	bic.w	r2, r3, #3
 800db1e:	897b      	ldrh	r3, [r7, #10]
 800db20:	4293      	cmp	r3, r2
 800db22:	bf28      	it	cs
 800db24:	4613      	movcs	r3, r2
 800db26:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800db28:	8af9      	ldrh	r1, [r7, #22]
 800db2a:	7bfb      	ldrb	r3, [r7, #15]
 800db2c:	2200      	movs	r2, #0
 800db2e:	4618      	mov	r0, r3
 800db30:	f7fb fa50 	bl	8008fd4 <pbuf_alloc>
 800db34:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d101      	bne.n	800db40 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 800db3c:	2300      	movs	r3, #0
 800db3e:	e019      	b.n	800db74 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d006      	beq.n	800db56 <tcp_pbuf_prealloc+0x92>
 800db48:	4b0c      	ldr	r3, [pc, #48]	; (800db7c <tcp_pbuf_prealloc+0xb8>)
 800db4a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800db4e:	490c      	ldr	r1, [pc, #48]	; (800db80 <tcp_pbuf_prealloc+0xbc>)
 800db50:	480c      	ldr	r0, [pc, #48]	; (800db84 <tcp_pbuf_prealloc+0xc0>)
 800db52:	f004 f9d7 	bl	8011f04 <iprintf>
  *oversize = p->len - length;
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	895a      	ldrh	r2, [r3, #10]
 800db5a:	89bb      	ldrh	r3, [r7, #12]
 800db5c:	1ad3      	subs	r3, r2, r3
 800db5e:	b29a      	uxth	r2, r3
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	89ba      	ldrh	r2, [r7, #12]
 800db68:	811a      	strh	r2, [r3, #8]
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	891a      	ldrh	r2, [r3, #8]
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	815a      	strh	r2, [r3, #10]
  return p;
 800db72:	693b      	ldr	r3, [r7, #16]
}
 800db74:	4618      	mov	r0, r3
 800db76:	3718      	adds	r7, #24
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}
 800db7c:	08013e8c 	.word	0x08013e8c
 800db80:	08013f30 	.word	0x08013f30
 800db84:	08013ef0 	.word	0x08013ef0

0800db88 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b082      	sub	sp, #8
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
 800db90:	460b      	mov	r3, r1
 800db92:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	7d1b      	ldrb	r3, [r3, #20]
 800db98:	2b04      	cmp	r3, #4
 800db9a:	d00e      	beq.n	800dbba <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800dba0:	2b07      	cmp	r3, #7
 800dba2:	d00a      	beq.n	800dbba <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800dba8:	2b02      	cmp	r3, #2
 800dbaa:	d006      	beq.n	800dbba <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800dbb0:	2b03      	cmp	r3, #3
 800dbb2:	d002      	beq.n	800dbba <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800dbb4:	f06f 030a 	mvn.w	r3, #10
 800dbb8:	e04f      	b.n	800dc5a <tcp_write_checks+0xd2>
  } else if (len == 0) {
 800dbba:	887b      	ldrh	r3, [r7, #2]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d101      	bne.n	800dbc4 <tcp_write_checks+0x3c>
    return ERR_OK;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	e04a      	b.n	800dc5a <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dbca:	887a      	ldrh	r2, [r7, #2]
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d909      	bls.n	800dbe4 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	7e9b      	ldrb	r3, [r3, #26]
 800dbd4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dbd8:	b2da      	uxtb	r2, r3
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800dbde:	f04f 33ff 	mov.w	r3, #4294967295
 800dbe2:	e03a      	b.n	800dc5a <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dbea:	2b08      	cmp	r3, #8
 800dbec:	d806      	bhi.n	800dbfc <tcp_write_checks+0x74>
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dbf4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800dbf8:	4293      	cmp	r3, r2
 800dbfa:	d909      	bls.n	800dc10 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	7e9b      	ldrb	r3, [r3, #26]
 800dc00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dc04:	b2da      	uxtb	r2, r3
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800dc0a:	f04f 33ff 	mov.w	r3, #4294967295
 800dc0e:	e024      	b.n	800dc5a <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d00f      	beq.n	800dc3a <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d11a      	bne.n	800dc58 <tcp_write_checks+0xd0>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d116      	bne.n	800dc58 <tcp_write_checks+0xd0>
 800dc2a:	4b0e      	ldr	r3, [pc, #56]	; (800dc64 <tcp_write_checks+0xdc>)
 800dc2c:	f240 1255 	movw	r2, #341	; 0x155
 800dc30:	490d      	ldr	r1, [pc, #52]	; (800dc68 <tcp_write_checks+0xe0>)
 800dc32:	480e      	ldr	r0, [pc, #56]	; (800dc6c <tcp_write_checks+0xe4>)
 800dc34:	f004 f966 	bl	8011f04 <iprintf>
 800dc38:	e00e      	b.n	800dc58 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d103      	bne.n	800dc4a <tcp_write_checks+0xc2>
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d006      	beq.n	800dc58 <tcp_write_checks+0xd0>
 800dc4a:	4b06      	ldr	r3, [pc, #24]	; (800dc64 <tcp_write_checks+0xdc>)
 800dc4c:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800dc50:	4907      	ldr	r1, [pc, #28]	; (800dc70 <tcp_write_checks+0xe8>)
 800dc52:	4806      	ldr	r0, [pc, #24]	; (800dc6c <tcp_write_checks+0xe4>)
 800dc54:	f004 f956 	bl	8011f04 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800dc58:	2300      	movs	r3, #0
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3708      	adds	r7, #8
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
 800dc62:	bf00      	nop
 800dc64:	08013e8c 	.word	0x08013e8c
 800dc68:	08013f44 	.word	0x08013f44
 800dc6c:	08013ef0 	.word	0x08013ef0
 800dc70:	08013f80 	.word	0x08013f80

0800dc74 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800dc74:	b590      	push	{r4, r7, lr}
 800dc76:	b09b      	sub	sp, #108	; 0x6c
 800dc78:	af04      	add	r7, sp, #16
 800dc7a:	60f8      	str	r0, [r7, #12]
 800dc7c:	60b9      	str	r1, [r7, #8]
 800dc7e:	4611      	mov	r1, r2
 800dc80:	461a      	mov	r2, r3
 800dc82:	460b      	mov	r3, r1
 800dc84:	80fb      	strh	r3, [r7, #6]
 800dc86:	4613      	mov	r3, r2
 800dc88:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	653b      	str	r3, [r7, #80]	; 0x50
 800dc92:	2300      	movs	r3, #0
 800dc94:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dc96:	2300      	movs	r3, #0
 800dc98:	64bb      	str	r3, [r7, #72]	; 0x48
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800dc9e:	2300      	movs	r3, #0
 800dca0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 800dca4:	2300      	movs	r3, #0
 800dca6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dcc2:	085b      	lsrs	r3, r3, #1
 800dcc4:	b29a      	uxth	r2, r3
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dcca:	4293      	cmp	r3, r2
 800dccc:	bf28      	it	cs
 800dcce:	4613      	movcs	r3, r2
 800dcd0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800dcd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d102      	bne.n	800dcde <tcp_write+0x6a>
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dcdc:	e000      	b.n	800dce0 <tcp_write+0x6c>
 800dcde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dce0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d109      	bne.n	800dcfc <tcp_write+0x88>
 800dce8:	4b92      	ldr	r3, [pc, #584]	; (800df34 <tcp_write+0x2c0>)
 800dcea:	f240 1291 	movw	r2, #401	; 0x191
 800dcee:	4992      	ldr	r1, [pc, #584]	; (800df38 <tcp_write+0x2c4>)
 800dcf0:	4892      	ldr	r0, [pc, #584]	; (800df3c <tcp_write+0x2c8>)
 800dcf2:	f004 f907 	bl	8011f04 <iprintf>
 800dcf6:	f06f 030f 	mvn.w	r3, #15
 800dcfa:	e30a      	b.n	800e312 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800dcfc:	88fb      	ldrh	r3, [r7, #6]
 800dcfe:	4619      	mov	r1, r3
 800dd00:	68f8      	ldr	r0, [r7, #12]
 800dd02:	f7ff ff41 	bl	800db88 <tcp_write_checks>
 800dd06:	4603      	mov	r3, r0
 800dd08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800dd0c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d002      	beq.n	800dd1a <tcp_write+0xa6>
    return err;
 800dd14:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800dd18:	e2fb      	b.n	800e312 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd20:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	f000 80f4 	beq.w	800df16 <tcp_write+0x2a2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd32:	653b      	str	r3, [r7, #80]	; 0x50
 800dd34:	e002      	b.n	800dd3c <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 800dd36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dd3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d1f8      	bne.n	800dd36 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800dd44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd46:	7a9b      	ldrb	r3, [r3, #10]
 800dd48:	009b      	lsls	r3, r3, #2
 800dd4a:	b29b      	uxth	r3, r3
 800dd4c:	f003 0304 	and.w	r3, r3, #4
 800dd50:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800dd52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dd54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd56:	891b      	ldrh	r3, [r3, #8]
 800dd58:	4619      	mov	r1, r3
 800dd5a:	8c3b      	ldrh	r3, [r7, #32]
 800dd5c:	440b      	add	r3, r1
 800dd5e:	429a      	cmp	r2, r3
 800dd60:	da06      	bge.n	800dd70 <tcp_write+0xfc>
 800dd62:	4b74      	ldr	r3, [pc, #464]	; (800df34 <tcp_write+0x2c0>)
 800dd64:	f240 12c7 	movw	r2, #455	; 0x1c7
 800dd68:	4975      	ldr	r1, [pc, #468]	; (800df40 <tcp_write+0x2cc>)
 800dd6a:	4874      	ldr	r0, [pc, #464]	; (800df3c <tcp_write+0x2c8>)
 800dd6c:	f004 f8ca 	bl	8011f04 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800dd70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd72:	891a      	ldrh	r2, [r3, #8]
 800dd74:	8c3b      	ldrh	r3, [r7, #32]
 800dd76:	4413      	add	r3, r2
 800dd78:	b29b      	uxth	r3, r3
 800dd7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dd7c:	1ad3      	subs	r3, r2, r3
 800dd7e:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800dd86:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800dd88:	8a7b      	ldrh	r3, [r7, #18]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d026      	beq.n	800dddc <tcp_write+0x168>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800dd8e:	8a7b      	ldrh	r3, [r7, #18]
 800dd90:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800dd92:	429a      	cmp	r2, r3
 800dd94:	d206      	bcs.n	800dda4 <tcp_write+0x130>
 800dd96:	4b67      	ldr	r3, [pc, #412]	; (800df34 <tcp_write+0x2c0>)
 800dd98:	f240 12d9 	movw	r2, #473	; 0x1d9
 800dd9c:	4969      	ldr	r1, [pc, #420]	; (800df44 <tcp_write+0x2d0>)
 800dd9e:	4867      	ldr	r0, [pc, #412]	; (800df3c <tcp_write+0x2c8>)
 800dda0:	f004 f8b0 	bl	8011f04 <iprintf>
      seg = last_unsent;
 800dda4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dda6:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800dda8:	8a7b      	ldrh	r3, [r7, #18]
 800ddaa:	88fa      	ldrh	r2, [r7, #6]
 800ddac:	4293      	cmp	r3, r2
 800ddae:	bf28      	it	cs
 800ddb0:	4613      	movcs	r3, r2
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ddb6:	4293      	cmp	r3, r2
 800ddb8:	bf28      	it	cs
 800ddba:	4613      	movcs	r3, r2
 800ddbc:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800ddbe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ddc2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ddc4:	4413      	add	r3, r2
 800ddc6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800ddca:	8a7a      	ldrh	r2, [r7, #18]
 800ddcc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ddce:	1ad3      	subs	r3, r2, r3
 800ddd0:	b29b      	uxth	r3, r3
 800ddd2:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800ddd4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ddd6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ddd8:	1ad3      	subs	r3, r2, r3
 800ddda:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800dddc:	8a7b      	ldrh	r3, [r7, #18]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d00b      	beq.n	800ddfa <tcp_write+0x186>
 800dde2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dde6:	88fb      	ldrh	r3, [r7, #6]
 800dde8:	429a      	cmp	r2, r3
 800ddea:	d006      	beq.n	800ddfa <tcp_write+0x186>
 800ddec:	4b51      	ldr	r3, [pc, #324]	; (800df34 <tcp_write+0x2c0>)
 800ddee:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ddf2:	4955      	ldr	r1, [pc, #340]	; (800df48 <tcp_write+0x2d4>)
 800ddf4:	4851      	ldr	r0, [pc, #324]	; (800df3c <tcp_write+0x2c8>)
 800ddf6:	f004 f885 	bl	8011f04 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800ddfa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ddfe:	88fb      	ldrh	r3, [r7, #6]
 800de00:	429a      	cmp	r2, r3
 800de02:	f080 8169 	bcs.w	800e0d8 <tcp_write+0x464>
 800de06:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800de08:	2b00      	cmp	r3, #0
 800de0a:	f000 8165 	beq.w	800e0d8 <tcp_write+0x464>
 800de0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de10:	891b      	ldrh	r3, [r3, #8]
 800de12:	2b00      	cmp	r3, #0
 800de14:	f000 8160 	beq.w	800e0d8 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800de18:	88fa      	ldrh	r2, [r7, #6]
 800de1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800de1e:	1ad2      	subs	r2, r2, r3
 800de20:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800de22:	4293      	cmp	r3, r2
 800de24:	bfa8      	it	ge
 800de26:	4613      	movge	r3, r2
 800de28:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800de2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de2c:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800de2e:	797b      	ldrb	r3, [r7, #5]
 800de30:	f003 0301 	and.w	r3, r3, #1
 800de34:	2b00      	cmp	r3, #0
 800de36:	d027      	beq.n	800de88 <tcp_write+0x214>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800de38:	f107 0012 	add.w	r0, r7, #18
 800de3c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800de3e:	8bf9      	ldrh	r1, [r7, #30]
 800de40:	2301      	movs	r3, #1
 800de42:	9302      	str	r3, [sp, #8]
 800de44:	797b      	ldrb	r3, [r7, #5]
 800de46:	9301      	str	r3, [sp, #4]
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	9300      	str	r3, [sp, #0]
 800de4c:	4603      	mov	r3, r0
 800de4e:	2004      	movs	r0, #4
 800de50:	f7ff fe38 	bl	800dac4 <tcp_pbuf_prealloc>
 800de54:	6578      	str	r0, [r7, #84]	; 0x54
 800de56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de58:	2b00      	cmp	r3, #0
 800de5a:	f000 8228 	beq.w	800e2ae <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800de5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de60:	6858      	ldr	r0, [r3, #4]
 800de62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800de66:	68ba      	ldr	r2, [r7, #8]
 800de68:	4413      	add	r3, r2
 800de6a:	8bfa      	ldrh	r2, [r7, #30]
 800de6c:	4619      	mov	r1, r3
 800de6e:	f003 ffd8 	bl	8011e22 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800de72:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800de74:	f7fb fcba 	bl	80097ec <pbuf_clen>
 800de78:	4603      	mov	r3, r0
 800de7a:	461a      	mov	r2, r3
 800de7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800de80:	4413      	add	r3, r2
 800de82:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800de86:	e03f      	b.n	800df08 <tcp_write+0x294>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800de88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de8a:	685b      	ldr	r3, [r3, #4]
 800de8c:	637b      	str	r3, [r7, #52]	; 0x34
 800de8e:	e002      	b.n	800de96 <tcp_write+0x222>
 800de90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	637b      	str	r3, [r7, #52]	; 0x34
 800de96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d1f8      	bne.n	800de90 <tcp_write+0x21c>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800de9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dea0:	7b1b      	ldrb	r3, [r3, #12]
 800dea2:	2b01      	cmp	r3, #1
 800dea4:	d115      	bne.n	800ded2 <tcp_write+0x25e>
 800dea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dea8:	685b      	ldr	r3, [r3, #4]
 800deaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800deac:	8952      	ldrh	r2, [r2, #10]
 800deae:	4413      	add	r3, r2
 800deb0:	68ba      	ldr	r2, [r7, #8]
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d10d      	bne.n	800ded2 <tcp_write+0x25e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800deb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800deba:	2b00      	cmp	r3, #0
 800debc:	d006      	beq.n	800decc <tcp_write+0x258>
 800debe:	4b1d      	ldr	r3, [pc, #116]	; (800df34 <tcp_write+0x2c0>)
 800dec0:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800dec4:	4921      	ldr	r1, [pc, #132]	; (800df4c <tcp_write+0x2d8>)
 800dec6:	481d      	ldr	r0, [pc, #116]	; (800df3c <tcp_write+0x2c8>)
 800dec8:	f004 f81c 	bl	8011f04 <iprintf>
          extendlen = seglen;
 800decc:	8bfb      	ldrh	r3, [r7, #30]
 800dece:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ded0:	e01a      	b.n	800df08 <tcp_write+0x294>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800ded2:	8bfb      	ldrh	r3, [r7, #30]
 800ded4:	2201      	movs	r2, #1
 800ded6:	4619      	mov	r1, r3
 800ded8:	2004      	movs	r0, #4
 800deda:	f7fb f87b 	bl	8008fd4 <pbuf_alloc>
 800dede:	6578      	str	r0, [r7, #84]	; 0x54
 800dee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	f000 81e5 	beq.w	800e2b2 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800dee8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800deec:	68ba      	ldr	r2, [r7, #8]
 800deee:	441a      	add	r2, r3
 800def0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800def2:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800def4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800def6:	f7fb fc79 	bl	80097ec <pbuf_clen>
 800defa:	4603      	mov	r3, r0
 800defc:	461a      	mov	r2, r3
 800defe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800df02:	4413      	add	r3, r2
 800df04:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800df08:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800df0c:	8bfb      	ldrh	r3, [r7, #30]
 800df0e:	4413      	add	r3, r2
 800df10:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800df14:	e0e0      	b.n	800e0d8 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	f000 80db 	beq.w	800e0d8 <tcp_write+0x464>
 800df22:	4b04      	ldr	r3, [pc, #16]	; (800df34 <tcp_write+0x2c0>)
 800df24:	f44f 7209 	mov.w	r2, #548	; 0x224
 800df28:	4909      	ldr	r1, [pc, #36]	; (800df50 <tcp_write+0x2dc>)
 800df2a:	4804      	ldr	r0, [pc, #16]	; (800df3c <tcp_write+0x2c8>)
 800df2c:	f003 ffea 	bl	8011f04 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800df30:	e0d2      	b.n	800e0d8 <tcp_write+0x464>
 800df32:	bf00      	nop
 800df34:	08013e8c 	.word	0x08013e8c
 800df38:	08013fb4 	.word	0x08013fb4
 800df3c:	08013ef0 	.word	0x08013ef0
 800df40:	08013fe8 	.word	0x08013fe8
 800df44:	08014000 	.word	0x08014000
 800df48:	08014020 	.word	0x08014020
 800df4c:	08014040 	.word	0x08014040
 800df50:	0801406c 	.word	0x0801406c
    struct pbuf *p;
    u16_t left = len - pos;
 800df54:	88fa      	ldrh	r2, [r7, #6]
 800df56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800df5a:	1ad3      	subs	r3, r2, r3
 800df5c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800df5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df62:	b29b      	uxth	r3, r3
 800df64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800df66:	1ad3      	subs	r3, r2, r3
 800df68:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800df6a:	8b7a      	ldrh	r2, [r7, #26]
 800df6c:	8bbb      	ldrh	r3, [r7, #28]
 800df6e:	4293      	cmp	r3, r2
 800df70:	bf28      	it	cs
 800df72:	4613      	movcs	r3, r2
 800df74:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800df76:	797b      	ldrb	r3, [r7, #5]
 800df78:	f003 0301 	and.w	r3, r3, #1
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d036      	beq.n	800dfee <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800df80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df84:	b29a      	uxth	r2, r3
 800df86:	8b3b      	ldrh	r3, [r7, #24]
 800df88:	4413      	add	r3, r2
 800df8a:	b299      	uxth	r1, r3
 800df8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df8e:	2b00      	cmp	r3, #0
 800df90:	bf0c      	ite	eq
 800df92:	2301      	moveq	r3, #1
 800df94:	2300      	movne	r3, #0
 800df96:	b2db      	uxtb	r3, r3
 800df98:	f107 0012 	add.w	r0, r7, #18
 800df9c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800df9e:	9302      	str	r3, [sp, #8]
 800dfa0:	797b      	ldrb	r3, [r7, #5]
 800dfa2:	9301      	str	r3, [sp, #4]
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	9300      	str	r3, [sp, #0]
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	2000      	movs	r0, #0
 800dfac:	f7ff fd8a 	bl	800dac4 <tcp_pbuf_prealloc>
 800dfb0:	6338      	str	r0, [r7, #48]	; 0x30
 800dfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	f000 817e 	beq.w	800e2b6 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800dfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfbc:	895b      	ldrh	r3, [r3, #10]
 800dfbe:	8b3a      	ldrh	r2, [r7, #24]
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d906      	bls.n	800dfd2 <tcp_write+0x35e>
 800dfc4:	4b8f      	ldr	r3, [pc, #572]	; (800e204 <tcp_write+0x590>)
 800dfc6:	f44f 7210 	mov.w	r2, #576	; 0x240
 800dfca:	498f      	ldr	r1, [pc, #572]	; (800e208 <tcp_write+0x594>)
 800dfcc:	488f      	ldr	r0, [pc, #572]	; (800e20c <tcp_write+0x598>)
 800dfce:	f003 ff99 	bl	8011f04 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800dfd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd4:	685a      	ldr	r2, [r3, #4]
 800dfd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfda:	18d0      	adds	r0, r2, r3
 800dfdc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dfe0:	68ba      	ldr	r2, [r7, #8]
 800dfe2:	4413      	add	r3, r2
 800dfe4:	8b3a      	ldrh	r2, [r7, #24]
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	f003 ff1b 	bl	8011e22 <memcpy>
 800dfec:	e02e      	b.n	800e04c <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800dfee:	8a7b      	ldrh	r3, [r7, #18]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d006      	beq.n	800e002 <tcp_write+0x38e>
 800dff4:	4b83      	ldr	r3, [pc, #524]	; (800e204 <tcp_write+0x590>)
 800dff6:	f240 224b 	movw	r2, #587	; 0x24b
 800dffa:	4985      	ldr	r1, [pc, #532]	; (800e210 <tcp_write+0x59c>)
 800dffc:	4883      	ldr	r0, [pc, #524]	; (800e20c <tcp_write+0x598>)
 800dffe:	f003 ff81 	bl	8011f04 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800e002:	8b3b      	ldrh	r3, [r7, #24]
 800e004:	2201      	movs	r2, #1
 800e006:	4619      	mov	r1, r3
 800e008:	2000      	movs	r0, #0
 800e00a:	f7fa ffe3 	bl	8008fd4 <pbuf_alloc>
 800e00e:	6178      	str	r0, [r7, #20]
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	2b00      	cmp	r3, #0
 800e014:	f000 8151 	beq.w	800e2ba <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800e018:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e01c:	68ba      	ldr	r2, [r7, #8]
 800e01e:	441a      	add	r2, r3
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e028:	b29b      	uxth	r3, r3
 800e02a:	2200      	movs	r2, #0
 800e02c:	4619      	mov	r1, r3
 800e02e:	2000      	movs	r0, #0
 800e030:	f7fa ffd0 	bl	8008fd4 <pbuf_alloc>
 800e034:	6338      	str	r0, [r7, #48]	; 0x30
 800e036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d103      	bne.n	800e044 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800e03c:	6978      	ldr	r0, [r7, #20]
 800e03e:	f7fb fb3b 	bl	80096b8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800e042:	e13d      	b.n	800e2c0 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800e044:	6979      	ldr	r1, [r7, #20]
 800e046:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e048:	f7fb fc0e 	bl	8009868 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800e04c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e04e:	f7fb fbcd 	bl	80097ec <pbuf_clen>
 800e052:	4603      	mov	r3, r0
 800e054:	461a      	mov	r2, r3
 800e056:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e05a:	4413      	add	r3, r2
 800e05c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800e060:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e064:	2b09      	cmp	r3, #9
 800e066:	d805      	bhi.n	800e074 <tcp_write+0x400>
 800e068:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e06c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800e070:	4293      	cmp	r3, r2
 800e072:	d903      	bls.n	800e07c <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800e074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e076:	f7fb fb1f 	bl	80096b8 <pbuf_free>
      goto memerr;
 800e07a:	e121      	b.n	800e2c0 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e080:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e084:	441a      	add	r2, r3
 800e086:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e08a:	9300      	str	r3, [sp, #0]
 800e08c:	4613      	mov	r3, r2
 800e08e:	2200      	movs	r2, #0
 800e090:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e092:	68f8      	ldr	r0, [r7, #12]
 800e094:	f7ff fc8e 	bl	800d9b4 <tcp_create_segment>
 800e098:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e09a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	f000 810e 	beq.w	800e2be <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800e0a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d102      	bne.n	800e0ae <tcp_write+0x43a>
      queue = seg;
 800e0a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0aa:	647b      	str	r3, [r7, #68]	; 0x44
 800e0ac:	e00c      	b.n	800e0c8 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800e0ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d106      	bne.n	800e0c2 <tcp_write+0x44e>
 800e0b4:	4b53      	ldr	r3, [pc, #332]	; (800e204 <tcp_write+0x590>)
 800e0b6:	f240 2285 	movw	r2, #645	; 0x285
 800e0ba:	4956      	ldr	r1, [pc, #344]	; (800e214 <tcp_write+0x5a0>)
 800e0bc:	4853      	ldr	r0, [pc, #332]	; (800e20c <tcp_write+0x598>)
 800e0be:	f003 ff21 	bl	8011f04 <iprintf>
      prev_seg->next = seg;
 800e0c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e0c6:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800e0c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0ca:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800e0cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e0d0:	8b3b      	ldrh	r3, [r7, #24]
 800e0d2:	4413      	add	r3, r2
 800e0d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800e0d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e0dc:	88fb      	ldrh	r3, [r7, #6]
 800e0de:	429a      	cmp	r2, r3
 800e0e0:	f4ff af38 	bcc.w	800df54 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800e0e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d02c      	beq.n	800e144 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800e0ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0ec:	685b      	ldr	r3, [r3, #4]
 800e0ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0f0:	e01e      	b.n	800e130 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 800e0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f4:	891a      	ldrh	r2, [r3, #8]
 800e0f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e0f8:	4413      	add	r3, r2
 800e0fa:	b29a      	uxth	r2, r3
 800e0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0fe:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800e100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d110      	bne.n	800e12a <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800e108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e10a:	685b      	ldr	r3, [r3, #4]
 800e10c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e10e:	8952      	ldrh	r2, [r2, #10]
 800e110:	4413      	add	r3, r2
 800e112:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e114:	68b9      	ldr	r1, [r7, #8]
 800e116:	4618      	mov	r0, r3
 800e118:	f003 fe83 	bl	8011e22 <memcpy>
        p->len += oversize_used;
 800e11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e11e:	895a      	ldrh	r2, [r3, #10]
 800e120:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e122:	4413      	add	r3, r2
 800e124:	b29a      	uxth	r2, r3
 800e126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e128:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800e12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e132:	2b00      	cmp	r3, #0
 800e134:	d1dd      	bne.n	800e0f2 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 800e136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e138:	891a      	ldrh	r2, [r3, #8]
 800e13a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e13c:	4413      	add	r3, r2
 800e13e:	b29a      	uxth	r2, r3
 800e140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e142:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800e144:	8a7a      	ldrh	r2, [r7, #18]
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800e14c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d018      	beq.n	800e184 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800e152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e154:	2b00      	cmp	r3, #0
 800e156:	d106      	bne.n	800e166 <tcp_write+0x4f2>
 800e158:	4b2a      	ldr	r3, [pc, #168]	; (800e204 <tcp_write+0x590>)
 800e15a:	f240 22ba 	movw	r2, #698	; 0x2ba
 800e15e:	492e      	ldr	r1, [pc, #184]	; (800e218 <tcp_write+0x5a4>)
 800e160:	482a      	ldr	r0, [pc, #168]	; (800e20c <tcp_write+0x598>)
 800e162:	f003 fecf 	bl	8011f04 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800e166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e168:	685b      	ldr	r3, [r3, #4]
 800e16a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e16c:	4618      	mov	r0, r3
 800e16e:	f7fb fb7b 	bl	8009868 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800e172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e174:	891a      	ldrh	r2, [r3, #8]
 800e176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e178:	891b      	ldrh	r3, [r3, #8]
 800e17a:	4413      	add	r3, r2
 800e17c:	b29a      	uxth	r2, r3
 800e17e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e180:	811a      	strh	r2, [r3, #8]
 800e182:	e037      	b.n	800e1f4 <tcp_write+0x580>
  } else if (extendlen > 0) {
 800e184:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e186:	2b00      	cmp	r3, #0
 800e188:	d034      	beq.n	800e1f4 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800e18a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d003      	beq.n	800e198 <tcp_write+0x524>
 800e190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e192:	685b      	ldr	r3, [r3, #4]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d106      	bne.n	800e1a6 <tcp_write+0x532>
 800e198:	4b1a      	ldr	r3, [pc, #104]	; (800e204 <tcp_write+0x590>)
 800e19a:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 800e19e:	491f      	ldr	r1, [pc, #124]	; (800e21c <tcp_write+0x5a8>)
 800e1a0:	481a      	ldr	r0, [pc, #104]	; (800e20c <tcp_write+0x598>)
 800e1a2:	f003 feaf 	bl	8011f04 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e1a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1a8:	685b      	ldr	r3, [r3, #4]
 800e1aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1ac:	e009      	b.n	800e1c2 <tcp_write+0x54e>
      p->tot_len += extendlen;
 800e1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b0:	891a      	ldrh	r2, [r3, #8]
 800e1b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e1b4:	4413      	add	r3, r2
 800e1b6:	b29a      	uxth	r2, r3
 800e1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ba:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d1f1      	bne.n	800e1ae <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 800e1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1cc:	891a      	ldrh	r2, [r3, #8]
 800e1ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e1d0:	4413      	add	r3, r2
 800e1d2:	b29a      	uxth	r2, r3
 800e1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d6:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800e1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1da:	895a      	ldrh	r2, [r3, #10]
 800e1dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e1de:	4413      	add	r3, r2
 800e1e0:	b29a      	uxth	r2, r3
 800e1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e4:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800e1e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1e8:	891a      	ldrh	r2, [r3, #8]
 800e1ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e1ec:	4413      	add	r3, r2
 800e1ee:	b29a      	uxth	r2, r3
 800e1f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1f2:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800e1f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d112      	bne.n	800e220 <tcp_write+0x5ac>
    pcb->unsent = queue;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e1fe:	669a      	str	r2, [r3, #104]	; 0x68
 800e200:	e011      	b.n	800e226 <tcp_write+0x5b2>
 800e202:	bf00      	nop
 800e204:	08013e8c 	.word	0x08013e8c
 800e208:	0801409c 	.word	0x0801409c
 800e20c:	08013ef0 	.word	0x08013ef0
 800e210:	080140dc 	.word	0x080140dc
 800e214:	080140ec 	.word	0x080140ec
 800e218:	08014100 	.word	0x08014100
 800e21c:	08014138 	.word	0x08014138
  } else {
    last_unsent->next = queue;
 800e220:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e222:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e224:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e22a:	88fb      	ldrh	r3, [r7, #6]
 800e22c:	441a      	add	r2, r3
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e238:	88fb      	ldrh	r3, [r7, #6]
 800e23a:	1ad3      	subs	r3, r2, r3
 800e23c:	b29a      	uxth	r2, r3
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e24a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e254:	2b00      	cmp	r3, #0
 800e256:	d00e      	beq.n	800e276 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d10a      	bne.n	800e276 <tcp_write+0x602>
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e264:	2b00      	cmp	r3, #0
 800e266:	d106      	bne.n	800e276 <tcp_write+0x602>
 800e268:	4b2c      	ldr	r3, [pc, #176]	; (800e31c <tcp_write+0x6a8>)
 800e26a:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800e26e:	492c      	ldr	r1, [pc, #176]	; (800e320 <tcp_write+0x6ac>)
 800e270:	482c      	ldr	r0, [pc, #176]	; (800e324 <tcp_write+0x6b0>)
 800e272:	f003 fe47 	bl	8011f04 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800e276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d016      	beq.n	800e2aa <tcp_write+0x636>
 800e27c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e27e:	68db      	ldr	r3, [r3, #12]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d012      	beq.n	800e2aa <tcp_write+0x636>
 800e284:	797b      	ldrb	r3, [r7, #5]
 800e286:	f003 0302 	and.w	r3, r3, #2
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d10d      	bne.n	800e2aa <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800e28e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e290:	68db      	ldr	r3, [r3, #12]
 800e292:	899b      	ldrh	r3, [r3, #12]
 800e294:	b29c      	uxth	r4, r3
 800e296:	2008      	movs	r0, #8
 800e298:	f7fa f81c 	bl	80082d4 <lwip_htons>
 800e29c:	4603      	mov	r3, r0
 800e29e:	461a      	mov	r2, r3
 800e2a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2a2:	68db      	ldr	r3, [r3, #12]
 800e2a4:	4322      	orrs	r2, r4
 800e2a6:	b292      	uxth	r2, r2
 800e2a8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	e031      	b.n	800e312 <tcp_write+0x69e>
          goto memerr;
 800e2ae:	bf00      	nop
 800e2b0:	e006      	b.n	800e2c0 <tcp_write+0x64c>
            goto memerr;
 800e2b2:	bf00      	nop
 800e2b4:	e004      	b.n	800e2c0 <tcp_write+0x64c>
        goto memerr;
 800e2b6:	bf00      	nop
 800e2b8:	e002      	b.n	800e2c0 <tcp_write+0x64c>
        goto memerr;
 800e2ba:	bf00      	nop
 800e2bc:	e000      	b.n	800e2c0 <tcp_write+0x64c>
      goto memerr;
 800e2be:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	7e9b      	ldrb	r3, [r3, #26]
 800e2c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e2c8:	b2da      	uxtb	r2, r3
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800e2ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d002      	beq.n	800e2da <tcp_write+0x666>
    pbuf_free(concat_p);
 800e2d4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e2d6:	f7fb f9ef 	bl	80096b8 <pbuf_free>
  }
  if (queue != NULL) {
 800e2da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d002      	beq.n	800e2e6 <tcp_write+0x672>
    tcp_segs_free(queue);
 800e2e0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e2e2:	f7fc fcce 	bl	800ac82 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d00e      	beq.n	800e30e <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d10a      	bne.n	800e30e <tcp_write+0x69a>
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d106      	bne.n	800e30e <tcp_write+0x69a>
 800e300:	4b06      	ldr	r3, [pc, #24]	; (800e31c <tcp_write+0x6a8>)
 800e302:	f240 3201 	movw	r2, #769	; 0x301
 800e306:	4906      	ldr	r1, [pc, #24]	; (800e320 <tcp_write+0x6ac>)
 800e308:	4806      	ldr	r0, [pc, #24]	; (800e324 <tcp_write+0x6b0>)
 800e30a:	f003 fdfb 	bl	8011f04 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800e30e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e312:	4618      	mov	r0, r3
 800e314:	375c      	adds	r7, #92	; 0x5c
 800e316:	46bd      	mov	sp, r7
 800e318:	bd90      	pop	{r4, r7, pc}
 800e31a:	bf00      	nop
 800e31c:	08013e8c 	.word	0x08013e8c
 800e320:	08014170 	.word	0x08014170
 800e324:	08013ef0 	.word	0x08013ef0

0800e328 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b08a      	sub	sp, #40	; 0x28
 800e32c:	af02      	add	r7, sp, #8
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	460b      	mov	r3, r1
 800e332:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800e334:	2300      	movs	r3, #0
 800e336:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800e338:	2300      	movs	r3, #0
 800e33a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e33c:	78fb      	ldrb	r3, [r7, #3]
 800e33e:	f003 0303 	and.w	r3, r3, #3
 800e342:	2b00      	cmp	r3, #0
 800e344:	d106      	bne.n	800e354 <tcp_enqueue_flags+0x2c>
 800e346:	4b6f      	ldr	r3, [pc, #444]	; (800e504 <tcp_enqueue_flags+0x1dc>)
 800e348:	f240 321a 	movw	r2, #794	; 0x31a
 800e34c:	496e      	ldr	r1, [pc, #440]	; (800e508 <tcp_enqueue_flags+0x1e0>)
 800e34e:	486f      	ldr	r0, [pc, #444]	; (800e50c <tcp_enqueue_flags+0x1e4>)
 800e350:	f003 fdd8 	bl	8011f04 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e35a:	2b08      	cmp	r3, #8
 800e35c:	d806      	bhi.n	800e36c <tcp_enqueue_flags+0x44>
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e364:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800e368:	4293      	cmp	r3, r2
 800e36a:	d90e      	bls.n	800e38a <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800e36c:	78fb      	ldrb	r3, [r7, #3]
 800e36e:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800e372:	2b00      	cmp	r3, #0
 800e374:	d109      	bne.n	800e38a <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	7e9b      	ldrb	r3, [r3, #26]
 800e37a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e37e:	b2da      	uxtb	r2, r3
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800e384:	f04f 33ff 	mov.w	r3, #4294967295
 800e388:	e0b7      	b.n	800e4fa <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800e38a:	78fb      	ldrb	r3, [r7, #3]
 800e38c:	f003 0302 	and.w	r3, r3, #2
 800e390:	2b00      	cmp	r3, #0
 800e392:	d001      	beq.n	800e398 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800e394:	2301      	movs	r3, #1
 800e396:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e398:	7ffb      	ldrb	r3, [r7, #31]
 800e39a:	009b      	lsls	r3, r3, #2
 800e39c:	b2db      	uxtb	r3, r3
 800e39e:	f003 0304 	and.w	r3, r3, #4
 800e3a2:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e3a4:	7dfb      	ldrb	r3, [r7, #23]
 800e3a6:	b29b      	uxth	r3, r3
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	4619      	mov	r1, r3
 800e3ac:	2000      	movs	r0, #0
 800e3ae:	f7fa fe11 	bl	8008fd4 <pbuf_alloc>
 800e3b2:	6138      	str	r0, [r7, #16]
 800e3b4:	693b      	ldr	r3, [r7, #16]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d109      	bne.n	800e3ce <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	7e9b      	ldrb	r3, [r3, #26]
 800e3be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e3c2:	b2da      	uxtb	r2, r3
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e3c8:	f04f 33ff 	mov.w	r3, #4294967295
 800e3cc:	e095      	b.n	800e4fa <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e3ce:	693b      	ldr	r3, [r7, #16]
 800e3d0:	895a      	ldrh	r2, [r3, #10]
 800e3d2:	7dfb      	ldrb	r3, [r7, #23]
 800e3d4:	b29b      	uxth	r3, r3
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d206      	bcs.n	800e3e8 <tcp_enqueue_flags+0xc0>
 800e3da:	4b4a      	ldr	r3, [pc, #296]	; (800e504 <tcp_enqueue_flags+0x1dc>)
 800e3dc:	f44f 7250 	mov.w	r2, #832	; 0x340
 800e3e0:	494b      	ldr	r1, [pc, #300]	; (800e510 <tcp_enqueue_flags+0x1e8>)
 800e3e2:	484a      	ldr	r0, [pc, #296]	; (800e50c <tcp_enqueue_flags+0x1e4>)
 800e3e4:	f003 fd8e 	bl	8011f04 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800e3ec:	78fa      	ldrb	r2, [r7, #3]
 800e3ee:	7ffb      	ldrb	r3, [r7, #31]
 800e3f0:	9300      	str	r3, [sp, #0]
 800e3f2:	460b      	mov	r3, r1
 800e3f4:	6939      	ldr	r1, [r7, #16]
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f7ff fadc 	bl	800d9b4 <tcp_create_segment>
 800e3fc:	60f8      	str	r0, [r7, #12]
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d109      	bne.n	800e418 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	7e9b      	ldrb	r3, [r3, #26]
 800e408:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e40c:	b2da      	uxtb	r2, r3
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e412:	f04f 33ff 	mov.w	r3, #4294967295
 800e416:	e070      	b.n	800e4fa <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	68db      	ldr	r3, [r3, #12]
 800e41c:	f003 0303 	and.w	r3, r3, #3
 800e420:	2b00      	cmp	r3, #0
 800e422:	d006      	beq.n	800e432 <tcp_enqueue_flags+0x10a>
 800e424:	4b37      	ldr	r3, [pc, #220]	; (800e504 <tcp_enqueue_flags+0x1dc>)
 800e426:	f240 3249 	movw	r2, #841	; 0x349
 800e42a:	493a      	ldr	r1, [pc, #232]	; (800e514 <tcp_enqueue_flags+0x1ec>)
 800e42c:	4837      	ldr	r0, [pc, #220]	; (800e50c <tcp_enqueue_flags+0x1e4>)
 800e42e:	f003 fd69 	bl	8011f04 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	891b      	ldrh	r3, [r3, #8]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d006      	beq.n	800e448 <tcp_enqueue_flags+0x120>
 800e43a:	4b32      	ldr	r3, [pc, #200]	; (800e504 <tcp_enqueue_flags+0x1dc>)
 800e43c:	f240 324a 	movw	r2, #842	; 0x34a
 800e440:	4935      	ldr	r1, [pc, #212]	; (800e518 <tcp_enqueue_flags+0x1f0>)
 800e442:	4832      	ldr	r0, [pc, #200]	; (800e50c <tcp_enqueue_flags+0x1e4>)
 800e444:	f003 fd5e 	bl	8011f04 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d103      	bne.n	800e458 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	68fa      	ldr	r2, [r7, #12]
 800e454:	669a      	str	r2, [r3, #104]	; 0x68
 800e456:	e00d      	b.n	800e474 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e45c:	61bb      	str	r3, [r7, #24]
 800e45e:	e002      	b.n	800e466 <tcp_enqueue_flags+0x13e>
 800e460:	69bb      	ldr	r3, [r7, #24]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	61bb      	str	r3, [r7, #24]
 800e466:	69bb      	ldr	r3, [r7, #24]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d1f8      	bne.n	800e460 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800e46e:	69bb      	ldr	r3, [r7, #24]
 800e470:	68fa      	ldr	r2, [r7, #12]
 800e472:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2200      	movs	r2, #0
 800e478:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e47c:	78fb      	ldrb	r3, [r7, #3]
 800e47e:	f003 0302 	and.w	r3, r3, #2
 800e482:	2b00      	cmp	r3, #0
 800e484:	d104      	bne.n	800e490 <tcp_enqueue_flags+0x168>
 800e486:	78fb      	ldrb	r3, [r7, #3]
 800e488:	f003 0301 	and.w	r3, r3, #1
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d004      	beq.n	800e49a <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e494:	1c5a      	adds	r2, r3, #1
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800e49a:	78fb      	ldrb	r3, [r7, #3]
 800e49c:	f003 0301 	and.w	r3, r3, #1
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d006      	beq.n	800e4b2 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	7e9b      	ldrb	r3, [r3, #26]
 800e4a8:	f043 0320 	orr.w	r3, r3, #32
 800e4ac:	b2da      	uxtb	r2, r3
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	685b      	ldr	r3, [r3, #4]
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f7fb f998 	bl	80097ec <pbuf_clen>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	461a      	mov	r2, r3
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e4c6:	4413      	add	r3, r2
 800e4c8:	b29a      	uxth	r2, r3
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d00e      	beq.n	800e4f8 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d10a      	bne.n	800e4f8 <tcp_enqueue_flags+0x1d0>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d106      	bne.n	800e4f8 <tcp_enqueue_flags+0x1d0>
 800e4ea:	4b06      	ldr	r3, [pc, #24]	; (800e504 <tcp_enqueue_flags+0x1dc>)
 800e4ec:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e4f0:	490a      	ldr	r1, [pc, #40]	; (800e51c <tcp_enqueue_flags+0x1f4>)
 800e4f2:	4806      	ldr	r0, [pc, #24]	; (800e50c <tcp_enqueue_flags+0x1e4>)
 800e4f4:	f003 fd06 	bl	8011f04 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e4f8:	2300      	movs	r3, #0
}
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	3720      	adds	r7, #32
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}
 800e502:	bf00      	nop
 800e504:	08013e8c 	.word	0x08013e8c
 800e508:	08014190 	.word	0x08014190
 800e50c:	08013ef0 	.word	0x08013ef0
 800e510:	080141e8 	.word	0x080141e8
 800e514:	08014224 	.word	0x08014224
 800e518:	0801423c 	.word	0x0801423c
 800e51c:	08014268 	.word	0x08014268

0800e520 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e520:	b590      	push	{r4, r7, lr}
 800e522:	b08b      	sub	sp, #44	; 0x2c
 800e524:	af04      	add	r7, sp, #16
 800e526:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800e528:	2300      	movs	r3, #0
 800e52a:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e52c:	7dbb      	ldrb	r3, [r7, #22]
 800e52e:	b29c      	uxth	r4, r3
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e534:	4618      	mov	r0, r3
 800e536:	f7f9 feda 	bl	80082ee <lwip_htonl>
 800e53a:	4603      	mov	r3, r0
 800e53c:	2200      	movs	r2, #0
 800e53e:	4621      	mov	r1, r4
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f7ff f97d 	bl	800d840 <tcp_output_alloc_header>
 800e546:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e548:	693b      	ldr	r3, [r7, #16]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d109      	bne.n	800e562 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	7e9b      	ldrb	r3, [r3, #26]
 800e552:	f043 0303 	orr.w	r3, r3, #3
 800e556:	b2da      	uxtb	r2, r3
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e55c:	f06f 0301 	mvn.w	r3, #1
 800e560:	e036      	b.n	800e5d0 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	3304      	adds	r3, #4
 800e566:	4618      	mov	r0, r3
 800e568:	f002 f89a 	bl	80106a0 <ip4_route>
 800e56c:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d102      	bne.n	800e57a <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800e574:	23fc      	movs	r3, #252	; 0xfc
 800e576:	75fb      	strb	r3, [r7, #23]
 800e578:	e012      	b.n	800e5a0 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800e57a:	6879      	ldr	r1, [r7, #4]
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	1d18      	adds	r0, r3, #4
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	7a9c      	ldrb	r4, [r3, #10]
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	7a5b      	ldrb	r3, [r3, #9]
 800e588:	68fa      	ldr	r2, [r7, #12]
 800e58a:	9202      	str	r2, [sp, #8]
 800e58c:	2206      	movs	r2, #6
 800e58e:	9201      	str	r2, [sp, #4]
 800e590:	9300      	str	r3, [sp, #0]
 800e592:	4623      	mov	r3, r4
 800e594:	4602      	mov	r2, r0
 800e596:	6938      	ldr	r0, [r7, #16]
 800e598:	f002 fa2c 	bl	80109f4 <ip4_output_if>
 800e59c:	4603      	mov	r3, r0
 800e59e:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800e5a0:	6938      	ldr	r0, [r7, #16]
 800e5a2:	f7fb f889 	bl	80096b8 <pbuf_free>

  if (err != ERR_OK) {
 800e5a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d007      	beq.n	800e5be <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	7e9b      	ldrb	r3, [r3, #26]
 800e5b2:	f043 0303 	orr.w	r3, r3, #3
 800e5b6:	b2da      	uxtb	r2, r3
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	769a      	strb	r2, [r3, #26]
 800e5bc:	e006      	b.n	800e5cc <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	7e9b      	ldrb	r3, [r3, #26]
 800e5c2:	f023 0303 	bic.w	r3, r3, #3
 800e5c6:	b2da      	uxtb	r2, r3
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800e5cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	371c      	adds	r7, #28
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd90      	pop	{r4, r7, pc}

0800e5d8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e5d8:	b5b0      	push	{r4, r5, r7, lr}
 800e5da:	b08a      	sub	sp, #40	; 0x28
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	7d1b      	ldrb	r3, [r3, #20]
 800e5e4:	2b01      	cmp	r3, #1
 800e5e6:	d106      	bne.n	800e5f6 <tcp_output+0x1e>
 800e5e8:	4ba8      	ldr	r3, [pc, #672]	; (800e88c <tcp_output+0x2b4>)
 800e5ea:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800e5ee:	49a8      	ldr	r1, [pc, #672]	; (800e890 <tcp_output+0x2b8>)
 800e5f0:	48a8      	ldr	r0, [pc, #672]	; (800e894 <tcp_output+0x2bc>)
 800e5f2:	f003 fc87 	bl	8011f04 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e5f6:	4ba8      	ldr	r3, [pc, #672]	; (800e898 <tcp_output+0x2c0>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	687a      	ldr	r2, [r7, #4]
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d101      	bne.n	800e604 <tcp_output+0x2c>
    return ERR_OK;
 800e600:	2300      	movs	r3, #0
 800e602:	e1cb      	b.n	800e99c <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e610:	4293      	cmp	r3, r2
 800e612:	bf28      	it	cs
 800e614:	4613      	movcs	r3, r2
 800e616:	b29b      	uxth	r3, r3
 800e618:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e61e:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	7e9b      	ldrb	r3, [r3, #26]
 800e624:	f003 0302 	and.w	r3, r3, #2
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d017      	beq.n	800e65c <tcp_output+0x84>
 800e62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d00f      	beq.n	800e652 <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800e632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e634:	68db      	ldr	r3, [r3, #12]
 800e636:	685b      	ldr	r3, [r3, #4]
 800e638:	4618      	mov	r0, r3
 800e63a:	f7f9 fe58 	bl	80082ee <lwip_htonl>
 800e63e:	4602      	mov	r2, r0
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e644:	1ad3      	subs	r3, r2, r3
 800e646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e648:	8912      	ldrh	r2, [r2, #8]
 800e64a:	4413      	add	r3, r2
     (seg == NULL ||
 800e64c:	69ba      	ldr	r2, [r7, #24]
 800e64e:	429a      	cmp	r2, r3
 800e650:	d204      	bcs.n	800e65c <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f7ff ff64 	bl	800e520 <tcp_send_empty_ack>
 800e658:	4603      	mov	r3, r0
 800e65a:	e19f      	b.n	800e99c <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e660:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e662:	6a3b      	ldr	r3, [r7, #32]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d007      	beq.n	800e678 <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 800e668:	e002      	b.n	800e670 <tcp_output+0x98>
 800e66a:	6a3b      	ldr	r3, [r7, #32]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	623b      	str	r3, [r7, #32]
 800e670:	6a3b      	ldr	r3, [r7, #32]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d1f8      	bne.n	800e66a <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	3304      	adds	r3, #4
 800e67c:	4618      	mov	r0, r3
 800e67e:	f002 f80f 	bl	80106a0 <ip4_route>
 800e682:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d102      	bne.n	800e690 <tcp_output+0xb8>
    return ERR_RTE;
 800e68a:	f06f 0303 	mvn.w	r3, #3
 800e68e:	e185      	b.n	800e99c <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d003      	beq.n	800e69e <tcp_output+0xc6>
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d111      	bne.n	800e6c2 <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d002      	beq.n	800e6aa <tcp_output+0xd2>
 800e6a4:	697b      	ldr	r3, [r7, #20]
 800e6a6:	3304      	adds	r3, #4
 800e6a8:	e000      	b.n	800e6ac <tcp_output+0xd4>
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d102      	bne.n	800e6ba <tcp_output+0xe2>
      return ERR_RTE;
 800e6b4:	f06f 0303 	mvn.w	r3, #3
 800e6b8:	e170      	b.n	800e99c <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e6ba:	693b      	ldr	r3, [r7, #16]
 800e6bc:	681a      	ldr	r2, [r3, #0]
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800e6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	f000 813f 	beq.w	800e948 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800e6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6cc:	68db      	ldr	r3, [r3, #12]
 800e6ce:	685b      	ldr	r3, [r3, #4]
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f7f9 fe0c 	bl	80082ee <lwip_htonl>
 800e6d6:	4602      	mov	r2, r0
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6dc:	1ad3      	subs	r3, r2, r3
 800e6de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6e0:	8912      	ldrh	r2, [r2, #8]
 800e6e2:	4413      	add	r3, r2
  if (seg != NULL &&
 800e6e4:	69ba      	ldr	r2, [r7, #24]
 800e6e6:	429a      	cmp	r2, r3
 800e6e8:	f080 812e 	bcs.w	800e948 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800e6ec:	69bb      	ldr	r3, [r7, #24]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	f000 812a 	beq.w	800e948 <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e6fa:	461a      	mov	r2, r3
 800e6fc:	69bb      	ldr	r3, [r7, #24]
 800e6fe:	4293      	cmp	r3, r2
 800e700:	f040 8122 	bne.w	800e948 <tcp_output+0x370>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e708:	2b00      	cmp	r3, #0
 800e70a:	f040 811d 	bne.w	800e948 <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e714:	2b00      	cmp	r3, #0
 800e716:	f040 812c 	bne.w	800e972 <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2200      	movs	r2, #0
 800e71e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	2201      	movs	r2, #1
 800e726:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800e72a:	e122      	b.n	800e972 <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e72e:	68db      	ldr	r3, [r3, #12]
 800e730:	899b      	ldrh	r3, [r3, #12]
 800e732:	b29b      	uxth	r3, r3
 800e734:	4618      	mov	r0, r3
 800e736:	f7f9 fdcd 	bl	80082d4 <lwip_htons>
 800e73a:	4603      	mov	r3, r0
 800e73c:	f003 0304 	and.w	r3, r3, #4
 800e740:	2b00      	cmp	r3, #0
 800e742:	d006      	beq.n	800e752 <tcp_output+0x17a>
 800e744:	4b51      	ldr	r3, [pc, #324]	; (800e88c <tcp_output+0x2b4>)
 800e746:	f240 4245 	movw	r2, #1093	; 0x445
 800e74a:	4954      	ldr	r1, [pc, #336]	; (800e89c <tcp_output+0x2c4>)
 800e74c:	4851      	ldr	r0, [pc, #324]	; (800e894 <tcp_output+0x2bc>)
 800e74e:	f003 fbd9 	bl	8011f04 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e756:	2b00      	cmp	r3, #0
 800e758:	d01f      	beq.n	800e79a <tcp_output+0x1c2>
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	7e9b      	ldrb	r3, [r3, #26]
 800e75e:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e762:	2b00      	cmp	r3, #0
 800e764:	d119      	bne.n	800e79a <tcp_output+0x1c2>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d00b      	beq.n	800e786 <tcp_output+0x1ae>
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d110      	bne.n	800e79a <tcp_output+0x1c2>
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e77c:	891a      	ldrh	r2, [r3, #8]
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e782:	429a      	cmp	r2, r3
 800e784:	d209      	bcs.n	800e79a <tcp_output+0x1c2>
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d004      	beq.n	800e79a <tcp_output+0x1c2>
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e796:	2b08      	cmp	r3, #8
 800e798:	d901      	bls.n	800e79e <tcp_output+0x1c6>
 800e79a:	2301      	movs	r3, #1
 800e79c:	e000      	b.n	800e7a0 <tcp_output+0x1c8>
 800e79e:	2300      	movs	r3, #0
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d106      	bne.n	800e7b2 <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	7e9b      	ldrb	r3, [r3, #26]
 800e7a8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	f000 80e2 	beq.w	800e976 <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	7d1b      	ldrb	r3, [r3, #20]
 800e7b6:	2b02      	cmp	r3, #2
 800e7b8:	d00d      	beq.n	800e7d6 <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7bc:	68db      	ldr	r3, [r3, #12]
 800e7be:	899b      	ldrh	r3, [r3, #12]
 800e7c0:	b29c      	uxth	r4, r3
 800e7c2:	2010      	movs	r0, #16
 800e7c4:	f7f9 fd86 	bl	80082d4 <lwip_htons>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	461a      	mov	r2, r3
 800e7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ce:	68db      	ldr	r3, [r3, #12]
 800e7d0:	4322      	orrs	r2, r4
 800e7d2:	b292      	uxth	r2, r2
 800e7d4:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800e7d6:	697a      	ldr	r2, [r7, #20]
 800e7d8:	6879      	ldr	r1, [r7, #4]
 800e7da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e7dc:	f000 f8e2 	bl	800e9a4 <tcp_output_segment>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e7e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d009      	beq.n	800e800 <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	7e9b      	ldrb	r3, [r3, #26]
 800e7f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e7f4:	b2da      	uxtb	r2, r3
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	769a      	strb	r2, [r3, #26]
      return err;
 800e7fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7fe:	e0cd      	b.n	800e99c <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 800e800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e802:	681a      	ldr	r2, [r3, #0]
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	7d1b      	ldrb	r3, [r3, #20]
 800e80c:	2b02      	cmp	r3, #2
 800e80e:	d006      	beq.n	800e81e <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	7e9b      	ldrb	r3, [r3, #26]
 800e814:	f023 0303 	bic.w	r3, r3, #3
 800e818:	b2da      	uxtb	r2, r3
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e820:	68db      	ldr	r3, [r3, #12]
 800e822:	685b      	ldr	r3, [r3, #4]
 800e824:	4618      	mov	r0, r3
 800e826:	f7f9 fd62 	bl	80082ee <lwip_htonl>
 800e82a:	4604      	mov	r4, r0
 800e82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82e:	891b      	ldrh	r3, [r3, #8]
 800e830:	461d      	mov	r5, r3
 800e832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e834:	68db      	ldr	r3, [r3, #12]
 800e836:	899b      	ldrh	r3, [r3, #12]
 800e838:	b29b      	uxth	r3, r3
 800e83a:	4618      	mov	r0, r3
 800e83c:	f7f9 fd4a 	bl	80082d4 <lwip_htons>
 800e840:	4603      	mov	r3, r0
 800e842:	f003 0303 	and.w	r3, r3, #3
 800e846:	2b00      	cmp	r3, #0
 800e848:	d001      	beq.n	800e84e <tcp_output+0x276>
 800e84a:	2301      	movs	r3, #1
 800e84c:	e000      	b.n	800e850 <tcp_output+0x278>
 800e84e:	2300      	movs	r3, #0
 800e850:	442b      	add	r3, r5
 800e852:	4423      	add	r3, r4
 800e854:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	1ad3      	subs	r3, r2, r3
 800e85e:	2b00      	cmp	r3, #0
 800e860:	da02      	bge.n	800e868 <tcp_output+0x290>
      pcb->snd_nxt = snd_nxt;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	68ba      	ldr	r2, [r7, #8]
 800e866:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e86a:	891b      	ldrh	r3, [r3, #8]
 800e86c:	461c      	mov	r4, r3
 800e86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e870:	68db      	ldr	r3, [r3, #12]
 800e872:	899b      	ldrh	r3, [r3, #12]
 800e874:	b29b      	uxth	r3, r3
 800e876:	4618      	mov	r0, r3
 800e878:	f7f9 fd2c 	bl	80082d4 <lwip_htons>
 800e87c:	4603      	mov	r3, r0
 800e87e:	f003 0303 	and.w	r3, r3, #3
 800e882:	2b00      	cmp	r3, #0
 800e884:	d00c      	beq.n	800e8a0 <tcp_output+0x2c8>
 800e886:	2301      	movs	r3, #1
 800e888:	e00b      	b.n	800e8a2 <tcp_output+0x2ca>
 800e88a:	bf00      	nop
 800e88c:	08013e8c 	.word	0x08013e8c
 800e890:	08014290 	.word	0x08014290
 800e894:	08013ef0 	.word	0x08013ef0
 800e898:	2000b13c 	.word	0x2000b13c
 800e89c:	080142b8 	.word	0x080142b8
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	4423      	add	r3, r4
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d049      	beq.n	800e93c <tcp_output+0x364>
      seg->next = NULL;
 800e8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d105      	bne.n	800e8c2 <tcp_output+0x2ea>
        pcb->unacked = seg;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8ba:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800e8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8be:	623b      	str	r3, [r7, #32]
 800e8c0:	e03f      	b.n	800e942 <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c4:	68db      	ldr	r3, [r3, #12]
 800e8c6:	685b      	ldr	r3, [r3, #4]
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f7f9 fd10 	bl	80082ee <lwip_htonl>
 800e8ce:	4604      	mov	r4, r0
 800e8d0:	6a3b      	ldr	r3, [r7, #32]
 800e8d2:	68db      	ldr	r3, [r3, #12]
 800e8d4:	685b      	ldr	r3, [r3, #4]
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f7f9 fd09 	bl	80082ee <lwip_htonl>
 800e8dc:	4603      	mov	r3, r0
 800e8de:	1ae3      	subs	r3, r4, r3
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	da24      	bge.n	800e92e <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	336c      	adds	r3, #108	; 0x6c
 800e8e8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e8ea:	e002      	b.n	800e8f2 <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800e8ec:	69fb      	ldr	r3, [r7, #28]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e8f2:	69fb      	ldr	r3, [r7, #28]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d011      	beq.n	800e91e <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e8fa:	69fb      	ldr	r3, [r7, #28]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	68db      	ldr	r3, [r3, #12]
 800e900:	685b      	ldr	r3, [r3, #4]
 800e902:	4618      	mov	r0, r3
 800e904:	f7f9 fcf3 	bl	80082ee <lwip_htonl>
 800e908:	4604      	mov	r4, r0
 800e90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e90c:	68db      	ldr	r3, [r3, #12]
 800e90e:	685b      	ldr	r3, [r3, #4]
 800e910:	4618      	mov	r0, r3
 800e912:	f7f9 fcec 	bl	80082ee <lwip_htonl>
 800e916:	4603      	mov	r3, r0
 800e918:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	dbe6      	blt.n	800e8ec <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 800e91e:	69fb      	ldr	r3, [r7, #28]
 800e920:	681a      	ldr	r2, [r3, #0]
 800e922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e924:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e926:	69fb      	ldr	r3, [r7, #28]
 800e928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e92a:	601a      	str	r2, [r3, #0]
 800e92c:	e009      	b.n	800e942 <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e92e:	6a3b      	ldr	r3, [r7, #32]
 800e930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e932:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e934:	6a3b      	ldr	r3, [r7, #32]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	623b      	str	r3, [r7, #32]
 800e93a:	e002      	b.n	800e942 <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e93c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e93e:	f7fc f9b5 	bl	800acac <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e946:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800e948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d015      	beq.n	800e97a <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e950:	68db      	ldr	r3, [r3, #12]
 800e952:	685b      	ldr	r3, [r3, #4]
 800e954:	4618      	mov	r0, r3
 800e956:	f7f9 fcca 	bl	80082ee <lwip_htonl>
 800e95a:	4602      	mov	r2, r0
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e960:	1ad3      	subs	r3, r2, r3
 800e962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e964:	8912      	ldrh	r2, [r2, #8]
 800e966:	4413      	add	r3, r2
  while (seg != NULL &&
 800e968:	69ba      	ldr	r2, [r7, #24]
 800e96a:	429a      	cmp	r2, r3
 800e96c:	f4bf aede 	bcs.w	800e72c <tcp_output+0x154>
  }
output_done:
 800e970:	e003      	b.n	800e97a <tcp_output+0x3a2>
    goto output_done;
 800e972:	bf00      	nop
 800e974:	e002      	b.n	800e97c <tcp_output+0x3a4>
      break;
 800e976:	bf00      	nop
 800e978:	e000      	b.n	800e97c <tcp_output+0x3a4>
output_done:
 800e97a:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e980:	2b00      	cmp	r3, #0
 800e982:	d103      	bne.n	800e98c <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2200      	movs	r2, #0
 800e988:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	7e9b      	ldrb	r3, [r3, #26]
 800e990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e994:	b2da      	uxtb	r2, r3
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800e99a:	2300      	movs	r3, #0
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	3728      	adds	r7, #40	; 0x28
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bdb0      	pop	{r4, r5, r7, pc}

0800e9a4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e9a4:	b5b0      	push	{r4, r5, r7, lr}
 800e9a6:	b08c      	sub	sp, #48	; 0x30
 800e9a8:	af04      	add	r7, sp, #16
 800e9aa:	60f8      	str	r0, [r7, #12]
 800e9ac:	60b9      	str	r1, [r7, #8]
 800e9ae:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	685b      	ldr	r3, [r3, #4]
 800e9b4:	89db      	ldrh	r3, [r3, #14]
 800e9b6:	2b01      	cmp	r3, #1
 800e9b8:	d001      	beq.n	800e9be <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	e08a      	b.n	800ead4 <tcp_output_segment+0x130>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	68dc      	ldr	r4, [r3, #12]
 800e9c6:	4610      	mov	r0, r2
 800e9c8:	f7f9 fc91 	bl	80082ee <lwip_htonl>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	68dc      	ldr	r4, [r3, #12]
 800e9d8:	4610      	mov	r0, r2
 800e9da:	f7f9 fc7b 	bl	80082d4 <lwip_htons>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9e6:	68ba      	ldr	r2, [r7, #8]
 800e9e8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e9ea:	441a      	add	r2, r3
 800e9ec:	68bb      	ldr	r3, [r7, #8]
 800e9ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	68db      	ldr	r3, [r3, #12]
 800e9f4:	3314      	adds	r3, #20
 800e9f6:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	7a9b      	ldrb	r3, [r3, #10]
 800e9fc:	f003 0301 	and.w	r3, r3, #1
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d014      	beq.n	800ea2e <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	3304      	adds	r3, #4
 800ea08:	4619      	mov	r1, r3
 800ea0a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800ea0e:	f7fc fc79 	bl	800b304 <tcp_eff_send_mss_impl>
 800ea12:	4603      	mov	r3, r0
 800ea14:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ea16:	8b7b      	ldrh	r3, [r7, #26]
 800ea18:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f7f9 fc66 	bl	80082ee <lwip_htonl>
 800ea22:	4602      	mov	r2, r0
 800ea24:	69fb      	ldr	r3, [r7, #28]
 800ea26:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ea28:	69fb      	ldr	r3, [r7, #28]
 800ea2a:	3304      	adds	r3, #4
 800ea2c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ea2e:	68bb      	ldr	r3, [r7, #8]
 800ea30:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	da02      	bge.n	800ea3e <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d10c      	bne.n	800ea60 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800ea46:	4b25      	ldr	r3, [pc, #148]	; (800eadc <tcp_output_segment+0x138>)
 800ea48:	681a      	ldr	r2, [r3, #0]
 800ea4a:	68bb      	ldr	r3, [r7, #8]
 800ea4c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	68db      	ldr	r3, [r3, #12]
 800ea52:	685b      	ldr	r3, [r3, #4]
 800ea54:	4618      	mov	r0, r3
 800ea56:	f7f9 fc4a 	bl	80082ee <lwip_htonl>
 800ea5a:	4602      	mov	r2, r0
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	68da      	ldr	r2, [r3, #12]
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	685b      	ldr	r3, [r3, #4]
 800ea68:	685b      	ldr	r3, [r3, #4]
 800ea6a:	1ad3      	subs	r3, r2, r3
 800ea6c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	685b      	ldr	r3, [r3, #4]
 800ea72:	8959      	ldrh	r1, [r3, #10]
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	685b      	ldr	r3, [r3, #4]
 800ea78:	8b3a      	ldrh	r2, [r7, #24]
 800ea7a:	1a8a      	subs	r2, r1, r2
 800ea7c:	b292      	uxth	r2, r2
 800ea7e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	685b      	ldr	r3, [r3, #4]
 800ea84:	8919      	ldrh	r1, [r3, #8]
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	685b      	ldr	r3, [r3, #4]
 800ea8a:	8b3a      	ldrh	r2, [r7, #24]
 800ea8c:	1a8a      	subs	r2, r1, r2
 800ea8e:	b292      	uxth	r2, r2
 800ea90:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	685b      	ldr	r3, [r3, #4]
 800ea96:	68fa      	ldr	r2, [r7, #12]
 800ea98:	68d2      	ldr	r2, [r2, #12]
 800ea9a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	68db      	ldr	r3, [r3, #12]
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	741a      	strb	r2, [r3, #16]
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	6858      	ldr	r0, [r3, #4]
 800eaac:	68b9      	ldr	r1, [r7, #8]
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	1d1c      	adds	r4, r3, #4
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	7a9d      	ldrb	r5, [r3, #10]
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	7a5b      	ldrb	r3, [r3, #9]
 800eaba:	687a      	ldr	r2, [r7, #4]
 800eabc:	9202      	str	r2, [sp, #8]
 800eabe:	2206      	movs	r2, #6
 800eac0:	9201      	str	r2, [sp, #4]
 800eac2:	9300      	str	r3, [sp, #0]
 800eac4:	462b      	mov	r3, r5
 800eac6:	4622      	mov	r2, r4
 800eac8:	f001 ff94 	bl	80109f4 <ip4_output_if>
 800eacc:	4603      	mov	r3, r0
 800eace:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800ead0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	3720      	adds	r7, #32
 800ead8:	46bd      	mov	sp, r7
 800eada:	bdb0      	pop	{r4, r5, r7, pc}
 800eadc:	2000b12c 	.word	0x2000b12c

0800eae0 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b08c      	sub	sp, #48	; 0x30
 800eae4:	af04      	add	r7, sp, #16
 800eae6:	60f8      	str	r0, [r7, #12]
 800eae8:	60b9      	str	r1, [r7, #8]
 800eaea:	607a      	str	r2, [r7, #4]
 800eaec:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800eaee:	2200      	movs	r2, #0
 800eaf0:	2114      	movs	r1, #20
 800eaf2:	2001      	movs	r0, #1
 800eaf4:	f7fa fa6e 	bl	8008fd4 <pbuf_alloc>
 800eaf8:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800eafa:	69fb      	ldr	r3, [r7, #28]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d05b      	beq.n	800ebb8 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800eb00:	69fb      	ldr	r3, [r7, #28]
 800eb02:	895b      	ldrh	r3, [r3, #10]
 800eb04:	2b13      	cmp	r3, #19
 800eb06:	d806      	bhi.n	800eb16 <tcp_rst+0x36>
 800eb08:	4b2d      	ldr	r3, [pc, #180]	; (800ebc0 <tcp_rst+0xe0>)
 800eb0a:	f240 524c 	movw	r2, #1356	; 0x54c
 800eb0e:	492d      	ldr	r1, [pc, #180]	; (800ebc4 <tcp_rst+0xe4>)
 800eb10:	482d      	ldr	r0, [pc, #180]	; (800ebc8 <tcp_rst+0xe8>)
 800eb12:	f003 f9f7 	bl	8011f04 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800eb16:	69fb      	ldr	r3, [r7, #28]
 800eb18:	685b      	ldr	r3, [r3, #4]
 800eb1a:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800eb1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f7f9 fbd8 	bl	80082d4 <lwip_htons>
 800eb24:	4603      	mov	r3, r0
 800eb26:	461a      	mov	r2, r3
 800eb28:	69bb      	ldr	r3, [r7, #24]
 800eb2a:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800eb2c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f7f9 fbd0 	bl	80082d4 <lwip_htons>
 800eb34:	4603      	mov	r3, r0
 800eb36:	461a      	mov	r2, r3
 800eb38:	69bb      	ldr	r3, [r7, #24]
 800eb3a:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800eb3c:	68f8      	ldr	r0, [r7, #12]
 800eb3e:	f7f9 fbd6 	bl	80082ee <lwip_htonl>
 800eb42:	4602      	mov	r2, r0
 800eb44:	69bb      	ldr	r3, [r7, #24]
 800eb46:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800eb48:	68b8      	ldr	r0, [r7, #8]
 800eb4a:	f7f9 fbd0 	bl	80082ee <lwip_htonl>
 800eb4e:	4602      	mov	r2, r0
 800eb50:	69bb      	ldr	r3, [r7, #24]
 800eb52:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800eb54:	f245 0014 	movw	r0, #20500	; 0x5014
 800eb58:	f7f9 fbbc 	bl	80082d4 <lwip_htons>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	461a      	mov	r2, r3
 800eb60:	69bb      	ldr	r3, [r7, #24]
 800eb62:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800eb64:	69bb      	ldr	r3, [r7, #24]
 800eb66:	2200      	movs	r2, #0
 800eb68:	f042 0208 	orr.w	r2, r2, #8
 800eb6c:	739a      	strb	r2, [r3, #14]
 800eb6e:	2200      	movs	r2, #0
 800eb70:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800eb74:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800eb76:	69bb      	ldr	r3, [r7, #24]
 800eb78:	2200      	movs	r2, #0
 800eb7a:	741a      	strb	r2, [r3, #16]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800eb80:	69bb      	ldr	r3, [r7, #24]
 800eb82:	2200      	movs	r2, #0
 800eb84:	749a      	strb	r2, [r3, #18]
 800eb86:	2200      	movs	r2, #0
 800eb88:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800eb8a:	6838      	ldr	r0, [r7, #0]
 800eb8c:	f001 fd88 	bl	80106a0 <ip4_route>
 800eb90:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d00b      	beq.n	800ebb0 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	9302      	str	r3, [sp, #8]
 800eb9c:	2306      	movs	r3, #6
 800eb9e:	9301      	str	r3, [sp, #4]
 800eba0:	2300      	movs	r3, #0
 800eba2:	9300      	str	r3, [sp, #0]
 800eba4:	23ff      	movs	r3, #255	; 0xff
 800eba6:	683a      	ldr	r2, [r7, #0]
 800eba8:	6879      	ldr	r1, [r7, #4]
 800ebaa:	69f8      	ldr	r0, [r7, #28]
 800ebac:	f001 ff22 	bl	80109f4 <ip4_output_if>
  }
  pbuf_free(p);
 800ebb0:	69f8      	ldr	r0, [r7, #28]
 800ebb2:	f7fa fd81 	bl	80096b8 <pbuf_free>
 800ebb6:	e000      	b.n	800ebba <tcp_rst+0xda>
    return;
 800ebb8:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ebba:	3720      	adds	r7, #32
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}
 800ebc0:	08013e8c 	.word	0x08013e8c
 800ebc4:	08013ec0 	.word	0x08013ec0
 800ebc8:	08013ef0 	.word	0x08013ef0

0800ebcc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b084      	sub	sp, #16
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d029      	beq.n	800ec30 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebe0:	60fb      	str	r3, [r7, #12]
 800ebe2:	e002      	b.n	800ebea <tcp_rexmit_rto+0x1e>
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	60fb      	str	r3, [r7, #12]
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d1f8      	bne.n	800ebe4 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2200      	movs	r2, #0
 800ec06:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec0e:	2bff      	cmp	r3, #255	; 0xff
 800ec10:	d007      	beq.n	800ec22 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec18:	3301      	adds	r3, #1
 800ec1a:	b2da      	uxtb	r2, r3
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2200      	movs	r2, #0
 800ec26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f7ff fcd5 	bl	800e5d8 <tcp_output>
 800ec2e:	e000      	b.n	800ec32 <tcp_rexmit_rto+0x66>
    return;
 800ec30:	bf00      	nop
}
 800ec32:	3710      	adds	r7, #16
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}

0800ec38 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ec38:	b590      	push	{r4, r7, lr}
 800ec3a:	b085      	sub	sp, #20
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d043      	beq.n	800ecd0 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec4c:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	681a      	ldr	r2, [r3, #0]
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	3368      	adds	r3, #104	; 0x68
 800ec5a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ec5c:	e002      	b.n	800ec64 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d011      	beq.n	800ec90 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	68db      	ldr	r3, [r3, #12]
 800ec72:	685b      	ldr	r3, [r3, #4]
 800ec74:	4618      	mov	r0, r3
 800ec76:	f7f9 fb3a 	bl	80082ee <lwip_htonl>
 800ec7a:	4604      	mov	r4, r0
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	68db      	ldr	r3, [r3, #12]
 800ec80:	685b      	ldr	r3, [r3, #4]
 800ec82:	4618      	mov	r0, r3
 800ec84:	f7f9 fb33 	bl	80082ee <lwip_htonl>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	dbe6      	blt.n	800ec5e <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	681a      	ldr	r2, [r3, #0]
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	68ba      	ldr	r2, [r7, #8]
 800ec9c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d103      	bne.n	800ecae <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2200      	movs	r2, #0
 800ecaa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ecb4:	2bff      	cmp	r3, #255	; 0xff
 800ecb6:	d007      	beq.n	800ecc8 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ecbe:	3301      	adds	r3, #1
 800ecc0:	b2da      	uxtb	r2, r3
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2200      	movs	r2, #0
 800eccc:	635a      	str	r2, [r3, #52]	; 0x34
 800ecce:	e000      	b.n	800ecd2 <tcp_rexmit+0x9a>
    return;
 800ecd0:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800ecd2:	3714      	adds	r7, #20
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd90      	pop	{r4, r7, pc}

0800ecd8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b082      	sub	sp, #8
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d041      	beq.n	800ed6c <tcp_rexmit_fast+0x94>
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	7e9b      	ldrb	r3, [r3, #26]
 800ecec:	f003 0304 	and.w	r3, r3, #4
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d13b      	bne.n	800ed6c <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f7ff ff9f 	bl	800ec38 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ed06:	4293      	cmp	r3, r2
 800ed08:	bf28      	it	cs
 800ed0a:	4613      	movcs	r3, r2
 800ed0c:	b29b      	uxth	r3, r3
 800ed0e:	0fda      	lsrs	r2, r3, #31
 800ed10:	4413      	add	r3, r2
 800ed12:	105b      	asrs	r3, r3, #1
 800ed14:	b29a      	uxth	r2, r3
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ed22:	461a      	mov	r2, r3
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed28:	005b      	lsls	r3, r3, #1
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	d206      	bcs.n	800ed3c <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed32:	005b      	lsls	r3, r3, #1
 800ed34:	b29a      	uxth	r2, r3
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed46:	4619      	mov	r1, r3
 800ed48:	0049      	lsls	r1, r1, #1
 800ed4a:	440b      	add	r3, r1
 800ed4c:	b29b      	uxth	r3, r3
 800ed4e:	4413      	add	r3, r2
 800ed50:	b29a      	uxth	r2, r3
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	7e9b      	ldrb	r3, [r3, #26]
 800ed5c:	f043 0304 	orr.w	r3, r3, #4
 800ed60:	b2da      	uxtb	r2, r3
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2200      	movs	r2, #0
 800ed6a:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800ed6c:	bf00      	nop
 800ed6e:	3708      	adds	r7, #8
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}

0800ed74 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b08a      	sub	sp, #40	; 0x28
 800ed78:	af04      	add	r7, sp, #16
 800ed7a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed80:	3b01      	subs	r3, #1
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7f9 fab3 	bl	80082ee <lwip_htonl>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	2100      	movs	r1, #0
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f7fe fd56 	bl	800d840 <tcp_output_alloc_header>
 800ed94:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d102      	bne.n	800eda2 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800ed9c:	f04f 33ff 	mov.w	r3, #4294967295
 800eda0:	e021      	b.n	800ede6 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	3304      	adds	r3, #4
 800eda6:	4618      	mov	r0, r3
 800eda8:	f001 fc7a 	bl	80106a0 <ip4_route>
 800edac:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d102      	bne.n	800edba <tcp_keepalive+0x46>
    err = ERR_RTE;
 800edb4:	23fc      	movs	r3, #252	; 0xfc
 800edb6:	75fb      	strb	r3, [r7, #23]
 800edb8:	e010      	b.n	800eddc <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800edba:	6879      	ldr	r1, [r7, #4]
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	1d1a      	adds	r2, r3, #4
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	7a98      	ldrb	r0, [r3, #10]
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	9302      	str	r3, [sp, #8]
 800edc8:	2306      	movs	r3, #6
 800edca:	9301      	str	r3, [sp, #4]
 800edcc:	2300      	movs	r3, #0
 800edce:	9300      	str	r3, [sp, #0]
 800edd0:	4603      	mov	r3, r0
 800edd2:	6938      	ldr	r0, [r7, #16]
 800edd4:	f001 fe0e 	bl	80109f4 <ip4_output_if>
 800edd8:	4603      	mov	r3, r0
 800edda:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800eddc:	6938      	ldr	r0, [r7, #16]
 800edde:	f7fa fc6b 	bl	80096b8 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ede2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	3718      	adds	r7, #24
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}

0800edee <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800edee:	b590      	push	{r4, r7, lr}
 800edf0:	b08f      	sub	sp, #60	; 0x3c
 800edf2:	af04      	add	r7, sp, #16
 800edf4:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edfa:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800edfc:	6a3b      	ldr	r3, [r7, #32]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d102      	bne.n	800ee08 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee06:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800ee08:	6a3b      	ldr	r3, [r7, #32]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d101      	bne.n	800ee12 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	e085      	b.n	800ef1e <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ee12:	6a3b      	ldr	r3, [r7, #32]
 800ee14:	68db      	ldr	r3, [r3, #12]
 800ee16:	899b      	ldrh	r3, [r3, #12]
 800ee18:	b29b      	uxth	r3, r3
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7f9 fa5a 	bl	80082d4 <lwip_htons>
 800ee20:	4603      	mov	r3, r0
 800ee22:	f003 0301 	and.w	r3, r3, #1
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d005      	beq.n	800ee36 <tcp_zero_window_probe+0x48>
 800ee2a:	6a3b      	ldr	r3, [r7, #32]
 800ee2c:	891b      	ldrh	r3, [r3, #8]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d101      	bne.n	800ee36 <tcp_zero_window_probe+0x48>
 800ee32:	2301      	movs	r3, #1
 800ee34:	e000      	b.n	800ee38 <tcp_zero_window_probe+0x4a>
 800ee36:	2300      	movs	r3, #0
 800ee38:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ee3a:	7ffb      	ldrb	r3, [r7, #31]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	bf0c      	ite	eq
 800ee40:	2301      	moveq	r3, #1
 800ee42:	2300      	movne	r3, #0
 800ee44:	b2db      	uxtb	r3, r3
 800ee46:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800ee48:	6a3b      	ldr	r3, [r7, #32]
 800ee4a:	68db      	ldr	r3, [r3, #12]
 800ee4c:	685b      	ldr	r3, [r3, #4]
 800ee4e:	8bba      	ldrh	r2, [r7, #28]
 800ee50:	2100      	movs	r1, #0
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f7fe fcf4 	bl	800d840 <tcp_output_alloc_header>
 800ee58:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ee5a:	69bb      	ldr	r3, [r7, #24]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d102      	bne.n	800ee66 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ee60:	f04f 33ff 	mov.w	r3, #4294967295
 800ee64:	e05b      	b.n	800ef1e <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ee66:	69bb      	ldr	r3, [r7, #24]
 800ee68:	685b      	ldr	r3, [r3, #4]
 800ee6a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ee6c:	7ffb      	ldrb	r3, [r7, #31]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d00e      	beq.n	800ee90 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	899b      	ldrh	r3, [r3, #12]
 800ee76:	b29b      	uxth	r3, r3
 800ee78:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ee7c:	b29c      	uxth	r4, r3
 800ee7e:	2011      	movs	r0, #17
 800ee80:	f7f9 fa28 	bl	80082d4 <lwip_htons>
 800ee84:	4603      	mov	r3, r0
 800ee86:	4323      	orrs	r3, r4
 800ee88:	b29a      	uxth	r2, r3
 800ee8a:	697b      	ldr	r3, [r7, #20]
 800ee8c:	819a      	strh	r2, [r3, #12]
 800ee8e:	e010      	b.n	800eeb2 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ee90:	69bb      	ldr	r3, [r7, #24]
 800ee92:	685b      	ldr	r3, [r3, #4]
 800ee94:	3314      	adds	r3, #20
 800ee96:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ee98:	6a3b      	ldr	r3, [r7, #32]
 800ee9a:	6858      	ldr	r0, [r3, #4]
 800ee9c:	6a3b      	ldr	r3, [r7, #32]
 800ee9e:	685b      	ldr	r3, [r3, #4]
 800eea0:	891a      	ldrh	r2, [r3, #8]
 800eea2:	6a3b      	ldr	r3, [r7, #32]
 800eea4:	891b      	ldrh	r3, [r3, #8]
 800eea6:	1ad3      	subs	r3, r2, r3
 800eea8:	b29b      	uxth	r3, r3
 800eeaa:	2201      	movs	r2, #1
 800eeac:	6939      	ldr	r1, [r7, #16]
 800eeae:	f7fa fe0d 	bl	8009acc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800eeb2:	6a3b      	ldr	r3, [r7, #32]
 800eeb4:	68db      	ldr	r3, [r3, #12]
 800eeb6:	685b      	ldr	r3, [r3, #4]
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f7f9 fa18 	bl	80082ee <lwip_htonl>
 800eebe:	4603      	mov	r3, r0
 800eec0:	3301      	adds	r3, #1
 800eec2:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	1ad3      	subs	r3, r2, r3
 800eecc:	2b00      	cmp	r3, #0
 800eece:	da02      	bge.n	800eed6 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	68fa      	ldr	r2, [r7, #12]
 800eed4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	3304      	adds	r3, #4
 800eeda:	4618      	mov	r0, r3
 800eedc:	f001 fbe0 	bl	80106a0 <ip4_route>
 800eee0:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d103      	bne.n	800eef0 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800eee8:	23fc      	movs	r3, #252	; 0xfc
 800eeea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eeee:	e011      	b.n	800ef14 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800eef0:	6879      	ldr	r1, [r7, #4]
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	1d1a      	adds	r2, r3, #4
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	7a98      	ldrb	r0, [r3, #10]
 800eefa:	68bb      	ldr	r3, [r7, #8]
 800eefc:	9302      	str	r3, [sp, #8]
 800eefe:	2306      	movs	r3, #6
 800ef00:	9301      	str	r3, [sp, #4]
 800ef02:	2300      	movs	r3, #0
 800ef04:	9300      	str	r3, [sp, #0]
 800ef06:	4603      	mov	r3, r0
 800ef08:	69b8      	ldr	r0, [r7, #24]
 800ef0a:	f001 fd73 	bl	80109f4 <ip4_output_if>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800ef14:	69b8      	ldr	r0, [r7, #24]
 800ef16:	f7fa fbcf 	bl	80096b8 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ef1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ef1e:	4618      	mov	r0, r3
 800ef20:	372c      	adds	r7, #44	; 0x2c
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd90      	pop	{r4, r7, pc}
	...

0800ef28 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b082      	sub	sp, #8
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ef30:	f7fa fe4c 	bl	8009bcc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ef34:	4b0a      	ldr	r3, [pc, #40]	; (800ef60 <tcpip_tcp_timer+0x38>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d103      	bne.n	800ef44 <tcpip_tcp_timer+0x1c>
 800ef3c:	4b09      	ldr	r3, [pc, #36]	; (800ef64 <tcpip_tcp_timer+0x3c>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d005      	beq.n	800ef50 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ef44:	2200      	movs	r2, #0
 800ef46:	4908      	ldr	r1, [pc, #32]	; (800ef68 <tcpip_tcp_timer+0x40>)
 800ef48:	20fa      	movs	r0, #250	; 0xfa
 800ef4a:	f000 f86f 	bl	800f02c <sys_timeout>
 800ef4e:	e003      	b.n	800ef58 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ef50:	4b06      	ldr	r3, [pc, #24]	; (800ef6c <tcpip_tcp_timer+0x44>)
 800ef52:	2200      	movs	r2, #0
 800ef54:	601a      	str	r2, [r3, #0]
  }
}
 800ef56:	bf00      	nop
 800ef58:	bf00      	nop
 800ef5a:	3708      	adds	r7, #8
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}
 800ef60:	2000b128 	.word	0x2000b128
 800ef64:	2000b138 	.word	0x2000b138
 800ef68:	0800ef29 	.word	0x0800ef29
 800ef6c:	2000433c 	.word	0x2000433c

0800ef70 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ef74:	4b0a      	ldr	r3, [pc, #40]	; (800efa0 <tcp_timer_needed+0x30>)
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d10f      	bne.n	800ef9c <tcp_timer_needed+0x2c>
 800ef7c:	4b09      	ldr	r3, [pc, #36]	; (800efa4 <tcp_timer_needed+0x34>)
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d103      	bne.n	800ef8c <tcp_timer_needed+0x1c>
 800ef84:	4b08      	ldr	r3, [pc, #32]	; (800efa8 <tcp_timer_needed+0x38>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d007      	beq.n	800ef9c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ef8c:	4b04      	ldr	r3, [pc, #16]	; (800efa0 <tcp_timer_needed+0x30>)
 800ef8e:	2201      	movs	r2, #1
 800ef90:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ef92:	2200      	movs	r2, #0
 800ef94:	4905      	ldr	r1, [pc, #20]	; (800efac <tcp_timer_needed+0x3c>)
 800ef96:	20fa      	movs	r0, #250	; 0xfa
 800ef98:	f000 f848 	bl	800f02c <sys_timeout>
  }
}
 800ef9c:	bf00      	nop
 800ef9e:	bd80      	pop	{r7, pc}
 800efa0:	2000433c 	.word	0x2000433c
 800efa4:	2000b128 	.word	0x2000b128
 800efa8:	2000b138 	.word	0x2000b138
 800efac:	0800ef29 	.word	0x0800ef29

0800efb0 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b084      	sub	sp, #16
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	685b      	ldr	r3, [r3, #4]
 800efc0:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	687a      	ldr	r2, [r7, #4]
 800efc8:	4903      	ldr	r1, [pc, #12]	; (800efd8 <cyclic_timer+0x28>)
 800efca:	4618      	mov	r0, r3
 800efcc:	f000 f82e 	bl	800f02c <sys_timeout>
}
 800efd0:	bf00      	nop
 800efd2:	3710      	adds	r7, #16
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}
 800efd8:	0800efb1 	.word	0x0800efb1

0800efdc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b082      	sub	sp, #8
 800efe0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800efe2:	2301      	movs	r3, #1
 800efe4:	607b      	str	r3, [r7, #4]
 800efe6:	e00e      	b.n	800f006 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800efe8:	4a0d      	ldr	r2, [pc, #52]	; (800f020 <sys_timeouts_init+0x44>)
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	00db      	lsls	r3, r3, #3
 800eff4:	4a0a      	ldr	r2, [pc, #40]	; (800f020 <sys_timeouts_init+0x44>)
 800eff6:	4413      	add	r3, r2
 800eff8:	461a      	mov	r2, r3
 800effa:	490a      	ldr	r1, [pc, #40]	; (800f024 <sys_timeouts_init+0x48>)
 800effc:	f000 f816 	bl	800f02c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	3301      	adds	r3, #1
 800f004:	607b      	str	r3, [r7, #4]
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	2b02      	cmp	r3, #2
 800f00a:	d9ed      	bls.n	800efe8 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800f00c:	f7f6 f856 	bl	80050bc <sys_now>
 800f010:	4603      	mov	r3, r0
 800f012:	4a05      	ldr	r2, [pc, #20]	; (800f028 <sys_timeouts_init+0x4c>)
 800f014:	6013      	str	r3, [r2, #0]
}
 800f016:	bf00      	nop
 800f018:	3708      	adds	r7, #8
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}
 800f01e:	bf00      	nop
 800f020:	08014b94 	.word	0x08014b94
 800f024:	0800efb1 	.word	0x0800efb1
 800f028:	20004338 	.word	0x20004338

0800f02c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b088      	sub	sp, #32
 800f030:	af00      	add	r7, sp, #0
 800f032:	60f8      	str	r0, [r7, #12]
 800f034:	60b9      	str	r1, [r7, #8]
 800f036:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800f038:	200a      	movs	r0, #10
 800f03a:	f7f9 fd37 	bl	8008aac <memp_malloc>
 800f03e:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d10a      	bne.n	800f05c <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800f046:	697b      	ldr	r3, [r7, #20]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	f040 8084 	bne.w	800f156 <sys_timeout+0x12a>
 800f04e:	4b44      	ldr	r3, [pc, #272]	; (800f160 <sys_timeout+0x134>)
 800f050:	22d4      	movs	r2, #212	; 0xd4
 800f052:	4944      	ldr	r1, [pc, #272]	; (800f164 <sys_timeout+0x138>)
 800f054:	4844      	ldr	r0, [pc, #272]	; (800f168 <sys_timeout+0x13c>)
 800f056:	f002 ff55 	bl	8011f04 <iprintf>
    return;
 800f05a:	e07c      	b.n	800f156 <sys_timeout+0x12a>
  }

  now = sys_now();
 800f05c:	f7f6 f82e 	bl	80050bc <sys_now>
 800f060:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800f062:	4b42      	ldr	r3, [pc, #264]	; (800f16c <sys_timeout+0x140>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d105      	bne.n	800f076 <sys_timeout+0x4a>
    diff = 0;
 800f06a:	2300      	movs	r3, #0
 800f06c:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800f06e:	4a40      	ldr	r2, [pc, #256]	; (800f170 <sys_timeout+0x144>)
 800f070:	693b      	ldr	r3, [r7, #16]
 800f072:	6013      	str	r3, [r2, #0]
 800f074:	e004      	b.n	800f080 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800f076:	4b3e      	ldr	r3, [pc, #248]	; (800f170 <sys_timeout+0x144>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	693a      	ldr	r2, [r7, #16]
 800f07c:	1ad3      	subs	r3, r2, r3
 800f07e:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800f080:	697b      	ldr	r3, [r7, #20]
 800f082:	2200      	movs	r2, #0
 800f084:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	68ba      	ldr	r2, [r7, #8]
 800f08a:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	687a      	ldr	r2, [r7, #4]
 800f090:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800f092:	68fa      	ldr	r2, [r7, #12]
 800f094:	69bb      	ldr	r3, [r7, #24]
 800f096:	441a      	add	r2, r3
 800f098:	697b      	ldr	r3, [r7, #20]
 800f09a:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800f09c:	4b33      	ldr	r3, [pc, #204]	; (800f16c <sys_timeout+0x140>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d103      	bne.n	800f0ac <sys_timeout+0x80>
    next_timeout = timeout;
 800f0a4:	4a31      	ldr	r2, [pc, #196]	; (800f16c <sys_timeout+0x140>)
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	6013      	str	r3, [r2, #0]
    return;
 800f0aa:	e055      	b.n	800f158 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800f0ac:	4b2f      	ldr	r3, [pc, #188]	; (800f16c <sys_timeout+0x140>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	685b      	ldr	r3, [r3, #4]
 800f0b2:	68fa      	ldr	r2, [r7, #12]
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d20f      	bcs.n	800f0d8 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800f0b8:	4b2c      	ldr	r3, [pc, #176]	; (800f16c <sys_timeout+0x140>)
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	6859      	ldr	r1, [r3, #4]
 800f0be:	4b2b      	ldr	r3, [pc, #172]	; (800f16c <sys_timeout+0x140>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	68fa      	ldr	r2, [r7, #12]
 800f0c4:	1a8a      	subs	r2, r1, r2
 800f0c6:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800f0c8:	4b28      	ldr	r3, [pc, #160]	; (800f16c <sys_timeout+0x140>)
 800f0ca:	681a      	ldr	r2, [r3, #0]
 800f0cc:	697b      	ldr	r3, [r7, #20]
 800f0ce:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800f0d0:	4a26      	ldr	r2, [pc, #152]	; (800f16c <sys_timeout+0x140>)
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	6013      	str	r3, [r2, #0]
 800f0d6:	e03f      	b.n	800f158 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800f0d8:	4b24      	ldr	r3, [pc, #144]	; (800f16c <sys_timeout+0x140>)
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	61fb      	str	r3, [r7, #28]
 800f0de:	e036      	b.n	800f14e <sys_timeout+0x122>
      timeout->time -= t->time;
 800f0e0:	697b      	ldr	r3, [r7, #20]
 800f0e2:	685a      	ldr	r2, [r3, #4]
 800f0e4:	69fb      	ldr	r3, [r7, #28]
 800f0e6:	685b      	ldr	r3, [r3, #4]
 800f0e8:	1ad2      	subs	r2, r2, r3
 800f0ea:	697b      	ldr	r3, [r7, #20]
 800f0ec:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800f0ee:	69fb      	ldr	r3, [r7, #28]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d006      	beq.n	800f104 <sys_timeout+0xd8>
 800f0f6:	69fb      	ldr	r3, [r7, #28]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	685a      	ldr	r2, [r3, #4]
 800f0fc:	697b      	ldr	r3, [r7, #20]
 800f0fe:	685b      	ldr	r3, [r3, #4]
 800f100:	429a      	cmp	r2, r3
 800f102:	d921      	bls.n	800f148 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800f104:	69fb      	ldr	r3, [r7, #28]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d009      	beq.n	800f120 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800f10c:	69fb      	ldr	r3, [r7, #28]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	6859      	ldr	r1, [r3, #4]
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	685a      	ldr	r2, [r3, #4]
 800f116:	69fb      	ldr	r3, [r7, #28]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	1a8a      	subs	r2, r1, r2
 800f11c:	605a      	str	r2, [r3, #4]
 800f11e:	e00b      	b.n	800f138 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	685b      	ldr	r3, [r3, #4]
 800f124:	68fa      	ldr	r2, [r7, #12]
 800f126:	429a      	cmp	r2, r3
 800f128:	d206      	bcs.n	800f138 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800f12a:	4b10      	ldr	r3, [pc, #64]	; (800f16c <sys_timeout+0x140>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	685a      	ldr	r2, [r3, #4]
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	441a      	add	r2, r3
 800f134:	697b      	ldr	r3, [r7, #20]
 800f136:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800f138:	69fb      	ldr	r3, [r7, #28]
 800f13a:	681a      	ldr	r2, [r3, #0]
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800f140:	69fb      	ldr	r3, [r7, #28]
 800f142:	697a      	ldr	r2, [r7, #20]
 800f144:	601a      	str	r2, [r3, #0]
        break;
 800f146:	e007      	b.n	800f158 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800f148:	69fb      	ldr	r3, [r7, #28]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	61fb      	str	r3, [r7, #28]
 800f14e:	69fb      	ldr	r3, [r7, #28]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d1c5      	bne.n	800f0e0 <sys_timeout+0xb4>
 800f154:	e000      	b.n	800f158 <sys_timeout+0x12c>
    return;
 800f156:	bf00      	nop
      }
    }
  }
}
 800f158:	3720      	adds	r7, #32
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}
 800f15e:	bf00      	nop
 800f160:	080142d0 	.word	0x080142d0
 800f164:	08014304 	.word	0x08014304
 800f168:	08014344 	.word	0x08014344
 800f16c:	20004334 	.word	0x20004334
 800f170:	20004338 	.word	0x20004338

0800f174 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b086      	sub	sp, #24
 800f178:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800f17a:	4b24      	ldr	r3, [pc, #144]	; (800f20c <sys_check_timeouts+0x98>)
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d03f      	beq.n	800f202 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800f182:	f7f5 ff9b 	bl	80050bc <sys_now>
 800f186:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800f188:	4b21      	ldr	r3, [pc, #132]	; (800f210 <sys_check_timeouts+0x9c>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	68fa      	ldr	r2, [r7, #12]
 800f18e:	1ad3      	subs	r3, r2, r3
 800f190:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 800f192:	2300      	movs	r3, #0
 800f194:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800f196:	4b1d      	ldr	r3, [pc, #116]	; (800f20c <sys_check_timeouts+0x98>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d02c      	beq.n	800f1fc <sys_check_timeouts+0x88>
 800f1a2:	68bb      	ldr	r3, [r7, #8]
 800f1a4:	685b      	ldr	r3, [r3, #4]
 800f1a6:	697a      	ldr	r2, [r7, #20]
 800f1a8:	429a      	cmp	r2, r3
 800f1aa:	d327      	bcc.n	800f1fc <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 800f1ac:	2301      	movs	r3, #1
 800f1ae:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800f1b0:	68bb      	ldr	r3, [r7, #8]
 800f1b2:	685a      	ldr	r2, [r3, #4]
 800f1b4:	4b16      	ldr	r3, [pc, #88]	; (800f210 <sys_check_timeouts+0x9c>)
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	4413      	add	r3, r2
 800f1ba:	4a15      	ldr	r2, [pc, #84]	; (800f210 <sys_check_timeouts+0x9c>)
 800f1bc:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	685b      	ldr	r3, [r3, #4]
 800f1c2:	697a      	ldr	r2, [r7, #20]
 800f1c4:	1ad3      	subs	r3, r2, r3
 800f1c6:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	4a0f      	ldr	r2, [pc, #60]	; (800f20c <sys_check_timeouts+0x98>)
 800f1ce:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	689b      	ldr	r3, [r3, #8]
 800f1d4:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800f1d6:	68bb      	ldr	r3, [r7, #8]
 800f1d8:	68db      	ldr	r3, [r3, #12]
 800f1da:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f1dc:	68b9      	ldr	r1, [r7, #8]
 800f1de:	200a      	movs	r0, #10
 800f1e0:	f7f9 fcb6 	bl	8008b50 <memp_free>
        if (handler != NULL) {
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d008      	beq.n	800f1fc <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 800f1ea:	480a      	ldr	r0, [pc, #40]	; (800f214 <sys_check_timeouts+0xa0>)
 800f1ec:	f002 fc8e 	bl	8011b0c <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	6838      	ldr	r0, [r7, #0]
 800f1f4:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 800f1f6:	4807      	ldr	r0, [pc, #28]	; (800f214 <sys_check_timeouts+0xa0>)
 800f1f8:	f002 fc97 	bl	8011b2a <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800f1fc:	7cfb      	ldrb	r3, [r7, #19]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d1c7      	bne.n	800f192 <sys_check_timeouts+0x1e>
  }
}
 800f202:	bf00      	nop
 800f204:	3718      	adds	r7, #24
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}
 800f20a:	bf00      	nop
 800f20c:	20004334 	.word	0x20004334
 800f210:	20004338 	.word	0x20004338
 800f214:	20007a14 	.word	0x20007a14

0800f218 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b082      	sub	sp, #8
 800f21c:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 800f21e:	4b0f      	ldr	r3, [pc, #60]	; (800f25c <sys_timeouts_sleeptime+0x44>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d102      	bne.n	800f22c <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 800f226:	f04f 33ff 	mov.w	r3, #4294967295
 800f22a:	e013      	b.n	800f254 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 800f22c:	f7f5 ff46 	bl	80050bc <sys_now>
 800f230:	4602      	mov	r2, r0
 800f232:	4b0b      	ldr	r3, [pc, #44]	; (800f260 <sys_timeouts_sleeptime+0x48>)
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	1ad3      	subs	r3, r2, r3
 800f238:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 800f23a:	4b08      	ldr	r3, [pc, #32]	; (800f25c <sys_timeouts_sleeptime+0x44>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	685b      	ldr	r3, [r3, #4]
 800f240:	687a      	ldr	r2, [r7, #4]
 800f242:	429a      	cmp	r2, r3
 800f244:	d901      	bls.n	800f24a <sys_timeouts_sleeptime+0x32>
    return 0;
 800f246:	2300      	movs	r3, #0
 800f248:	e004      	b.n	800f254 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 800f24a:	4b04      	ldr	r3, [pc, #16]	; (800f25c <sys_timeouts_sleeptime+0x44>)
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	685a      	ldr	r2, [r3, #4]
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	1ad3      	subs	r3, r2, r3
  }
}
 800f254:	4618      	mov	r0, r3
 800f256:	3708      	adds	r7, #8
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}
 800f25c:	20004334 	.word	0x20004334
 800f260:	20004338 	.word	0x20004338

0800f264 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b084      	sub	sp, #16
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
 800f26c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 800f26e:	4b0f      	ldr	r3, [pc, #60]	; (800f2ac <sys_timeouts_mbox_fetch+0x48>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d105      	bne.n	800f282 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800f276:	2200      	movs	r2, #0
 800f278:	6839      	ldr	r1, [r7, #0]
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f002 fbcc 	bl	8011a18 <sys_arch_mbox_fetch>
    return;
 800f280:	e011      	b.n	800f2a6 <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 800f282:	f7ff ffc9 	bl	800f218 <sys_timeouts_sleeptime>
 800f286:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d008      	beq.n	800f2a0 <sys_timeouts_mbox_fetch+0x3c>
 800f28e:	68fa      	ldr	r2, [r7, #12]
 800f290:	6839      	ldr	r1, [r7, #0]
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f002 fbc0 	bl	8011a18 <sys_arch_mbox_fetch>
 800f298:	4603      	mov	r3, r0
 800f29a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f29e:	d102      	bne.n	800f2a6 <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800f2a0:	f7ff ff68 	bl	800f174 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800f2a4:	e7e3      	b.n	800f26e <sys_timeouts_mbox_fetch+0xa>
  }
}
 800f2a6:	3710      	adds	r7, #16
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd80      	pop	{r7, pc}
 800f2ac:	20004334 	.word	0x20004334

0800f2b0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f2b0:	b480      	push	{r7}
 800f2b2:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800f2b4:	bf00      	nop
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bc80      	pop	{r7}
 800f2ba:	4770      	bx	lr

0800f2bc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f2bc:	b480      	push	{r7}
 800f2be:	b085      	sub	sp, #20
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	60f8      	str	r0, [r7, #12]
 800f2c4:	60b9      	str	r1, [r7, #8]
 800f2c6:	4613      	mov	r3, r2
 800f2c8:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f2ca:	79fb      	ldrb	r3, [r7, #7]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d018      	beq.n	800f302 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d013      	beq.n	800f2fe <udp_input_local_match+0x42>
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d00f      	beq.n	800f2fe <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f2de:	4b13      	ldr	r3, [pc, #76]	; (800f32c <udp_input_local_match+0x70>)
 800f2e0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f2e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2e6:	d00a      	beq.n	800f2fe <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	681a      	ldr	r2, [r3, #0]
 800f2ec:	4b0f      	ldr	r3, [pc, #60]	; (800f32c <udp_input_local_match+0x70>)
 800f2ee:	695b      	ldr	r3, [r3, #20]
 800f2f0:	405a      	eors	r2, r3
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	3308      	adds	r3, #8
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d110      	bne.n	800f320 <udp_input_local_match+0x64>
          return 1;
 800f2fe:	2301      	movs	r3, #1
 800f300:	e00f      	b.n	800f322 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d009      	beq.n	800f31c <udp_input_local_match+0x60>
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d005      	beq.n	800f31c <udp_input_local_match+0x60>
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	681a      	ldr	r2, [r3, #0]
 800f314:	4b05      	ldr	r3, [pc, #20]	; (800f32c <udp_input_local_match+0x70>)
 800f316:	695b      	ldr	r3, [r3, #20]
 800f318:	429a      	cmp	r2, r3
 800f31a:	d101      	bne.n	800f320 <udp_input_local_match+0x64>
      return 1;
 800f31c:	2301      	movs	r3, #1
 800f31e:	e000      	b.n	800f322 <udp_input_local_match+0x66>
    }
  }

  return 0;
 800f320:	2300      	movs	r3, #0
}
 800f322:	4618      	mov	r0, r3
 800f324:	3714      	adds	r7, #20
 800f326:	46bd      	mov	sp, r7
 800f328:	bc80      	pop	{r7}
 800f32a:	4770      	bx	lr
 800f32c:	20007a18 	.word	0x20007a18

0800f330 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f330:	b590      	push	{r4, r7, lr}
 800f332:	b08d      	sub	sp, #52	; 0x34
 800f334:	af02      	add	r7, sp, #8
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f33a:	2300      	movs	r3, #0
 800f33c:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	895b      	ldrh	r3, [r3, #10]
 800f342:	2b07      	cmp	r3, #7
 800f344:	d803      	bhi.n	800f34e <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f346:	6878      	ldr	r0, [r7, #4]
 800f348:	f7fa f9b6 	bl	80096b8 <pbuf_free>
    goto end;
 800f34c:	e0c6      	b.n	800f4dc <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	685b      	ldr	r3, [r3, #4]
 800f352:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f354:	4b63      	ldr	r3, [pc, #396]	; (800f4e4 <udp_input+0x1b4>)
 800f356:	695b      	ldr	r3, [r3, #20]
 800f358:	4a62      	ldr	r2, [pc, #392]	; (800f4e4 <udp_input+0x1b4>)
 800f35a:	6812      	ldr	r2, [r2, #0]
 800f35c:	4611      	mov	r1, r2
 800f35e:	4618      	mov	r0, r3
 800f360:	f001 fc1a 	bl	8010b98 <ip4_addr_isbroadcast_u32>
 800f364:	4603      	mov	r3, r0
 800f366:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	881b      	ldrh	r3, [r3, #0]
 800f36c:	b29b      	uxth	r3, r3
 800f36e:	4618      	mov	r0, r3
 800f370:	f7f8 ffb0 	bl	80082d4 <lwip_htons>
 800f374:	4603      	mov	r3, r0
 800f376:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	885b      	ldrh	r3, [r3, #2]
 800f37c:	b29b      	uxth	r3, r3
 800f37e:	4618      	mov	r0, r3
 800f380:	f7f8 ffa8 	bl	80082d4 <lwip_htons>
 800f384:	4603      	mov	r3, r0
 800f386:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f388:	2300      	movs	r3, #0
 800f38a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800f38c:	2300      	movs	r3, #0
 800f38e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f390:	2300      	movs	r3, #0
 800f392:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f394:	4b54      	ldr	r3, [pc, #336]	; (800f4e8 <udp_input+0x1b8>)
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	627b      	str	r3, [r7, #36]	; 0x24
 800f39a:	e03b      	b.n	800f414 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f39e:	8a5b      	ldrh	r3, [r3, #18]
 800f3a0:	89fa      	ldrh	r2, [r7, #14]
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	d131      	bne.n	800f40a <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f3a6:	7cfb      	ldrb	r3, [r7, #19]
 800f3a8:	461a      	mov	r2, r3
 800f3aa:	6839      	ldr	r1, [r7, #0]
 800f3ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f3ae:	f7ff ff85 	bl	800f2bc <udp_input_local_match>
 800f3b2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d028      	beq.n	800f40a <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800f3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ba:	7c1b      	ldrb	r3, [r3, #16]
 800f3bc:	f003 0304 	and.w	r3, r3, #4
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d104      	bne.n	800f3ce <udp_input+0x9e>
 800f3c4:	69fb      	ldr	r3, [r7, #28]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d101      	bne.n	800f3ce <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800f3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3cc:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3d0:	8a9b      	ldrh	r3, [r3, #20]
 800f3d2:	8a3a      	ldrh	r2, [r7, #16]
 800f3d4:	429a      	cmp	r2, r3
 800f3d6:	d118      	bne.n	800f40a <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3da:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d005      	beq.n	800f3ec <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e2:	685a      	ldr	r2, [r3, #4]
 800f3e4:	4b3f      	ldr	r3, [pc, #252]	; (800f4e4 <udp_input+0x1b4>)
 800f3e6:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f3e8:	429a      	cmp	r2, r3
 800f3ea:	d10e      	bne.n	800f40a <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f3ec:	6a3b      	ldr	r3, [r7, #32]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d014      	beq.n	800f41c <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f4:	68da      	ldr	r2, [r3, #12]
 800f3f6:	6a3b      	ldr	r3, [r7, #32]
 800f3f8:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f3fa:	4b3b      	ldr	r3, [pc, #236]	; (800f4e8 <udp_input+0x1b8>)
 800f3fc:	681a      	ldr	r2, [r3, #0]
 800f3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f400:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f402:	4a39      	ldr	r2, [pc, #228]	; (800f4e8 <udp_input+0x1b8>)
 800f404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f406:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f408:	e008      	b.n	800f41c <udp_input+0xec>
      }
    }

    prev = pcb;
 800f40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f40c:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f410:	68db      	ldr	r3, [r3, #12]
 800f412:	627b      	str	r3, [r7, #36]	; 0x24
 800f414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f416:	2b00      	cmp	r3, #0
 800f418:	d1c0      	bne.n	800f39c <udp_input+0x6c>
 800f41a:	e000      	b.n	800f41e <udp_input+0xee>
        break;
 800f41c:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f420:	2b00      	cmp	r3, #0
 800f422:	d101      	bne.n	800f428 <udp_input+0xf8>
    pcb = uncon_pcb;
 800f424:	69fb      	ldr	r3, [r7, #28]
 800f426:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d002      	beq.n	800f434 <udp_input+0x104>
    for_us = 1;
 800f42e:	2301      	movs	r3, #1
 800f430:	76fb      	strb	r3, [r7, #27]
 800f432:	e00a      	b.n	800f44a <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	3304      	adds	r3, #4
 800f438:	681a      	ldr	r2, [r3, #0]
 800f43a:	4b2a      	ldr	r3, [pc, #168]	; (800f4e4 <udp_input+0x1b4>)
 800f43c:	695b      	ldr	r3, [r3, #20]
 800f43e:	429a      	cmp	r2, r3
 800f440:	bf0c      	ite	eq
 800f442:	2301      	moveq	r3, #1
 800f444:	2300      	movne	r3, #0
 800f446:	b2db      	uxtb	r3, r3
 800f448:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f44a:	7efb      	ldrb	r3, [r7, #27]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d042      	beq.n	800f4d6 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800f450:	f06f 0107 	mvn.w	r1, #7
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f7fa f90b 	bl	8009670 <pbuf_header>
 800f45a:	4603      	mov	r3, r0
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d00a      	beq.n	800f476 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800f460:	4b22      	ldr	r3, [pc, #136]	; (800f4ec <udp_input+0x1bc>)
 800f462:	f240 1255 	movw	r2, #341	; 0x155
 800f466:	4922      	ldr	r1, [pc, #136]	; (800f4f0 <udp_input+0x1c0>)
 800f468:	4822      	ldr	r0, [pc, #136]	; (800f4f4 <udp_input+0x1c4>)
 800f46a:	f002 fd4b 	bl	8011f04 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f46e:	6878      	ldr	r0, [r7, #4]
 800f470:	f7fa f922 	bl	80096b8 <pbuf_free>
      goto end;
 800f474:	e032      	b.n	800f4dc <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800f476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d012      	beq.n	800f4a2 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f47e:	699b      	ldr	r3, [r3, #24]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d00a      	beq.n	800f49a <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f486:	699c      	ldr	r4, [r3, #24]
 800f488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f48a:	69d8      	ldr	r0, [r3, #28]
 800f48c:	8a3b      	ldrh	r3, [r7, #16]
 800f48e:	9300      	str	r3, [sp, #0]
 800f490:	4b19      	ldr	r3, [pc, #100]	; (800f4f8 <udp_input+0x1c8>)
 800f492:	687a      	ldr	r2, [r7, #4]
 800f494:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f496:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f498:	e021      	b.n	800f4de <udp_input+0x1ae>
        pbuf_free(p);
 800f49a:	6878      	ldr	r0, [r7, #4]
 800f49c:	f7fa f90c 	bl	80096b8 <pbuf_free>
        goto end;
 800f4a0:	e01c      	b.n	800f4dc <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f4a2:	7cfb      	ldrb	r3, [r7, #19]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d112      	bne.n	800f4ce <udp_input+0x19e>
 800f4a8:	4b0e      	ldr	r3, [pc, #56]	; (800f4e4 <udp_input+0x1b4>)
 800f4aa:	695b      	ldr	r3, [r3, #20]
 800f4ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f4b0:	2be0      	cmp	r3, #224	; 0xe0
 800f4b2:	d00c      	beq.n	800f4ce <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f4b4:	4b0b      	ldr	r3, [pc, #44]	; (800f4e4 <udp_input+0x1b4>)
 800f4b6:	899b      	ldrh	r3, [r3, #12]
 800f4b8:	3308      	adds	r3, #8
 800f4ba:	b29b      	uxth	r3, r3
 800f4bc:	b21b      	sxth	r3, r3
 800f4be:	4619      	mov	r1, r3
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f7fa f8e7 	bl	8009694 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f4c6:	2103      	movs	r1, #3
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f001 f861 	bl	8010590 <icmp_dest_unreach>
      pbuf_free(p);
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f7fa f8f2 	bl	80096b8 <pbuf_free>
  return;
 800f4d4:	e003      	b.n	800f4de <udp_input+0x1ae>
    pbuf_free(p);
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	f7fa f8ee 	bl	80096b8 <pbuf_free>
  return;
 800f4dc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f4de:	372c      	adds	r7, #44	; 0x2c
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	bd90      	pop	{r4, r7, pc}
 800f4e4:	20007a18 	.word	0x20007a18
 800f4e8:	2000b140 	.word	0x2000b140
 800f4ec:	0801436c 	.word	0x0801436c
 800f4f0:	0801439c 	.word	0x0801439c
 800f4f4:	080143b0 	.word	0x080143b0
 800f4f8:	20007a28 	.word	0x20007a28

0800f4fc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800f4fc:	b480      	push	{r7}
 800f4fe:	b085      	sub	sp, #20
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
 800f504:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d01e      	beq.n	800f54a <udp_netif_ip_addr_changed+0x4e>
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d01a      	beq.n	800f54a <udp_netif_ip_addr_changed+0x4e>
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d017      	beq.n	800f54a <udp_netif_ip_addr_changed+0x4e>
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d013      	beq.n	800f54a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f522:	4b0c      	ldr	r3, [pc, #48]	; (800f554 <udp_netif_ip_addr_changed+0x58>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	60fb      	str	r3, [r7, #12]
 800f528:	e00c      	b.n	800f544 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	681a      	ldr	r2, [r3, #0]
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	429a      	cmp	r2, r3
 800f534:	d103      	bne.n	800f53e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	681a      	ldr	r2, [r3, #0]
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	68db      	ldr	r3, [r3, #12]
 800f542:	60fb      	str	r3, [r7, #12]
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d1ef      	bne.n	800f52a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f54a:	bf00      	nop
 800f54c:	3714      	adds	r7, #20
 800f54e:	46bd      	mov	sp, r7
 800f550:	bc80      	pop	{r7}
 800f552:	4770      	bx	lr
 800f554:	2000b140 	.word	0x2000b140

0800f558 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b082      	sub	sp, #8
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800f560:	4915      	ldr	r1, [pc, #84]	; (800f5b8 <etharp_free_entry+0x60>)
 800f562:	687a      	ldr	r2, [r7, #4]
 800f564:	4613      	mov	r3, r2
 800f566:	005b      	lsls	r3, r3, #1
 800f568:	4413      	add	r3, r2
 800f56a:	00db      	lsls	r3, r3, #3
 800f56c:	440b      	add	r3, r1
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d013      	beq.n	800f59c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800f574:	4910      	ldr	r1, [pc, #64]	; (800f5b8 <etharp_free_entry+0x60>)
 800f576:	687a      	ldr	r2, [r7, #4]
 800f578:	4613      	mov	r3, r2
 800f57a:	005b      	lsls	r3, r3, #1
 800f57c:	4413      	add	r3, r2
 800f57e:	00db      	lsls	r3, r3, #3
 800f580:	440b      	add	r3, r1
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	4618      	mov	r0, r3
 800f586:	f7fa f897 	bl	80096b8 <pbuf_free>
    arp_table[i].q = NULL;
 800f58a:	490b      	ldr	r1, [pc, #44]	; (800f5b8 <etharp_free_entry+0x60>)
 800f58c:	687a      	ldr	r2, [r7, #4]
 800f58e:	4613      	mov	r3, r2
 800f590:	005b      	lsls	r3, r3, #1
 800f592:	4413      	add	r3, r2
 800f594:	00db      	lsls	r3, r3, #3
 800f596:	440b      	add	r3, r1
 800f598:	2200      	movs	r2, #0
 800f59a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f59c:	4906      	ldr	r1, [pc, #24]	; (800f5b8 <etharp_free_entry+0x60>)
 800f59e:	687a      	ldr	r2, [r7, #4]
 800f5a0:	4613      	mov	r3, r2
 800f5a2:	005b      	lsls	r3, r3, #1
 800f5a4:	4413      	add	r3, r2
 800f5a6:	00db      	lsls	r3, r3, #3
 800f5a8:	440b      	add	r3, r1
 800f5aa:	3314      	adds	r3, #20
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800f5b0:	bf00      	nop
 800f5b2:	3708      	adds	r7, #8
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	bd80      	pop	{r7, pc}
 800f5b8:	20004340 	.word	0x20004340

0800f5bc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b082      	sub	sp, #8
 800f5c0:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	71fb      	strb	r3, [r7, #7]
 800f5c6:	e096      	b.n	800f6f6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800f5c8:	79fa      	ldrb	r2, [r7, #7]
 800f5ca:	494f      	ldr	r1, [pc, #316]	; (800f708 <etharp_tmr+0x14c>)
 800f5cc:	4613      	mov	r3, r2
 800f5ce:	005b      	lsls	r3, r3, #1
 800f5d0:	4413      	add	r3, r2
 800f5d2:	00db      	lsls	r3, r3, #3
 800f5d4:	440b      	add	r3, r1
 800f5d6:	3314      	adds	r3, #20
 800f5d8:	781b      	ldrb	r3, [r3, #0]
 800f5da:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800f5dc:	79bb      	ldrb	r3, [r7, #6]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	f000 8086 	beq.w	800f6f0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800f5e4:	79fa      	ldrb	r2, [r7, #7]
 800f5e6:	4948      	ldr	r1, [pc, #288]	; (800f708 <etharp_tmr+0x14c>)
 800f5e8:	4613      	mov	r3, r2
 800f5ea:	005b      	lsls	r3, r3, #1
 800f5ec:	4413      	add	r3, r2
 800f5ee:	00db      	lsls	r3, r3, #3
 800f5f0:	440b      	add	r3, r1
 800f5f2:	3312      	adds	r3, #18
 800f5f4:	881b      	ldrh	r3, [r3, #0]
 800f5f6:	3301      	adds	r3, #1
 800f5f8:	b298      	uxth	r0, r3
 800f5fa:	4943      	ldr	r1, [pc, #268]	; (800f708 <etharp_tmr+0x14c>)
 800f5fc:	4613      	mov	r3, r2
 800f5fe:	005b      	lsls	r3, r3, #1
 800f600:	4413      	add	r3, r2
 800f602:	00db      	lsls	r3, r3, #3
 800f604:	440b      	add	r3, r1
 800f606:	3312      	adds	r3, #18
 800f608:	4602      	mov	r2, r0
 800f60a:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f60c:	79fa      	ldrb	r2, [r7, #7]
 800f60e:	493e      	ldr	r1, [pc, #248]	; (800f708 <etharp_tmr+0x14c>)
 800f610:	4613      	mov	r3, r2
 800f612:	005b      	lsls	r3, r3, #1
 800f614:	4413      	add	r3, r2
 800f616:	00db      	lsls	r3, r3, #3
 800f618:	440b      	add	r3, r1
 800f61a:	3312      	adds	r3, #18
 800f61c:	881b      	ldrh	r3, [r3, #0]
 800f61e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f622:	d215      	bcs.n	800f650 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f624:	79fa      	ldrb	r2, [r7, #7]
 800f626:	4938      	ldr	r1, [pc, #224]	; (800f708 <etharp_tmr+0x14c>)
 800f628:	4613      	mov	r3, r2
 800f62a:	005b      	lsls	r3, r3, #1
 800f62c:	4413      	add	r3, r2
 800f62e:	00db      	lsls	r3, r3, #3
 800f630:	440b      	add	r3, r1
 800f632:	3314      	adds	r3, #20
 800f634:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f636:	2b01      	cmp	r3, #1
 800f638:	d10f      	bne.n	800f65a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800f63a:	79fa      	ldrb	r2, [r7, #7]
 800f63c:	4932      	ldr	r1, [pc, #200]	; (800f708 <etharp_tmr+0x14c>)
 800f63e:	4613      	mov	r3, r2
 800f640:	005b      	lsls	r3, r3, #1
 800f642:	4413      	add	r3, r2
 800f644:	00db      	lsls	r3, r3, #3
 800f646:	440b      	add	r3, r1
 800f648:	3312      	adds	r3, #18
 800f64a:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f64c:	2b04      	cmp	r3, #4
 800f64e:	d904      	bls.n	800f65a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800f650:	79fb      	ldrb	r3, [r7, #7]
 800f652:	4618      	mov	r0, r3
 800f654:	f7ff ff80 	bl	800f558 <etharp_free_entry>
 800f658:	e04a      	b.n	800f6f0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800f65a:	79fa      	ldrb	r2, [r7, #7]
 800f65c:	492a      	ldr	r1, [pc, #168]	; (800f708 <etharp_tmr+0x14c>)
 800f65e:	4613      	mov	r3, r2
 800f660:	005b      	lsls	r3, r3, #1
 800f662:	4413      	add	r3, r2
 800f664:	00db      	lsls	r3, r3, #3
 800f666:	440b      	add	r3, r1
 800f668:	3314      	adds	r3, #20
 800f66a:	781b      	ldrb	r3, [r3, #0]
 800f66c:	2b03      	cmp	r3, #3
 800f66e:	d10a      	bne.n	800f686 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800f670:	79fa      	ldrb	r2, [r7, #7]
 800f672:	4925      	ldr	r1, [pc, #148]	; (800f708 <etharp_tmr+0x14c>)
 800f674:	4613      	mov	r3, r2
 800f676:	005b      	lsls	r3, r3, #1
 800f678:	4413      	add	r3, r2
 800f67a:	00db      	lsls	r3, r3, #3
 800f67c:	440b      	add	r3, r1
 800f67e:	3314      	adds	r3, #20
 800f680:	2204      	movs	r2, #4
 800f682:	701a      	strb	r2, [r3, #0]
 800f684:	e034      	b.n	800f6f0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800f686:	79fa      	ldrb	r2, [r7, #7]
 800f688:	491f      	ldr	r1, [pc, #124]	; (800f708 <etharp_tmr+0x14c>)
 800f68a:	4613      	mov	r3, r2
 800f68c:	005b      	lsls	r3, r3, #1
 800f68e:	4413      	add	r3, r2
 800f690:	00db      	lsls	r3, r3, #3
 800f692:	440b      	add	r3, r1
 800f694:	3314      	adds	r3, #20
 800f696:	781b      	ldrb	r3, [r3, #0]
 800f698:	2b04      	cmp	r3, #4
 800f69a:	d10a      	bne.n	800f6b2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800f69c:	79fa      	ldrb	r2, [r7, #7]
 800f69e:	491a      	ldr	r1, [pc, #104]	; (800f708 <etharp_tmr+0x14c>)
 800f6a0:	4613      	mov	r3, r2
 800f6a2:	005b      	lsls	r3, r3, #1
 800f6a4:	4413      	add	r3, r2
 800f6a6:	00db      	lsls	r3, r3, #3
 800f6a8:	440b      	add	r3, r1
 800f6aa:	3314      	adds	r3, #20
 800f6ac:	2202      	movs	r2, #2
 800f6ae:	701a      	strb	r2, [r3, #0]
 800f6b0:	e01e      	b.n	800f6f0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f6b2:	79fa      	ldrb	r2, [r7, #7]
 800f6b4:	4914      	ldr	r1, [pc, #80]	; (800f708 <etharp_tmr+0x14c>)
 800f6b6:	4613      	mov	r3, r2
 800f6b8:	005b      	lsls	r3, r3, #1
 800f6ba:	4413      	add	r3, r2
 800f6bc:	00db      	lsls	r3, r3, #3
 800f6be:	440b      	add	r3, r1
 800f6c0:	3314      	adds	r3, #20
 800f6c2:	781b      	ldrb	r3, [r3, #0]
 800f6c4:	2b01      	cmp	r3, #1
 800f6c6:	d113      	bne.n	800f6f0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800f6c8:	79fa      	ldrb	r2, [r7, #7]
 800f6ca:	490f      	ldr	r1, [pc, #60]	; (800f708 <etharp_tmr+0x14c>)
 800f6cc:	4613      	mov	r3, r2
 800f6ce:	005b      	lsls	r3, r3, #1
 800f6d0:	4413      	add	r3, r2
 800f6d2:	00db      	lsls	r3, r3, #3
 800f6d4:	440b      	add	r3, r1
 800f6d6:	3308      	adds	r3, #8
 800f6d8:	6818      	ldr	r0, [r3, #0]
 800f6da:	79fa      	ldrb	r2, [r7, #7]
 800f6dc:	4613      	mov	r3, r2
 800f6de:	005b      	lsls	r3, r3, #1
 800f6e0:	4413      	add	r3, r2
 800f6e2:	00db      	lsls	r3, r3, #3
 800f6e4:	4a08      	ldr	r2, [pc, #32]	; (800f708 <etharp_tmr+0x14c>)
 800f6e6:	4413      	add	r3, r2
 800f6e8:	3304      	adds	r3, #4
 800f6ea:	4619      	mov	r1, r3
 800f6ec:	f000 fe38 	bl	8010360 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f6f0:	79fb      	ldrb	r3, [r7, #7]
 800f6f2:	3301      	adds	r3, #1
 800f6f4:	71fb      	strb	r3, [r7, #7]
 800f6f6:	79fb      	ldrb	r3, [r7, #7]
 800f6f8:	2b09      	cmp	r3, #9
 800f6fa:	f67f af65 	bls.w	800f5c8 <etharp_tmr+0xc>
      }
    }
  }
}
 800f6fe:	bf00      	nop
 800f700:	bf00      	nop
 800f702:	3708      	adds	r7, #8
 800f704:	46bd      	mov	sp, r7
 800f706:	bd80      	pop	{r7, pc}
 800f708:	20004340 	.word	0x20004340

0800f70c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b088      	sub	sp, #32
 800f710:	af00      	add	r7, sp, #0
 800f712:	60f8      	str	r0, [r7, #12]
 800f714:	460b      	mov	r3, r1
 800f716:	607a      	str	r2, [r7, #4]
 800f718:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f71a:	230a      	movs	r3, #10
 800f71c:	77fb      	strb	r3, [r7, #31]
 800f71e:	230a      	movs	r3, #10
 800f720:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800f722:	230a      	movs	r3, #10
 800f724:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800f726:	2300      	movs	r3, #0
 800f728:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800f72a:	230a      	movs	r3, #10
 800f72c:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800f72e:	2300      	movs	r3, #0
 800f730:	833b      	strh	r3, [r7, #24]
 800f732:	2300      	movs	r3, #0
 800f734:	82fb      	strh	r3, [r7, #22]
 800f736:	2300      	movs	r3, #0
 800f738:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f73a:	2300      	movs	r3, #0
 800f73c:	773b      	strb	r3, [r7, #28]
 800f73e:	e093      	b.n	800f868 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800f740:	7f3a      	ldrb	r2, [r7, #28]
 800f742:	4990      	ldr	r1, [pc, #576]	; (800f984 <etharp_find_entry+0x278>)
 800f744:	4613      	mov	r3, r2
 800f746:	005b      	lsls	r3, r3, #1
 800f748:	4413      	add	r3, r2
 800f74a:	00db      	lsls	r3, r3, #3
 800f74c:	440b      	add	r3, r1
 800f74e:	3314      	adds	r3, #20
 800f750:	781b      	ldrb	r3, [r3, #0]
 800f752:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f754:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800f758:	2b0a      	cmp	r3, #10
 800f75a:	d105      	bne.n	800f768 <etharp_find_entry+0x5c>
 800f75c:	7cfb      	ldrb	r3, [r7, #19]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d102      	bne.n	800f768 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800f762:	7f3b      	ldrb	r3, [r7, #28]
 800f764:	777b      	strb	r3, [r7, #29]
 800f766:	e07c      	b.n	800f862 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800f768:	7cfb      	ldrb	r3, [r7, #19]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d079      	beq.n	800f862 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800f76e:	7cfb      	ldrb	r3, [r7, #19]
 800f770:	2b01      	cmp	r3, #1
 800f772:	d009      	beq.n	800f788 <etharp_find_entry+0x7c>
 800f774:	7cfb      	ldrb	r3, [r7, #19]
 800f776:	2b01      	cmp	r3, #1
 800f778:	d806      	bhi.n	800f788 <etharp_find_entry+0x7c>
 800f77a:	4b83      	ldr	r3, [pc, #524]	; (800f988 <etharp_find_entry+0x27c>)
 800f77c:	f240 1225 	movw	r2, #293	; 0x125
 800f780:	4982      	ldr	r1, [pc, #520]	; (800f98c <etharp_find_entry+0x280>)
 800f782:	4883      	ldr	r0, [pc, #524]	; (800f990 <etharp_find_entry+0x284>)
 800f784:	f002 fbbe 	bl	8011f04 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d00f      	beq.n	800f7ae <etharp_find_entry+0xa2>
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	6819      	ldr	r1, [r3, #0]
 800f792:	7f3a      	ldrb	r2, [r7, #28]
 800f794:	487b      	ldr	r0, [pc, #492]	; (800f984 <etharp_find_entry+0x278>)
 800f796:	4613      	mov	r3, r2
 800f798:	005b      	lsls	r3, r3, #1
 800f79a:	4413      	add	r3, r2
 800f79c:	00db      	lsls	r3, r3, #3
 800f79e:	4403      	add	r3, r0
 800f7a0:	3304      	adds	r3, #4
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	4299      	cmp	r1, r3
 800f7a6:	d102      	bne.n	800f7ae <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800f7a8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800f7ac:	e0e5      	b.n	800f97a <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800f7ae:	7cfb      	ldrb	r3, [r7, #19]
 800f7b0:	2b01      	cmp	r3, #1
 800f7b2:	d13b      	bne.n	800f82c <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800f7b4:	7f3a      	ldrb	r2, [r7, #28]
 800f7b6:	4973      	ldr	r1, [pc, #460]	; (800f984 <etharp_find_entry+0x278>)
 800f7b8:	4613      	mov	r3, r2
 800f7ba:	005b      	lsls	r3, r3, #1
 800f7bc:	4413      	add	r3, r2
 800f7be:	00db      	lsls	r3, r3, #3
 800f7c0:	440b      	add	r3, r1
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d018      	beq.n	800f7fa <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800f7c8:	7f3a      	ldrb	r2, [r7, #28]
 800f7ca:	496e      	ldr	r1, [pc, #440]	; (800f984 <etharp_find_entry+0x278>)
 800f7cc:	4613      	mov	r3, r2
 800f7ce:	005b      	lsls	r3, r3, #1
 800f7d0:	4413      	add	r3, r2
 800f7d2:	00db      	lsls	r3, r3, #3
 800f7d4:	440b      	add	r3, r1
 800f7d6:	3312      	adds	r3, #18
 800f7d8:	881b      	ldrh	r3, [r3, #0]
 800f7da:	8b3a      	ldrh	r2, [r7, #24]
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	d840      	bhi.n	800f862 <etharp_find_entry+0x156>
            old_queue = i;
 800f7e0:	7f3b      	ldrb	r3, [r7, #28]
 800f7e2:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800f7e4:	7f3a      	ldrb	r2, [r7, #28]
 800f7e6:	4967      	ldr	r1, [pc, #412]	; (800f984 <etharp_find_entry+0x278>)
 800f7e8:	4613      	mov	r3, r2
 800f7ea:	005b      	lsls	r3, r3, #1
 800f7ec:	4413      	add	r3, r2
 800f7ee:	00db      	lsls	r3, r3, #3
 800f7f0:	440b      	add	r3, r1
 800f7f2:	3312      	adds	r3, #18
 800f7f4:	881b      	ldrh	r3, [r3, #0]
 800f7f6:	833b      	strh	r3, [r7, #24]
 800f7f8:	e033      	b.n	800f862 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800f7fa:	7f3a      	ldrb	r2, [r7, #28]
 800f7fc:	4961      	ldr	r1, [pc, #388]	; (800f984 <etharp_find_entry+0x278>)
 800f7fe:	4613      	mov	r3, r2
 800f800:	005b      	lsls	r3, r3, #1
 800f802:	4413      	add	r3, r2
 800f804:	00db      	lsls	r3, r3, #3
 800f806:	440b      	add	r3, r1
 800f808:	3312      	adds	r3, #18
 800f80a:	881b      	ldrh	r3, [r3, #0]
 800f80c:	8afa      	ldrh	r2, [r7, #22]
 800f80e:	429a      	cmp	r2, r3
 800f810:	d827      	bhi.n	800f862 <etharp_find_entry+0x156>
            old_pending = i;
 800f812:	7f3b      	ldrb	r3, [r7, #28]
 800f814:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800f816:	7f3a      	ldrb	r2, [r7, #28]
 800f818:	495a      	ldr	r1, [pc, #360]	; (800f984 <etharp_find_entry+0x278>)
 800f81a:	4613      	mov	r3, r2
 800f81c:	005b      	lsls	r3, r3, #1
 800f81e:	4413      	add	r3, r2
 800f820:	00db      	lsls	r3, r3, #3
 800f822:	440b      	add	r3, r1
 800f824:	3312      	adds	r3, #18
 800f826:	881b      	ldrh	r3, [r3, #0]
 800f828:	82fb      	strh	r3, [r7, #22]
 800f82a:	e01a      	b.n	800f862 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800f82c:	7cfb      	ldrb	r3, [r7, #19]
 800f82e:	2b01      	cmp	r3, #1
 800f830:	d917      	bls.n	800f862 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f832:	7f3a      	ldrb	r2, [r7, #28]
 800f834:	4953      	ldr	r1, [pc, #332]	; (800f984 <etharp_find_entry+0x278>)
 800f836:	4613      	mov	r3, r2
 800f838:	005b      	lsls	r3, r3, #1
 800f83a:	4413      	add	r3, r2
 800f83c:	00db      	lsls	r3, r3, #3
 800f83e:	440b      	add	r3, r1
 800f840:	3312      	adds	r3, #18
 800f842:	881b      	ldrh	r3, [r3, #0]
 800f844:	8aba      	ldrh	r2, [r7, #20]
 800f846:	429a      	cmp	r2, r3
 800f848:	d80b      	bhi.n	800f862 <etharp_find_entry+0x156>
            old_stable = i;
 800f84a:	7f3b      	ldrb	r3, [r7, #28]
 800f84c:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800f84e:	7f3a      	ldrb	r2, [r7, #28]
 800f850:	494c      	ldr	r1, [pc, #304]	; (800f984 <etharp_find_entry+0x278>)
 800f852:	4613      	mov	r3, r2
 800f854:	005b      	lsls	r3, r3, #1
 800f856:	4413      	add	r3, r2
 800f858:	00db      	lsls	r3, r3, #3
 800f85a:	440b      	add	r3, r1
 800f85c:	3312      	adds	r3, #18
 800f85e:	881b      	ldrh	r3, [r3, #0]
 800f860:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f862:	7f3b      	ldrb	r3, [r7, #28]
 800f864:	3301      	adds	r3, #1
 800f866:	773b      	strb	r3, [r7, #28]
 800f868:	7f3b      	ldrb	r3, [r7, #28]
 800f86a:	2b09      	cmp	r3, #9
 800f86c:	f67f af68 	bls.w	800f740 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800f870:	7afb      	ldrb	r3, [r7, #11]
 800f872:	f003 0302 	and.w	r3, r3, #2
 800f876:	2b00      	cmp	r3, #0
 800f878:	d108      	bne.n	800f88c <etharp_find_entry+0x180>
 800f87a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800f87e:	2b0a      	cmp	r3, #10
 800f880:	d107      	bne.n	800f892 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800f882:	7afb      	ldrb	r3, [r7, #11]
 800f884:	f003 0301 	and.w	r3, r3, #1
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d102      	bne.n	800f892 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800f88c:	f04f 33ff 	mov.w	r3, #4294967295
 800f890:	e073      	b.n	800f97a <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800f892:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800f896:	2b09      	cmp	r3, #9
 800f898:	dc02      	bgt.n	800f8a0 <etharp_find_entry+0x194>
    i = empty;
 800f89a:	7f7b      	ldrb	r3, [r7, #29]
 800f89c:	773b      	strb	r3, [r7, #28]
 800f89e:	e036      	b.n	800f90e <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800f8a0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800f8a4:	2b09      	cmp	r3, #9
 800f8a6:	dc13      	bgt.n	800f8d0 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800f8a8:	7fbb      	ldrb	r3, [r7, #30]
 800f8aa:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f8ac:	7f3a      	ldrb	r2, [r7, #28]
 800f8ae:	4935      	ldr	r1, [pc, #212]	; (800f984 <etharp_find_entry+0x278>)
 800f8b0:	4613      	mov	r3, r2
 800f8b2:	005b      	lsls	r3, r3, #1
 800f8b4:	4413      	add	r3, r2
 800f8b6:	00db      	lsls	r3, r3, #3
 800f8b8:	440b      	add	r3, r1
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d018      	beq.n	800f8f2 <etharp_find_entry+0x1e6>
 800f8c0:	4b31      	ldr	r3, [pc, #196]	; (800f988 <etharp_find_entry+0x27c>)
 800f8c2:	f240 126f 	movw	r2, #367	; 0x16f
 800f8c6:	4933      	ldr	r1, [pc, #204]	; (800f994 <etharp_find_entry+0x288>)
 800f8c8:	4831      	ldr	r0, [pc, #196]	; (800f990 <etharp_find_entry+0x284>)
 800f8ca:	f002 fb1b 	bl	8011f04 <iprintf>
 800f8ce:	e010      	b.n	800f8f2 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f8d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f8d4:	2b09      	cmp	r3, #9
 800f8d6:	dc02      	bgt.n	800f8de <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800f8d8:	7ffb      	ldrb	r3, [r7, #31]
 800f8da:	773b      	strb	r3, [r7, #28]
 800f8dc:	e009      	b.n	800f8f2 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f8de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f8e2:	2b09      	cmp	r3, #9
 800f8e4:	dc02      	bgt.n	800f8ec <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800f8e6:	7efb      	ldrb	r3, [r7, #27]
 800f8e8:	773b      	strb	r3, [r7, #28]
 800f8ea:	e002      	b.n	800f8f2 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800f8ec:	f04f 33ff 	mov.w	r3, #4294967295
 800f8f0:	e043      	b.n	800f97a <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f8f2:	7f3b      	ldrb	r3, [r7, #28]
 800f8f4:	2b09      	cmp	r3, #9
 800f8f6:	d906      	bls.n	800f906 <etharp_find_entry+0x1fa>
 800f8f8:	4b23      	ldr	r3, [pc, #140]	; (800f988 <etharp_find_entry+0x27c>)
 800f8fa:	f240 1281 	movw	r2, #385	; 0x181
 800f8fe:	4926      	ldr	r1, [pc, #152]	; (800f998 <etharp_find_entry+0x28c>)
 800f900:	4823      	ldr	r0, [pc, #140]	; (800f990 <etharp_find_entry+0x284>)
 800f902:	f002 faff 	bl	8011f04 <iprintf>
    etharp_free_entry(i);
 800f906:	7f3b      	ldrb	r3, [r7, #28]
 800f908:	4618      	mov	r0, r3
 800f90a:	f7ff fe25 	bl	800f558 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f90e:	7f3b      	ldrb	r3, [r7, #28]
 800f910:	2b09      	cmp	r3, #9
 800f912:	d906      	bls.n	800f922 <etharp_find_entry+0x216>
 800f914:	4b1c      	ldr	r3, [pc, #112]	; (800f988 <etharp_find_entry+0x27c>)
 800f916:	f240 1285 	movw	r2, #389	; 0x185
 800f91a:	491f      	ldr	r1, [pc, #124]	; (800f998 <etharp_find_entry+0x28c>)
 800f91c:	481c      	ldr	r0, [pc, #112]	; (800f990 <etharp_find_entry+0x284>)
 800f91e:	f002 faf1 	bl	8011f04 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f922:	7f3a      	ldrb	r2, [r7, #28]
 800f924:	4917      	ldr	r1, [pc, #92]	; (800f984 <etharp_find_entry+0x278>)
 800f926:	4613      	mov	r3, r2
 800f928:	005b      	lsls	r3, r3, #1
 800f92a:	4413      	add	r3, r2
 800f92c:	00db      	lsls	r3, r3, #3
 800f92e:	440b      	add	r3, r1
 800f930:	3314      	adds	r3, #20
 800f932:	781b      	ldrb	r3, [r3, #0]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d006      	beq.n	800f946 <etharp_find_entry+0x23a>
 800f938:	4b13      	ldr	r3, [pc, #76]	; (800f988 <etharp_find_entry+0x27c>)
 800f93a:	f44f 72c3 	mov.w	r2, #390	; 0x186
 800f93e:	4917      	ldr	r1, [pc, #92]	; (800f99c <etharp_find_entry+0x290>)
 800f940:	4813      	ldr	r0, [pc, #76]	; (800f990 <etharp_find_entry+0x284>)
 800f942:	f002 fadf 	bl	8011f04 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d00a      	beq.n	800f962 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f94c:	7f3a      	ldrb	r2, [r7, #28]
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	6819      	ldr	r1, [r3, #0]
 800f952:	480c      	ldr	r0, [pc, #48]	; (800f984 <etharp_find_entry+0x278>)
 800f954:	4613      	mov	r3, r2
 800f956:	005b      	lsls	r3, r3, #1
 800f958:	4413      	add	r3, r2
 800f95a:	00db      	lsls	r3, r3, #3
 800f95c:	4403      	add	r3, r0
 800f95e:	3304      	adds	r3, #4
 800f960:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800f962:	7f3a      	ldrb	r2, [r7, #28]
 800f964:	4907      	ldr	r1, [pc, #28]	; (800f984 <etharp_find_entry+0x278>)
 800f966:	4613      	mov	r3, r2
 800f968:	005b      	lsls	r3, r3, #1
 800f96a:	4413      	add	r3, r2
 800f96c:	00db      	lsls	r3, r3, #3
 800f96e:	440b      	add	r3, r1
 800f970:	3312      	adds	r3, #18
 800f972:	2200      	movs	r2, #0
 800f974:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800f976:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800f97a:	4618      	mov	r0, r3
 800f97c:	3720      	adds	r7, #32
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}
 800f982:	bf00      	nop
 800f984:	20004340 	.word	0x20004340
 800f988:	08014408 	.word	0x08014408
 800f98c:	08014440 	.word	0x08014440
 800f990:	08014480 	.word	0x08014480
 800f994:	080144a8 	.word	0x080144a8
 800f998:	080144c0 	.word	0x080144c0
 800f99c:	080144d4 	.word	0x080144d4

0800f9a0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b088      	sub	sp, #32
 800f9a4:	af02      	add	r7, sp, #8
 800f9a6:	60f8      	str	r0, [r7, #12]
 800f9a8:	60b9      	str	r1, [r7, #8]
 800f9aa:	607a      	str	r2, [r7, #4]
 800f9ac:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f9b4:	2b06      	cmp	r3, #6
 800f9b6:	d006      	beq.n	800f9c6 <etharp_update_arp_entry+0x26>
 800f9b8:	4b48      	ldr	r3, [pc, #288]	; (800fadc <etharp_update_arp_entry+0x13c>)
 800f9ba:	f240 12ab 	movw	r2, #427	; 0x1ab
 800f9be:	4948      	ldr	r1, [pc, #288]	; (800fae0 <etharp_update_arp_entry+0x140>)
 800f9c0:	4848      	ldr	r0, [pc, #288]	; (800fae4 <etharp_update_arp_entry+0x144>)
 800f9c2:	f002 fa9f 	bl	8011f04 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800f9c6:	68bb      	ldr	r3, [r7, #8]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d012      	beq.n	800f9f2 <etharp_update_arp_entry+0x52>
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d00e      	beq.n	800f9f2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	68f9      	ldr	r1, [r7, #12]
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f001 f8dc 	bl	8010b98 <ip4_addr_isbroadcast_u32>
 800f9e0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d105      	bne.n	800f9f2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800f9e6:	68bb      	ldr	r3, [r7, #8]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f9ee:	2be0      	cmp	r3, #224	; 0xe0
 800f9f0:	d102      	bne.n	800f9f8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f9f2:	f06f 030f 	mvn.w	r3, #15
 800f9f6:	e06c      	b.n	800fad2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800f9f8:	78fb      	ldrb	r3, [r7, #3]
 800f9fa:	68fa      	ldr	r2, [r7, #12]
 800f9fc:	4619      	mov	r1, r3
 800f9fe:	68b8      	ldr	r0, [r7, #8]
 800fa00:	f7ff fe84 	bl	800f70c <etharp_find_entry>
 800fa04:	4603      	mov	r3, r0
 800fa06:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800fa08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	da02      	bge.n	800fa16 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800fa10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fa14:	e05d      	b.n	800fad2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800fa16:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800fa1a:	4933      	ldr	r1, [pc, #204]	; (800fae8 <etharp_update_arp_entry+0x148>)
 800fa1c:	4613      	mov	r3, r2
 800fa1e:	005b      	lsls	r3, r3, #1
 800fa20:	4413      	add	r3, r2
 800fa22:	00db      	lsls	r3, r3, #3
 800fa24:	440b      	add	r3, r1
 800fa26:	3314      	adds	r3, #20
 800fa28:	2202      	movs	r2, #2
 800fa2a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800fa2c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800fa30:	492d      	ldr	r1, [pc, #180]	; (800fae8 <etharp_update_arp_entry+0x148>)
 800fa32:	4613      	mov	r3, r2
 800fa34:	005b      	lsls	r3, r3, #1
 800fa36:	4413      	add	r3, r2
 800fa38:	00db      	lsls	r3, r3, #3
 800fa3a:	440b      	add	r3, r1
 800fa3c:	3308      	adds	r3, #8
 800fa3e:	68fa      	ldr	r2, [r7, #12]
 800fa40:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800fa42:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800fa46:	4613      	mov	r3, r2
 800fa48:	005b      	lsls	r3, r3, #1
 800fa4a:	4413      	add	r3, r2
 800fa4c:	00db      	lsls	r3, r3, #3
 800fa4e:	3308      	adds	r3, #8
 800fa50:	4a25      	ldr	r2, [pc, #148]	; (800fae8 <etharp_update_arp_entry+0x148>)
 800fa52:	4413      	add	r3, r2
 800fa54:	3304      	adds	r3, #4
 800fa56:	2206      	movs	r2, #6
 800fa58:	6879      	ldr	r1, [r7, #4]
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f002 f9e1 	bl	8011e22 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800fa60:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800fa64:	4920      	ldr	r1, [pc, #128]	; (800fae8 <etharp_update_arp_entry+0x148>)
 800fa66:	4613      	mov	r3, r2
 800fa68:	005b      	lsls	r3, r3, #1
 800fa6a:	4413      	add	r3, r2
 800fa6c:	00db      	lsls	r3, r3, #3
 800fa6e:	440b      	add	r3, r1
 800fa70:	3312      	adds	r3, #18
 800fa72:	2200      	movs	r2, #0
 800fa74:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800fa76:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800fa7a:	491b      	ldr	r1, [pc, #108]	; (800fae8 <etharp_update_arp_entry+0x148>)
 800fa7c:	4613      	mov	r3, r2
 800fa7e:	005b      	lsls	r3, r3, #1
 800fa80:	4413      	add	r3, r2
 800fa82:	00db      	lsls	r3, r3, #3
 800fa84:	440b      	add	r3, r1
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d021      	beq.n	800fad0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800fa8c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800fa90:	4915      	ldr	r1, [pc, #84]	; (800fae8 <etharp_update_arp_entry+0x148>)
 800fa92:	4613      	mov	r3, r2
 800fa94:	005b      	lsls	r3, r3, #1
 800fa96:	4413      	add	r3, r2
 800fa98:	00db      	lsls	r3, r3, #3
 800fa9a:	440b      	add	r3, r1
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800faa0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800faa4:	4910      	ldr	r1, [pc, #64]	; (800fae8 <etharp_update_arp_entry+0x148>)
 800faa6:	4613      	mov	r3, r2
 800faa8:	005b      	lsls	r3, r3, #1
 800faaa:	4413      	add	r3, r2
 800faac:	00db      	lsls	r3, r3, #3
 800faae:	440b      	add	r3, r1
 800fab0:	2200      	movs	r2, #0
 800fab2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800faba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fabe:	9300      	str	r3, [sp, #0]
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	6939      	ldr	r1, [r7, #16]
 800fac4:	68f8      	ldr	r0, [r7, #12]
 800fac6:	f001 ff0d 	bl	80118e4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800faca:	6938      	ldr	r0, [r7, #16]
 800facc:	f7f9 fdf4 	bl	80096b8 <pbuf_free>
  }
  return ERR_OK;
 800fad0:	2300      	movs	r3, #0
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	3718      	adds	r7, #24
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}
 800fada:	bf00      	nop
 800fadc:	08014408 	.word	0x08014408
 800fae0:	08014500 	.word	0x08014500
 800fae4:	08014480 	.word	0x08014480
 800fae8:	20004340 	.word	0x20004340

0800faec <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b084      	sub	sp, #16
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800faf4:	2300      	movs	r3, #0
 800faf6:	73fb      	strb	r3, [r7, #15]
 800faf8:	e01f      	b.n	800fb3a <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800fafa:	7bfa      	ldrb	r2, [r7, #15]
 800fafc:	4913      	ldr	r1, [pc, #76]	; (800fb4c <etharp_cleanup_netif+0x60>)
 800fafe:	4613      	mov	r3, r2
 800fb00:	005b      	lsls	r3, r3, #1
 800fb02:	4413      	add	r3, r2
 800fb04:	00db      	lsls	r3, r3, #3
 800fb06:	440b      	add	r3, r1
 800fb08:	3314      	adds	r3, #20
 800fb0a:	781b      	ldrb	r3, [r3, #0]
 800fb0c:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800fb0e:	7bbb      	ldrb	r3, [r7, #14]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d00f      	beq.n	800fb34 <etharp_cleanup_netif+0x48>
 800fb14:	7bfa      	ldrb	r2, [r7, #15]
 800fb16:	490d      	ldr	r1, [pc, #52]	; (800fb4c <etharp_cleanup_netif+0x60>)
 800fb18:	4613      	mov	r3, r2
 800fb1a:	005b      	lsls	r3, r3, #1
 800fb1c:	4413      	add	r3, r2
 800fb1e:	00db      	lsls	r3, r3, #3
 800fb20:	440b      	add	r3, r1
 800fb22:	3308      	adds	r3, #8
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	687a      	ldr	r2, [r7, #4]
 800fb28:	429a      	cmp	r2, r3
 800fb2a:	d103      	bne.n	800fb34 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800fb2c:	7bfb      	ldrb	r3, [r7, #15]
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f7ff fd12 	bl	800f558 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fb34:	7bfb      	ldrb	r3, [r7, #15]
 800fb36:	3301      	adds	r3, #1
 800fb38:	73fb      	strb	r3, [r7, #15]
 800fb3a:	7bfb      	ldrb	r3, [r7, #15]
 800fb3c:	2b09      	cmp	r3, #9
 800fb3e:	d9dc      	bls.n	800fafa <etharp_cleanup_netif+0xe>
    }
  }
}
 800fb40:	bf00      	nop
 800fb42:	bf00      	nop
 800fb44:	3710      	adds	r7, #16
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}
 800fb4a:	bf00      	nop
 800fb4c:	20004340 	.word	0x20004340

0800fb50 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800fb50:	b5b0      	push	{r4, r5, r7, lr}
 800fb52:	b08a      	sub	sp, #40	; 0x28
 800fb54:	af04      	add	r7, sp, #16
 800fb56:	6078      	str	r0, [r7, #4]
 800fb58:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800fb5a:	683b      	ldr	r3, [r7, #0]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d107      	bne.n	800fb70 <etharp_input+0x20>
 800fb60:	4b3d      	ldr	r3, [pc, #244]	; (800fc58 <etharp_input+0x108>)
 800fb62:	f44f 7222 	mov.w	r2, #648	; 0x288
 800fb66:	493d      	ldr	r1, [pc, #244]	; (800fc5c <etharp_input+0x10c>)
 800fb68:	483d      	ldr	r0, [pc, #244]	; (800fc60 <etharp_input+0x110>)
 800fb6a:	f002 f9cb 	bl	8011f04 <iprintf>
 800fb6e:	e06f      	b.n	800fc50 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	685b      	ldr	r3, [r3, #4]
 800fb74:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800fb76:	693b      	ldr	r3, [r7, #16]
 800fb78:	881b      	ldrh	r3, [r3, #0]
 800fb7a:	b29b      	uxth	r3, r3
 800fb7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fb80:	d10c      	bne.n	800fb9c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800fb82:	693b      	ldr	r3, [r7, #16]
 800fb84:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800fb86:	2b06      	cmp	r3, #6
 800fb88:	d108      	bne.n	800fb9c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800fb8a:	693b      	ldr	r3, [r7, #16]
 800fb8c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800fb8e:	2b04      	cmp	r3, #4
 800fb90:	d104      	bne.n	800fb9c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800fb92:	693b      	ldr	r3, [r7, #16]
 800fb94:	885b      	ldrh	r3, [r3, #2]
 800fb96:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800fb98:	2b08      	cmp	r3, #8
 800fb9a:	d003      	beq.n	800fba4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	f7f9 fd8b 	bl	80096b8 <pbuf_free>
    return;
 800fba2:	e055      	b.n	800fc50 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800fba4:	693b      	ldr	r3, [r7, #16]
 800fba6:	330e      	adds	r3, #14
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800fbac:	693b      	ldr	r3, [r7, #16]
 800fbae:	3318      	adds	r3, #24
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	3304      	adds	r3, #4
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d102      	bne.n	800fbc4 <etharp_input+0x74>
    for_us = 0;
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	75fb      	strb	r3, [r7, #23]
 800fbc2:	e009      	b.n	800fbd8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800fbc4:	68ba      	ldr	r2, [r7, #8]
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	3304      	adds	r3, #4
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	429a      	cmp	r2, r3
 800fbce:	bf0c      	ite	eq
 800fbd0:	2301      	moveq	r3, #1
 800fbd2:	2300      	movne	r3, #0
 800fbd4:	b2db      	uxtb	r3, r3
 800fbd6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800fbd8:	693b      	ldr	r3, [r7, #16]
 800fbda:	f103 0208 	add.w	r2, r3, #8
 800fbde:	7dfb      	ldrb	r3, [r7, #23]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d001      	beq.n	800fbe8 <etharp_input+0x98>
 800fbe4:	2301      	movs	r3, #1
 800fbe6:	e000      	b.n	800fbea <etharp_input+0x9a>
 800fbe8:	2302      	movs	r3, #2
 800fbea:	f107 010c 	add.w	r1, r7, #12
 800fbee:	6838      	ldr	r0, [r7, #0]
 800fbf0:	f7ff fed6 	bl	800f9a0 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800fbf4:	693b      	ldr	r3, [r7, #16]
 800fbf6:	88db      	ldrh	r3, [r3, #6]
 800fbf8:	b29b      	uxth	r3, r3
 800fbfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fbfe:	d003      	beq.n	800fc08 <etharp_input+0xb8>
 800fc00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fc04:	d01e      	beq.n	800fc44 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800fc06:	e020      	b.n	800fc4a <etharp_input+0xfa>
    if (for_us) {
 800fc08:	7dfb      	ldrb	r3, [r7, #23]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d01c      	beq.n	800fc48 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800fc0e:	683b      	ldr	r3, [r7, #0]
 800fc10:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800fc14:	693b      	ldr	r3, [r7, #16]
 800fc16:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800fc1a:	683b      	ldr	r3, [r7, #0]
 800fc1c:	f103 0529 	add.w	r5, r3, #41	; 0x29
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800fc24:	693a      	ldr	r2, [r7, #16]
 800fc26:	3208      	adds	r2, #8
      etharp_raw(netif,
 800fc28:	2102      	movs	r1, #2
 800fc2a:	9103      	str	r1, [sp, #12]
 800fc2c:	f107 010c 	add.w	r1, r7, #12
 800fc30:	9102      	str	r1, [sp, #8]
 800fc32:	9201      	str	r2, [sp, #4]
 800fc34:	9300      	str	r3, [sp, #0]
 800fc36:	462b      	mov	r3, r5
 800fc38:	4622      	mov	r2, r4
 800fc3a:	4601      	mov	r1, r0
 800fc3c:	6838      	ldr	r0, [r7, #0]
 800fc3e:	f000 fae1 	bl	8010204 <etharp_raw>
    break;
 800fc42:	e001      	b.n	800fc48 <etharp_input+0xf8>
    break;
 800fc44:	bf00      	nop
 800fc46:	e000      	b.n	800fc4a <etharp_input+0xfa>
    break;
 800fc48:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f7f9 fd34 	bl	80096b8 <pbuf_free>
}
 800fc50:	3718      	adds	r7, #24
 800fc52:	46bd      	mov	sp, r7
 800fc54:	bdb0      	pop	{r4, r5, r7, pc}
 800fc56:	bf00      	nop
 800fc58:	08014408 	.word	0x08014408
 800fc5c:	08014558 	.word	0x08014558
 800fc60:	08014480 	.word	0x08014480

0800fc64 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b086      	sub	sp, #24
 800fc68:	af02      	add	r7, sp, #8
 800fc6a:	60f8      	str	r0, [r7, #12]
 800fc6c:	60b9      	str	r1, [r7, #8]
 800fc6e:	4613      	mov	r3, r2
 800fc70:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800fc72:	79fa      	ldrb	r2, [r7, #7]
 800fc74:	4944      	ldr	r1, [pc, #272]	; (800fd88 <etharp_output_to_arp_index+0x124>)
 800fc76:	4613      	mov	r3, r2
 800fc78:	005b      	lsls	r3, r3, #1
 800fc7a:	4413      	add	r3, r2
 800fc7c:	00db      	lsls	r3, r3, #3
 800fc7e:	440b      	add	r3, r1
 800fc80:	3314      	adds	r3, #20
 800fc82:	781b      	ldrb	r3, [r3, #0]
 800fc84:	2b01      	cmp	r3, #1
 800fc86:	d806      	bhi.n	800fc96 <etharp_output_to_arp_index+0x32>
 800fc88:	4b40      	ldr	r3, [pc, #256]	; (800fd8c <etharp_output_to_arp_index+0x128>)
 800fc8a:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800fc8e:	4940      	ldr	r1, [pc, #256]	; (800fd90 <etharp_output_to_arp_index+0x12c>)
 800fc90:	4840      	ldr	r0, [pc, #256]	; (800fd94 <etharp_output_to_arp_index+0x130>)
 800fc92:	f002 f937 	bl	8011f04 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800fc96:	79fa      	ldrb	r2, [r7, #7]
 800fc98:	493b      	ldr	r1, [pc, #236]	; (800fd88 <etharp_output_to_arp_index+0x124>)
 800fc9a:	4613      	mov	r3, r2
 800fc9c:	005b      	lsls	r3, r3, #1
 800fc9e:	4413      	add	r3, r2
 800fca0:	00db      	lsls	r3, r3, #3
 800fca2:	440b      	add	r3, r1
 800fca4:	3314      	adds	r3, #20
 800fca6:	781b      	ldrb	r3, [r3, #0]
 800fca8:	2b02      	cmp	r3, #2
 800fcaa:	d153      	bne.n	800fd54 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800fcac:	79fa      	ldrb	r2, [r7, #7]
 800fcae:	4936      	ldr	r1, [pc, #216]	; (800fd88 <etharp_output_to_arp_index+0x124>)
 800fcb0:	4613      	mov	r3, r2
 800fcb2:	005b      	lsls	r3, r3, #1
 800fcb4:	4413      	add	r3, r2
 800fcb6:	00db      	lsls	r3, r3, #3
 800fcb8:	440b      	add	r3, r1
 800fcba:	3312      	adds	r3, #18
 800fcbc:	881b      	ldrh	r3, [r3, #0]
 800fcbe:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800fcc2:	d919      	bls.n	800fcf8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800fcc4:	79fa      	ldrb	r2, [r7, #7]
 800fcc6:	4613      	mov	r3, r2
 800fcc8:	005b      	lsls	r3, r3, #1
 800fcca:	4413      	add	r3, r2
 800fccc:	00db      	lsls	r3, r3, #3
 800fcce:	4a2e      	ldr	r2, [pc, #184]	; (800fd88 <etharp_output_to_arp_index+0x124>)
 800fcd0:	4413      	add	r3, r2
 800fcd2:	3304      	adds	r3, #4
 800fcd4:	4619      	mov	r1, r3
 800fcd6:	68f8      	ldr	r0, [r7, #12]
 800fcd8:	f000 fb42 	bl	8010360 <etharp_request>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d138      	bne.n	800fd54 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800fce2:	79fa      	ldrb	r2, [r7, #7]
 800fce4:	4928      	ldr	r1, [pc, #160]	; (800fd88 <etharp_output_to_arp_index+0x124>)
 800fce6:	4613      	mov	r3, r2
 800fce8:	005b      	lsls	r3, r3, #1
 800fcea:	4413      	add	r3, r2
 800fcec:	00db      	lsls	r3, r3, #3
 800fcee:	440b      	add	r3, r1
 800fcf0:	3314      	adds	r3, #20
 800fcf2:	2203      	movs	r2, #3
 800fcf4:	701a      	strb	r2, [r3, #0]
 800fcf6:	e02d      	b.n	800fd54 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800fcf8:	79fa      	ldrb	r2, [r7, #7]
 800fcfa:	4923      	ldr	r1, [pc, #140]	; (800fd88 <etharp_output_to_arp_index+0x124>)
 800fcfc:	4613      	mov	r3, r2
 800fcfe:	005b      	lsls	r3, r3, #1
 800fd00:	4413      	add	r3, r2
 800fd02:	00db      	lsls	r3, r3, #3
 800fd04:	440b      	add	r3, r1
 800fd06:	3312      	adds	r3, #18
 800fd08:	881b      	ldrh	r3, [r3, #0]
 800fd0a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800fd0e:	d321      	bcc.n	800fd54 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800fd10:	79fa      	ldrb	r2, [r7, #7]
 800fd12:	4613      	mov	r3, r2
 800fd14:	005b      	lsls	r3, r3, #1
 800fd16:	4413      	add	r3, r2
 800fd18:	00db      	lsls	r3, r3, #3
 800fd1a:	4a1b      	ldr	r2, [pc, #108]	; (800fd88 <etharp_output_to_arp_index+0x124>)
 800fd1c:	4413      	add	r3, r2
 800fd1e:	1d19      	adds	r1, r3, #4
 800fd20:	79fa      	ldrb	r2, [r7, #7]
 800fd22:	4613      	mov	r3, r2
 800fd24:	005b      	lsls	r3, r3, #1
 800fd26:	4413      	add	r3, r2
 800fd28:	00db      	lsls	r3, r3, #3
 800fd2a:	3308      	adds	r3, #8
 800fd2c:	4a16      	ldr	r2, [pc, #88]	; (800fd88 <etharp_output_to_arp_index+0x124>)
 800fd2e:	4413      	add	r3, r2
 800fd30:	3304      	adds	r3, #4
 800fd32:	461a      	mov	r2, r3
 800fd34:	68f8      	ldr	r0, [r7, #12]
 800fd36:	f000 faf1 	bl	801031c <etharp_request_dst>
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d109      	bne.n	800fd54 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800fd40:	79fa      	ldrb	r2, [r7, #7]
 800fd42:	4911      	ldr	r1, [pc, #68]	; (800fd88 <etharp_output_to_arp_index+0x124>)
 800fd44:	4613      	mov	r3, r2
 800fd46:	005b      	lsls	r3, r3, #1
 800fd48:	4413      	add	r3, r2
 800fd4a:	00db      	lsls	r3, r3, #3
 800fd4c:	440b      	add	r3, r1
 800fd4e:	3314      	adds	r3, #20
 800fd50:	2203      	movs	r2, #3
 800fd52:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	f103 0129 	add.w	r1, r3, #41	; 0x29
 800fd5a:	79fa      	ldrb	r2, [r7, #7]
 800fd5c:	4613      	mov	r3, r2
 800fd5e:	005b      	lsls	r3, r3, #1
 800fd60:	4413      	add	r3, r2
 800fd62:	00db      	lsls	r3, r3, #3
 800fd64:	3308      	adds	r3, #8
 800fd66:	4a08      	ldr	r2, [pc, #32]	; (800fd88 <etharp_output_to_arp_index+0x124>)
 800fd68:	4413      	add	r3, r2
 800fd6a:	3304      	adds	r3, #4
 800fd6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fd70:	9200      	str	r2, [sp, #0]
 800fd72:	460a      	mov	r2, r1
 800fd74:	68b9      	ldr	r1, [r7, #8]
 800fd76:	68f8      	ldr	r0, [r7, #12]
 800fd78:	f001 fdb4 	bl	80118e4 <ethernet_output>
 800fd7c:	4603      	mov	r3, r0
}
 800fd7e:	4618      	mov	r0, r3
 800fd80:	3710      	adds	r7, #16
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bd80      	pop	{r7, pc}
 800fd86:	bf00      	nop
 800fd88:	20004340 	.word	0x20004340
 800fd8c:	08014408 	.word	0x08014408
 800fd90:	08014578 	.word	0x08014578
 800fd94:	08014480 	.word	0x08014480

0800fd98 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b08a      	sub	sp, #40	; 0x28
 800fd9c:	af02      	add	r7, sp, #8
 800fd9e:	60f8      	str	r0, [r7, #12]
 800fda0:	60b9      	str	r1, [r7, #8]
 800fda2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d106      	bne.n	800fdbc <etharp_output+0x24>
 800fdae:	4b69      	ldr	r3, [pc, #420]	; (800ff54 <etharp_output+0x1bc>)
 800fdb0:	f240 321b 	movw	r2, #795	; 0x31b
 800fdb4:	4968      	ldr	r1, [pc, #416]	; (800ff58 <etharp_output+0x1c0>)
 800fdb6:	4869      	ldr	r0, [pc, #420]	; (800ff5c <etharp_output+0x1c4>)
 800fdb8:	f002 f8a4 	bl	8011f04 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800fdbc:	68bb      	ldr	r3, [r7, #8]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d106      	bne.n	800fdd0 <etharp_output+0x38>
 800fdc2:	4b64      	ldr	r3, [pc, #400]	; (800ff54 <etharp_output+0x1bc>)
 800fdc4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800fdc8:	4965      	ldr	r1, [pc, #404]	; (800ff60 <etharp_output+0x1c8>)
 800fdca:	4864      	ldr	r0, [pc, #400]	; (800ff5c <etharp_output+0x1c4>)
 800fdcc:	f002 f89a 	bl	8011f04 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d106      	bne.n	800fde4 <etharp_output+0x4c>
 800fdd6:	4b5f      	ldr	r3, [pc, #380]	; (800ff54 <etharp_output+0x1bc>)
 800fdd8:	f240 321d 	movw	r2, #797	; 0x31d
 800fddc:	4961      	ldr	r1, [pc, #388]	; (800ff64 <etharp_output+0x1cc>)
 800fdde:	485f      	ldr	r0, [pc, #380]	; (800ff5c <etharp_output+0x1c4>)
 800fde0:	f002 f890 	bl	8011f04 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	68f9      	ldr	r1, [r7, #12]
 800fdea:	4618      	mov	r0, r3
 800fdec:	f000 fed4 	bl	8010b98 <ip4_addr_isbroadcast_u32>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d002      	beq.n	800fdfc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800fdf6:	4b5c      	ldr	r3, [pc, #368]	; (800ff68 <etharp_output+0x1d0>)
 800fdf8:	61fb      	str	r3, [r7, #28]
 800fdfa:	e09b      	b.n	800ff34 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fe04:	2be0      	cmp	r3, #224	; 0xe0
 800fe06:	d118      	bne.n	800fe3a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800fe08:	2301      	movs	r3, #1
 800fe0a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800fe10:	235e      	movs	r3, #94	; 0x5e
 800fe12:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	3301      	adds	r3, #1
 800fe18:	781b      	ldrb	r3, [r3, #0]
 800fe1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe1e:	b2db      	uxtb	r3, r3
 800fe20:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	3302      	adds	r3, #2
 800fe26:	781b      	ldrb	r3, [r3, #0]
 800fe28:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	3303      	adds	r3, #3
 800fe2e:	781b      	ldrb	r3, [r3, #0]
 800fe30:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800fe32:	f107 0310 	add.w	r3, r7, #16
 800fe36:	61fb      	str	r3, [r7, #28]
 800fe38:	e07c      	b.n	800ff34 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	681a      	ldr	r2, [r3, #0]
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	3304      	adds	r3, #4
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	405a      	eors	r2, r3
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	3308      	adds	r3, #8
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	4013      	ands	r3, r2
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d012      	beq.n	800fe78 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800fe58:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800fe5c:	4293      	cmp	r3, r2
 800fe5e:	d00b      	beq.n	800fe78 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	330c      	adds	r3, #12
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d003      	beq.n	800fe72 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	330c      	adds	r3, #12
 800fe6e:	61bb      	str	r3, [r7, #24]
 800fe70:	e002      	b.n	800fe78 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800fe72:	f06f 0303 	mvn.w	r3, #3
 800fe76:	e069      	b.n	800ff4c <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800fe78:	4b3c      	ldr	r3, [pc, #240]	; (800ff6c <etharp_output+0x1d4>)
 800fe7a:	781b      	ldrb	r3, [r3, #0]
 800fe7c:	4619      	mov	r1, r3
 800fe7e:	4a3c      	ldr	r2, [pc, #240]	; (800ff70 <etharp_output+0x1d8>)
 800fe80:	460b      	mov	r3, r1
 800fe82:	005b      	lsls	r3, r3, #1
 800fe84:	440b      	add	r3, r1
 800fe86:	00db      	lsls	r3, r3, #3
 800fe88:	4413      	add	r3, r2
 800fe8a:	3314      	adds	r3, #20
 800fe8c:	781b      	ldrb	r3, [r3, #0]
 800fe8e:	2b01      	cmp	r3, #1
 800fe90:	d917      	bls.n	800fec2 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800fe92:	69bb      	ldr	r3, [r7, #24]
 800fe94:	681a      	ldr	r2, [r3, #0]
 800fe96:	4b35      	ldr	r3, [pc, #212]	; (800ff6c <etharp_output+0x1d4>)
 800fe98:	781b      	ldrb	r3, [r3, #0]
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	4934      	ldr	r1, [pc, #208]	; (800ff70 <etharp_output+0x1d8>)
 800fe9e:	4603      	mov	r3, r0
 800fea0:	005b      	lsls	r3, r3, #1
 800fea2:	4403      	add	r3, r0
 800fea4:	00db      	lsls	r3, r3, #3
 800fea6:	440b      	add	r3, r1
 800fea8:	3304      	adds	r3, #4
 800feaa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800feac:	429a      	cmp	r2, r3
 800feae:	d108      	bne.n	800fec2 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800feb0:	4b2e      	ldr	r3, [pc, #184]	; (800ff6c <etharp_output+0x1d4>)
 800feb2:	781b      	ldrb	r3, [r3, #0]
 800feb4:	461a      	mov	r2, r3
 800feb6:	68b9      	ldr	r1, [r7, #8]
 800feb8:	68f8      	ldr	r0, [r7, #12]
 800feba:	f7ff fed3 	bl	800fc64 <etharp_output_to_arp_index>
 800febe:	4603      	mov	r3, r0
 800fec0:	e044      	b.n	800ff4c <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800fec2:	2300      	movs	r3, #0
 800fec4:	75fb      	strb	r3, [r7, #23]
 800fec6:	e02a      	b.n	800ff1e <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fec8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800fecc:	4928      	ldr	r1, [pc, #160]	; (800ff70 <etharp_output+0x1d8>)
 800fece:	4613      	mov	r3, r2
 800fed0:	005b      	lsls	r3, r3, #1
 800fed2:	4413      	add	r3, r2
 800fed4:	00db      	lsls	r3, r3, #3
 800fed6:	440b      	add	r3, r1
 800fed8:	3314      	adds	r3, #20
 800feda:	781b      	ldrb	r3, [r3, #0]
 800fedc:	2b01      	cmp	r3, #1
 800fede:	d918      	bls.n	800ff12 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800fee0:	69bb      	ldr	r3, [r7, #24]
 800fee2:	6819      	ldr	r1, [r3, #0]
 800fee4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800fee8:	4821      	ldr	r0, [pc, #132]	; (800ff70 <etharp_output+0x1d8>)
 800feea:	4613      	mov	r3, r2
 800feec:	005b      	lsls	r3, r3, #1
 800feee:	4413      	add	r3, r2
 800fef0:	00db      	lsls	r3, r3, #3
 800fef2:	4403      	add	r3, r0
 800fef4:	3304      	adds	r3, #4
 800fef6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fef8:	4299      	cmp	r1, r3
 800fefa:	d10a      	bne.n	800ff12 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800fefc:	7dfa      	ldrb	r2, [r7, #23]
 800fefe:	4b1b      	ldr	r3, [pc, #108]	; (800ff6c <etharp_output+0x1d4>)
 800ff00:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800ff02:	7dfb      	ldrb	r3, [r7, #23]
 800ff04:	461a      	mov	r2, r3
 800ff06:	68b9      	ldr	r1, [r7, #8]
 800ff08:	68f8      	ldr	r0, [r7, #12]
 800ff0a:	f7ff feab 	bl	800fc64 <etharp_output_to_arp_index>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	e01c      	b.n	800ff4c <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ff12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ff16:	b2db      	uxtb	r3, r3
 800ff18:	3301      	adds	r3, #1
 800ff1a:	b2db      	uxtb	r3, r3
 800ff1c:	75fb      	strb	r3, [r7, #23]
 800ff1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ff22:	2b09      	cmp	r3, #9
 800ff24:	ddd0      	ble.n	800fec8 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800ff26:	68ba      	ldr	r2, [r7, #8]
 800ff28:	69b9      	ldr	r1, [r7, #24]
 800ff2a:	68f8      	ldr	r0, [r7, #12]
 800ff2c:	f000 f822 	bl	800ff74 <etharp_query>
 800ff30:	4603      	mov	r3, r0
 800ff32:	e00b      	b.n	800ff4c <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800ff3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ff3e:	9300      	str	r3, [sp, #0]
 800ff40:	69fb      	ldr	r3, [r7, #28]
 800ff42:	68b9      	ldr	r1, [r7, #8]
 800ff44:	68f8      	ldr	r0, [r7, #12]
 800ff46:	f001 fccd 	bl	80118e4 <ethernet_output>
 800ff4a:	4603      	mov	r3, r0
}
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	3720      	adds	r7, #32
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd80      	pop	{r7, pc}
 800ff54:	08014408 	.word	0x08014408
 800ff58:	08014558 	.word	0x08014558
 800ff5c:	08014480 	.word	0x08014480
 800ff60:	080145a8 	.word	0x080145a8
 800ff64:	08014548 	.word	0x08014548
 800ff68:	08014bb0 	.word	0x08014bb0
 800ff6c:	20004430 	.word	0x20004430
 800ff70:	20004340 	.word	0x20004340

0800ff74 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b08c      	sub	sp, #48	; 0x30
 800ff78:	af02      	add	r7, sp, #8
 800ff7a:	60f8      	str	r0, [r7, #12]
 800ff7c:	60b9      	str	r1, [r7, #8]
 800ff7e:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	3329      	adds	r3, #41	; 0x29
 800ff84:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800ff86:	23ff      	movs	r3, #255	; 0xff
 800ff88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	68f9      	ldr	r1, [r7, #12]
 800ff96:	4618      	mov	r0, r3
 800ff98:	f000 fdfe 	bl	8010b98 <ip4_addr_isbroadcast_u32>
 800ff9c:	4603      	mov	r3, r0
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d10c      	bne.n	800ffbc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ffa2:	68bb      	ldr	r3, [r7, #8]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ffaa:	2be0      	cmp	r3, #224	; 0xe0
 800ffac:	d006      	beq.n	800ffbc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d003      	beq.n	800ffbc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d102      	bne.n	800ffc2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ffbc:	f06f 030f 	mvn.w	r3, #15
 800ffc0:	e10e      	b.n	80101e0 <etharp_query+0x26c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800ffc2:	68fa      	ldr	r2, [r7, #12]
 800ffc4:	2101      	movs	r1, #1
 800ffc6:	68b8      	ldr	r0, [r7, #8]
 800ffc8:	f7ff fba0 	bl	800f70c <etharp_find_entry>
 800ffcc:	4603      	mov	r3, r0
 800ffce:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800ffd0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	da02      	bge.n	800ffde <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800ffd8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ffdc:	e100      	b.n	80101e0 <etharp_query+0x26c>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800ffde:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800ffe2:	4981      	ldr	r1, [pc, #516]	; (80101e8 <etharp_query+0x274>)
 800ffe4:	4613      	mov	r3, r2
 800ffe6:	005b      	lsls	r3, r3, #1
 800ffe8:	4413      	add	r3, r2
 800ffea:	00db      	lsls	r3, r3, #3
 800ffec:	440b      	add	r3, r1
 800ffee:	3314      	adds	r3, #20
 800fff0:	781b      	ldrb	r3, [r3, #0]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d117      	bne.n	8010026 <etharp_query+0xb2>
    is_new_entry = 1;
 800fff6:	2301      	movs	r3, #1
 800fff8:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800fffa:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800fffe:	497a      	ldr	r1, [pc, #488]	; (80101e8 <etharp_query+0x274>)
 8010000:	4613      	mov	r3, r2
 8010002:	005b      	lsls	r3, r3, #1
 8010004:	4413      	add	r3, r2
 8010006:	00db      	lsls	r3, r3, #3
 8010008:	440b      	add	r3, r1
 801000a:	3314      	adds	r3, #20
 801000c:	2201      	movs	r2, #1
 801000e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010010:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010014:	4974      	ldr	r1, [pc, #464]	; (80101e8 <etharp_query+0x274>)
 8010016:	4613      	mov	r3, r2
 8010018:	005b      	lsls	r3, r3, #1
 801001a:	4413      	add	r3, r2
 801001c:	00db      	lsls	r3, r3, #3
 801001e:	440b      	add	r3, r1
 8010020:	3308      	adds	r3, #8
 8010022:	68fa      	ldr	r2, [r7, #12]
 8010024:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010026:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801002a:	496f      	ldr	r1, [pc, #444]	; (80101e8 <etharp_query+0x274>)
 801002c:	4613      	mov	r3, r2
 801002e:	005b      	lsls	r3, r3, #1
 8010030:	4413      	add	r3, r2
 8010032:	00db      	lsls	r3, r3, #3
 8010034:	440b      	add	r3, r1
 8010036:	3314      	adds	r3, #20
 8010038:	781b      	ldrb	r3, [r3, #0]
 801003a:	2b01      	cmp	r3, #1
 801003c:	d012      	beq.n	8010064 <etharp_query+0xf0>
 801003e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010042:	4969      	ldr	r1, [pc, #420]	; (80101e8 <etharp_query+0x274>)
 8010044:	4613      	mov	r3, r2
 8010046:	005b      	lsls	r3, r3, #1
 8010048:	4413      	add	r3, r2
 801004a:	00db      	lsls	r3, r3, #3
 801004c:	440b      	add	r3, r1
 801004e:	3314      	adds	r3, #20
 8010050:	781b      	ldrb	r3, [r3, #0]
 8010052:	2b01      	cmp	r3, #1
 8010054:	d806      	bhi.n	8010064 <etharp_query+0xf0>
 8010056:	4b65      	ldr	r3, [pc, #404]	; (80101ec <etharp_query+0x278>)
 8010058:	f240 32c7 	movw	r2, #967	; 0x3c7
 801005c:	4964      	ldr	r1, [pc, #400]	; (80101f0 <etharp_query+0x27c>)
 801005e:	4865      	ldr	r0, [pc, #404]	; (80101f4 <etharp_query+0x280>)
 8010060:	f001 ff50 	bl	8011f04 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8010064:	6a3b      	ldr	r3, [r7, #32]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d102      	bne.n	8010070 <etharp_query+0xfc>
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d10c      	bne.n	801008a <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8010070:	68b9      	ldr	r1, [r7, #8]
 8010072:	68f8      	ldr	r0, [r7, #12]
 8010074:	f000 f974 	bl	8010360 <etharp_request>
 8010078:	4603      	mov	r3, r0
 801007a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d102      	bne.n	801008a <etharp_query+0x116>
      return result;
 8010084:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010088:	e0aa      	b.n	80101e0 <etharp_query+0x26c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d106      	bne.n	801009e <etharp_query+0x12a>
 8010090:	4b56      	ldr	r3, [pc, #344]	; (80101ec <etharp_query+0x278>)
 8010092:	f240 32db 	movw	r2, #987	; 0x3db
 8010096:	4958      	ldr	r1, [pc, #352]	; (80101f8 <etharp_query+0x284>)
 8010098:	4856      	ldr	r0, [pc, #344]	; (80101f4 <etharp_query+0x280>)
 801009a:	f001 ff33 	bl	8011f04 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801009e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80100a2:	4951      	ldr	r1, [pc, #324]	; (80101e8 <etharp_query+0x274>)
 80100a4:	4613      	mov	r3, r2
 80100a6:	005b      	lsls	r3, r3, #1
 80100a8:	4413      	add	r3, r2
 80100aa:	00db      	lsls	r3, r3, #3
 80100ac:	440b      	add	r3, r1
 80100ae:	3314      	adds	r3, #20
 80100b0:	781b      	ldrb	r3, [r3, #0]
 80100b2:	2b01      	cmp	r3, #1
 80100b4:	d918      	bls.n	80100e8 <etharp_query+0x174>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 80100b6:	7cfa      	ldrb	r2, [r7, #19]
 80100b8:	4b50      	ldr	r3, [pc, #320]	; (80101fc <etharp_query+0x288>)
 80100ba:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80100bc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80100c0:	4613      	mov	r3, r2
 80100c2:	005b      	lsls	r3, r3, #1
 80100c4:	4413      	add	r3, r2
 80100c6:	00db      	lsls	r3, r3, #3
 80100c8:	3308      	adds	r3, #8
 80100ca:	4a47      	ldr	r2, [pc, #284]	; (80101e8 <etharp_query+0x274>)
 80100cc:	4413      	add	r3, r2
 80100ce:	3304      	adds	r3, #4
 80100d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80100d4:	9200      	str	r2, [sp, #0]
 80100d6:	697a      	ldr	r2, [r7, #20]
 80100d8:	6879      	ldr	r1, [r7, #4]
 80100da:	68f8      	ldr	r0, [r7, #12]
 80100dc:	f001 fc02 	bl	80118e4 <ethernet_output>
 80100e0:	4603      	mov	r3, r0
 80100e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80100e6:	e079      	b.n	80101dc <etharp_query+0x268>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80100e8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80100ec:	493e      	ldr	r1, [pc, #248]	; (80101e8 <etharp_query+0x274>)
 80100ee:	4613      	mov	r3, r2
 80100f0:	005b      	lsls	r3, r3, #1
 80100f2:	4413      	add	r3, r2
 80100f4:	00db      	lsls	r3, r3, #3
 80100f6:	440b      	add	r3, r1
 80100f8:	3314      	adds	r3, #20
 80100fa:	781b      	ldrb	r3, [r3, #0]
 80100fc:	2b01      	cmp	r3, #1
 80100fe:	d16d      	bne.n	80101dc <etharp_query+0x268>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010100:	2300      	movs	r3, #0
 8010102:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010108:	e01a      	b.n	8010140 <etharp_query+0x1cc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801010a:	69fb      	ldr	r3, [r7, #28]
 801010c:	895a      	ldrh	r2, [r3, #10]
 801010e:	69fb      	ldr	r3, [r7, #28]
 8010110:	891b      	ldrh	r3, [r3, #8]
 8010112:	429a      	cmp	r2, r3
 8010114:	d10a      	bne.n	801012c <etharp_query+0x1b8>
 8010116:	69fb      	ldr	r3, [r7, #28]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d006      	beq.n	801012c <etharp_query+0x1b8>
 801011e:	4b33      	ldr	r3, [pc, #204]	; (80101ec <etharp_query+0x278>)
 8010120:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8010124:	4936      	ldr	r1, [pc, #216]	; (8010200 <etharp_query+0x28c>)
 8010126:	4833      	ldr	r0, [pc, #204]	; (80101f4 <etharp_query+0x280>)
 8010128:	f001 feec 	bl	8011f04 <iprintf>
      if (p->type != PBUF_ROM) {
 801012c:	69fb      	ldr	r3, [r7, #28]
 801012e:	7b1b      	ldrb	r3, [r3, #12]
 8010130:	2b01      	cmp	r3, #1
 8010132:	d002      	beq.n	801013a <etharp_query+0x1c6>
        copy_needed = 1;
 8010134:	2301      	movs	r3, #1
 8010136:	61bb      	str	r3, [r7, #24]
        break;
 8010138:	e005      	b.n	8010146 <etharp_query+0x1d2>
      }
      p = p->next;
 801013a:	69fb      	ldr	r3, [r7, #28]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010140:	69fb      	ldr	r3, [r7, #28]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d1e1      	bne.n	801010a <etharp_query+0x196>
    }
    if (copy_needed) {
 8010146:	69bb      	ldr	r3, [r7, #24]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d017      	beq.n	801017c <etharp_query+0x208>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 801014c:	69fb      	ldr	r3, [r7, #28]
 801014e:	891b      	ldrh	r3, [r3, #8]
 8010150:	2200      	movs	r2, #0
 8010152:	4619      	mov	r1, r3
 8010154:	2002      	movs	r0, #2
 8010156:	f7f8 ff3d 	bl	8008fd4 <pbuf_alloc>
 801015a:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 801015c:	69fb      	ldr	r3, [r7, #28]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d011      	beq.n	8010186 <etharp_query+0x212>
        if (pbuf_copy(p, q) != ERR_OK) {
 8010162:	6879      	ldr	r1, [r7, #4]
 8010164:	69f8      	ldr	r0, [r7, #28]
 8010166:	f7f9 fbe5 	bl	8009934 <pbuf_copy>
 801016a:	4603      	mov	r3, r0
 801016c:	2b00      	cmp	r3, #0
 801016e:	d00a      	beq.n	8010186 <etharp_query+0x212>
          pbuf_free(p);
 8010170:	69f8      	ldr	r0, [r7, #28]
 8010172:	f7f9 faa1 	bl	80096b8 <pbuf_free>
          p = NULL;
 8010176:	2300      	movs	r3, #0
 8010178:	61fb      	str	r3, [r7, #28]
 801017a:	e004      	b.n	8010186 <etharp_query+0x212>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010180:	69f8      	ldr	r0, [r7, #28]
 8010182:	f7f9 fb49 	bl	8009818 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010186:	69fb      	ldr	r3, [r7, #28]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d024      	beq.n	80101d6 <etharp_query+0x262>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801018c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010190:	4915      	ldr	r1, [pc, #84]	; (80101e8 <etharp_query+0x274>)
 8010192:	4613      	mov	r3, r2
 8010194:	005b      	lsls	r3, r3, #1
 8010196:	4413      	add	r3, r2
 8010198:	00db      	lsls	r3, r3, #3
 801019a:	440b      	add	r3, r1
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d00b      	beq.n	80101ba <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 80101a2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80101a6:	4910      	ldr	r1, [pc, #64]	; (80101e8 <etharp_query+0x274>)
 80101a8:	4613      	mov	r3, r2
 80101aa:	005b      	lsls	r3, r3, #1
 80101ac:	4413      	add	r3, r2
 80101ae:	00db      	lsls	r3, r3, #3
 80101b0:	440b      	add	r3, r1
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	4618      	mov	r0, r3
 80101b6:	f7f9 fa7f 	bl	80096b8 <pbuf_free>
      }
      arp_table[i].q = p;
 80101ba:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80101be:	490a      	ldr	r1, [pc, #40]	; (80101e8 <etharp_query+0x274>)
 80101c0:	4613      	mov	r3, r2
 80101c2:	005b      	lsls	r3, r3, #1
 80101c4:	4413      	add	r3, r2
 80101c6:	00db      	lsls	r3, r3, #3
 80101c8:	440b      	add	r3, r1
 80101ca:	69fa      	ldr	r2, [r7, #28]
 80101cc:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80101ce:	2300      	movs	r3, #0
 80101d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80101d4:	e002      	b.n	80101dc <etharp_query+0x268>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80101d6:	23ff      	movs	r3, #255	; 0xff
 80101d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80101dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80101e0:	4618      	mov	r0, r3
 80101e2:	3728      	adds	r7, #40	; 0x28
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}
 80101e8:	20004340 	.word	0x20004340
 80101ec:	08014408 	.word	0x08014408
 80101f0:	080145b4 	.word	0x080145b4
 80101f4:	08014480 	.word	0x08014480
 80101f8:	080145a8 	.word	0x080145a8
 80101fc:	20004430 	.word	0x20004430
 8010200:	080145dc 	.word	0x080145dc

08010204 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b08a      	sub	sp, #40	; 0x28
 8010208:	af02      	add	r7, sp, #8
 801020a:	60f8      	str	r0, [r7, #12]
 801020c:	60b9      	str	r1, [r7, #8]
 801020e:	607a      	str	r2, [r7, #4]
 8010210:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8010212:	2300      	movs	r3, #0
 8010214:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d106      	bne.n	801022a <etharp_raw+0x26>
 801021c:	4b3a      	ldr	r3, [pc, #232]	; (8010308 <etharp_raw+0x104>)
 801021e:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8010222:	493a      	ldr	r1, [pc, #232]	; (801030c <etharp_raw+0x108>)
 8010224:	483a      	ldr	r0, [pc, #232]	; (8010310 <etharp_raw+0x10c>)
 8010226:	f001 fe6d 	bl	8011f04 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801022a:	2200      	movs	r2, #0
 801022c:	211c      	movs	r1, #28
 801022e:	2002      	movs	r0, #2
 8010230:	f7f8 fed0 	bl	8008fd4 <pbuf_alloc>
 8010234:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010236:	69bb      	ldr	r3, [r7, #24]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d102      	bne.n	8010242 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801023c:	f04f 33ff 	mov.w	r3, #4294967295
 8010240:	e05d      	b.n	80102fe <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010242:	69bb      	ldr	r3, [r7, #24]
 8010244:	895b      	ldrh	r3, [r3, #10]
 8010246:	2b1b      	cmp	r3, #27
 8010248:	d806      	bhi.n	8010258 <etharp_raw+0x54>
 801024a:	4b2f      	ldr	r3, [pc, #188]	; (8010308 <etharp_raw+0x104>)
 801024c:	f240 4263 	movw	r2, #1123	; 0x463
 8010250:	4930      	ldr	r1, [pc, #192]	; (8010314 <etharp_raw+0x110>)
 8010252:	482f      	ldr	r0, [pc, #188]	; (8010310 <etharp_raw+0x10c>)
 8010254:	f001 fe56 	bl	8011f04 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010258:	69bb      	ldr	r3, [r7, #24]
 801025a:	685b      	ldr	r3, [r3, #4]
 801025c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801025e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010260:	4618      	mov	r0, r3
 8010262:	f7f8 f837 	bl	80082d4 <lwip_htons>
 8010266:	4603      	mov	r3, r0
 8010268:	461a      	mov	r2, r3
 801026a:	697b      	ldr	r3, [r7, #20]
 801026c:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010274:	2b06      	cmp	r3, #6
 8010276:	d006      	beq.n	8010286 <etharp_raw+0x82>
 8010278:	4b23      	ldr	r3, [pc, #140]	; (8010308 <etharp_raw+0x104>)
 801027a:	f240 426a 	movw	r2, #1130	; 0x46a
 801027e:	4926      	ldr	r1, [pc, #152]	; (8010318 <etharp_raw+0x114>)
 8010280:	4823      	ldr	r0, [pc, #140]	; (8010310 <etharp_raw+0x10c>)
 8010282:	f001 fe3f 	bl	8011f04 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8010286:	697b      	ldr	r3, [r7, #20]
 8010288:	3308      	adds	r3, #8
 801028a:	2206      	movs	r2, #6
 801028c:	6839      	ldr	r1, [r7, #0]
 801028e:	4618      	mov	r0, r3
 8010290:	f001 fdc7 	bl	8011e22 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	3312      	adds	r3, #18
 8010298:	2206      	movs	r2, #6
 801029a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801029c:	4618      	mov	r0, r3
 801029e:	f001 fdc0 	bl	8011e22 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 80102a2:	697b      	ldr	r3, [r7, #20]
 80102a4:	330e      	adds	r3, #14
 80102a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80102a8:	6812      	ldr	r2, [r2, #0]
 80102aa:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 80102ac:	697b      	ldr	r3, [r7, #20]
 80102ae:	3318      	adds	r3, #24
 80102b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102b2:	6812      	ldr	r2, [r2, #0]
 80102b4:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80102b6:	697b      	ldr	r3, [r7, #20]
 80102b8:	2200      	movs	r2, #0
 80102ba:	701a      	strb	r2, [r3, #0]
 80102bc:	2200      	movs	r2, #0
 80102be:	f042 0201 	orr.w	r2, r2, #1
 80102c2:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80102c4:	697b      	ldr	r3, [r7, #20]
 80102c6:	2200      	movs	r2, #0
 80102c8:	f042 0208 	orr.w	r2, r2, #8
 80102cc:	709a      	strb	r2, [r3, #2]
 80102ce:	2200      	movs	r2, #0
 80102d0:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80102d2:	697b      	ldr	r3, [r7, #20]
 80102d4:	2206      	movs	r2, #6
 80102d6:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80102d8:	697b      	ldr	r3, [r7, #20]
 80102da:	2204      	movs	r2, #4
 80102dc:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80102de:	f640 0306 	movw	r3, #2054	; 0x806
 80102e2:	9300      	str	r3, [sp, #0]
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	68ba      	ldr	r2, [r7, #8]
 80102e8:	69b9      	ldr	r1, [r7, #24]
 80102ea:	68f8      	ldr	r0, [r7, #12]
 80102ec:	f001 fafa 	bl	80118e4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80102f0:	69b8      	ldr	r0, [r7, #24]
 80102f2:	f7f9 f9e1 	bl	80096b8 <pbuf_free>
  p = NULL;
 80102f6:	2300      	movs	r3, #0
 80102f8:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80102fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80102fe:	4618      	mov	r0, r3
 8010300:	3720      	adds	r7, #32
 8010302:	46bd      	mov	sp, r7
 8010304:	bd80      	pop	{r7, pc}
 8010306:	bf00      	nop
 8010308:	08014408 	.word	0x08014408
 801030c:	08014558 	.word	0x08014558
 8010310:	08014480 	.word	0x08014480
 8010314:	080145f8 	.word	0x080145f8
 8010318:	0801462c 	.word	0x0801462c

0801031c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b088      	sub	sp, #32
 8010320:	af04      	add	r7, sp, #16
 8010322:	60f8      	str	r0, [r7, #12]
 8010324:	60b9      	str	r1, [r7, #8]
 8010326:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	f103 0029 	add.w	r0, r3, #41	; 0x29
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010338:	2201      	movs	r2, #1
 801033a:	9203      	str	r2, [sp, #12]
 801033c:	68ba      	ldr	r2, [r7, #8]
 801033e:	9202      	str	r2, [sp, #8]
 8010340:	4a06      	ldr	r2, [pc, #24]	; (801035c <etharp_request_dst+0x40>)
 8010342:	9201      	str	r2, [sp, #4]
 8010344:	9300      	str	r3, [sp, #0]
 8010346:	4603      	mov	r3, r0
 8010348:	687a      	ldr	r2, [r7, #4]
 801034a:	68f8      	ldr	r0, [r7, #12]
 801034c:	f7ff ff5a 	bl	8010204 <etharp_raw>
 8010350:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8010352:	4618      	mov	r0, r3
 8010354:	3710      	adds	r7, #16
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}
 801035a:	bf00      	nop
 801035c:	08014bb8 	.word	0x08014bb8

08010360 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b082      	sub	sp, #8
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
 8010368:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801036a:	4a05      	ldr	r2, [pc, #20]	; (8010380 <etharp_request+0x20>)
 801036c:	6839      	ldr	r1, [r7, #0]
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f7ff ffd4 	bl	801031c <etharp_request_dst>
 8010374:	4603      	mov	r3, r0
}
 8010376:	4618      	mov	r0, r3
 8010378:	3708      	adds	r7, #8
 801037a:	46bd      	mov	sp, r7
 801037c:	bd80      	pop	{r7, pc}
 801037e:	bf00      	nop
 8010380:	08014bb0 	.word	0x08014bb0

08010384 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8010384:	b580      	push	{r7, lr}
 8010386:	b08e      	sub	sp, #56	; 0x38
 8010388:	af04      	add	r7, sp, #16
 801038a:	6078      	str	r0, [r7, #4]
 801038c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801038e:	4b7a      	ldr	r3, [pc, #488]	; (8010578 <icmp_input+0x1f4>)
 8010390:	689b      	ldr	r3, [r3, #8]
 8010392:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8010394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010396:	781b      	ldrb	r3, [r3, #0]
 8010398:	b29b      	uxth	r3, r3
 801039a:	f003 030f 	and.w	r3, r3, #15
 801039e:	b29b      	uxth	r3, r3
 80103a0:	009b      	lsls	r3, r3, #2
 80103a2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80103a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80103a6:	2b13      	cmp	r3, #19
 80103a8:	f240 80d1 	bls.w	801054e <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	895b      	ldrh	r3, [r3, #10]
 80103b0:	2b03      	cmp	r3, #3
 80103b2:	f240 80ce 	bls.w	8010552 <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	685b      	ldr	r3, [r3, #4]
 80103ba:	781b      	ldrb	r3, [r3, #0]
 80103bc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 80103c0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	f000 80bb 	beq.w	8010540 <icmp_input+0x1bc>
 80103ca:	2b08      	cmp	r3, #8
 80103cc:	f040 80bb 	bne.w	8010546 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 80103d0:	4b6a      	ldr	r3, [pc, #424]	; (801057c <icmp_input+0x1f8>)
 80103d2:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80103d4:	4b68      	ldr	r3, [pc, #416]	; (8010578 <icmp_input+0x1f4>)
 80103d6:	695b      	ldr	r3, [r3, #20]
 80103d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80103dc:	2be0      	cmp	r3, #224	; 0xe0
 80103de:	f000 80bf 	beq.w	8010560 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80103e2:	4b65      	ldr	r3, [pc, #404]	; (8010578 <icmp_input+0x1f4>)
 80103e4:	695b      	ldr	r3, [r3, #20]
 80103e6:	4a64      	ldr	r2, [pc, #400]	; (8010578 <icmp_input+0x1f4>)
 80103e8:	6812      	ldr	r2, [r2, #0]
 80103ea:	4611      	mov	r1, r2
 80103ec:	4618      	mov	r0, r3
 80103ee:	f000 fbd3 	bl	8010b98 <ip4_addr_isbroadcast_u32>
 80103f2:	4603      	mov	r3, r0
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	f040 80b5 	bne.w	8010564 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	891b      	ldrh	r3, [r3, #8]
 80103fe:	2b07      	cmp	r3, #7
 8010400:	f240 80a9 	bls.w	8010556 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8010404:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010406:	330e      	adds	r3, #14
 8010408:	b29b      	uxth	r3, r3
 801040a:	b21b      	sxth	r3, r3
 801040c:	4619      	mov	r1, r3
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	f7f9 f92e 	bl	8009670 <pbuf_header>
 8010414:	4603      	mov	r3, r0
 8010416:	2b00      	cmp	r3, #0
 8010418:	d046      	beq.n	80104a8 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	891a      	ldrh	r2, [r3, #8]
 801041e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010420:	4413      	add	r3, r2
 8010422:	b29b      	uxth	r3, r3
 8010424:	2200      	movs	r2, #0
 8010426:	4619      	mov	r1, r3
 8010428:	2002      	movs	r0, #2
 801042a:	f7f8 fdd3 	bl	8008fd4 <pbuf_alloc>
 801042e:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8010430:	69bb      	ldr	r3, [r7, #24]
 8010432:	2b00      	cmp	r3, #0
 8010434:	f000 8098 	beq.w	8010568 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8010438:	69bb      	ldr	r3, [r7, #24]
 801043a:	895b      	ldrh	r3, [r3, #10]
 801043c:	461a      	mov	r2, r3
 801043e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010440:	3308      	adds	r3, #8
 8010442:	429a      	cmp	r2, r3
 8010444:	d203      	bcs.n	801044e <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 8010446:	69b8      	ldr	r0, [r7, #24]
 8010448:	f7f9 f936 	bl	80096b8 <pbuf_free>
        goto icmperr;
 801044c:	e08d      	b.n	801056a <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 801044e:	69bb      	ldr	r3, [r7, #24]
 8010450:	685b      	ldr	r3, [r3, #4]
 8010452:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010454:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010456:	4618      	mov	r0, r3
 8010458:	f001 fce3 	bl	8011e22 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 801045c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801045e:	425b      	negs	r3, r3
 8010460:	b29b      	uxth	r3, r3
 8010462:	b21b      	sxth	r3, r3
 8010464:	4619      	mov	r1, r3
 8010466:	69b8      	ldr	r0, [r7, #24]
 8010468:	f7f9 f902 	bl	8009670 <pbuf_header>
 801046c:	4603      	mov	r3, r0
 801046e:	2b00      	cmp	r3, #0
 8010470:	d009      	beq.n	8010486 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8010472:	4b43      	ldr	r3, [pc, #268]	; (8010580 <icmp_input+0x1fc>)
 8010474:	22af      	movs	r2, #175	; 0xaf
 8010476:	4943      	ldr	r1, [pc, #268]	; (8010584 <icmp_input+0x200>)
 8010478:	4843      	ldr	r0, [pc, #268]	; (8010588 <icmp_input+0x204>)
 801047a:	f001 fd43 	bl	8011f04 <iprintf>
        pbuf_free(r);
 801047e:	69b8      	ldr	r0, [r7, #24]
 8010480:	f7f9 f91a 	bl	80096b8 <pbuf_free>
        goto icmperr;
 8010484:	e071      	b.n	801056a <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8010486:	6879      	ldr	r1, [r7, #4]
 8010488:	69b8      	ldr	r0, [r7, #24]
 801048a:	f7f9 fa53 	bl	8009934 <pbuf_copy>
 801048e:	4603      	mov	r3, r0
 8010490:	2b00      	cmp	r3, #0
 8010492:	d003      	beq.n	801049c <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8010494:	69b8      	ldr	r0, [r7, #24]
 8010496:	f7f9 f90f 	bl	80096b8 <pbuf_free>
        goto icmperr;
 801049a:	e066      	b.n	801056a <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f7f9 f90b 	bl	80096b8 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 80104a2:	69bb      	ldr	r3, [r7, #24]
 80104a4:	607b      	str	r3, [r7, #4]
 80104a6:	e015      	b.n	80104d4 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80104a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80104aa:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 80104ae:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80104b2:	33f2      	adds	r3, #242	; 0xf2
 80104b4:	b29b      	uxth	r3, r3
 80104b6:	b21b      	sxth	r3, r3
 80104b8:	4619      	mov	r1, r3
 80104ba:	6878      	ldr	r0, [r7, #4]
 80104bc:	f7f9 f8d8 	bl	8009670 <pbuf_header>
 80104c0:	4603      	mov	r3, r0
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d006      	beq.n	80104d4 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80104c6:	4b2e      	ldr	r3, [pc, #184]	; (8010580 <icmp_input+0x1fc>)
 80104c8:	22c0      	movs	r2, #192	; 0xc0
 80104ca:	4930      	ldr	r1, [pc, #192]	; (801058c <icmp_input+0x208>)
 80104cc:	482e      	ldr	r0, [pc, #184]	; (8010588 <icmp_input+0x204>)
 80104ce:	f001 fd19 	bl	8011f04 <iprintf>
        goto icmperr;
 80104d2:	e04a      	b.n	801056a <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	685b      	ldr	r3, [r3, #4]
 80104d8:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 80104da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80104de:	4619      	mov	r1, r3
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f7f9 f8c5 	bl	8009670 <pbuf_header>
 80104e6:	4603      	mov	r3, r0
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d12b      	bne.n	8010544 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	685b      	ldr	r3, [r3, #4]
 80104f0:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 80104f2:	69fb      	ldr	r3, [r7, #28]
 80104f4:	681a      	ldr	r2, [r3, #0]
 80104f6:	693b      	ldr	r3, [r7, #16]
 80104f8:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80104fa:	4b1f      	ldr	r3, [pc, #124]	; (8010578 <icmp_input+0x1f4>)
 80104fc:	691a      	ldr	r2, [r3, #16]
 80104fe:	693b      	ldr	r3, [r7, #16]
 8010500:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8010502:	697b      	ldr	r3, [r7, #20]
 8010504:	2200      	movs	r2, #0
 8010506:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8010508:	697b      	ldr	r3, [r7, #20]
 801050a:	2200      	movs	r2, #0
 801050c:	709a      	strb	r2, [r3, #2]
 801050e:	2200      	movs	r2, #0
 8010510:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8010512:	693b      	ldr	r3, [r7, #16]
 8010514:	22ff      	movs	r2, #255	; 0xff
 8010516:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8010518:	693b      	ldr	r3, [r7, #16]
 801051a:	2200      	movs	r2, #0
 801051c:	729a      	strb	r2, [r3, #10]
 801051e:	2200      	movs	r2, #0
 8010520:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	9302      	str	r3, [sp, #8]
 8010526:	2301      	movs	r3, #1
 8010528:	9301      	str	r3, [sp, #4]
 801052a:	2300      	movs	r3, #0
 801052c:	9300      	str	r3, [sp, #0]
 801052e:	23ff      	movs	r3, #255	; 0xff
 8010530:	2200      	movs	r2, #0
 8010532:	69f9      	ldr	r1, [r7, #28]
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f000 fa5d 	bl	80109f4 <ip4_output_if>
 801053a:	4603      	mov	r3, r0
 801053c:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 801053e:	e001      	b.n	8010544 <icmp_input+0x1c0>
    break;
 8010540:	bf00      	nop
 8010542:	e000      	b.n	8010546 <icmp_input+0x1c2>
    break;
 8010544:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8010546:	6878      	ldr	r0, [r7, #4]
 8010548:	f7f9 f8b6 	bl	80096b8 <pbuf_free>
  return;
 801054c:	e011      	b.n	8010572 <icmp_input+0x1ee>
    goto lenerr;
 801054e:	bf00      	nop
 8010550:	e002      	b.n	8010558 <icmp_input+0x1d4>
    goto lenerr;
 8010552:	bf00      	nop
 8010554:	e000      	b.n	8010558 <icmp_input+0x1d4>
      goto lenerr;
 8010556:	bf00      	nop
lenerr:
  pbuf_free(p);
 8010558:	6878      	ldr	r0, [r7, #4]
 801055a:	f7f9 f8ad 	bl	80096b8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801055e:	e008      	b.n	8010572 <icmp_input+0x1ee>
      goto icmperr;
 8010560:	bf00      	nop
 8010562:	e002      	b.n	801056a <icmp_input+0x1e6>
      goto icmperr;
 8010564:	bf00      	nop
 8010566:	e000      	b.n	801056a <icmp_input+0x1e6>
        goto icmperr;
 8010568:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801056a:	6878      	ldr	r0, [r7, #4]
 801056c:	f7f9 f8a4 	bl	80096b8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010570:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8010572:	3728      	adds	r7, #40	; 0x28
 8010574:	46bd      	mov	sp, r7
 8010576:	bd80      	pop	{r7, pc}
 8010578:	20007a18 	.word	0x20007a18
 801057c:	20007a2c 	.word	0x20007a2c
 8010580:	08014670 	.word	0x08014670
 8010584:	080146a8 	.word	0x080146a8
 8010588:	080146e0 	.word	0x080146e0
 801058c:	08014708 	.word	0x08014708

08010590 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b082      	sub	sp, #8
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	460b      	mov	r3, r1
 801059a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801059c:	78fb      	ldrb	r3, [r7, #3]
 801059e:	461a      	mov	r2, r3
 80105a0:	2103      	movs	r1, #3
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	f000 f814 	bl	80105d0 <icmp_send_response>
}
 80105a8:	bf00      	nop
 80105aa:	3708      	adds	r7, #8
 80105ac:	46bd      	mov	sp, r7
 80105ae:	bd80      	pop	{r7, pc}

080105b0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b082      	sub	sp, #8
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
 80105b8:	460b      	mov	r3, r1
 80105ba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80105bc:	78fb      	ldrb	r3, [r7, #3]
 80105be:	461a      	mov	r2, r3
 80105c0:	210b      	movs	r1, #11
 80105c2:	6878      	ldr	r0, [r7, #4]
 80105c4:	f000 f804 	bl	80105d0 <icmp_send_response>
}
 80105c8:	bf00      	nop
 80105ca:	3708      	adds	r7, #8
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}

080105d0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b08c      	sub	sp, #48	; 0x30
 80105d4:	af04      	add	r7, sp, #16
 80105d6:	6078      	str	r0, [r7, #4]
 80105d8:	460b      	mov	r3, r1
 80105da:	70fb      	strb	r3, [r7, #3]
 80105dc:	4613      	mov	r3, r2
 80105de:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80105e0:	2200      	movs	r2, #0
 80105e2:	2124      	movs	r1, #36	; 0x24
 80105e4:	2001      	movs	r0, #1
 80105e6:	f7f8 fcf5 	bl	8008fd4 <pbuf_alloc>
 80105ea:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80105ec:	69fb      	ldr	r3, [r7, #28]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d04c      	beq.n	801068c <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80105f2:	69fb      	ldr	r3, [r7, #28]
 80105f4:	895b      	ldrh	r3, [r3, #10]
 80105f6:	2b23      	cmp	r3, #35	; 0x23
 80105f8:	d806      	bhi.n	8010608 <icmp_send_response+0x38>
 80105fa:	4b26      	ldr	r3, [pc, #152]	; (8010694 <icmp_send_response+0xc4>)
 80105fc:	f240 1261 	movw	r2, #353	; 0x161
 8010600:	4925      	ldr	r1, [pc, #148]	; (8010698 <icmp_send_response+0xc8>)
 8010602:	4826      	ldr	r0, [pc, #152]	; (801069c <icmp_send_response+0xcc>)
 8010604:	f001 fc7e 	bl	8011f04 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	685b      	ldr	r3, [r3, #4]
 801060c:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801060e:	69fb      	ldr	r3, [r7, #28]
 8010610:	685b      	ldr	r3, [r3, #4]
 8010612:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8010614:	697b      	ldr	r3, [r7, #20]
 8010616:	78fa      	ldrb	r2, [r7, #3]
 8010618:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801061a:	697b      	ldr	r3, [r7, #20]
 801061c:	78ba      	ldrb	r2, [r7, #2]
 801061e:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8010620:	697b      	ldr	r3, [r7, #20]
 8010622:	2200      	movs	r2, #0
 8010624:	711a      	strb	r2, [r3, #4]
 8010626:	2200      	movs	r2, #0
 8010628:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801062a:	697b      	ldr	r3, [r7, #20]
 801062c:	2200      	movs	r2, #0
 801062e:	719a      	strb	r2, [r3, #6]
 8010630:	2200      	movs	r2, #0
 8010632:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8010634:	69fb      	ldr	r3, [r7, #28]
 8010636:	685b      	ldr	r3, [r3, #4]
 8010638:	f103 0008 	add.w	r0, r3, #8
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	685b      	ldr	r3, [r3, #4]
 8010640:	221c      	movs	r2, #28
 8010642:	4619      	mov	r1, r3
 8010644:	f001 fbed 	bl	8011e22 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8010648:	69bb      	ldr	r3, [r7, #24]
 801064a:	68db      	ldr	r3, [r3, #12]
 801064c:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 801064e:	f107 030c 	add.w	r3, r7, #12
 8010652:	4618      	mov	r0, r3
 8010654:	f000 f824 	bl	80106a0 <ip4_route>
 8010658:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801065a:	693b      	ldr	r3, [r7, #16]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d011      	beq.n	8010684 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8010660:	697b      	ldr	r3, [r7, #20]
 8010662:	2200      	movs	r2, #0
 8010664:	709a      	strb	r2, [r3, #2]
 8010666:	2200      	movs	r2, #0
 8010668:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801066a:	f107 020c 	add.w	r2, r7, #12
 801066e:	693b      	ldr	r3, [r7, #16]
 8010670:	9302      	str	r3, [sp, #8]
 8010672:	2301      	movs	r3, #1
 8010674:	9301      	str	r3, [sp, #4]
 8010676:	2300      	movs	r3, #0
 8010678:	9300      	str	r3, [sp, #0]
 801067a:	23ff      	movs	r3, #255	; 0xff
 801067c:	2100      	movs	r1, #0
 801067e:	69f8      	ldr	r0, [r7, #28]
 8010680:	f000 f9b8 	bl	80109f4 <ip4_output_if>
  }
  pbuf_free(q);
 8010684:	69f8      	ldr	r0, [r7, #28]
 8010686:	f7f9 f817 	bl	80096b8 <pbuf_free>
 801068a:	e000      	b.n	801068e <icmp_send_response+0xbe>
    return;
 801068c:	bf00      	nop
}
 801068e:	3720      	adds	r7, #32
 8010690:	46bd      	mov	sp, r7
 8010692:	bd80      	pop	{r7, pc}
 8010694:	08014670 	.word	0x08014670
 8010698:	0801473c 	.word	0x0801473c
 801069c:	080146e0 	.word	0x080146e0

080106a0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80106a0:	b480      	push	{r7}
 80106a2:	b085      	sub	sp, #20
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80106a8:	4b30      	ldr	r3, [pc, #192]	; (801076c <ip4_route+0xcc>)
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	60fb      	str	r3, [r7, #12]
 80106ae:	e036      	b.n	801071e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80106b6:	f003 0301 	and.w	r3, r3, #1
 80106ba:	b2db      	uxtb	r3, r3
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d02b      	beq.n	8010718 <ip4_route+0x78>
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80106c6:	089b      	lsrs	r3, r3, #2
 80106c8:	f003 0301 	and.w	r3, r3, #1
 80106cc:	b2db      	uxtb	r3, r3
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d022      	beq.n	8010718 <ip4_route+0x78>
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	3304      	adds	r3, #4
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d01d      	beq.n	8010718 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	681a      	ldr	r2, [r3, #0]
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	3304      	adds	r3, #4
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	405a      	eors	r2, r3
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	3308      	adds	r3, #8
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	4013      	ands	r3, r2
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d101      	bne.n	80106f8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	e033      	b.n	8010760 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80106fe:	f003 0302 	and.w	r3, r3, #2
 8010702:	2b00      	cmp	r3, #0
 8010704:	d108      	bne.n	8010718 <ip4_route+0x78>
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	681a      	ldr	r2, [r3, #0]
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	330c      	adds	r3, #12
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	429a      	cmp	r2, r3
 8010712:	d101      	bne.n	8010718 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	e023      	b.n	8010760 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	60fb      	str	r3, [r7, #12]
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d1c5      	bne.n	80106b0 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010724:	4b12      	ldr	r3, [pc, #72]	; (8010770 <ip4_route+0xd0>)
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d015      	beq.n	8010758 <ip4_route+0xb8>
 801072c:	4b10      	ldr	r3, [pc, #64]	; (8010770 <ip4_route+0xd0>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010734:	f003 0301 	and.w	r3, r3, #1
 8010738:	2b00      	cmp	r3, #0
 801073a:	d00d      	beq.n	8010758 <ip4_route+0xb8>
 801073c:	4b0c      	ldr	r3, [pc, #48]	; (8010770 <ip4_route+0xd0>)
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010744:	f003 0304 	and.w	r3, r3, #4
 8010748:	2b00      	cmp	r3, #0
 801074a:	d005      	beq.n	8010758 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 801074c:	4b08      	ldr	r3, [pc, #32]	; (8010770 <ip4_route+0xd0>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	3304      	adds	r3, #4
 8010752:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010754:	2b00      	cmp	r3, #0
 8010756:	d101      	bne.n	801075c <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8010758:	2300      	movs	r3, #0
 801075a:	e001      	b.n	8010760 <ip4_route+0xc0>
  }

  return netif_default;
 801075c:	4b04      	ldr	r3, [pc, #16]	; (8010770 <ip4_route+0xd0>)
 801075e:	681b      	ldr	r3, [r3, #0]
}
 8010760:	4618      	mov	r0, r3
 8010762:	3714      	adds	r7, #20
 8010764:	46bd      	mov	sp, r7
 8010766:	bc80      	pop	{r7}
 8010768:	4770      	bx	lr
 801076a:	bf00      	nop
 801076c:	2000b118 	.word	0x2000b118
 8010770:	2000b11c 	.word	0x2000b11c

08010774 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b086      	sub	sp, #24
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
 801077c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	685b      	ldr	r3, [r3, #4]
 8010782:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8010784:	697b      	ldr	r3, [r7, #20]
 8010786:	781b      	ldrb	r3, [r3, #0]
 8010788:	091b      	lsrs	r3, r3, #4
 801078a:	b2db      	uxtb	r3, r3
 801078c:	2b04      	cmp	r3, #4
 801078e:	d004      	beq.n	801079a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010790:	6878      	ldr	r0, [r7, #4]
 8010792:	f7f8 ff91 	bl	80096b8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8010796:	2300      	movs	r3, #0
 8010798:	e124      	b.n	80109e4 <ip4_input+0x270>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 801079a:	697b      	ldr	r3, [r7, #20]
 801079c:	781b      	ldrb	r3, [r3, #0]
 801079e:	b29b      	uxth	r3, r3
 80107a0:	f003 030f 	and.w	r3, r3, #15
 80107a4:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 80107a6:	897b      	ldrh	r3, [r7, #10]
 80107a8:	009b      	lsls	r3, r3, #2
 80107aa:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80107ac:	697b      	ldr	r3, [r7, #20]
 80107ae:	885b      	ldrh	r3, [r3, #2]
 80107b0:	b29b      	uxth	r3, r3
 80107b2:	4618      	mov	r0, r3
 80107b4:	f7f7 fd8e 	bl	80082d4 <lwip_htons>
 80107b8:	4603      	mov	r3, r0
 80107ba:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	891b      	ldrh	r3, [r3, #8]
 80107c0:	893a      	ldrh	r2, [r7, #8]
 80107c2:	429a      	cmp	r2, r3
 80107c4:	d204      	bcs.n	80107d0 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 80107c6:	893b      	ldrh	r3, [r7, #8]
 80107c8:	4619      	mov	r1, r3
 80107ca:	6878      	ldr	r0, [r7, #4]
 80107cc:	f7f8 fe00 	bl	80093d0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	895b      	ldrh	r3, [r3, #10]
 80107d4:	897a      	ldrh	r2, [r7, #10]
 80107d6:	429a      	cmp	r2, r3
 80107d8:	d807      	bhi.n	80107ea <ip4_input+0x76>
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	891b      	ldrh	r3, [r3, #8]
 80107de:	893a      	ldrh	r2, [r7, #8]
 80107e0:	429a      	cmp	r2, r3
 80107e2:	d802      	bhi.n	80107ea <ip4_input+0x76>
 80107e4:	897b      	ldrh	r3, [r7, #10]
 80107e6:	2b13      	cmp	r3, #19
 80107e8:	d804      	bhi.n	80107f4 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80107ea:	6878      	ldr	r0, [r7, #4]
 80107ec:	f7f8 ff64 	bl	80096b8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80107f0:	2300      	movs	r3, #0
 80107f2:	e0f7      	b.n	80109e4 <ip4_input+0x270>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80107f4:	697b      	ldr	r3, [r7, #20]
 80107f6:	691b      	ldr	r3, [r3, #16]
 80107f8:	4a7c      	ldr	r2, [pc, #496]	; (80109ec <ip4_input+0x278>)
 80107fa:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80107fc:	697b      	ldr	r3, [r7, #20]
 80107fe:	68db      	ldr	r3, [r3, #12]
 8010800:	4a7a      	ldr	r2, [pc, #488]	; (80109ec <ip4_input+0x278>)
 8010802:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010804:	4b79      	ldr	r3, [pc, #484]	; (80109ec <ip4_input+0x278>)
 8010806:	695b      	ldr	r3, [r3, #20]
 8010808:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801080c:	2be0      	cmp	r3, #224	; 0xe0
 801080e:	d112      	bne.n	8010836 <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010816:	f003 0301 	and.w	r3, r3, #1
 801081a:	b2db      	uxtb	r3, r3
 801081c:	2b00      	cmp	r3, #0
 801081e:	d007      	beq.n	8010830 <ip4_input+0xbc>
 8010820:	683b      	ldr	r3, [r7, #0]
 8010822:	3304      	adds	r3, #4
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d002      	beq.n	8010830 <ip4_input+0xbc>
      netif = inp;
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	613b      	str	r3, [r7, #16]
 801082e:	e041      	b.n	80108b4 <ip4_input+0x140>
    } else {
      netif = NULL;
 8010830:	2300      	movs	r3, #0
 8010832:	613b      	str	r3, [r7, #16]
 8010834:	e03e      	b.n	80108b4 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8010836:	2301      	movs	r3, #1
 8010838:	60fb      	str	r3, [r7, #12]
    netif = inp;
 801083a:	683b      	ldr	r3, [r7, #0]
 801083c:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801083e:	693b      	ldr	r3, [r7, #16]
 8010840:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010844:	f003 0301 	and.w	r3, r3, #1
 8010848:	b2db      	uxtb	r3, r3
 801084a:	2b00      	cmp	r3, #0
 801084c:	d014      	beq.n	8010878 <ip4_input+0x104>
 801084e:	693b      	ldr	r3, [r7, #16]
 8010850:	3304      	adds	r3, #4
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d00f      	beq.n	8010878 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010858:	4b64      	ldr	r3, [pc, #400]	; (80109ec <ip4_input+0x278>)
 801085a:	695a      	ldr	r2, [r3, #20]
 801085c:	693b      	ldr	r3, [r7, #16]
 801085e:	3304      	adds	r3, #4
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	429a      	cmp	r2, r3
 8010864:	d026      	beq.n	80108b4 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010866:	4b61      	ldr	r3, [pc, #388]	; (80109ec <ip4_input+0x278>)
 8010868:	695b      	ldr	r3, [r3, #20]
 801086a:	6939      	ldr	r1, [r7, #16]
 801086c:	4618      	mov	r0, r3
 801086e:	f000 f993 	bl	8010b98 <ip4_addr_isbroadcast_u32>
 8010872:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010874:	2b00      	cmp	r3, #0
 8010876:	d11d      	bne.n	80108b4 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d00d      	beq.n	801089a <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 801087e:	4b5b      	ldr	r3, [pc, #364]	; (80109ec <ip4_input+0x278>)
 8010880:	695b      	ldr	r3, [r3, #20]
 8010882:	b2db      	uxtb	r3, r3
 8010884:	2b7f      	cmp	r3, #127	; 0x7f
 8010886:	d102      	bne.n	801088e <ip4_input+0x11a>
          netif = NULL;
 8010888:	2300      	movs	r3, #0
 801088a:	613b      	str	r3, [r7, #16]
          break;
 801088c:	e012      	b.n	80108b4 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 801088e:	2300      	movs	r3, #0
 8010890:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 8010892:	4b57      	ldr	r3, [pc, #348]	; (80109f0 <ip4_input+0x27c>)
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	613b      	str	r3, [r7, #16]
 8010898:	e002      	b.n	80108a0 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 801089a:	693b      	ldr	r3, [r7, #16]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 80108a0:	693a      	ldr	r2, [r7, #16]
 80108a2:	683b      	ldr	r3, [r7, #0]
 80108a4:	429a      	cmp	r2, r3
 80108a6:	d102      	bne.n	80108ae <ip4_input+0x13a>
        netif = netif->next;
 80108a8:	693b      	ldr	r3, [r7, #16]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 80108ae:	693b      	ldr	r3, [r7, #16]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d1c4      	bne.n	801083e <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80108b4:	4b4d      	ldr	r3, [pc, #308]	; (80109ec <ip4_input+0x278>)
 80108b6:	691b      	ldr	r3, [r3, #16]
 80108b8:	6839      	ldr	r1, [r7, #0]
 80108ba:	4618      	mov	r0, r3
 80108bc:	f000 f96c 	bl	8010b98 <ip4_addr_isbroadcast_u32>
 80108c0:	4603      	mov	r3, r0
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d105      	bne.n	80108d2 <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80108c6:	4b49      	ldr	r3, [pc, #292]	; (80109ec <ip4_input+0x278>)
 80108c8:	691b      	ldr	r3, [r3, #16]
 80108ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80108ce:	2be0      	cmp	r3, #224	; 0xe0
 80108d0:	d104      	bne.n	80108dc <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f7f8 fef0 	bl	80096b8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80108d8:	2300      	movs	r3, #0
 80108da:	e083      	b.n	80109e4 <ip4_input+0x270>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80108dc:	693b      	ldr	r3, [r7, #16]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d104      	bne.n	80108ec <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80108e2:	6878      	ldr	r0, [r7, #4]
 80108e4:	f7f8 fee8 	bl	80096b8 <pbuf_free>
    return ERR_OK;
 80108e8:	2300      	movs	r3, #0
 80108ea:	e07b      	b.n	80109e4 <ip4_input+0x270>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80108ec:	697b      	ldr	r3, [r7, #20]
 80108ee:	88db      	ldrh	r3, [r3, #6]
 80108f0:	b29b      	uxth	r3, r3
 80108f2:	461a      	mov	r2, r3
 80108f4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80108f8:	4013      	ands	r3, r2
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d00b      	beq.n	8010916 <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80108fe:	6878      	ldr	r0, [r7, #4]
 8010900:	f000 fc8e 	bl	8011220 <ip4_reass>
 8010904:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d101      	bne.n	8010910 <ip4_input+0x19c>
      return ERR_OK;
 801090c:	2300      	movs	r3, #0
 801090e:	e069      	b.n	80109e4 <ip4_input+0x270>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	685b      	ldr	r3, [r3, #4]
 8010914:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8010916:	4a35      	ldr	r2, [pc, #212]	; (80109ec <ip4_input+0x278>)
 8010918:	693b      	ldr	r3, [r7, #16]
 801091a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801091c:	4a33      	ldr	r2, [pc, #204]	; (80109ec <ip4_input+0x278>)
 801091e:	683b      	ldr	r3, [r7, #0]
 8010920:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8010922:	4a32      	ldr	r2, [pc, #200]	; (80109ec <ip4_input+0x278>)
 8010924:	697b      	ldr	r3, [r7, #20]
 8010926:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8010928:	697b      	ldr	r3, [r7, #20]
 801092a:	781b      	ldrb	r3, [r3, #0]
 801092c:	b29b      	uxth	r3, r3
 801092e:	f003 030f 	and.w	r3, r3, #15
 8010932:	b29b      	uxth	r3, r3
 8010934:	009b      	lsls	r3, r3, #2
 8010936:	b29a      	uxth	r2, r3
 8010938:	4b2c      	ldr	r3, [pc, #176]	; (80109ec <ip4_input+0x278>)
 801093a:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 801093c:	897b      	ldrh	r3, [r7, #10]
 801093e:	425b      	negs	r3, r3
 8010940:	b29b      	uxth	r3, r3
 8010942:	b21b      	sxth	r3, r3
 8010944:	4619      	mov	r1, r3
 8010946:	6878      	ldr	r0, [r7, #4]
 8010948:	f7f8 fe92 	bl	8009670 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 801094c:	697b      	ldr	r3, [r7, #20]
 801094e:	7a5b      	ldrb	r3, [r3, #9]
 8010950:	2b11      	cmp	r3, #17
 8010952:	d006      	beq.n	8010962 <ip4_input+0x1ee>
 8010954:	2b11      	cmp	r3, #17
 8010956:	dc13      	bgt.n	8010980 <ip4_input+0x20c>
 8010958:	2b01      	cmp	r3, #1
 801095a:	d00c      	beq.n	8010976 <ip4_input+0x202>
 801095c:	2b06      	cmp	r3, #6
 801095e:	d005      	beq.n	801096c <ip4_input+0x1f8>
 8010960:	e00e      	b.n	8010980 <ip4_input+0x20c>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 8010962:	6839      	ldr	r1, [r7, #0]
 8010964:	6878      	ldr	r0, [r7, #4]
 8010966:	f7fe fce3 	bl	800f330 <udp_input>
      break;
 801096a:	e028      	b.n	80109be <ip4_input+0x24a>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 801096c:	6839      	ldr	r1, [r7, #0]
 801096e:	6878      	ldr	r0, [r7, #4]
 8010970:	f7fa fd4e 	bl	800b410 <tcp_input>
      break;
 8010974:	e023      	b.n	80109be <ip4_input+0x24a>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 8010976:	6839      	ldr	r1, [r7, #0]
 8010978:	6878      	ldr	r0, [r7, #4]
 801097a:	f7ff fd03 	bl	8010384 <icmp_input>
      break;
 801097e:	e01e      	b.n	80109be <ip4_input+0x24a>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010980:	4b1a      	ldr	r3, [pc, #104]	; (80109ec <ip4_input+0x278>)
 8010982:	695b      	ldr	r3, [r3, #20]
 8010984:	6939      	ldr	r1, [r7, #16]
 8010986:	4618      	mov	r0, r3
 8010988:	f000 f906 	bl	8010b98 <ip4_addr_isbroadcast_u32>
 801098c:	4603      	mov	r3, r0
 801098e:	2b00      	cmp	r3, #0
 8010990:	d112      	bne.n	80109b8 <ip4_input+0x244>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010992:	4b16      	ldr	r3, [pc, #88]	; (80109ec <ip4_input+0x278>)
 8010994:	695b      	ldr	r3, [r3, #20]
 8010996:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801099a:	2be0      	cmp	r3, #224	; 0xe0
 801099c:	d00c      	beq.n	80109b8 <ip4_input+0x244>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 801099e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80109a2:	4619      	mov	r1, r3
 80109a4:	6878      	ldr	r0, [r7, #4]
 80109a6:	f7f8 fe75 	bl	8009694 <pbuf_header_force>
        p->payload = iphdr;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	697a      	ldr	r2, [r7, #20]
 80109ae:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80109b0:	2102      	movs	r1, #2
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	f7ff fdec 	bl	8010590 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 80109b8:	6878      	ldr	r0, [r7, #4]
 80109ba:	f7f8 fe7d 	bl	80096b8 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80109be:	4b0b      	ldr	r3, [pc, #44]	; (80109ec <ip4_input+0x278>)
 80109c0:	2200      	movs	r2, #0
 80109c2:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80109c4:	4b09      	ldr	r3, [pc, #36]	; (80109ec <ip4_input+0x278>)
 80109c6:	2200      	movs	r2, #0
 80109c8:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80109ca:	4b08      	ldr	r3, [pc, #32]	; (80109ec <ip4_input+0x278>)
 80109cc:	2200      	movs	r2, #0
 80109ce:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80109d0:	4b06      	ldr	r3, [pc, #24]	; (80109ec <ip4_input+0x278>)
 80109d2:	2200      	movs	r2, #0
 80109d4:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80109d6:	4b05      	ldr	r3, [pc, #20]	; (80109ec <ip4_input+0x278>)
 80109d8:	2200      	movs	r2, #0
 80109da:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80109dc:	4b03      	ldr	r3, [pc, #12]	; (80109ec <ip4_input+0x278>)
 80109de:	2200      	movs	r2, #0
 80109e0:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80109e2:	2300      	movs	r3, #0
}
 80109e4:	4618      	mov	r0, r3
 80109e6:	3718      	adds	r7, #24
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}
 80109ec:	20007a18 	.word	0x20007a18
 80109f0:	2000b118 	.word	0x2000b118

080109f4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b08a      	sub	sp, #40	; 0x28
 80109f8:	af04      	add	r7, sp, #16
 80109fa:	60f8      	str	r0, [r7, #12]
 80109fc:	60b9      	str	r1, [r7, #8]
 80109fe:	607a      	str	r2, [r7, #4]
 8010a00:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8010a02:	68bb      	ldr	r3, [r7, #8]
 8010a04:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d009      	beq.n	8010a20 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8010a0c:	68bb      	ldr	r3, [r7, #8]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d003      	beq.n	8010a1a <ip4_output_if+0x26>
 8010a12:	68bb      	ldr	r3, [r7, #8]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d102      	bne.n	8010a20 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8010a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a1c:	3304      	adds	r3, #4
 8010a1e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8010a20:	78fa      	ldrb	r2, [r7, #3]
 8010a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a24:	9302      	str	r3, [sp, #8]
 8010a26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010a2a:	9301      	str	r3, [sp, #4]
 8010a2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010a30:	9300      	str	r3, [sp, #0]
 8010a32:	4613      	mov	r3, r2
 8010a34:	687a      	ldr	r2, [r7, #4]
 8010a36:	6979      	ldr	r1, [r7, #20]
 8010a38:	68f8      	ldr	r0, [r7, #12]
 8010a3a:	f000 f805 	bl	8010a48 <ip4_output_if_src>
 8010a3e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8010a40:	4618      	mov	r0, r3
 8010a42:	3718      	adds	r7, #24
 8010a44:	46bd      	mov	sp, r7
 8010a46:	bd80      	pop	{r7, pc}

08010a48 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b088      	sub	sp, #32
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	60f8      	str	r0, [r7, #12]
 8010a50:	60b9      	str	r1, [r7, #8]
 8010a52:	607a      	str	r2, [r7, #4]
 8010a54:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	89db      	ldrh	r3, [r3, #14]
 8010a5a:	2b01      	cmp	r3, #1
 8010a5c:	d006      	beq.n	8010a6c <ip4_output_if_src+0x24>
 8010a5e:	4b48      	ldr	r3, [pc, #288]	; (8010b80 <ip4_output_if_src+0x138>)
 8010a60:	f240 3233 	movw	r2, #819	; 0x333
 8010a64:	4947      	ldr	r1, [pc, #284]	; (8010b84 <ip4_output_if_src+0x13c>)
 8010a66:	4848      	ldr	r0, [pc, #288]	; (8010b88 <ip4_output_if_src+0x140>)
 8010a68:	f001 fa4c 	bl	8011f04 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d060      	beq.n	8010b34 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8010a72:	2314      	movs	r3, #20
 8010a74:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8010a76:	2114      	movs	r1, #20
 8010a78:	68f8      	ldr	r0, [r7, #12]
 8010a7a:	f7f8 fdf9 	bl	8009670 <pbuf_header>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d002      	beq.n	8010a8a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010a84:	f06f 0301 	mvn.w	r3, #1
 8010a88:	e075      	b.n	8010b76 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	685b      	ldr	r3, [r3, #4]
 8010a8e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	895b      	ldrh	r3, [r3, #10]
 8010a94:	2b13      	cmp	r3, #19
 8010a96:	d806      	bhi.n	8010aa6 <ip4_output_if_src+0x5e>
 8010a98:	4b39      	ldr	r3, [pc, #228]	; (8010b80 <ip4_output_if_src+0x138>)
 8010a9a:	f44f 7258 	mov.w	r2, #864	; 0x360
 8010a9e:	493b      	ldr	r1, [pc, #236]	; (8010b8c <ip4_output_if_src+0x144>)
 8010aa0:	4839      	ldr	r0, [pc, #228]	; (8010b88 <ip4_output_if_src+0x140>)
 8010aa2:	f001 fa2f 	bl	8011f04 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8010aa6:	69fb      	ldr	r3, [r7, #28]
 8010aa8:	78fa      	ldrb	r2, [r7, #3]
 8010aaa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8010aac:	69fb      	ldr	r3, [r7, #28]
 8010aae:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8010ab2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	681a      	ldr	r2, [r3, #0]
 8010ab8:	69fb      	ldr	r3, [r7, #28]
 8010aba:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8010abc:	8b7b      	ldrh	r3, [r7, #26]
 8010abe:	089b      	lsrs	r3, r3, #2
 8010ac0:	b29b      	uxth	r3, r3
 8010ac2:	b2db      	uxtb	r3, r3
 8010ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ac8:	b2da      	uxtb	r2, r3
 8010aca:	69fb      	ldr	r3, [r7, #28]
 8010acc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8010ace:	69fb      	ldr	r3, [r7, #28]
 8010ad0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010ad4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	891b      	ldrh	r3, [r3, #8]
 8010ada:	4618      	mov	r0, r3
 8010adc:	f7f7 fbfa 	bl	80082d4 <lwip_htons>
 8010ae0:	4603      	mov	r3, r0
 8010ae2:	461a      	mov	r2, r3
 8010ae4:	69fb      	ldr	r3, [r7, #28]
 8010ae6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8010ae8:	69fb      	ldr	r3, [r7, #28]
 8010aea:	2200      	movs	r2, #0
 8010aec:	719a      	strb	r2, [r3, #6]
 8010aee:	2200      	movs	r2, #0
 8010af0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8010af2:	4b27      	ldr	r3, [pc, #156]	; (8010b90 <ip4_output_if_src+0x148>)
 8010af4:	881b      	ldrh	r3, [r3, #0]
 8010af6:	4618      	mov	r0, r3
 8010af8:	f7f7 fbec 	bl	80082d4 <lwip_htons>
 8010afc:	4603      	mov	r3, r0
 8010afe:	461a      	mov	r2, r3
 8010b00:	69fb      	ldr	r3, [r7, #28]
 8010b02:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8010b04:	4b22      	ldr	r3, [pc, #136]	; (8010b90 <ip4_output_if_src+0x148>)
 8010b06:	881b      	ldrh	r3, [r3, #0]
 8010b08:	3301      	adds	r3, #1
 8010b0a:	b29a      	uxth	r2, r3
 8010b0c:	4b20      	ldr	r3, [pc, #128]	; (8010b90 <ip4_output_if_src+0x148>)
 8010b0e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8010b10:	68bb      	ldr	r3, [r7, #8]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d104      	bne.n	8010b20 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8010b16:	4b1f      	ldr	r3, [pc, #124]	; (8010b94 <ip4_output_if_src+0x14c>)
 8010b18:	681a      	ldr	r2, [r3, #0]
 8010b1a:	69fb      	ldr	r3, [r7, #28]
 8010b1c:	60da      	str	r2, [r3, #12]
 8010b1e:	e003      	b.n	8010b28 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8010b20:	68bb      	ldr	r3, [r7, #8]
 8010b22:	681a      	ldr	r2, [r3, #0]
 8010b24:	69fb      	ldr	r3, [r7, #28]
 8010b26:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8010b28:	69fb      	ldr	r3, [r7, #28]
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	729a      	strb	r2, [r3, #10]
 8010b2e:	2200      	movs	r2, #0
 8010b30:	72da      	strb	r2, [r3, #11]
 8010b32:	e008      	b.n	8010b46 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	685b      	ldr	r3, [r3, #4]
 8010b38:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8010b3a:	69fb      	ldr	r3, [r7, #28]
 8010b3c:	691b      	ldr	r3, [r3, #16]
 8010b3e:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8010b40:	f107 0314 	add.w	r3, r7, #20
 8010b44:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8010b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d00c      	beq.n	8010b68 <ip4_output_if_src+0x120>
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	891a      	ldrh	r2, [r3, #8]
 8010b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010b56:	429a      	cmp	r2, r3
 8010b58:	d906      	bls.n	8010b68 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8010b5a:	687a      	ldr	r2, [r7, #4]
 8010b5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010b5e:	68f8      	ldr	r0, [r7, #12]
 8010b60:	f000 fd0a 	bl	8011578 <ip4_frag>
 8010b64:	4603      	mov	r3, r0
 8010b66:	e006      	b.n	8010b76 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8010b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b6a:	695b      	ldr	r3, [r3, #20]
 8010b6c:	687a      	ldr	r2, [r7, #4]
 8010b6e:	68f9      	ldr	r1, [r7, #12]
 8010b70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b72:	4798      	blx	r3
 8010b74:	4603      	mov	r3, r0
}
 8010b76:	4618      	mov	r0, r3
 8010b78:	3720      	adds	r7, #32
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bd80      	pop	{r7, pc}
 8010b7e:	bf00      	nop
 8010b80:	08014768 	.word	0x08014768
 8010b84:	0801479c 	.word	0x0801479c
 8010b88:	080147a8 	.word	0x080147a8
 8010b8c:	080147d0 	.word	0x080147d0
 8010b90:	20004432 	.word	0x20004432
 8010b94:	08014bac 	.word	0x08014bac

08010b98 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010b98:	b480      	push	{r7}
 8010b9a:	b085      	sub	sp, #20
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
 8010ba0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bac:	d002      	beq.n	8010bb4 <ip4_addr_isbroadcast_u32+0x1c>
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d101      	bne.n	8010bb8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010bb4:	2301      	movs	r3, #1
 8010bb6:	e02a      	b.n	8010c0e <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010bbe:	f003 0302 	and.w	r3, r3, #2
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d101      	bne.n	8010bca <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	e021      	b.n	8010c0e <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010bca:	683b      	ldr	r3, [r7, #0]
 8010bcc:	3304      	adds	r3, #4
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	687a      	ldr	r2, [r7, #4]
 8010bd2:	429a      	cmp	r2, r3
 8010bd4:	d101      	bne.n	8010bda <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	e019      	b.n	8010c0e <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010bda:	68fa      	ldr	r2, [r7, #12]
 8010bdc:	683b      	ldr	r3, [r7, #0]
 8010bde:	3304      	adds	r3, #4
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	405a      	eors	r2, r3
 8010be4:	683b      	ldr	r3, [r7, #0]
 8010be6:	3308      	adds	r3, #8
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	4013      	ands	r3, r2
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d10d      	bne.n	8010c0c <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	3308      	adds	r3, #8
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	43da      	mvns	r2, r3
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8010bfc:	683b      	ldr	r3, [r7, #0]
 8010bfe:	3308      	adds	r3, #8
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010c04:	429a      	cmp	r2, r3
 8010c06:	d101      	bne.n	8010c0c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010c08:	2301      	movs	r3, #1
 8010c0a:	e000      	b.n	8010c0e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8010c0c:	2300      	movs	r3, #0
  }
}
 8010c0e:	4618      	mov	r0, r3
 8010c10:	3714      	adds	r7, #20
 8010c12:	46bd      	mov	sp, r7
 8010c14:	bc80      	pop	{r7}
 8010c16:	4770      	bx	lr

08010c18 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b084      	sub	sp, #16
 8010c1c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8010c1e:	2300      	movs	r3, #0
 8010c20:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8010c22:	4b12      	ldr	r3, [pc, #72]	; (8010c6c <ip_reass_tmr+0x54>)
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8010c28:	e018      	b.n	8010c5c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	7fdb      	ldrb	r3, [r3, #31]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d00b      	beq.n	8010c4a <ip_reass_tmr+0x32>
      r->timer--;
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	7fdb      	ldrb	r3, [r3, #31]
 8010c36:	3b01      	subs	r3, #1
 8010c38:	b2da      	uxtb	r2, r3
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	60fb      	str	r3, [r7, #12]
 8010c48:	e008      	b.n	8010c5c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8010c54:	68b9      	ldr	r1, [r7, #8]
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f000 f80a 	bl	8010c70 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d1e3      	bne.n	8010c2a <ip_reass_tmr+0x12>
     }
   }
}
 8010c62:	bf00      	nop
 8010c64:	bf00      	nop
 8010c66:	3710      	adds	r7, #16
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	bd80      	pop	{r7, pc}
 8010c6c:	20004434 	.word	0x20004434

08010c70 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b088      	sub	sp, #32
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
 8010c78:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8010c7e:	683a      	ldr	r2, [r7, #0]
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	429a      	cmp	r2, r3
 8010c84:	d105      	bne.n	8010c92 <ip_reass_free_complete_datagram+0x22>
 8010c86:	4b45      	ldr	r3, [pc, #276]	; (8010d9c <ip_reass_free_complete_datagram+0x12c>)
 8010c88:	22ab      	movs	r2, #171	; 0xab
 8010c8a:	4945      	ldr	r1, [pc, #276]	; (8010da0 <ip_reass_free_complete_datagram+0x130>)
 8010c8c:	4845      	ldr	r0, [pc, #276]	; (8010da4 <ip_reass_free_complete_datagram+0x134>)
 8010c8e:	f001 f939 	bl	8011f04 <iprintf>
  if (prev != NULL) {
 8010c92:	683b      	ldr	r3, [r7, #0]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d00a      	beq.n	8010cae <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8010c98:	683b      	ldr	r3, [r7, #0]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	687a      	ldr	r2, [r7, #4]
 8010c9e:	429a      	cmp	r2, r3
 8010ca0:	d005      	beq.n	8010cae <ip_reass_free_complete_datagram+0x3e>
 8010ca2:	4b3e      	ldr	r3, [pc, #248]	; (8010d9c <ip_reass_free_complete_datagram+0x12c>)
 8010ca4:	22ad      	movs	r2, #173	; 0xad
 8010ca6:	4940      	ldr	r1, [pc, #256]	; (8010da8 <ip_reass_free_complete_datagram+0x138>)
 8010ca8:	483e      	ldr	r0, [pc, #248]	; (8010da4 <ip_reass_free_complete_datagram+0x134>)
 8010caa:	f001 f92b 	bl	8011f04 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	685b      	ldr	r3, [r3, #4]
 8010cb2:	685b      	ldr	r3, [r3, #4]
 8010cb4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8010cb6:	697b      	ldr	r3, [r7, #20]
 8010cb8:	889b      	ldrh	r3, [r3, #4]
 8010cba:	b29b      	uxth	r3, r3
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d12a      	bne.n	8010d16 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	685b      	ldr	r3, [r3, #4]
 8010cc4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8010cc6:	697b      	ldr	r3, [r7, #20]
 8010cc8:	681a      	ldr	r2, [r3, #0]
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8010cce:	69bb      	ldr	r3, [r7, #24]
 8010cd0:	6858      	ldr	r0, [r3, #4]
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	3308      	adds	r3, #8
 8010cd6:	2214      	movs	r2, #20
 8010cd8:	4619      	mov	r1, r3
 8010cda:	f001 f8a2 	bl	8011e22 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8010cde:	2101      	movs	r1, #1
 8010ce0:	69b8      	ldr	r0, [r7, #24]
 8010ce2:	f7ff fc65 	bl	80105b0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8010ce6:	69b8      	ldr	r0, [r7, #24]
 8010ce8:	f7f8 fd80 	bl	80097ec <pbuf_clen>
 8010cec:	4603      	mov	r3, r0
 8010cee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010cf0:	8bfa      	ldrh	r2, [r7, #30]
 8010cf2:	8a7b      	ldrh	r3, [r7, #18]
 8010cf4:	4413      	add	r3, r2
 8010cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010cfa:	db05      	blt.n	8010d08 <ip_reass_free_complete_datagram+0x98>
 8010cfc:	4b27      	ldr	r3, [pc, #156]	; (8010d9c <ip_reass_free_complete_datagram+0x12c>)
 8010cfe:	22bc      	movs	r2, #188	; 0xbc
 8010d00:	492a      	ldr	r1, [pc, #168]	; (8010dac <ip_reass_free_complete_datagram+0x13c>)
 8010d02:	4828      	ldr	r0, [pc, #160]	; (8010da4 <ip_reass_free_complete_datagram+0x134>)
 8010d04:	f001 f8fe 	bl	8011f04 <iprintf>
    pbufs_freed += clen;
 8010d08:	8bfa      	ldrh	r2, [r7, #30]
 8010d0a:	8a7b      	ldrh	r3, [r7, #18]
 8010d0c:	4413      	add	r3, r2
 8010d0e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8010d10:	69b8      	ldr	r0, [r7, #24]
 8010d12:	f7f8 fcd1 	bl	80096b8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	685b      	ldr	r3, [r3, #4]
 8010d1a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8010d1c:	e01f      	b.n	8010d5e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8010d1e:	69bb      	ldr	r3, [r7, #24]
 8010d20:	685b      	ldr	r3, [r3, #4]
 8010d22:	617b      	str	r3, [r7, #20]
    pcur = p;
 8010d24:	69bb      	ldr	r3, [r7, #24]
 8010d26:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8010d28:	697b      	ldr	r3, [r7, #20]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8010d2e:	68f8      	ldr	r0, [r7, #12]
 8010d30:	f7f8 fd5c 	bl	80097ec <pbuf_clen>
 8010d34:	4603      	mov	r3, r0
 8010d36:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010d38:	8bfa      	ldrh	r2, [r7, #30]
 8010d3a:	8a7b      	ldrh	r3, [r7, #18]
 8010d3c:	4413      	add	r3, r2
 8010d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010d42:	db05      	blt.n	8010d50 <ip_reass_free_complete_datagram+0xe0>
 8010d44:	4b15      	ldr	r3, [pc, #84]	; (8010d9c <ip_reass_free_complete_datagram+0x12c>)
 8010d46:	22cc      	movs	r2, #204	; 0xcc
 8010d48:	4918      	ldr	r1, [pc, #96]	; (8010dac <ip_reass_free_complete_datagram+0x13c>)
 8010d4a:	4816      	ldr	r0, [pc, #88]	; (8010da4 <ip_reass_free_complete_datagram+0x134>)
 8010d4c:	f001 f8da 	bl	8011f04 <iprintf>
    pbufs_freed += clen;
 8010d50:	8bfa      	ldrh	r2, [r7, #30]
 8010d52:	8a7b      	ldrh	r3, [r7, #18]
 8010d54:	4413      	add	r3, r2
 8010d56:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8010d58:	68f8      	ldr	r0, [r7, #12]
 8010d5a:	f7f8 fcad 	bl	80096b8 <pbuf_free>
  while (p != NULL) {
 8010d5e:	69bb      	ldr	r3, [r7, #24]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d1dc      	bne.n	8010d1e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8010d64:	6839      	ldr	r1, [r7, #0]
 8010d66:	6878      	ldr	r0, [r7, #4]
 8010d68:	f000 f8c2 	bl	8010ef0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8010d6c:	4b10      	ldr	r3, [pc, #64]	; (8010db0 <ip_reass_free_complete_datagram+0x140>)
 8010d6e:	881b      	ldrh	r3, [r3, #0]
 8010d70:	8bfa      	ldrh	r2, [r7, #30]
 8010d72:	429a      	cmp	r2, r3
 8010d74:	d905      	bls.n	8010d82 <ip_reass_free_complete_datagram+0x112>
 8010d76:	4b09      	ldr	r3, [pc, #36]	; (8010d9c <ip_reass_free_complete_datagram+0x12c>)
 8010d78:	22d2      	movs	r2, #210	; 0xd2
 8010d7a:	490e      	ldr	r1, [pc, #56]	; (8010db4 <ip_reass_free_complete_datagram+0x144>)
 8010d7c:	4809      	ldr	r0, [pc, #36]	; (8010da4 <ip_reass_free_complete_datagram+0x134>)
 8010d7e:	f001 f8c1 	bl	8011f04 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8010d82:	4b0b      	ldr	r3, [pc, #44]	; (8010db0 <ip_reass_free_complete_datagram+0x140>)
 8010d84:	881a      	ldrh	r2, [r3, #0]
 8010d86:	8bfb      	ldrh	r3, [r7, #30]
 8010d88:	1ad3      	subs	r3, r2, r3
 8010d8a:	b29a      	uxth	r2, r3
 8010d8c:	4b08      	ldr	r3, [pc, #32]	; (8010db0 <ip_reass_free_complete_datagram+0x140>)
 8010d8e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8010d90:	8bfb      	ldrh	r3, [r7, #30]
}
 8010d92:	4618      	mov	r0, r3
 8010d94:	3720      	adds	r7, #32
 8010d96:	46bd      	mov	sp, r7
 8010d98:	bd80      	pop	{r7, pc}
 8010d9a:	bf00      	nop
 8010d9c:	08014800 	.word	0x08014800
 8010da0:	0801483c 	.word	0x0801483c
 8010da4:	08014848 	.word	0x08014848
 8010da8:	08014870 	.word	0x08014870
 8010dac:	08014884 	.word	0x08014884
 8010db0:	20004438 	.word	0x20004438
 8010db4:	080148a4 	.word	0x080148a4

08010db8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b08a      	sub	sp, #40	; 0x28
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
 8010dc0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8010dca:	2300      	movs	r3, #0
 8010dcc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8010dce:	2300      	movs	r3, #0
 8010dd0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8010dd6:	4b28      	ldr	r3, [pc, #160]	; (8010e78 <ip_reass_remove_oldest_datagram+0xc0>)
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010ddc:	e030      	b.n	8010e40 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8010dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de0:	695a      	ldr	r2, [r3, #20]
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	68db      	ldr	r3, [r3, #12]
 8010de6:	429a      	cmp	r2, r3
 8010de8:	d10c      	bne.n	8010e04 <ip_reass_remove_oldest_datagram+0x4c>
 8010dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dec:	699a      	ldr	r2, [r3, #24]
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	691b      	ldr	r3, [r3, #16]
 8010df2:	429a      	cmp	r2, r3
 8010df4:	d106      	bne.n	8010e04 <ip_reass_remove_oldest_datagram+0x4c>
 8010df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df8:	899a      	ldrh	r2, [r3, #12]
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	889b      	ldrh	r3, [r3, #4]
 8010dfe:	b29b      	uxth	r3, r3
 8010e00:	429a      	cmp	r2, r3
 8010e02:	d014      	beq.n	8010e2e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010e04:	693b      	ldr	r3, [r7, #16]
 8010e06:	3301      	adds	r3, #1
 8010e08:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8010e0a:	6a3b      	ldr	r3, [r7, #32]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d104      	bne.n	8010e1a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8010e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e12:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010e14:	69fb      	ldr	r3, [r7, #28]
 8010e16:	61bb      	str	r3, [r7, #24]
 8010e18:	e009      	b.n	8010e2e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8010e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e1c:	7fda      	ldrb	r2, [r3, #31]
 8010e1e:	6a3b      	ldr	r3, [r7, #32]
 8010e20:	7fdb      	ldrb	r3, [r3, #31]
 8010e22:	429a      	cmp	r2, r3
 8010e24:	d803      	bhi.n	8010e2e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8010e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e28:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010e2a:	69fb      	ldr	r3, [r7, #28]
 8010e2c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8010e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d001      	beq.n	8010e3a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8010e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e38:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8010e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d1cb      	bne.n	8010dde <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8010e46:	6a3b      	ldr	r3, [r7, #32]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d008      	beq.n	8010e5e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8010e4c:	69b9      	ldr	r1, [r7, #24]
 8010e4e:	6a38      	ldr	r0, [r7, #32]
 8010e50:	f7ff ff0e 	bl	8010c70 <ip_reass_free_complete_datagram>
 8010e54:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8010e56:	697a      	ldr	r2, [r7, #20]
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	4413      	add	r3, r2
 8010e5c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8010e5e:	697a      	ldr	r2, [r7, #20]
 8010e60:	683b      	ldr	r3, [r7, #0]
 8010e62:	429a      	cmp	r2, r3
 8010e64:	da02      	bge.n	8010e6c <ip_reass_remove_oldest_datagram+0xb4>
 8010e66:	693b      	ldr	r3, [r7, #16]
 8010e68:	2b01      	cmp	r3, #1
 8010e6a:	dcac      	bgt.n	8010dc6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8010e6c:	697b      	ldr	r3, [r7, #20]
}
 8010e6e:	4618      	mov	r0, r3
 8010e70:	3728      	adds	r7, #40	; 0x28
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd80      	pop	{r7, pc}
 8010e76:	bf00      	nop
 8010e78:	20004434 	.word	0x20004434

08010e7c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b084      	sub	sp, #16
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
 8010e84:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010e86:	2004      	movs	r0, #4
 8010e88:	f7f7 fe10 	bl	8008aac <memp_malloc>
 8010e8c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d110      	bne.n	8010eb6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010e94:	6839      	ldr	r1, [r7, #0]
 8010e96:	6878      	ldr	r0, [r7, #4]
 8010e98:	f7ff ff8e 	bl	8010db8 <ip_reass_remove_oldest_datagram>
 8010e9c:	4602      	mov	r2, r0
 8010e9e:	683b      	ldr	r3, [r7, #0]
 8010ea0:	4293      	cmp	r3, r2
 8010ea2:	dc03      	bgt.n	8010eac <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010ea4:	2004      	movs	r0, #4
 8010ea6:	f7f7 fe01 	bl	8008aac <memp_malloc>
 8010eaa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d101      	bne.n	8010eb6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	e016      	b.n	8010ee4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010eb6:	2220      	movs	r2, #32
 8010eb8:	2100      	movs	r1, #0
 8010eba:	68f8      	ldr	r0, [r7, #12]
 8010ebc:	f000 ffbf 	bl	8011e3e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	2203      	movs	r2, #3
 8010ec4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8010ec6:	4b09      	ldr	r3, [pc, #36]	; (8010eec <ip_reass_enqueue_new_datagram+0x70>)
 8010ec8:	681a      	ldr	r2, [r3, #0]
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8010ece:	4a07      	ldr	r2, [pc, #28]	; (8010eec <ip_reass_enqueue_new_datagram+0x70>)
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	3308      	adds	r3, #8
 8010ed8:	2214      	movs	r2, #20
 8010eda:	6879      	ldr	r1, [r7, #4]
 8010edc:	4618      	mov	r0, r3
 8010ede:	f000 ffa0 	bl	8011e22 <memcpy>
  return ipr;
 8010ee2:	68fb      	ldr	r3, [r7, #12]
}
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	3710      	adds	r7, #16
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	bd80      	pop	{r7, pc}
 8010eec:	20004434 	.word	0x20004434

08010ef0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b082      	sub	sp, #8
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
 8010ef8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8010efa:	4b10      	ldr	r3, [pc, #64]	; (8010f3c <ip_reass_dequeue_datagram+0x4c>)
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	687a      	ldr	r2, [r7, #4]
 8010f00:	429a      	cmp	r2, r3
 8010f02:	d104      	bne.n	8010f0e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	4a0c      	ldr	r2, [pc, #48]	; (8010f3c <ip_reass_dequeue_datagram+0x4c>)
 8010f0a:	6013      	str	r3, [r2, #0]
 8010f0c:	e00d      	b.n	8010f2a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d106      	bne.n	8010f22 <ip_reass_dequeue_datagram+0x32>
 8010f14:	4b0a      	ldr	r3, [pc, #40]	; (8010f40 <ip_reass_dequeue_datagram+0x50>)
 8010f16:	f240 1245 	movw	r2, #325	; 0x145
 8010f1a:	490a      	ldr	r1, [pc, #40]	; (8010f44 <ip_reass_dequeue_datagram+0x54>)
 8010f1c:	480a      	ldr	r0, [pc, #40]	; (8010f48 <ip_reass_dequeue_datagram+0x58>)
 8010f1e:	f000 fff1 	bl	8011f04 <iprintf>
    prev->next = ipr->next;
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	681a      	ldr	r2, [r3, #0]
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8010f2a:	6879      	ldr	r1, [r7, #4]
 8010f2c:	2004      	movs	r0, #4
 8010f2e:	f7f7 fe0f 	bl	8008b50 <memp_free>
}
 8010f32:	bf00      	nop
 8010f34:	3708      	adds	r7, #8
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd80      	pop	{r7, pc}
 8010f3a:	bf00      	nop
 8010f3c:	20004434 	.word	0x20004434
 8010f40:	08014800 	.word	0x08014800
 8010f44:	080148c0 	.word	0x080148c0
 8010f48:	08014848 	.word	0x08014848

08010f4c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b08c      	sub	sp, #48	; 0x30
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	60f8      	str	r0, [r7, #12]
 8010f54:	60b9      	str	r1, [r7, #8]
 8010f56:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8010f58:	2300      	movs	r3, #0
 8010f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8010f5c:	2301      	movs	r3, #1
 8010f5e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8010f60:	68bb      	ldr	r3, [r7, #8]
 8010f62:	685b      	ldr	r3, [r3, #4]
 8010f64:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8010f66:	69fb      	ldr	r3, [r7, #28]
 8010f68:	885b      	ldrh	r3, [r3, #2]
 8010f6a:	b29b      	uxth	r3, r3
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f7f7 f9b1 	bl	80082d4 <lwip_htons>
 8010f72:	4603      	mov	r3, r0
 8010f74:	461a      	mov	r2, r3
 8010f76:	69fb      	ldr	r3, [r7, #28]
 8010f78:	781b      	ldrb	r3, [r3, #0]
 8010f7a:	b29b      	uxth	r3, r3
 8010f7c:	f003 030f 	and.w	r3, r3, #15
 8010f80:	b29b      	uxth	r3, r3
 8010f82:	009b      	lsls	r3, r3, #2
 8010f84:	b29b      	uxth	r3, r3
 8010f86:	1ad3      	subs	r3, r2, r3
 8010f88:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8010f8a:	69fb      	ldr	r3, [r7, #28]
 8010f8c:	88db      	ldrh	r3, [r3, #6]
 8010f8e:	b29b      	uxth	r3, r3
 8010f90:	4618      	mov	r0, r3
 8010f92:	f7f7 f99f 	bl	80082d4 <lwip_htons>
 8010f96:	4603      	mov	r3, r0
 8010f98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010f9c:	b29b      	uxth	r3, r3
 8010f9e:	00db      	lsls	r3, r3, #3
 8010fa0:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8010fa2:	68bb      	ldr	r3, [r7, #8]
 8010fa4:	685b      	ldr	r3, [r3, #4]
 8010fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8010fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010faa:	2200      	movs	r2, #0
 8010fac:	701a      	strb	r2, [r3, #0]
 8010fae:	2200      	movs	r2, #0
 8010fb0:	705a      	strb	r2, [r3, #1]
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	709a      	strb	r2, [r3, #2]
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8010fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fbc:	8b3a      	ldrh	r2, [r7, #24]
 8010fbe:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8010fc0:	8b3a      	ldrh	r2, [r7, #24]
 8010fc2:	8b7b      	ldrh	r3, [r7, #26]
 8010fc4:	4413      	add	r3, r2
 8010fc6:	b29a      	uxth	r2, r3
 8010fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fca:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	685b      	ldr	r3, [r3, #4]
 8010fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8010fd2:	e061      	b.n	8011098 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8010fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fd6:	685b      	ldr	r3, [r3, #4]
 8010fd8:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8010fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fdc:	889b      	ldrh	r3, [r3, #4]
 8010fde:	b29a      	uxth	r2, r3
 8010fe0:	697b      	ldr	r3, [r7, #20]
 8010fe2:	889b      	ldrh	r3, [r3, #4]
 8010fe4:	b29b      	uxth	r3, r3
 8010fe6:	429a      	cmp	r2, r3
 8010fe8:	d232      	bcs.n	8011050 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8010fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010fee:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8010ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d01f      	beq.n	8011036 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8010ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ff8:	889b      	ldrh	r3, [r3, #4]
 8010ffa:	b29a      	uxth	r2, r3
 8010ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ffe:	88db      	ldrh	r3, [r3, #6]
 8011000:	b29b      	uxth	r3, r3
 8011002:	429a      	cmp	r2, r3
 8011004:	f0c0 80e3 	bcc.w	80111ce <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8011008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801100a:	88db      	ldrh	r3, [r3, #6]
 801100c:	b29a      	uxth	r2, r3
 801100e:	697b      	ldr	r3, [r7, #20]
 8011010:	889b      	ldrh	r3, [r3, #4]
 8011012:	b29b      	uxth	r3, r3
 8011014:	429a      	cmp	r2, r3
 8011016:	f200 80da 	bhi.w	80111ce <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801101a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801101c:	68ba      	ldr	r2, [r7, #8]
 801101e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8011020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011022:	88db      	ldrh	r3, [r3, #6]
 8011024:	b29a      	uxth	r2, r3
 8011026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011028:	889b      	ldrh	r3, [r3, #4]
 801102a:	b29b      	uxth	r3, r3
 801102c:	429a      	cmp	r2, r3
 801102e:	d037      	beq.n	80110a0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011030:	2300      	movs	r3, #0
 8011032:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8011034:	e034      	b.n	80110a0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 8011036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011038:	88db      	ldrh	r3, [r3, #6]
 801103a:	b29a      	uxth	r2, r3
 801103c:	697b      	ldr	r3, [r7, #20]
 801103e:	889b      	ldrh	r3, [r3, #4]
 8011040:	b29b      	uxth	r3, r3
 8011042:	429a      	cmp	r2, r3
 8011044:	f200 80c5 	bhi.w	80111d2 <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	68ba      	ldr	r2, [r7, #8]
 801104c:	605a      	str	r2, [r3, #4]
      break;
 801104e:	e027      	b.n	80110a0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8011050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011052:	889b      	ldrh	r3, [r3, #4]
 8011054:	b29a      	uxth	r2, r3
 8011056:	697b      	ldr	r3, [r7, #20]
 8011058:	889b      	ldrh	r3, [r3, #4]
 801105a:	b29b      	uxth	r3, r3
 801105c:	429a      	cmp	r2, r3
 801105e:	f000 80ba 	beq.w	80111d6 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8011062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011064:	889b      	ldrh	r3, [r3, #4]
 8011066:	b29a      	uxth	r2, r3
 8011068:	697b      	ldr	r3, [r7, #20]
 801106a:	88db      	ldrh	r3, [r3, #6]
 801106c:	b29b      	uxth	r3, r3
 801106e:	429a      	cmp	r2, r3
 8011070:	f0c0 80b3 	bcc.w	80111da <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011076:	2b00      	cmp	r3, #0
 8011078:	d009      	beq.n	801108e <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 801107a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801107c:	88db      	ldrh	r3, [r3, #6]
 801107e:	b29a      	uxth	r2, r3
 8011080:	697b      	ldr	r3, [r7, #20]
 8011082:	889b      	ldrh	r3, [r3, #4]
 8011084:	b29b      	uxth	r3, r3
 8011086:	429a      	cmp	r2, r3
 8011088:	d001      	beq.n	801108e <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801108a:	2300      	movs	r3, #0
 801108c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801108e:	697b      	ldr	r3, [r7, #20]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8011094:	697b      	ldr	r3, [r7, #20]
 8011096:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8011098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801109a:	2b00      	cmp	r3, #0
 801109c:	d19a      	bne.n	8010fd4 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 801109e:	e000      	b.n	80110a2 <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 80110a0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80110a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d12d      	bne.n	8011104 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 80110a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d01c      	beq.n	80110e8 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80110ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110b0:	88db      	ldrh	r3, [r3, #6]
 80110b2:	b29a      	uxth	r2, r3
 80110b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110b6:	889b      	ldrh	r3, [r3, #4]
 80110b8:	b29b      	uxth	r3, r3
 80110ba:	429a      	cmp	r2, r3
 80110bc:	d906      	bls.n	80110cc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 80110be:	4b51      	ldr	r3, [pc, #324]	; (8011204 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80110c0:	f240 12ab 	movw	r2, #427	; 0x1ab
 80110c4:	4950      	ldr	r1, [pc, #320]	; (8011208 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80110c6:	4851      	ldr	r0, [pc, #324]	; (801120c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80110c8:	f000 ff1c 	bl	8011f04 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80110cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ce:	68ba      	ldr	r2, [r7, #8]
 80110d0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80110d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110d4:	88db      	ldrh	r3, [r3, #6]
 80110d6:	b29a      	uxth	r2, r3
 80110d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110da:	889b      	ldrh	r3, [r3, #4]
 80110dc:	b29b      	uxth	r3, r3
 80110de:	429a      	cmp	r2, r3
 80110e0:	d010      	beq.n	8011104 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 80110e2:	2300      	movs	r3, #0
 80110e4:	623b      	str	r3, [r7, #32]
 80110e6:	e00d      	b.n	8011104 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	685b      	ldr	r3, [r3, #4]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d006      	beq.n	80110fe <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 80110f0:	4b44      	ldr	r3, [pc, #272]	; (8011204 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80110f2:	f240 12b3 	movw	r2, #435	; 0x1b3
 80110f6:	4946      	ldr	r1, [pc, #280]	; (8011210 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80110f8:	4844      	ldr	r0, [pc, #272]	; (801120c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80110fa:	f000 ff03 	bl	8011f04 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	68ba      	ldr	r2, [r7, #8]
 8011102:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d105      	bne.n	8011116 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	7f9b      	ldrb	r3, [r3, #30]
 801110e:	f003 0301 	and.w	r3, r3, #1
 8011112:	2b00      	cmp	r3, #0
 8011114:	d059      	beq.n	80111ca <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 8011116:	6a3b      	ldr	r3, [r7, #32]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d04f      	beq.n	80111bc <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	685b      	ldr	r3, [r3, #4]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d006      	beq.n	8011132 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	685b      	ldr	r3, [r3, #4]
 8011128:	685b      	ldr	r3, [r3, #4]
 801112a:	889b      	ldrh	r3, [r3, #4]
 801112c:	b29b      	uxth	r3, r3
 801112e:	2b00      	cmp	r3, #0
 8011130:	d002      	beq.n	8011138 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8011132:	2300      	movs	r3, #0
 8011134:	623b      	str	r3, [r7, #32]
 8011136:	e041      	b.n	80111bc <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8011138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801113a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801113c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011142:	e012      	b.n	801116a <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8011144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011146:	685b      	ldr	r3, [r3, #4]
 8011148:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801114a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801114c:	88db      	ldrh	r3, [r3, #6]
 801114e:	b29a      	uxth	r2, r3
 8011150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011152:	889b      	ldrh	r3, [r3, #4]
 8011154:	b29b      	uxth	r3, r3
 8011156:	429a      	cmp	r2, r3
 8011158:	d002      	beq.n	8011160 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 801115a:	2300      	movs	r3, #0
 801115c:	623b      	str	r3, [r7, #32]
            break;
 801115e:	e007      	b.n	8011170 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8011160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011162:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8011164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801116c:	2b00      	cmp	r3, #0
 801116e:	d1e9      	bne.n	8011144 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8011170:	6a3b      	ldr	r3, [r7, #32]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d022      	beq.n	80111bc <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	685b      	ldr	r3, [r3, #4]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d106      	bne.n	801118c <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 801117e:	4b21      	ldr	r3, [pc, #132]	; (8011204 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8011180:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8011184:	4923      	ldr	r1, [pc, #140]	; (8011214 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011186:	4821      	ldr	r0, [pc, #132]	; (801120c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011188:	f000 febc 	bl	8011f04 <iprintf>
          LWIP_ASSERT("sanity check",
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	685b      	ldr	r3, [r3, #4]
 8011190:	685b      	ldr	r3, [r3, #4]
 8011192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011194:	429a      	cmp	r2, r3
 8011196:	d106      	bne.n	80111a6 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8011198:	4b1a      	ldr	r3, [pc, #104]	; (8011204 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801119a:	f240 12d5 	movw	r2, #469	; 0x1d5
 801119e:	491d      	ldr	r1, [pc, #116]	; (8011214 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80111a0:	481a      	ldr	r0, [pc, #104]	; (801120c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80111a2:	f000 feaf 	bl	8011f04 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80111a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d006      	beq.n	80111bc <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 80111ae:	4b15      	ldr	r3, [pc, #84]	; (8011204 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80111b0:	f240 12d7 	movw	r2, #471	; 0x1d7
 80111b4:	4918      	ldr	r1, [pc, #96]	; (8011218 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80111b6:	4815      	ldr	r0, [pc, #84]	; (801120c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80111b8:	f000 fea4 	bl	8011f04 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80111bc:	6a3b      	ldr	r3, [r7, #32]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	bf14      	ite	ne
 80111c2:	2301      	movne	r3, #1
 80111c4:	2300      	moveq	r3, #0
 80111c6:	b2db      	uxtb	r3, r3
 80111c8:	e018      	b.n	80111fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80111ca:	2300      	movs	r3, #0
 80111cc:	e016      	b.n	80111fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
          goto freepbuf;
 80111ce:	bf00      	nop
 80111d0:	e004      	b.n	80111dc <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 80111d2:	bf00      	nop
 80111d4:	e002      	b.n	80111dc <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 80111d6:	bf00      	nop
 80111d8:	e000      	b.n	80111dc <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 80111da:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80111dc:	68b8      	ldr	r0, [r7, #8]
 80111de:	f7f8 fb05 	bl	80097ec <pbuf_clen>
 80111e2:	4603      	mov	r3, r0
 80111e4:	461a      	mov	r2, r3
 80111e6:	4b0d      	ldr	r3, [pc, #52]	; (801121c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80111e8:	881b      	ldrh	r3, [r3, #0]
 80111ea:	1a9b      	subs	r3, r3, r2
 80111ec:	b29a      	uxth	r2, r3
 80111ee:	4b0b      	ldr	r3, [pc, #44]	; (801121c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80111f0:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 80111f2:	68b8      	ldr	r0, [r7, #8]
 80111f4:	f7f8 fa60 	bl	80096b8 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 80111f8:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 80111fc:	4618      	mov	r0, r3
 80111fe:	3730      	adds	r7, #48	; 0x30
 8011200:	46bd      	mov	sp, r7
 8011202:	bd80      	pop	{r7, pc}
 8011204:	08014800 	.word	0x08014800
 8011208:	080148dc 	.word	0x080148dc
 801120c:	08014848 	.word	0x08014848
 8011210:	080148fc 	.word	0x080148fc
 8011214:	08014934 	.word	0x08014934
 8011218:	08014944 	.word	0x08014944
 801121c:	20004438 	.word	0x20004438

08011220 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b08e      	sub	sp, #56	; 0x38
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	685b      	ldr	r3, [r3, #4]
 801122c:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 801122e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011230:	781b      	ldrb	r3, [r3, #0]
 8011232:	f003 030f 	and.w	r3, r3, #15
 8011236:	009b      	lsls	r3, r3, #2
 8011238:	2b14      	cmp	r3, #20
 801123a:	f040 8131 	bne.w	80114a0 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801123e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011240:	88db      	ldrh	r3, [r3, #6]
 8011242:	b29b      	uxth	r3, r3
 8011244:	4618      	mov	r0, r3
 8011246:	f7f7 f845 	bl	80082d4 <lwip_htons>
 801124a:	4603      	mov	r3, r0
 801124c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011250:	b29b      	uxth	r3, r3
 8011252:	00db      	lsls	r3, r3, #3
 8011254:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8011256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011258:	885b      	ldrh	r3, [r3, #2]
 801125a:	b29b      	uxth	r3, r3
 801125c:	4618      	mov	r0, r3
 801125e:	f7f7 f839 	bl	80082d4 <lwip_htons>
 8011262:	4603      	mov	r3, r0
 8011264:	461a      	mov	r2, r3
 8011266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011268:	781b      	ldrb	r3, [r3, #0]
 801126a:	b29b      	uxth	r3, r3
 801126c:	f003 030f 	and.w	r3, r3, #15
 8011270:	b29b      	uxth	r3, r3
 8011272:	009b      	lsls	r3, r3, #2
 8011274:	b29b      	uxth	r3, r3
 8011276:	1ad3      	subs	r3, r2, r3
 8011278:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801127a:	6878      	ldr	r0, [r7, #4]
 801127c:	f7f8 fab6 	bl	80097ec <pbuf_clen>
 8011280:	4603      	mov	r3, r0
 8011282:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8011284:	4b8e      	ldr	r3, [pc, #568]	; (80114c0 <ip4_reass+0x2a0>)
 8011286:	881b      	ldrh	r3, [r3, #0]
 8011288:	461a      	mov	r2, r3
 801128a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801128c:	4413      	add	r3, r2
 801128e:	2b0a      	cmp	r3, #10
 8011290:	dd10      	ble.n	80112b4 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011292:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011294:	4619      	mov	r1, r3
 8011296:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011298:	f7ff fd8e 	bl	8010db8 <ip_reass_remove_oldest_datagram>
 801129c:	4603      	mov	r3, r0
 801129e:	2b00      	cmp	r3, #0
 80112a0:	f000 8100 	beq.w	80114a4 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80112a4:	4b86      	ldr	r3, [pc, #536]	; (80114c0 <ip4_reass+0x2a0>)
 80112a6:	881b      	ldrh	r3, [r3, #0]
 80112a8:	461a      	mov	r2, r3
 80112aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80112ac:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80112ae:	2b0a      	cmp	r3, #10
 80112b0:	f300 80f8 	bgt.w	80114a4 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80112b4:	4b83      	ldr	r3, [pc, #524]	; (80114c4 <ip4_reass+0x2a4>)
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	633b      	str	r3, [r7, #48]	; 0x30
 80112ba:	e015      	b.n	80112e8 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80112bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112be:	695a      	ldr	r2, [r3, #20]
 80112c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112c2:	68db      	ldr	r3, [r3, #12]
 80112c4:	429a      	cmp	r2, r3
 80112c6:	d10c      	bne.n	80112e2 <ip4_reass+0xc2>
 80112c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ca:	699a      	ldr	r2, [r3, #24]
 80112cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ce:	691b      	ldr	r3, [r3, #16]
 80112d0:	429a      	cmp	r2, r3
 80112d2:	d106      	bne.n	80112e2 <ip4_reass+0xc2>
 80112d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112d6:	899a      	ldrh	r2, [r3, #12]
 80112d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112da:	889b      	ldrh	r3, [r3, #4]
 80112dc:	b29b      	uxth	r3, r3
 80112de:	429a      	cmp	r2, r3
 80112e0:	d006      	beq.n	80112f0 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80112e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	633b      	str	r3, [r7, #48]	; 0x30
 80112e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d1e6      	bne.n	80112bc <ip4_reass+0x9c>
 80112ee:	e000      	b.n	80112f2 <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80112f0:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80112f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d109      	bne.n	801130c <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80112f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80112fa:	4619      	mov	r1, r3
 80112fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80112fe:	f7ff fdbd 	bl	8010e7c <ip_reass_enqueue_new_datagram>
 8011302:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8011304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011306:	2b00      	cmp	r3, #0
 8011308:	d11c      	bne.n	8011344 <ip4_reass+0x124>
      goto nullreturn;
 801130a:	e0d0      	b.n	80114ae <ip4_reass+0x28e>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801130c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801130e:	88db      	ldrh	r3, [r3, #6]
 8011310:	b29b      	uxth	r3, r3
 8011312:	4618      	mov	r0, r3
 8011314:	f7f6 ffde 	bl	80082d4 <lwip_htons>
 8011318:	4603      	mov	r3, r0
 801131a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801131e:	2b00      	cmp	r3, #0
 8011320:	d110      	bne.n	8011344 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8011322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011324:	89db      	ldrh	r3, [r3, #14]
 8011326:	4618      	mov	r0, r3
 8011328:	f7f6 ffd4 	bl	80082d4 <lwip_htons>
 801132c:	4603      	mov	r3, r0
 801132e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011332:	2b00      	cmp	r3, #0
 8011334:	d006      	beq.n	8011344 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8011336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011338:	3308      	adds	r3, #8
 801133a:	2214      	movs	r2, #20
 801133c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801133e:	4618      	mov	r0, r3
 8011340:	f000 fd6f 	bl	8011e22 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8011344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011346:	88db      	ldrh	r3, [r3, #6]
 8011348:	b29b      	uxth	r3, r3
 801134a:	f003 0320 	and.w	r3, r3, #32
 801134e:	2b00      	cmp	r3, #0
 8011350:	bf0c      	ite	eq
 8011352:	2301      	moveq	r3, #1
 8011354:	2300      	movne	r3, #0
 8011356:	b2db      	uxtb	r3, r3
 8011358:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801135a:	69fb      	ldr	r3, [r7, #28]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d00e      	beq.n	801137e <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 8011360:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011362:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011364:	4413      	add	r3, r2
 8011366:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8011368:	8b7a      	ldrh	r2, [r7, #26]
 801136a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801136c:	429a      	cmp	r2, r3
 801136e:	f0c0 809b 	bcc.w	80114a8 <ip4_reass+0x288>
 8011372:	8b7b      	ldrh	r3, [r7, #26]
 8011374:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8011378:	4293      	cmp	r3, r2
 801137a:	f200 8095 	bhi.w	80114a8 <ip4_reass+0x288>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801137e:	69fa      	ldr	r2, [r7, #28]
 8011380:	6879      	ldr	r1, [r7, #4]
 8011382:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011384:	f7ff fde2 	bl	8010f4c <ip_reass_chain_frag_into_datagram_and_validate>
 8011388:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801138a:	697b      	ldr	r3, [r7, #20]
 801138c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011390:	f000 808c 	beq.w	80114ac <ip4_reass+0x28c>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8011394:	4b4a      	ldr	r3, [pc, #296]	; (80114c0 <ip4_reass+0x2a0>)
 8011396:	881a      	ldrh	r2, [r3, #0]
 8011398:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801139a:	4413      	add	r3, r2
 801139c:	b29a      	uxth	r2, r3
 801139e:	4b48      	ldr	r3, [pc, #288]	; (80114c0 <ip4_reass+0x2a0>)
 80113a0:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80113a2:	69fb      	ldr	r3, [r7, #28]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d00d      	beq.n	80113c4 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 80113a8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80113aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80113ac:	4413      	add	r3, r2
 80113ae:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80113b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113b2:	8a7a      	ldrh	r2, [r7, #18]
 80113b4:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80113b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113b8:	7f9b      	ldrb	r3, [r3, #30]
 80113ba:	f043 0301 	orr.w	r3, r3, #1
 80113be:	b2da      	uxtb	r2, r3
 80113c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113c2:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80113c4:	697b      	ldr	r3, [r7, #20]
 80113c6:	2b01      	cmp	r3, #1
 80113c8:	d168      	bne.n	801149c <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 80113ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113cc:	8b9b      	ldrh	r3, [r3, #28]
 80113ce:	3314      	adds	r3, #20
 80113d0:	b29a      	uxth	r2, r3
 80113d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113d4:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 80113d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113d8:	685b      	ldr	r3, [r3, #4]
 80113da:	685b      	ldr	r3, [r3, #4]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 80113e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113e2:	685b      	ldr	r3, [r3, #4]
 80113e4:	685b      	ldr	r3, [r3, #4]
 80113e6:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80113e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113ea:	3308      	adds	r3, #8
 80113ec:	2214      	movs	r2, #20
 80113ee:	4619      	mov	r1, r3
 80113f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80113f2:	f000 fd16 	bl	8011e22 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 80113f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113f8:	8b9b      	ldrh	r3, [r3, #28]
 80113fa:	4618      	mov	r0, r3
 80113fc:	f7f6 ff6a 	bl	80082d4 <lwip_htons>
 8011400:	4603      	mov	r3, r0
 8011402:	461a      	mov	r2, r3
 8011404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011406:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8011408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801140a:	2200      	movs	r2, #0
 801140c:	719a      	strb	r2, [r3, #6]
 801140e:	2200      	movs	r2, #0
 8011410:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8011412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011414:	2200      	movs	r2, #0
 8011416:	729a      	strb	r2, [r3, #10]
 8011418:	2200      	movs	r2, #0
 801141a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801141c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801141e:	685b      	ldr	r3, [r3, #4]
 8011420:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8011422:	e00e      	b.n	8011442 <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 8011424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011426:	685b      	ldr	r3, [r3, #4]
 8011428:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 801142a:	f06f 0113 	mvn.w	r1, #19
 801142e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011430:	f7f8 f91e 	bl	8009670 <pbuf_header>
      pbuf_cat(p, r);
 8011434:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011436:	6878      	ldr	r0, [r7, #4]
 8011438:	f7f8 fa16 	bl	8009868 <pbuf_cat>
      r = iprh->next_pbuf;
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8011442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011444:	2b00      	cmp	r3, #0
 8011446:	d1ed      	bne.n	8011424 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8011448:	4b1e      	ldr	r3, [pc, #120]	; (80114c4 <ip4_reass+0x2a4>)
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801144e:	429a      	cmp	r2, r3
 8011450:	d102      	bne.n	8011458 <ip4_reass+0x238>
      ipr_prev = NULL;
 8011452:	2300      	movs	r3, #0
 8011454:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011456:	e010      	b.n	801147a <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011458:	4b1a      	ldr	r3, [pc, #104]	; (80114c4 <ip4_reass+0x2a4>)
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801145e:	e007      	b.n	8011470 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 8011460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011466:	429a      	cmp	r2, r3
 8011468:	d006      	beq.n	8011478 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801146a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011472:	2b00      	cmp	r3, #0
 8011474:	d1f4      	bne.n	8011460 <ip4_reass+0x240>
 8011476:	e000      	b.n	801147a <ip4_reass+0x25a>
          break;
 8011478:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801147a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801147c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801147e:	f7ff fd37 	bl	8010ef0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 8011482:	6878      	ldr	r0, [r7, #4]
 8011484:	f7f8 f9b2 	bl	80097ec <pbuf_clen>
 8011488:	4603      	mov	r3, r0
 801148a:	461a      	mov	r2, r3
 801148c:	4b0c      	ldr	r3, [pc, #48]	; (80114c0 <ip4_reass+0x2a0>)
 801148e:	881b      	ldrh	r3, [r3, #0]
 8011490:	1a9b      	subs	r3, r3, r2
 8011492:	b29a      	uxth	r2, r3
 8011494:	4b0a      	ldr	r3, [pc, #40]	; (80114c0 <ip4_reass+0x2a0>)
 8011496:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	e00c      	b.n	80114b6 <ip4_reass+0x296>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801149c:	2300      	movs	r3, #0
 801149e:	e00a      	b.n	80114b6 <ip4_reass+0x296>
    goto nullreturn;
 80114a0:	bf00      	nop
 80114a2:	e004      	b.n	80114ae <ip4_reass+0x28e>
      goto nullreturn;
 80114a4:	bf00      	nop
 80114a6:	e002      	b.n	80114ae <ip4_reass+0x28e>
      goto nullreturn;
 80114a8:	bf00      	nop
 80114aa:	e000      	b.n	80114ae <ip4_reass+0x28e>
    goto nullreturn;
 80114ac:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80114ae:	6878      	ldr	r0, [r7, #4]
 80114b0:	f7f8 f902 	bl	80096b8 <pbuf_free>
  return NULL;
 80114b4:	2300      	movs	r3, #0
}
 80114b6:	4618      	mov	r0, r3
 80114b8:	3738      	adds	r7, #56	; 0x38
 80114ba:	46bd      	mov	sp, r7
 80114bc:	bd80      	pop	{r7, pc}
 80114be:	bf00      	nop
 80114c0:	20004438 	.word	0x20004438
 80114c4:	20004434 	.word	0x20004434

080114c8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 80114cc:	2005      	movs	r0, #5
 80114ce:	f7f7 faed 	bl	8008aac <memp_malloc>
 80114d2:	4603      	mov	r3, r0
}
 80114d4:	4618      	mov	r0, r3
 80114d6:	bd80      	pop	{r7, pc}

080114d8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b082      	sub	sp, #8
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d106      	bne.n	80114f4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80114e6:	4b07      	ldr	r3, [pc, #28]	; (8011504 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80114e8:	f240 22ae 	movw	r2, #686	; 0x2ae
 80114ec:	4906      	ldr	r1, [pc, #24]	; (8011508 <ip_frag_free_pbuf_custom_ref+0x30>)
 80114ee:	4807      	ldr	r0, [pc, #28]	; (801150c <ip_frag_free_pbuf_custom_ref+0x34>)
 80114f0:	f000 fd08 	bl	8011f04 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80114f4:	6879      	ldr	r1, [r7, #4]
 80114f6:	2005      	movs	r0, #5
 80114f8:	f7f7 fb2a 	bl	8008b50 <memp_free>
}
 80114fc:	bf00      	nop
 80114fe:	3708      	adds	r7, #8
 8011500:	46bd      	mov	sp, r7
 8011502:	bd80      	pop	{r7, pc}
 8011504:	08014800 	.word	0x08014800
 8011508:	08014968 	.word	0x08014968
 801150c:	08014848 	.word	0x08014848

08011510 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b084      	sub	sp, #16
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d106      	bne.n	8011530 <ipfrag_free_pbuf_custom+0x20>
 8011522:	4b11      	ldr	r3, [pc, #68]	; (8011568 <ipfrag_free_pbuf_custom+0x58>)
 8011524:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8011528:	4910      	ldr	r1, [pc, #64]	; (801156c <ipfrag_free_pbuf_custom+0x5c>)
 801152a:	4811      	ldr	r0, [pc, #68]	; (8011570 <ipfrag_free_pbuf_custom+0x60>)
 801152c:	f000 fcea 	bl	8011f04 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8011530:	68fa      	ldr	r2, [r7, #12]
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	429a      	cmp	r2, r3
 8011536:	d006      	beq.n	8011546 <ipfrag_free_pbuf_custom+0x36>
 8011538:	4b0b      	ldr	r3, [pc, #44]	; (8011568 <ipfrag_free_pbuf_custom+0x58>)
 801153a:	f240 22b9 	movw	r2, #697	; 0x2b9
 801153e:	490d      	ldr	r1, [pc, #52]	; (8011574 <ipfrag_free_pbuf_custom+0x64>)
 8011540:	480b      	ldr	r0, [pc, #44]	; (8011570 <ipfrag_free_pbuf_custom+0x60>)
 8011542:	f000 fcdf 	bl	8011f04 <iprintf>
  if (pcr->original != NULL) {
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	695b      	ldr	r3, [r3, #20]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d004      	beq.n	8011558 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	695b      	ldr	r3, [r3, #20]
 8011552:	4618      	mov	r0, r3
 8011554:	f7f8 f8b0 	bl	80096b8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8011558:	68f8      	ldr	r0, [r7, #12]
 801155a:	f7ff ffbd 	bl	80114d8 <ip_frag_free_pbuf_custom_ref>
}
 801155e:	bf00      	nop
 8011560:	3710      	adds	r7, #16
 8011562:	46bd      	mov	sp, r7
 8011564:	bd80      	pop	{r7, pc}
 8011566:	bf00      	nop
 8011568:	08014800 	.word	0x08014800
 801156c:	08014974 	.word	0x08014974
 8011570:	08014848 	.word	0x08014848
 8011574:	08014980 	.word	0x08014980

08011578 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011578:	b580      	push	{r7, lr}
 801157a:	b092      	sub	sp, #72	; 0x48
 801157c:	af02      	add	r7, sp, #8
 801157e:	60f8      	str	r0, [r7, #12]
 8011580:	60b9      	str	r1, [r7, #8]
 8011582:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8011584:	2300      	movs	r3, #0
 8011586:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8011588:	68bb      	ldr	r3, [r7, #8]
 801158a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801158c:	3b14      	subs	r3, #20
 801158e:	2b00      	cmp	r3, #0
 8011590:	da00      	bge.n	8011594 <ip4_frag+0x1c>
 8011592:	3307      	adds	r3, #7
 8011594:	10db      	asrs	r3, r3, #3
 8011596:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8011598:	2314      	movs	r3, #20
 801159a:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	685b      	ldr	r3, [r3, #4]
 80115a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 80115a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115a4:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80115a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a8:	781b      	ldrb	r3, [r3, #0]
 80115aa:	f003 030f 	and.w	r3, r3, #15
 80115ae:	009b      	lsls	r3, r3, #2
 80115b0:	2b14      	cmp	r3, #20
 80115b2:	d009      	beq.n	80115c8 <ip4_frag+0x50>
 80115b4:	4b7a      	ldr	r3, [pc, #488]	; (80117a0 <ip4_frag+0x228>)
 80115b6:	f240 22e1 	movw	r2, #737	; 0x2e1
 80115ba:	497a      	ldr	r1, [pc, #488]	; (80117a4 <ip4_frag+0x22c>)
 80115bc:	487a      	ldr	r0, [pc, #488]	; (80117a8 <ip4_frag+0x230>)
 80115be:	f000 fca1 	bl	8011f04 <iprintf>
 80115c2:	f06f 0305 	mvn.w	r3, #5
 80115c6:	e0e6      	b.n	8011796 <ip4_frag+0x21e>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80115c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ca:	88db      	ldrh	r3, [r3, #6]
 80115cc:	b29b      	uxth	r3, r3
 80115ce:	4618      	mov	r0, r3
 80115d0:	f7f6 fe80 	bl	80082d4 <lwip_htons>
 80115d4:	4603      	mov	r3, r0
 80115d6:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 80115d8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80115da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80115de:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80115e0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80115e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d009      	beq.n	80115fe <ip4_frag+0x86>
 80115ea:	4b6d      	ldr	r3, [pc, #436]	; (80117a0 <ip4_frag+0x228>)
 80115ec:	f240 22e6 	movw	r2, #742	; 0x2e6
 80115f0:	496e      	ldr	r1, [pc, #440]	; (80117ac <ip4_frag+0x234>)
 80115f2:	486d      	ldr	r0, [pc, #436]	; (80117a8 <ip4_frag+0x230>)
 80115f4:	f000 fc86 	bl	8011f04 <iprintf>
 80115f8:	f06f 0305 	mvn.w	r3, #5
 80115fc:	e0cb      	b.n	8011796 <ip4_frag+0x21e>

  left = p->tot_len - IP_HLEN;
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	891b      	ldrh	r3, [r3, #8]
 8011602:	3b14      	subs	r3, #20
 8011604:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 8011606:	e0bd      	b.n	8011784 <ip4_frag+0x20c>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8011608:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801160a:	00da      	lsls	r2, r3, #3
 801160c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801160e:	4293      	cmp	r3, r2
 8011610:	bfa8      	it	ge
 8011612:	4613      	movge	r3, r2
 8011614:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011616:	2200      	movs	r2, #0
 8011618:	2114      	movs	r1, #20
 801161a:	2002      	movs	r0, #2
 801161c:	f7f7 fcda 	bl	8008fd4 <pbuf_alloc>
 8011620:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 8011622:	6a3b      	ldr	r3, [r7, #32]
 8011624:	2b00      	cmp	r3, #0
 8011626:	f000 80b3 	beq.w	8011790 <ip4_frag+0x218>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	895b      	ldrh	r3, [r3, #10]
 801162e:	2b13      	cmp	r3, #19
 8011630:	d806      	bhi.n	8011640 <ip4_frag+0xc8>
 8011632:	4b5b      	ldr	r3, [pc, #364]	; (80117a0 <ip4_frag+0x228>)
 8011634:	f44f 7242 	mov.w	r2, #776	; 0x308
 8011638:	495d      	ldr	r1, [pc, #372]	; (80117b0 <ip4_frag+0x238>)
 801163a:	485b      	ldr	r0, [pc, #364]	; (80117a8 <ip4_frag+0x230>)
 801163c:	f000 fc62 	bl	8011f04 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8011640:	6a3b      	ldr	r3, [r7, #32]
 8011642:	685b      	ldr	r3, [r3, #4]
 8011644:	2214      	movs	r2, #20
 8011646:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011648:	4618      	mov	r0, r3
 801164a:	f000 fbea 	bl	8011e22 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801164e:	6a3b      	ldr	r3, [r7, #32]
 8011650:	685b      	ldr	r3, [r3, #4]
 8011652:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 8011654:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011656:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8011658:	e04f      	b.n	80116fa <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	895a      	ldrh	r2, [r3, #10]
 801165e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011660:	1ad3      	subs	r3, r2, r3
 8011662:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8011664:	8b7a      	ldrh	r2, [r7, #26]
 8011666:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011668:	4293      	cmp	r3, r2
 801166a:	bf28      	it	cs
 801166c:	4613      	movcs	r3, r2
 801166e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8011670:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011672:	2b00      	cmp	r3, #0
 8011674:	d105      	bne.n	8011682 <ip4_frag+0x10a>
        poff = 0;
 8011676:	2300      	movs	r3, #0
 8011678:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	60fb      	str	r3, [r7, #12]
        continue;
 8011680:	e03b      	b.n	80116fa <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8011682:	f7ff ff21 	bl	80114c8 <ip_frag_alloc_pbuf_custom_ref>
 8011686:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8011688:	697b      	ldr	r3, [r7, #20]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d103      	bne.n	8011696 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 801168e:	6a38      	ldr	r0, [r7, #32]
 8011690:	f7f8 f812 	bl	80096b8 <pbuf_free>
        goto memerr;
 8011694:	e07d      	b.n	8011792 <ip4_frag+0x21a>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011696:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801169c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801169e:	4413      	add	r3, r2
 80116a0:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 80116a2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80116a4:	9201      	str	r2, [sp, #4]
 80116a6:	9300      	str	r3, [sp, #0]
 80116a8:	4603      	mov	r3, r0
 80116aa:	2202      	movs	r2, #2
 80116ac:	2004      	movs	r0, #4
 80116ae:	f7f7 fe25 	bl	80092fc <pbuf_alloced_custom>
 80116b2:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 80116b4:	693b      	ldr	r3, [r7, #16]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d106      	bne.n	80116c8 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 80116ba:	6978      	ldr	r0, [r7, #20]
 80116bc:	f7ff ff0c 	bl	80114d8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80116c0:	6a38      	ldr	r0, [r7, #32]
 80116c2:	f7f7 fff9 	bl	80096b8 <pbuf_free>
        goto memerr;
 80116c6:	e064      	b.n	8011792 <ip4_frag+0x21a>
      }
      pbuf_ref(p);
 80116c8:	68f8      	ldr	r0, [r7, #12]
 80116ca:	f7f8 f8a5 	bl	8009818 <pbuf_ref>
      pcr->original = p;
 80116ce:	697b      	ldr	r3, [r7, #20]
 80116d0:	68fa      	ldr	r2, [r7, #12]
 80116d2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80116d4:	697b      	ldr	r3, [r7, #20]
 80116d6:	4a37      	ldr	r2, [pc, #220]	; (80117b4 <ip4_frag+0x23c>)
 80116d8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80116da:	6939      	ldr	r1, [r7, #16]
 80116dc:	6a38      	ldr	r0, [r7, #32]
 80116de:	f7f8 f8c3 	bl	8009868 <pbuf_cat>
      left_to_copy -= newpbuflen;
 80116e2:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80116e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80116e6:	1ad3      	subs	r3, r2, r3
 80116e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 80116ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d004      	beq.n	80116fa <ip4_frag+0x182>
        poff = 0;
 80116f0:	2300      	movs	r3, #0
 80116f2:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80116fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d1ac      	bne.n	801165a <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8011700:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011702:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011704:	4413      	add	r3, r2
 8011706:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011708:	68bb      	ldr	r3, [r7, #8]
 801170a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801170c:	f1a3 0213 	sub.w	r2, r3, #19
 8011710:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011712:	429a      	cmp	r2, r3
 8011714:	bfcc      	ite	gt
 8011716:	2301      	movgt	r3, #1
 8011718:	2300      	movle	r3, #0
 801171a:	b2db      	uxtb	r3, r3
 801171c:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801171e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011720:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011724:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 8011726:	69fb      	ldr	r3, [r7, #28]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d103      	bne.n	8011734 <ip4_frag+0x1bc>
      tmp = tmp | IP_MF;
 801172c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801172e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011732:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8011734:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011736:	4618      	mov	r0, r3
 8011738:	f7f6 fdcc 	bl	80082d4 <lwip_htons>
 801173c:	4603      	mov	r3, r0
 801173e:	461a      	mov	r2, r3
 8011740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011742:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8011744:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011746:	3314      	adds	r3, #20
 8011748:	b29b      	uxth	r3, r3
 801174a:	4618      	mov	r0, r3
 801174c:	f7f6 fdc2 	bl	80082d4 <lwip_htons>
 8011750:	4603      	mov	r3, r0
 8011752:	461a      	mov	r2, r3
 8011754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011756:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8011758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801175a:	2200      	movs	r2, #0
 801175c:	729a      	strb	r2, [r3, #10]
 801175e:	2200      	movs	r2, #0
 8011760:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8011762:	68bb      	ldr	r3, [r7, #8]
 8011764:	695b      	ldr	r3, [r3, #20]
 8011766:	687a      	ldr	r2, [r7, #4]
 8011768:	6a39      	ldr	r1, [r7, #32]
 801176a:	68b8      	ldr	r0, [r7, #8]
 801176c:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801176e:	6a38      	ldr	r0, [r7, #32]
 8011770:	f7f7 ffa2 	bl	80096b8 <pbuf_free>
    left -= fragsize;
 8011774:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011776:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011778:	1ad3      	subs	r3, r2, r3
 801177a:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 801177c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801177e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8011780:	4413      	add	r3, r2
 8011782:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8011784:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011786:	2b00      	cmp	r3, #0
 8011788:	f47f af3e 	bne.w	8011608 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801178c:	2300      	movs	r3, #0
 801178e:	e002      	b.n	8011796 <ip4_frag+0x21e>
      goto memerr;
 8011790:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8011792:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011796:	4618      	mov	r0, r3
 8011798:	3740      	adds	r7, #64	; 0x40
 801179a:	46bd      	mov	sp, r7
 801179c:	bd80      	pop	{r7, pc}
 801179e:	bf00      	nop
 80117a0:	08014800 	.word	0x08014800
 80117a4:	0801498c 	.word	0x0801498c
 80117a8:	08014848 	.word	0x08014848
 80117ac:	080149b4 	.word	0x080149b4
 80117b0:	080149d0 	.word	0x080149d0
 80117b4:	08011511 	.word	0x08011511

080117b8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b086      	sub	sp, #24
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
 80117c0:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 80117c2:	230e      	movs	r3, #14
 80117c4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	895b      	ldrh	r3, [r3, #10]
 80117ca:	2b0e      	cmp	r3, #14
 80117cc:	d977      	bls.n	80118be <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	685b      	ldr	r3, [r3, #4]
 80117d2:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80117d4:	693b      	ldr	r3, [r7, #16]
 80117d6:	7b1a      	ldrb	r2, [r3, #12]
 80117d8:	7b5b      	ldrb	r3, [r3, #13]
 80117da:	021b      	lsls	r3, r3, #8
 80117dc:	4313      	orrs	r3, r2
 80117de:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80117e0:	693b      	ldr	r3, [r7, #16]
 80117e2:	781b      	ldrb	r3, [r3, #0]
 80117e4:	f003 0301 	and.w	r3, r3, #1
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d023      	beq.n	8011834 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80117ec:	693b      	ldr	r3, [r7, #16]
 80117ee:	781b      	ldrb	r3, [r3, #0]
 80117f0:	2b01      	cmp	r3, #1
 80117f2:	d10f      	bne.n	8011814 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80117f4:	693b      	ldr	r3, [r7, #16]
 80117f6:	785b      	ldrb	r3, [r3, #1]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d11b      	bne.n	8011834 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80117fc:	693b      	ldr	r3, [r7, #16]
 80117fe:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011800:	2b5e      	cmp	r3, #94	; 0x5e
 8011802:	d117      	bne.n	8011834 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	7b5b      	ldrb	r3, [r3, #13]
 8011808:	f043 0310 	orr.w	r3, r3, #16
 801180c:	b2da      	uxtb	r2, r3
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	735a      	strb	r2, [r3, #13]
 8011812:	e00f      	b.n	8011834 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8011814:	693b      	ldr	r3, [r7, #16]
 8011816:	2206      	movs	r2, #6
 8011818:	4931      	ldr	r1, [pc, #196]	; (80118e0 <ethernet_input+0x128>)
 801181a:	4618      	mov	r0, r3
 801181c:	f000 faf3 	bl	8011e06 <memcmp>
 8011820:	4603      	mov	r3, r0
 8011822:	2b00      	cmp	r3, #0
 8011824:	d106      	bne.n	8011834 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	7b5b      	ldrb	r3, [r3, #13]
 801182a:	f043 0308 	orr.w	r3, r3, #8
 801182e:	b2da      	uxtb	r2, r3
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8011834:	89fb      	ldrh	r3, [r7, #14]
 8011836:	2b08      	cmp	r3, #8
 8011838:	d003      	beq.n	8011842 <ethernet_input+0x8a>
 801183a:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801183e:	d01e      	beq.n	801187e <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8011840:	e046      	b.n	80118d0 <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011842:	683b      	ldr	r3, [r7, #0]
 8011844:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011848:	f003 0308 	and.w	r3, r3, #8
 801184c:	2b00      	cmp	r3, #0
 801184e:	d038      	beq.n	80118c2 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	895b      	ldrh	r3, [r3, #10]
 8011854:	461a      	mov	r2, r3
 8011856:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801185a:	429a      	cmp	r2, r3
 801185c:	db33      	blt.n	80118c6 <ethernet_input+0x10e>
 801185e:	8afb      	ldrh	r3, [r7, #22]
 8011860:	425b      	negs	r3, r3
 8011862:	b29b      	uxth	r3, r3
 8011864:	b21b      	sxth	r3, r3
 8011866:	4619      	mov	r1, r3
 8011868:	6878      	ldr	r0, [r7, #4]
 801186a:	f7f7 ff01 	bl	8009670 <pbuf_header>
 801186e:	4603      	mov	r3, r0
 8011870:	2b00      	cmp	r3, #0
 8011872:	d128      	bne.n	80118c6 <ethernet_input+0x10e>
        ip4_input(p, netif);
 8011874:	6839      	ldr	r1, [r7, #0]
 8011876:	6878      	ldr	r0, [r7, #4]
 8011878:	f7fe ff7c 	bl	8010774 <ip4_input>
      break;
 801187c:	e01d      	b.n	80118ba <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801187e:	683b      	ldr	r3, [r7, #0]
 8011880:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011884:	f003 0308 	and.w	r3, r3, #8
 8011888:	2b00      	cmp	r3, #0
 801188a:	d01e      	beq.n	80118ca <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	895b      	ldrh	r3, [r3, #10]
 8011890:	461a      	mov	r2, r3
 8011892:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011896:	429a      	cmp	r2, r3
 8011898:	db19      	blt.n	80118ce <ethernet_input+0x116>
 801189a:	8afb      	ldrh	r3, [r7, #22]
 801189c:	425b      	negs	r3, r3
 801189e:	b29b      	uxth	r3, r3
 80118a0:	b21b      	sxth	r3, r3
 80118a2:	4619      	mov	r1, r3
 80118a4:	6878      	ldr	r0, [r7, #4]
 80118a6:	f7f7 fee3 	bl	8009670 <pbuf_header>
 80118aa:	4603      	mov	r3, r0
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d10e      	bne.n	80118ce <ethernet_input+0x116>
        etharp_input(p, netif);
 80118b0:	6839      	ldr	r1, [r7, #0]
 80118b2:	6878      	ldr	r0, [r7, #4]
 80118b4:	f7fe f94c 	bl	800fb50 <etharp_input>
      break;
 80118b8:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80118ba:	2300      	movs	r3, #0
 80118bc:	e00c      	b.n	80118d8 <ethernet_input+0x120>
    goto free_and_return;
 80118be:	bf00      	nop
 80118c0:	e006      	b.n	80118d0 <ethernet_input+0x118>
        goto free_and_return;
 80118c2:	bf00      	nop
 80118c4:	e004      	b.n	80118d0 <ethernet_input+0x118>
        goto free_and_return;
 80118c6:	bf00      	nop
 80118c8:	e002      	b.n	80118d0 <ethernet_input+0x118>
        goto free_and_return;
 80118ca:	bf00      	nop
 80118cc:	e000      	b.n	80118d0 <ethernet_input+0x118>
        goto free_and_return;
 80118ce:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80118d0:	6878      	ldr	r0, [r7, #4]
 80118d2:	f7f7 fef1 	bl	80096b8 <pbuf_free>
  return ERR_OK;
 80118d6:	2300      	movs	r3, #0
}
 80118d8:	4618      	mov	r0, r3
 80118da:	3718      	adds	r7, #24
 80118dc:	46bd      	mov	sp, r7
 80118de:	bd80      	pop	{r7, pc}
 80118e0:	08014bb0 	.word	0x08014bb0

080118e4 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b086      	sub	sp, #24
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	60f8      	str	r0, [r7, #12]
 80118ec:	60b9      	str	r1, [r7, #8]
 80118ee:	607a      	str	r2, [r7, #4]
 80118f0:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80118f2:	8c3b      	ldrh	r3, [r7, #32]
 80118f4:	4618      	mov	r0, r3
 80118f6:	f7f6 fced 	bl	80082d4 <lwip_htons>
 80118fa:	4603      	mov	r3, r0
 80118fc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 80118fe:	210e      	movs	r1, #14
 8011900:	68b8      	ldr	r0, [r7, #8]
 8011902:	f7f7 feb5 	bl	8009670 <pbuf_header>
 8011906:	4603      	mov	r3, r0
 8011908:	2b00      	cmp	r3, #0
 801190a:	d125      	bne.n	8011958 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 801190c:	68bb      	ldr	r3, [r7, #8]
 801190e:	685b      	ldr	r3, [r3, #4]
 8011910:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8011912:	693b      	ldr	r3, [r7, #16]
 8011914:	8afa      	ldrh	r2, [r7, #22]
 8011916:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8011918:	693b      	ldr	r3, [r7, #16]
 801191a:	2206      	movs	r2, #6
 801191c:	6839      	ldr	r1, [r7, #0]
 801191e:	4618      	mov	r0, r3
 8011920:	f000 fa7f 	bl	8011e22 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8011924:	693b      	ldr	r3, [r7, #16]
 8011926:	3306      	adds	r3, #6
 8011928:	2206      	movs	r2, #6
 801192a:	6879      	ldr	r1, [r7, #4]
 801192c:	4618      	mov	r0, r3
 801192e:	f000 fa78 	bl	8011e22 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011938:	2b06      	cmp	r3, #6
 801193a:	d006      	beq.n	801194a <ethernet_output+0x66>
 801193c:	4b0a      	ldr	r3, [pc, #40]	; (8011968 <ethernet_output+0x84>)
 801193e:	f240 122b 	movw	r2, #299	; 0x12b
 8011942:	490a      	ldr	r1, [pc, #40]	; (801196c <ethernet_output+0x88>)
 8011944:	480a      	ldr	r0, [pc, #40]	; (8011970 <ethernet_output+0x8c>)
 8011946:	f000 fadd 	bl	8011f04 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	699b      	ldr	r3, [r3, #24]
 801194e:	68b9      	ldr	r1, [r7, #8]
 8011950:	68f8      	ldr	r0, [r7, #12]
 8011952:	4798      	blx	r3
 8011954:	4603      	mov	r3, r0
 8011956:	e002      	b.n	801195e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8011958:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801195a:	f06f 0301 	mvn.w	r3, #1
}
 801195e:	4618      	mov	r0, r3
 8011960:	3718      	adds	r7, #24
 8011962:	46bd      	mov	sp, r7
 8011964:	bd80      	pop	{r7, pc}
 8011966:	bf00      	nop
 8011968:	080149f0 	.word	0x080149f0
 801196c:	08014a28 	.word	0x08014a28
 8011970:	08014a5c 	.word	0x08014a5c

08011974 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8011974:	b580      	push	{r7, lr}
 8011976:	b086      	sub	sp, #24
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
 801197c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	60bb      	str	r3, [r7, #8]
 8011982:	2304      	movs	r3, #4
 8011984:	60fb      	str	r3, [r7, #12]
 8011986:	2300      	movs	r3, #0
 8011988:	613b      	str	r3, [r7, #16]
 801198a:	2300      	movs	r3, #0
 801198c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801198e:	f107 0308 	add.w	r3, r7, #8
 8011992:	2100      	movs	r1, #0
 8011994:	4618      	mov	r0, r3
 8011996:	f7f3 fe4b 	bl	8005630 <osMessageCreate>
 801199a:	4602      	mov	r2, r0
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d102      	bne.n	80119ae <sys_mbox_new+0x3a>
    return ERR_MEM;
 80119a8:	f04f 33ff 	mov.w	r3, #4294967295
 80119ac:	e000      	b.n	80119b0 <sys_mbox_new+0x3c>

  return ERR_OK;
 80119ae:	2300      	movs	r3, #0
}
 80119b0:	4618      	mov	r0, r3
 80119b2:	3718      	adds	r7, #24
 80119b4:	46bd      	mov	sp, r7
 80119b6:	bd80      	pop	{r7, pc}

080119b8 <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b082      	sub	sp, #8
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
 80119c0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 80119c2:	bf00      	nop
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	6839      	ldr	r1, [r7, #0]
 80119ca:	f04f 32ff 	mov.w	r2, #4294967295
 80119ce:	4618      	mov	r0, r3
 80119d0:	f7f3 fe56 	bl	8005680 <osMessagePut>
 80119d4:	4603      	mov	r3, r0
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d1f4      	bne.n	80119c4 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 80119da:	bf00      	nop
 80119dc:	bf00      	nop
 80119de:	3708      	adds	r7, #8
 80119e0:	46bd      	mov	sp, r7
 80119e2:	bd80      	pop	{r7, pc}

080119e4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b084      	sub	sp, #16
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
 80119ec:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	6839      	ldr	r1, [r7, #0]
 80119f4:	2200      	movs	r2, #0
 80119f6:	4618      	mov	r0, r3
 80119f8:	f7f3 fe42 	bl	8005680 <osMessagePut>
 80119fc:	4603      	mov	r3, r0
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d102      	bne.n	8011a08 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8011a02:	2300      	movs	r3, #0
 8011a04:	73fb      	strb	r3, [r7, #15]
 8011a06:	e001      	b.n	8011a0c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8011a08:	23ff      	movs	r3, #255	; 0xff
 8011a0a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8011a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011a10:	4618      	mov	r0, r3
 8011a12:	3710      	adds	r7, #16
 8011a14:	46bd      	mov	sp, r7
 8011a16:	bd80      	pop	{r7, pc}

08011a18 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b08c      	sub	sp, #48	; 0x30
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	61f8      	str	r0, [r7, #28]
 8011a20:	61b9      	str	r1, [r7, #24]
 8011a22:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8011a24:	f7f3 fc42 	bl	80052ac <osKernelSysTick>
 8011a28:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8011a2a:	697b      	ldr	r3, [r7, #20]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d017      	beq.n	8011a60 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8011a30:	69fb      	ldr	r3, [r7, #28]
 8011a32:	6819      	ldr	r1, [r3, #0]
 8011a34:	f107 0320 	add.w	r3, r7, #32
 8011a38:	697a      	ldr	r2, [r7, #20]
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f7f3 fe60 	bl	8005700 <osMessageGet>

    if(event.status == osEventMessage)
 8011a40:	6a3b      	ldr	r3, [r7, #32]
 8011a42:	2b10      	cmp	r3, #16
 8011a44:	d109      	bne.n	8011a5a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8011a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a48:	461a      	mov	r2, r3
 8011a4a:	69bb      	ldr	r3, [r7, #24]
 8011a4c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8011a4e:	f7f3 fc2d 	bl	80052ac <osKernelSysTick>
 8011a52:	4602      	mov	r2, r0
 8011a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a56:	1ad3      	subs	r3, r2, r3
 8011a58:	e019      	b.n	8011a8e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8011a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8011a5e:	e016      	b.n	8011a8e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8011a60:	69fb      	ldr	r3, [r7, #28]
 8011a62:	6819      	ldr	r1, [r3, #0]
 8011a64:	463b      	mov	r3, r7
 8011a66:	f04f 32ff 	mov.w	r2, #4294967295
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	f7f3 fe48 	bl	8005700 <osMessageGet>
 8011a70:	f107 0320 	add.w	r3, r7, #32
 8011a74:	463a      	mov	r2, r7
 8011a76:	ca07      	ldmia	r2, {r0, r1, r2}
 8011a78:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8011a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a7e:	461a      	mov	r2, r3
 8011a80:	69bb      	ldr	r3, [r7, #24]
 8011a82:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8011a84:	f7f3 fc12 	bl	80052ac <osKernelSysTick>
 8011a88:	4602      	mov	r2, r0
 8011a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a8c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8011a8e:	4618      	mov	r0, r3
 8011a90:	3730      	adds	r7, #48	; 0x30
 8011a92:	46bd      	mov	sp, r7
 8011a94:	bd80      	pop	{r7, pc}

08011a96 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8011a96:	b480      	push	{r7}
 8011a98:	b083      	sub	sp, #12
 8011a9a:	af00      	add	r7, sp, #0
 8011a9c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d101      	bne.n	8011aaa <sys_mbox_valid+0x14>
    return 0;
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	e000      	b.n	8011aac <sys_mbox_valid+0x16>
  else
    return 1;
 8011aaa:	2301      	movs	r3, #1
}
 8011aac:	4618      	mov	r0, r3
 8011aae:	370c      	adds	r7, #12
 8011ab0:	46bd      	mov	sp, r7
 8011ab2:	bc80      	pop	{r7}
 8011ab4:	4770      	bx	lr
	...

08011ab8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8011abc:	4803      	ldr	r0, [pc, #12]	; (8011acc <sys_init+0x14>)
 8011abe:	f7f3 fc65 	bl	800538c <osMutexCreate>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	4a02      	ldr	r2, [pc, #8]	; (8011ad0 <sys_init+0x18>)
 8011ac6:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8011ac8:	bf00      	nop
 8011aca:	bd80      	pop	{r7, pc}
 8011acc:	08014bc0 	.word	0x08014bc0
 8011ad0:	2000b148 	.word	0x2000b148

08011ad4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b084      	sub	sp, #16
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8011adc:	2300      	movs	r3, #0
 8011ade:	60bb      	str	r3, [r7, #8]
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8011ae4:	f107 0308 	add.w	r3, r7, #8
 8011ae8:	4618      	mov	r0, r3
 8011aea:	f7f3 fc4f 	bl	800538c <osMutexCreate>
 8011aee:	4602      	mov	r2, r0
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d102      	bne.n	8011b02 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8011afc:	f04f 33ff 	mov.w	r3, #4294967295
 8011b00:	e000      	b.n	8011b04 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8011b02:	2300      	movs	r3, #0
}
 8011b04:	4618      	mov	r0, r3
 8011b06:	3710      	adds	r7, #16
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	bd80      	pop	{r7, pc}

08011b0c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b082      	sub	sp, #8
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	f04f 31ff 	mov.w	r1, #4294967295
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f7f3 fc4d 	bl	80053bc <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8011b22:	bf00      	nop
 8011b24:	3708      	adds	r7, #8
 8011b26:	46bd      	mov	sp, r7
 8011b28:	bd80      	pop	{r7, pc}

08011b2a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8011b2a:	b580      	push	{r7, lr}
 8011b2c:	b082      	sub	sp, #8
 8011b2e:	af00      	add	r7, sp, #0
 8011b30:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	4618      	mov	r0, r3
 8011b38:	f7f3 fc8e 	bl	8005458 <osMutexRelease>
}
 8011b3c:	bf00      	nop
 8011b3e:	3708      	adds	r7, #8
 8011b40:	46bd      	mov	sp, r7
 8011b42:	bd80      	pop	{r7, pc}

08011b44 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b08c      	sub	sp, #48	; 0x30
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	60f8      	str	r0, [r7, #12]
 8011b4c:	60b9      	str	r1, [r7, #8]
 8011b4e:	607a      	str	r2, [r7, #4]
 8011b50:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8011b52:	f107 0314 	add.w	r3, r7, #20
 8011b56:	2200      	movs	r2, #0
 8011b58:	601a      	str	r2, [r3, #0]
 8011b5a:	605a      	str	r2, [r3, #4]
 8011b5c:	609a      	str	r2, [r3, #8]
 8011b5e:	60da      	str	r2, [r3, #12]
 8011b60:	611a      	str	r2, [r3, #16]
 8011b62:	615a      	str	r2, [r3, #20]
 8011b64:	619a      	str	r2, [r3, #24]
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	617b      	str	r3, [r7, #20]
 8011b6a:	68bb      	ldr	r3, [r7, #8]
 8011b6c:	61bb      	str	r3, [r7, #24]
 8011b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b70:	b21b      	sxth	r3, r3
 8011b72:	83bb      	strh	r3, [r7, #28]
 8011b74:	683b      	ldr	r3, [r7, #0]
 8011b76:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8011b78:	f107 0314 	add.w	r3, r7, #20
 8011b7c:	6879      	ldr	r1, [r7, #4]
 8011b7e:	4618      	mov	r0, r3
 8011b80:	f7f3 fba4 	bl	80052cc <osThreadCreate>
 8011b84:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8011b86:	4618      	mov	r0, r3
 8011b88:	3730      	adds	r7, #48	; 0x30
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	bd80      	pop	{r7, pc}
	...

08011b90 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8011b94:	4b04      	ldr	r3, [pc, #16]	; (8011ba8 <sys_arch_protect+0x18>)
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	f04f 31ff 	mov.w	r1, #4294967295
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f7f3 fc0d 	bl	80053bc <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8011ba2:	2301      	movs	r3, #1
}
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	bd80      	pop	{r7, pc}
 8011ba8:	2000b148 	.word	0x2000b148

08011bac <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b082      	sub	sp, #8
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8011bb4:	4b04      	ldr	r3, [pc, #16]	; (8011bc8 <sys_arch_unprotect+0x1c>)
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	4618      	mov	r0, r3
 8011bba:	f7f3 fc4d 	bl	8005458 <osMutexRelease>
}
 8011bbe:	bf00      	nop
 8011bc0:	3708      	adds	r7, #8
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd80      	pop	{r7, pc}
 8011bc6:	bf00      	nop
 8011bc8:	2000b148 	.word	0x2000b148

08011bcc <std>:
 8011bcc:	2300      	movs	r3, #0
 8011bce:	b510      	push	{r4, lr}
 8011bd0:	4604      	mov	r4, r0
 8011bd2:	e9c0 3300 	strd	r3, r3, [r0]
 8011bd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011bda:	6083      	str	r3, [r0, #8]
 8011bdc:	8181      	strh	r1, [r0, #12]
 8011bde:	6643      	str	r3, [r0, #100]	; 0x64
 8011be0:	81c2      	strh	r2, [r0, #14]
 8011be2:	6183      	str	r3, [r0, #24]
 8011be4:	4619      	mov	r1, r3
 8011be6:	2208      	movs	r2, #8
 8011be8:	305c      	adds	r0, #92	; 0x5c
 8011bea:	f000 f928 	bl	8011e3e <memset>
 8011bee:	4b05      	ldr	r3, [pc, #20]	; (8011c04 <std+0x38>)
 8011bf0:	6224      	str	r4, [r4, #32]
 8011bf2:	6263      	str	r3, [r4, #36]	; 0x24
 8011bf4:	4b04      	ldr	r3, [pc, #16]	; (8011c08 <std+0x3c>)
 8011bf6:	62a3      	str	r3, [r4, #40]	; 0x28
 8011bf8:	4b04      	ldr	r3, [pc, #16]	; (8011c0c <std+0x40>)
 8011bfa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011bfc:	4b04      	ldr	r3, [pc, #16]	; (8011c10 <std+0x44>)
 8011bfe:	6323      	str	r3, [r4, #48]	; 0x30
 8011c00:	bd10      	pop	{r4, pc}
 8011c02:	bf00      	nop
 8011c04:	08012029 	.word	0x08012029
 8011c08:	0801204b 	.word	0x0801204b
 8011c0c:	08012083 	.word	0x08012083
 8011c10:	080120a7 	.word	0x080120a7

08011c14 <_cleanup_r>:
 8011c14:	4901      	ldr	r1, [pc, #4]	; (8011c1c <_cleanup_r+0x8>)
 8011c16:	f000 b8af 	b.w	8011d78 <_fwalk_reent>
 8011c1a:	bf00      	nop
 8011c1c:	08012201 	.word	0x08012201

08011c20 <__sfmoreglue>:
 8011c20:	b570      	push	{r4, r5, r6, lr}
 8011c22:	2568      	movs	r5, #104	; 0x68
 8011c24:	1e4a      	subs	r2, r1, #1
 8011c26:	4355      	muls	r5, r2
 8011c28:	460e      	mov	r6, r1
 8011c2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011c2e:	f000 f90f 	bl	8011e50 <_malloc_r>
 8011c32:	4604      	mov	r4, r0
 8011c34:	b140      	cbz	r0, 8011c48 <__sfmoreglue+0x28>
 8011c36:	2100      	movs	r1, #0
 8011c38:	e9c0 1600 	strd	r1, r6, [r0]
 8011c3c:	300c      	adds	r0, #12
 8011c3e:	60a0      	str	r0, [r4, #8]
 8011c40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011c44:	f000 f8fb 	bl	8011e3e <memset>
 8011c48:	4620      	mov	r0, r4
 8011c4a:	bd70      	pop	{r4, r5, r6, pc}

08011c4c <__sfp_lock_acquire>:
 8011c4c:	4801      	ldr	r0, [pc, #4]	; (8011c54 <__sfp_lock_acquire+0x8>)
 8011c4e:	f000 b8d8 	b.w	8011e02 <__retarget_lock_acquire_recursive>
 8011c52:	bf00      	nop
 8011c54:	2000b154 	.word	0x2000b154

08011c58 <__sfp_lock_release>:
 8011c58:	4801      	ldr	r0, [pc, #4]	; (8011c60 <__sfp_lock_release+0x8>)
 8011c5a:	f000 b8d3 	b.w	8011e04 <__retarget_lock_release_recursive>
 8011c5e:	bf00      	nop
 8011c60:	2000b154 	.word	0x2000b154

08011c64 <__sinit_lock_acquire>:
 8011c64:	4801      	ldr	r0, [pc, #4]	; (8011c6c <__sinit_lock_acquire+0x8>)
 8011c66:	f000 b8cc 	b.w	8011e02 <__retarget_lock_acquire_recursive>
 8011c6a:	bf00      	nop
 8011c6c:	2000b14f 	.word	0x2000b14f

08011c70 <__sinit_lock_release>:
 8011c70:	4801      	ldr	r0, [pc, #4]	; (8011c78 <__sinit_lock_release+0x8>)
 8011c72:	f000 b8c7 	b.w	8011e04 <__retarget_lock_release_recursive>
 8011c76:	bf00      	nop
 8011c78:	2000b14f 	.word	0x2000b14f

08011c7c <__sinit>:
 8011c7c:	b510      	push	{r4, lr}
 8011c7e:	4604      	mov	r4, r0
 8011c80:	f7ff fff0 	bl	8011c64 <__sinit_lock_acquire>
 8011c84:	69a3      	ldr	r3, [r4, #24]
 8011c86:	b11b      	cbz	r3, 8011c90 <__sinit+0x14>
 8011c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c8c:	f7ff bff0 	b.w	8011c70 <__sinit_lock_release>
 8011c90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011c94:	6523      	str	r3, [r4, #80]	; 0x50
 8011c96:	4b13      	ldr	r3, [pc, #76]	; (8011ce4 <__sinit+0x68>)
 8011c98:	4a13      	ldr	r2, [pc, #76]	; (8011ce8 <__sinit+0x6c>)
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8011c9e:	42a3      	cmp	r3, r4
 8011ca0:	bf08      	it	eq
 8011ca2:	2301      	moveq	r3, #1
 8011ca4:	4620      	mov	r0, r4
 8011ca6:	bf08      	it	eq
 8011ca8:	61a3      	streq	r3, [r4, #24]
 8011caa:	f000 f81f 	bl	8011cec <__sfp>
 8011cae:	6060      	str	r0, [r4, #4]
 8011cb0:	4620      	mov	r0, r4
 8011cb2:	f000 f81b 	bl	8011cec <__sfp>
 8011cb6:	60a0      	str	r0, [r4, #8]
 8011cb8:	4620      	mov	r0, r4
 8011cba:	f000 f817 	bl	8011cec <__sfp>
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	2104      	movs	r1, #4
 8011cc2:	60e0      	str	r0, [r4, #12]
 8011cc4:	6860      	ldr	r0, [r4, #4]
 8011cc6:	f7ff ff81 	bl	8011bcc <std>
 8011cca:	2201      	movs	r2, #1
 8011ccc:	2109      	movs	r1, #9
 8011cce:	68a0      	ldr	r0, [r4, #8]
 8011cd0:	f7ff ff7c 	bl	8011bcc <std>
 8011cd4:	2202      	movs	r2, #2
 8011cd6:	2112      	movs	r1, #18
 8011cd8:	68e0      	ldr	r0, [r4, #12]
 8011cda:	f7ff ff77 	bl	8011bcc <std>
 8011cde:	2301      	movs	r3, #1
 8011ce0:	61a3      	str	r3, [r4, #24]
 8011ce2:	e7d1      	b.n	8011c88 <__sinit+0xc>
 8011ce4:	08014c28 	.word	0x08014c28
 8011ce8:	08011c15 	.word	0x08011c15

08011cec <__sfp>:
 8011cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cee:	4607      	mov	r7, r0
 8011cf0:	f7ff ffac 	bl	8011c4c <__sfp_lock_acquire>
 8011cf4:	4b1e      	ldr	r3, [pc, #120]	; (8011d70 <__sfp+0x84>)
 8011cf6:	681e      	ldr	r6, [r3, #0]
 8011cf8:	69b3      	ldr	r3, [r6, #24]
 8011cfa:	b913      	cbnz	r3, 8011d02 <__sfp+0x16>
 8011cfc:	4630      	mov	r0, r6
 8011cfe:	f7ff ffbd 	bl	8011c7c <__sinit>
 8011d02:	3648      	adds	r6, #72	; 0x48
 8011d04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011d08:	3b01      	subs	r3, #1
 8011d0a:	d503      	bpl.n	8011d14 <__sfp+0x28>
 8011d0c:	6833      	ldr	r3, [r6, #0]
 8011d0e:	b30b      	cbz	r3, 8011d54 <__sfp+0x68>
 8011d10:	6836      	ldr	r6, [r6, #0]
 8011d12:	e7f7      	b.n	8011d04 <__sfp+0x18>
 8011d14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011d18:	b9d5      	cbnz	r5, 8011d50 <__sfp+0x64>
 8011d1a:	4b16      	ldr	r3, [pc, #88]	; (8011d74 <__sfp+0x88>)
 8011d1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011d20:	60e3      	str	r3, [r4, #12]
 8011d22:	6665      	str	r5, [r4, #100]	; 0x64
 8011d24:	f000 f86c 	bl	8011e00 <__retarget_lock_init_recursive>
 8011d28:	f7ff ff96 	bl	8011c58 <__sfp_lock_release>
 8011d2c:	2208      	movs	r2, #8
 8011d2e:	4629      	mov	r1, r5
 8011d30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011d34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011d38:	6025      	str	r5, [r4, #0]
 8011d3a:	61a5      	str	r5, [r4, #24]
 8011d3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011d40:	f000 f87d 	bl	8011e3e <memset>
 8011d44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011d48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011d4c:	4620      	mov	r0, r4
 8011d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d50:	3468      	adds	r4, #104	; 0x68
 8011d52:	e7d9      	b.n	8011d08 <__sfp+0x1c>
 8011d54:	2104      	movs	r1, #4
 8011d56:	4638      	mov	r0, r7
 8011d58:	f7ff ff62 	bl	8011c20 <__sfmoreglue>
 8011d5c:	4604      	mov	r4, r0
 8011d5e:	6030      	str	r0, [r6, #0]
 8011d60:	2800      	cmp	r0, #0
 8011d62:	d1d5      	bne.n	8011d10 <__sfp+0x24>
 8011d64:	f7ff ff78 	bl	8011c58 <__sfp_lock_release>
 8011d68:	230c      	movs	r3, #12
 8011d6a:	603b      	str	r3, [r7, #0]
 8011d6c:	e7ee      	b.n	8011d4c <__sfp+0x60>
 8011d6e:	bf00      	nop
 8011d70:	08014c28 	.word	0x08014c28
 8011d74:	ffff0001 	.word	0xffff0001

08011d78 <_fwalk_reent>:
 8011d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d7c:	4606      	mov	r6, r0
 8011d7e:	4688      	mov	r8, r1
 8011d80:	2700      	movs	r7, #0
 8011d82:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011d86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011d8a:	f1b9 0901 	subs.w	r9, r9, #1
 8011d8e:	d505      	bpl.n	8011d9c <_fwalk_reent+0x24>
 8011d90:	6824      	ldr	r4, [r4, #0]
 8011d92:	2c00      	cmp	r4, #0
 8011d94:	d1f7      	bne.n	8011d86 <_fwalk_reent+0xe>
 8011d96:	4638      	mov	r0, r7
 8011d98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d9c:	89ab      	ldrh	r3, [r5, #12]
 8011d9e:	2b01      	cmp	r3, #1
 8011da0:	d907      	bls.n	8011db2 <_fwalk_reent+0x3a>
 8011da2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011da6:	3301      	adds	r3, #1
 8011da8:	d003      	beq.n	8011db2 <_fwalk_reent+0x3a>
 8011daa:	4629      	mov	r1, r5
 8011dac:	4630      	mov	r0, r6
 8011dae:	47c0      	blx	r8
 8011db0:	4307      	orrs	r7, r0
 8011db2:	3568      	adds	r5, #104	; 0x68
 8011db4:	e7e9      	b.n	8011d8a <_fwalk_reent+0x12>
	...

08011db8 <__libc_init_array>:
 8011db8:	b570      	push	{r4, r5, r6, lr}
 8011dba:	2600      	movs	r6, #0
 8011dbc:	4d0c      	ldr	r5, [pc, #48]	; (8011df0 <__libc_init_array+0x38>)
 8011dbe:	4c0d      	ldr	r4, [pc, #52]	; (8011df4 <__libc_init_array+0x3c>)
 8011dc0:	1b64      	subs	r4, r4, r5
 8011dc2:	10a4      	asrs	r4, r4, #2
 8011dc4:	42a6      	cmp	r6, r4
 8011dc6:	d109      	bne.n	8011ddc <__libc_init_array+0x24>
 8011dc8:	f000 ff14 	bl	8012bf4 <_init>
 8011dcc:	2600      	movs	r6, #0
 8011dce:	4d0a      	ldr	r5, [pc, #40]	; (8011df8 <__libc_init_array+0x40>)
 8011dd0:	4c0a      	ldr	r4, [pc, #40]	; (8011dfc <__libc_init_array+0x44>)
 8011dd2:	1b64      	subs	r4, r4, r5
 8011dd4:	10a4      	asrs	r4, r4, #2
 8011dd6:	42a6      	cmp	r6, r4
 8011dd8:	d105      	bne.n	8011de6 <__libc_init_array+0x2e>
 8011dda:	bd70      	pop	{r4, r5, r6, pc}
 8011ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8011de0:	4798      	blx	r3
 8011de2:	3601      	adds	r6, #1
 8011de4:	e7ee      	b.n	8011dc4 <__libc_init_array+0xc>
 8011de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8011dea:	4798      	blx	r3
 8011dec:	3601      	adds	r6, #1
 8011dee:	e7f2      	b.n	8011dd6 <__libc_init_array+0x1e>
 8011df0:	08014c68 	.word	0x08014c68
 8011df4:	08014c68 	.word	0x08014c68
 8011df8:	08014c68 	.word	0x08014c68
 8011dfc:	08014c6c 	.word	0x08014c6c

08011e00 <__retarget_lock_init_recursive>:
 8011e00:	4770      	bx	lr

08011e02 <__retarget_lock_acquire_recursive>:
 8011e02:	4770      	bx	lr

08011e04 <__retarget_lock_release_recursive>:
 8011e04:	4770      	bx	lr

08011e06 <memcmp>:
 8011e06:	b530      	push	{r4, r5, lr}
 8011e08:	2400      	movs	r4, #0
 8011e0a:	3901      	subs	r1, #1
 8011e0c:	42a2      	cmp	r2, r4
 8011e0e:	d101      	bne.n	8011e14 <memcmp+0xe>
 8011e10:	2000      	movs	r0, #0
 8011e12:	e005      	b.n	8011e20 <memcmp+0x1a>
 8011e14:	5d03      	ldrb	r3, [r0, r4]
 8011e16:	3401      	adds	r4, #1
 8011e18:	5d0d      	ldrb	r5, [r1, r4]
 8011e1a:	42ab      	cmp	r3, r5
 8011e1c:	d0f6      	beq.n	8011e0c <memcmp+0x6>
 8011e1e:	1b58      	subs	r0, r3, r5
 8011e20:	bd30      	pop	{r4, r5, pc}

08011e22 <memcpy>:
 8011e22:	440a      	add	r2, r1
 8011e24:	4291      	cmp	r1, r2
 8011e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8011e2a:	d100      	bne.n	8011e2e <memcpy+0xc>
 8011e2c:	4770      	bx	lr
 8011e2e:	b510      	push	{r4, lr}
 8011e30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e34:	4291      	cmp	r1, r2
 8011e36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011e3a:	d1f9      	bne.n	8011e30 <memcpy+0xe>
 8011e3c:	bd10      	pop	{r4, pc}

08011e3e <memset>:
 8011e3e:	4603      	mov	r3, r0
 8011e40:	4402      	add	r2, r0
 8011e42:	4293      	cmp	r3, r2
 8011e44:	d100      	bne.n	8011e48 <memset+0xa>
 8011e46:	4770      	bx	lr
 8011e48:	f803 1b01 	strb.w	r1, [r3], #1
 8011e4c:	e7f9      	b.n	8011e42 <memset+0x4>
	...

08011e50 <_malloc_r>:
 8011e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e52:	1ccd      	adds	r5, r1, #3
 8011e54:	f025 0503 	bic.w	r5, r5, #3
 8011e58:	3508      	adds	r5, #8
 8011e5a:	2d0c      	cmp	r5, #12
 8011e5c:	bf38      	it	cc
 8011e5e:	250c      	movcc	r5, #12
 8011e60:	2d00      	cmp	r5, #0
 8011e62:	4606      	mov	r6, r0
 8011e64:	db01      	blt.n	8011e6a <_malloc_r+0x1a>
 8011e66:	42a9      	cmp	r1, r5
 8011e68:	d903      	bls.n	8011e72 <_malloc_r+0x22>
 8011e6a:	230c      	movs	r3, #12
 8011e6c:	6033      	str	r3, [r6, #0]
 8011e6e:	2000      	movs	r0, #0
 8011e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e72:	f000 fa13 	bl	801229c <__malloc_lock>
 8011e76:	4921      	ldr	r1, [pc, #132]	; (8011efc <_malloc_r+0xac>)
 8011e78:	680a      	ldr	r2, [r1, #0]
 8011e7a:	4614      	mov	r4, r2
 8011e7c:	b99c      	cbnz	r4, 8011ea6 <_malloc_r+0x56>
 8011e7e:	4f20      	ldr	r7, [pc, #128]	; (8011f00 <_malloc_r+0xb0>)
 8011e80:	683b      	ldr	r3, [r7, #0]
 8011e82:	b923      	cbnz	r3, 8011e8e <_malloc_r+0x3e>
 8011e84:	4621      	mov	r1, r4
 8011e86:	4630      	mov	r0, r6
 8011e88:	f000 f8be 	bl	8012008 <_sbrk_r>
 8011e8c:	6038      	str	r0, [r7, #0]
 8011e8e:	4629      	mov	r1, r5
 8011e90:	4630      	mov	r0, r6
 8011e92:	f000 f8b9 	bl	8012008 <_sbrk_r>
 8011e96:	1c43      	adds	r3, r0, #1
 8011e98:	d123      	bne.n	8011ee2 <_malloc_r+0x92>
 8011e9a:	230c      	movs	r3, #12
 8011e9c:	4630      	mov	r0, r6
 8011e9e:	6033      	str	r3, [r6, #0]
 8011ea0:	f000 fa02 	bl	80122a8 <__malloc_unlock>
 8011ea4:	e7e3      	b.n	8011e6e <_malloc_r+0x1e>
 8011ea6:	6823      	ldr	r3, [r4, #0]
 8011ea8:	1b5b      	subs	r3, r3, r5
 8011eaa:	d417      	bmi.n	8011edc <_malloc_r+0x8c>
 8011eac:	2b0b      	cmp	r3, #11
 8011eae:	d903      	bls.n	8011eb8 <_malloc_r+0x68>
 8011eb0:	6023      	str	r3, [r4, #0]
 8011eb2:	441c      	add	r4, r3
 8011eb4:	6025      	str	r5, [r4, #0]
 8011eb6:	e004      	b.n	8011ec2 <_malloc_r+0x72>
 8011eb8:	6863      	ldr	r3, [r4, #4]
 8011eba:	42a2      	cmp	r2, r4
 8011ebc:	bf0c      	ite	eq
 8011ebe:	600b      	streq	r3, [r1, #0]
 8011ec0:	6053      	strne	r3, [r2, #4]
 8011ec2:	4630      	mov	r0, r6
 8011ec4:	f000 f9f0 	bl	80122a8 <__malloc_unlock>
 8011ec8:	f104 000b 	add.w	r0, r4, #11
 8011ecc:	1d23      	adds	r3, r4, #4
 8011ece:	f020 0007 	bic.w	r0, r0, #7
 8011ed2:	1ac2      	subs	r2, r0, r3
 8011ed4:	d0cc      	beq.n	8011e70 <_malloc_r+0x20>
 8011ed6:	1a1b      	subs	r3, r3, r0
 8011ed8:	50a3      	str	r3, [r4, r2]
 8011eda:	e7c9      	b.n	8011e70 <_malloc_r+0x20>
 8011edc:	4622      	mov	r2, r4
 8011ede:	6864      	ldr	r4, [r4, #4]
 8011ee0:	e7cc      	b.n	8011e7c <_malloc_r+0x2c>
 8011ee2:	1cc4      	adds	r4, r0, #3
 8011ee4:	f024 0403 	bic.w	r4, r4, #3
 8011ee8:	42a0      	cmp	r0, r4
 8011eea:	d0e3      	beq.n	8011eb4 <_malloc_r+0x64>
 8011eec:	1a21      	subs	r1, r4, r0
 8011eee:	4630      	mov	r0, r6
 8011ef0:	f000 f88a 	bl	8012008 <_sbrk_r>
 8011ef4:	3001      	adds	r0, #1
 8011ef6:	d1dd      	bne.n	8011eb4 <_malloc_r+0x64>
 8011ef8:	e7cf      	b.n	8011e9a <_malloc_r+0x4a>
 8011efa:	bf00      	nop
 8011efc:	2000443c 	.word	0x2000443c
 8011f00:	20004440 	.word	0x20004440

08011f04 <iprintf>:
 8011f04:	b40f      	push	{r0, r1, r2, r3}
 8011f06:	4b0a      	ldr	r3, [pc, #40]	; (8011f30 <iprintf+0x2c>)
 8011f08:	b513      	push	{r0, r1, r4, lr}
 8011f0a:	681c      	ldr	r4, [r3, #0]
 8011f0c:	b124      	cbz	r4, 8011f18 <iprintf+0x14>
 8011f0e:	69a3      	ldr	r3, [r4, #24]
 8011f10:	b913      	cbnz	r3, 8011f18 <iprintf+0x14>
 8011f12:	4620      	mov	r0, r4
 8011f14:	f7ff feb2 	bl	8011c7c <__sinit>
 8011f18:	ab05      	add	r3, sp, #20
 8011f1a:	4620      	mov	r0, r4
 8011f1c:	9a04      	ldr	r2, [sp, #16]
 8011f1e:	68a1      	ldr	r1, [r4, #8]
 8011f20:	9301      	str	r3, [sp, #4]
 8011f22:	f000 fa3b 	bl	801239c <_vfiprintf_r>
 8011f26:	b002      	add	sp, #8
 8011f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f2c:	b004      	add	sp, #16
 8011f2e:	4770      	bx	lr
 8011f30:	20000018 	.word	0x20000018

08011f34 <cleanup_glue>:
 8011f34:	b538      	push	{r3, r4, r5, lr}
 8011f36:	460c      	mov	r4, r1
 8011f38:	6809      	ldr	r1, [r1, #0]
 8011f3a:	4605      	mov	r5, r0
 8011f3c:	b109      	cbz	r1, 8011f42 <cleanup_glue+0xe>
 8011f3e:	f7ff fff9 	bl	8011f34 <cleanup_glue>
 8011f42:	4621      	mov	r1, r4
 8011f44:	4628      	mov	r0, r5
 8011f46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f4a:	f000 b9b3 	b.w	80122b4 <_free_r>
	...

08011f50 <_reclaim_reent>:
 8011f50:	4b2c      	ldr	r3, [pc, #176]	; (8012004 <_reclaim_reent+0xb4>)
 8011f52:	b570      	push	{r4, r5, r6, lr}
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	4604      	mov	r4, r0
 8011f58:	4283      	cmp	r3, r0
 8011f5a:	d051      	beq.n	8012000 <_reclaim_reent+0xb0>
 8011f5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011f5e:	b143      	cbz	r3, 8011f72 <_reclaim_reent+0x22>
 8011f60:	68db      	ldr	r3, [r3, #12]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d14a      	bne.n	8011ffc <_reclaim_reent+0xac>
 8011f66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011f68:	6819      	ldr	r1, [r3, #0]
 8011f6a:	b111      	cbz	r1, 8011f72 <_reclaim_reent+0x22>
 8011f6c:	4620      	mov	r0, r4
 8011f6e:	f000 f9a1 	bl	80122b4 <_free_r>
 8011f72:	6961      	ldr	r1, [r4, #20]
 8011f74:	b111      	cbz	r1, 8011f7c <_reclaim_reent+0x2c>
 8011f76:	4620      	mov	r0, r4
 8011f78:	f000 f99c 	bl	80122b4 <_free_r>
 8011f7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011f7e:	b111      	cbz	r1, 8011f86 <_reclaim_reent+0x36>
 8011f80:	4620      	mov	r0, r4
 8011f82:	f000 f997 	bl	80122b4 <_free_r>
 8011f86:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011f88:	b111      	cbz	r1, 8011f90 <_reclaim_reent+0x40>
 8011f8a:	4620      	mov	r0, r4
 8011f8c:	f000 f992 	bl	80122b4 <_free_r>
 8011f90:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011f92:	b111      	cbz	r1, 8011f9a <_reclaim_reent+0x4a>
 8011f94:	4620      	mov	r0, r4
 8011f96:	f000 f98d 	bl	80122b4 <_free_r>
 8011f9a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011f9c:	b111      	cbz	r1, 8011fa4 <_reclaim_reent+0x54>
 8011f9e:	4620      	mov	r0, r4
 8011fa0:	f000 f988 	bl	80122b4 <_free_r>
 8011fa4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011fa6:	b111      	cbz	r1, 8011fae <_reclaim_reent+0x5e>
 8011fa8:	4620      	mov	r0, r4
 8011faa:	f000 f983 	bl	80122b4 <_free_r>
 8011fae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011fb0:	b111      	cbz	r1, 8011fb8 <_reclaim_reent+0x68>
 8011fb2:	4620      	mov	r0, r4
 8011fb4:	f000 f97e 	bl	80122b4 <_free_r>
 8011fb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011fba:	b111      	cbz	r1, 8011fc2 <_reclaim_reent+0x72>
 8011fbc:	4620      	mov	r0, r4
 8011fbe:	f000 f979 	bl	80122b4 <_free_r>
 8011fc2:	69a3      	ldr	r3, [r4, #24]
 8011fc4:	b1e3      	cbz	r3, 8012000 <_reclaim_reent+0xb0>
 8011fc6:	4620      	mov	r0, r4
 8011fc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011fca:	4798      	blx	r3
 8011fcc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011fce:	b1b9      	cbz	r1, 8012000 <_reclaim_reent+0xb0>
 8011fd0:	4620      	mov	r0, r4
 8011fd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011fd6:	f7ff bfad 	b.w	8011f34 <cleanup_glue>
 8011fda:	5949      	ldr	r1, [r1, r5]
 8011fdc:	b941      	cbnz	r1, 8011ff0 <_reclaim_reent+0xa0>
 8011fde:	3504      	adds	r5, #4
 8011fe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011fe2:	2d80      	cmp	r5, #128	; 0x80
 8011fe4:	68d9      	ldr	r1, [r3, #12]
 8011fe6:	d1f8      	bne.n	8011fda <_reclaim_reent+0x8a>
 8011fe8:	4620      	mov	r0, r4
 8011fea:	f000 f963 	bl	80122b4 <_free_r>
 8011fee:	e7ba      	b.n	8011f66 <_reclaim_reent+0x16>
 8011ff0:	680e      	ldr	r6, [r1, #0]
 8011ff2:	4620      	mov	r0, r4
 8011ff4:	f000 f95e 	bl	80122b4 <_free_r>
 8011ff8:	4631      	mov	r1, r6
 8011ffa:	e7ef      	b.n	8011fdc <_reclaim_reent+0x8c>
 8011ffc:	2500      	movs	r5, #0
 8011ffe:	e7ef      	b.n	8011fe0 <_reclaim_reent+0x90>
 8012000:	bd70      	pop	{r4, r5, r6, pc}
 8012002:	bf00      	nop
 8012004:	20000018 	.word	0x20000018

08012008 <_sbrk_r>:
 8012008:	b538      	push	{r3, r4, r5, lr}
 801200a:	2300      	movs	r3, #0
 801200c:	4d05      	ldr	r5, [pc, #20]	; (8012024 <_sbrk_r+0x1c>)
 801200e:	4604      	mov	r4, r0
 8012010:	4608      	mov	r0, r1
 8012012:	602b      	str	r3, [r5, #0]
 8012014:	f7ee feee 	bl	8000df4 <_sbrk>
 8012018:	1c43      	adds	r3, r0, #1
 801201a:	d102      	bne.n	8012022 <_sbrk_r+0x1a>
 801201c:	682b      	ldr	r3, [r5, #0]
 801201e:	b103      	cbz	r3, 8012022 <_sbrk_r+0x1a>
 8012020:	6023      	str	r3, [r4, #0]
 8012022:	bd38      	pop	{r3, r4, r5, pc}
 8012024:	2000b144 	.word	0x2000b144

08012028 <__sread>:
 8012028:	b510      	push	{r4, lr}
 801202a:	460c      	mov	r4, r1
 801202c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012030:	f000 fc7a 	bl	8012928 <_read_r>
 8012034:	2800      	cmp	r0, #0
 8012036:	bfab      	itete	ge
 8012038:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801203a:	89a3      	ldrhlt	r3, [r4, #12]
 801203c:	181b      	addge	r3, r3, r0
 801203e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012042:	bfac      	ite	ge
 8012044:	6563      	strge	r3, [r4, #84]	; 0x54
 8012046:	81a3      	strhlt	r3, [r4, #12]
 8012048:	bd10      	pop	{r4, pc}

0801204a <__swrite>:
 801204a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801204e:	461f      	mov	r7, r3
 8012050:	898b      	ldrh	r3, [r1, #12]
 8012052:	4605      	mov	r5, r0
 8012054:	05db      	lsls	r3, r3, #23
 8012056:	460c      	mov	r4, r1
 8012058:	4616      	mov	r6, r2
 801205a:	d505      	bpl.n	8012068 <__swrite+0x1e>
 801205c:	2302      	movs	r3, #2
 801205e:	2200      	movs	r2, #0
 8012060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012064:	f000 f908 	bl	8012278 <_lseek_r>
 8012068:	89a3      	ldrh	r3, [r4, #12]
 801206a:	4632      	mov	r2, r6
 801206c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012070:	81a3      	strh	r3, [r4, #12]
 8012072:	4628      	mov	r0, r5
 8012074:	463b      	mov	r3, r7
 8012076:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801207a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801207e:	f000 b817 	b.w	80120b0 <_write_r>

08012082 <__sseek>:
 8012082:	b510      	push	{r4, lr}
 8012084:	460c      	mov	r4, r1
 8012086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801208a:	f000 f8f5 	bl	8012278 <_lseek_r>
 801208e:	1c43      	adds	r3, r0, #1
 8012090:	89a3      	ldrh	r3, [r4, #12]
 8012092:	bf15      	itete	ne
 8012094:	6560      	strne	r0, [r4, #84]	; 0x54
 8012096:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801209a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801209e:	81a3      	strheq	r3, [r4, #12]
 80120a0:	bf18      	it	ne
 80120a2:	81a3      	strhne	r3, [r4, #12]
 80120a4:	bd10      	pop	{r4, pc}

080120a6 <__sclose>:
 80120a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120aa:	f000 b813 	b.w	80120d4 <_close_r>
	...

080120b0 <_write_r>:
 80120b0:	b538      	push	{r3, r4, r5, lr}
 80120b2:	4604      	mov	r4, r0
 80120b4:	4608      	mov	r0, r1
 80120b6:	4611      	mov	r1, r2
 80120b8:	2200      	movs	r2, #0
 80120ba:	4d05      	ldr	r5, [pc, #20]	; (80120d0 <_write_r+0x20>)
 80120bc:	602a      	str	r2, [r5, #0]
 80120be:	461a      	mov	r2, r3
 80120c0:	f7ee fe4b 	bl	8000d5a <_write>
 80120c4:	1c43      	adds	r3, r0, #1
 80120c6:	d102      	bne.n	80120ce <_write_r+0x1e>
 80120c8:	682b      	ldr	r3, [r5, #0]
 80120ca:	b103      	cbz	r3, 80120ce <_write_r+0x1e>
 80120cc:	6023      	str	r3, [r4, #0]
 80120ce:	bd38      	pop	{r3, r4, r5, pc}
 80120d0:	2000b144 	.word	0x2000b144

080120d4 <_close_r>:
 80120d4:	b538      	push	{r3, r4, r5, lr}
 80120d6:	2300      	movs	r3, #0
 80120d8:	4d05      	ldr	r5, [pc, #20]	; (80120f0 <_close_r+0x1c>)
 80120da:	4604      	mov	r4, r0
 80120dc:	4608      	mov	r0, r1
 80120de:	602b      	str	r3, [r5, #0]
 80120e0:	f7ee fe57 	bl	8000d92 <_close>
 80120e4:	1c43      	adds	r3, r0, #1
 80120e6:	d102      	bne.n	80120ee <_close_r+0x1a>
 80120e8:	682b      	ldr	r3, [r5, #0]
 80120ea:	b103      	cbz	r3, 80120ee <_close_r+0x1a>
 80120ec:	6023      	str	r3, [r4, #0]
 80120ee:	bd38      	pop	{r3, r4, r5, pc}
 80120f0:	2000b144 	.word	0x2000b144

080120f4 <__sflush_r>:
 80120f4:	898a      	ldrh	r2, [r1, #12]
 80120f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120fa:	4605      	mov	r5, r0
 80120fc:	0710      	lsls	r0, r2, #28
 80120fe:	460c      	mov	r4, r1
 8012100:	d458      	bmi.n	80121b4 <__sflush_r+0xc0>
 8012102:	684b      	ldr	r3, [r1, #4]
 8012104:	2b00      	cmp	r3, #0
 8012106:	dc05      	bgt.n	8012114 <__sflush_r+0x20>
 8012108:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801210a:	2b00      	cmp	r3, #0
 801210c:	dc02      	bgt.n	8012114 <__sflush_r+0x20>
 801210e:	2000      	movs	r0, #0
 8012110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012114:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012116:	2e00      	cmp	r6, #0
 8012118:	d0f9      	beq.n	801210e <__sflush_r+0x1a>
 801211a:	2300      	movs	r3, #0
 801211c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012120:	682f      	ldr	r7, [r5, #0]
 8012122:	602b      	str	r3, [r5, #0]
 8012124:	d032      	beq.n	801218c <__sflush_r+0x98>
 8012126:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012128:	89a3      	ldrh	r3, [r4, #12]
 801212a:	075a      	lsls	r2, r3, #29
 801212c:	d505      	bpl.n	801213a <__sflush_r+0x46>
 801212e:	6863      	ldr	r3, [r4, #4]
 8012130:	1ac0      	subs	r0, r0, r3
 8012132:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012134:	b10b      	cbz	r3, 801213a <__sflush_r+0x46>
 8012136:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012138:	1ac0      	subs	r0, r0, r3
 801213a:	2300      	movs	r3, #0
 801213c:	4602      	mov	r2, r0
 801213e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012140:	4628      	mov	r0, r5
 8012142:	6a21      	ldr	r1, [r4, #32]
 8012144:	47b0      	blx	r6
 8012146:	1c43      	adds	r3, r0, #1
 8012148:	89a3      	ldrh	r3, [r4, #12]
 801214a:	d106      	bne.n	801215a <__sflush_r+0x66>
 801214c:	6829      	ldr	r1, [r5, #0]
 801214e:	291d      	cmp	r1, #29
 8012150:	d82c      	bhi.n	80121ac <__sflush_r+0xb8>
 8012152:	4a2a      	ldr	r2, [pc, #168]	; (80121fc <__sflush_r+0x108>)
 8012154:	40ca      	lsrs	r2, r1
 8012156:	07d6      	lsls	r6, r2, #31
 8012158:	d528      	bpl.n	80121ac <__sflush_r+0xb8>
 801215a:	2200      	movs	r2, #0
 801215c:	6062      	str	r2, [r4, #4]
 801215e:	6922      	ldr	r2, [r4, #16]
 8012160:	04d9      	lsls	r1, r3, #19
 8012162:	6022      	str	r2, [r4, #0]
 8012164:	d504      	bpl.n	8012170 <__sflush_r+0x7c>
 8012166:	1c42      	adds	r2, r0, #1
 8012168:	d101      	bne.n	801216e <__sflush_r+0x7a>
 801216a:	682b      	ldr	r3, [r5, #0]
 801216c:	b903      	cbnz	r3, 8012170 <__sflush_r+0x7c>
 801216e:	6560      	str	r0, [r4, #84]	; 0x54
 8012170:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012172:	602f      	str	r7, [r5, #0]
 8012174:	2900      	cmp	r1, #0
 8012176:	d0ca      	beq.n	801210e <__sflush_r+0x1a>
 8012178:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801217c:	4299      	cmp	r1, r3
 801217e:	d002      	beq.n	8012186 <__sflush_r+0x92>
 8012180:	4628      	mov	r0, r5
 8012182:	f000 f897 	bl	80122b4 <_free_r>
 8012186:	2000      	movs	r0, #0
 8012188:	6360      	str	r0, [r4, #52]	; 0x34
 801218a:	e7c1      	b.n	8012110 <__sflush_r+0x1c>
 801218c:	6a21      	ldr	r1, [r4, #32]
 801218e:	2301      	movs	r3, #1
 8012190:	4628      	mov	r0, r5
 8012192:	47b0      	blx	r6
 8012194:	1c41      	adds	r1, r0, #1
 8012196:	d1c7      	bne.n	8012128 <__sflush_r+0x34>
 8012198:	682b      	ldr	r3, [r5, #0]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d0c4      	beq.n	8012128 <__sflush_r+0x34>
 801219e:	2b1d      	cmp	r3, #29
 80121a0:	d001      	beq.n	80121a6 <__sflush_r+0xb2>
 80121a2:	2b16      	cmp	r3, #22
 80121a4:	d101      	bne.n	80121aa <__sflush_r+0xb6>
 80121a6:	602f      	str	r7, [r5, #0]
 80121a8:	e7b1      	b.n	801210e <__sflush_r+0x1a>
 80121aa:	89a3      	ldrh	r3, [r4, #12]
 80121ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121b0:	81a3      	strh	r3, [r4, #12]
 80121b2:	e7ad      	b.n	8012110 <__sflush_r+0x1c>
 80121b4:	690f      	ldr	r7, [r1, #16]
 80121b6:	2f00      	cmp	r7, #0
 80121b8:	d0a9      	beq.n	801210e <__sflush_r+0x1a>
 80121ba:	0793      	lsls	r3, r2, #30
 80121bc:	bf18      	it	ne
 80121be:	2300      	movne	r3, #0
 80121c0:	680e      	ldr	r6, [r1, #0]
 80121c2:	bf08      	it	eq
 80121c4:	694b      	ldreq	r3, [r1, #20]
 80121c6:	eba6 0807 	sub.w	r8, r6, r7
 80121ca:	600f      	str	r7, [r1, #0]
 80121cc:	608b      	str	r3, [r1, #8]
 80121ce:	f1b8 0f00 	cmp.w	r8, #0
 80121d2:	dd9c      	ble.n	801210e <__sflush_r+0x1a>
 80121d4:	4643      	mov	r3, r8
 80121d6:	463a      	mov	r2, r7
 80121d8:	4628      	mov	r0, r5
 80121da:	6a21      	ldr	r1, [r4, #32]
 80121dc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80121de:	47b0      	blx	r6
 80121e0:	2800      	cmp	r0, #0
 80121e2:	dc06      	bgt.n	80121f2 <__sflush_r+0xfe>
 80121e4:	89a3      	ldrh	r3, [r4, #12]
 80121e6:	f04f 30ff 	mov.w	r0, #4294967295
 80121ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121ee:	81a3      	strh	r3, [r4, #12]
 80121f0:	e78e      	b.n	8012110 <__sflush_r+0x1c>
 80121f2:	4407      	add	r7, r0
 80121f4:	eba8 0800 	sub.w	r8, r8, r0
 80121f8:	e7e9      	b.n	80121ce <__sflush_r+0xda>
 80121fa:	bf00      	nop
 80121fc:	20400001 	.word	0x20400001

08012200 <_fflush_r>:
 8012200:	b538      	push	{r3, r4, r5, lr}
 8012202:	690b      	ldr	r3, [r1, #16]
 8012204:	4605      	mov	r5, r0
 8012206:	460c      	mov	r4, r1
 8012208:	b913      	cbnz	r3, 8012210 <_fflush_r+0x10>
 801220a:	2500      	movs	r5, #0
 801220c:	4628      	mov	r0, r5
 801220e:	bd38      	pop	{r3, r4, r5, pc}
 8012210:	b118      	cbz	r0, 801221a <_fflush_r+0x1a>
 8012212:	6983      	ldr	r3, [r0, #24]
 8012214:	b90b      	cbnz	r3, 801221a <_fflush_r+0x1a>
 8012216:	f7ff fd31 	bl	8011c7c <__sinit>
 801221a:	4b14      	ldr	r3, [pc, #80]	; (801226c <_fflush_r+0x6c>)
 801221c:	429c      	cmp	r4, r3
 801221e:	d11b      	bne.n	8012258 <_fflush_r+0x58>
 8012220:	686c      	ldr	r4, [r5, #4]
 8012222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d0ef      	beq.n	801220a <_fflush_r+0xa>
 801222a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801222c:	07d0      	lsls	r0, r2, #31
 801222e:	d404      	bmi.n	801223a <_fflush_r+0x3a>
 8012230:	0599      	lsls	r1, r3, #22
 8012232:	d402      	bmi.n	801223a <_fflush_r+0x3a>
 8012234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012236:	f7ff fde4 	bl	8011e02 <__retarget_lock_acquire_recursive>
 801223a:	4628      	mov	r0, r5
 801223c:	4621      	mov	r1, r4
 801223e:	f7ff ff59 	bl	80120f4 <__sflush_r>
 8012242:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012244:	4605      	mov	r5, r0
 8012246:	07da      	lsls	r2, r3, #31
 8012248:	d4e0      	bmi.n	801220c <_fflush_r+0xc>
 801224a:	89a3      	ldrh	r3, [r4, #12]
 801224c:	059b      	lsls	r3, r3, #22
 801224e:	d4dd      	bmi.n	801220c <_fflush_r+0xc>
 8012250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012252:	f7ff fdd7 	bl	8011e04 <__retarget_lock_release_recursive>
 8012256:	e7d9      	b.n	801220c <_fflush_r+0xc>
 8012258:	4b05      	ldr	r3, [pc, #20]	; (8012270 <_fflush_r+0x70>)
 801225a:	429c      	cmp	r4, r3
 801225c:	d101      	bne.n	8012262 <_fflush_r+0x62>
 801225e:	68ac      	ldr	r4, [r5, #8]
 8012260:	e7df      	b.n	8012222 <_fflush_r+0x22>
 8012262:	4b04      	ldr	r3, [pc, #16]	; (8012274 <_fflush_r+0x74>)
 8012264:	429c      	cmp	r4, r3
 8012266:	bf08      	it	eq
 8012268:	68ec      	ldreq	r4, [r5, #12]
 801226a:	e7da      	b.n	8012222 <_fflush_r+0x22>
 801226c:	08014be8 	.word	0x08014be8
 8012270:	08014c08 	.word	0x08014c08
 8012274:	08014bc8 	.word	0x08014bc8

08012278 <_lseek_r>:
 8012278:	b538      	push	{r3, r4, r5, lr}
 801227a:	4604      	mov	r4, r0
 801227c:	4608      	mov	r0, r1
 801227e:	4611      	mov	r1, r2
 8012280:	2200      	movs	r2, #0
 8012282:	4d05      	ldr	r5, [pc, #20]	; (8012298 <_lseek_r+0x20>)
 8012284:	602a      	str	r2, [r5, #0]
 8012286:	461a      	mov	r2, r3
 8012288:	f7ee fda7 	bl	8000dda <_lseek>
 801228c:	1c43      	adds	r3, r0, #1
 801228e:	d102      	bne.n	8012296 <_lseek_r+0x1e>
 8012290:	682b      	ldr	r3, [r5, #0]
 8012292:	b103      	cbz	r3, 8012296 <_lseek_r+0x1e>
 8012294:	6023      	str	r3, [r4, #0]
 8012296:	bd38      	pop	{r3, r4, r5, pc}
 8012298:	2000b144 	.word	0x2000b144

0801229c <__malloc_lock>:
 801229c:	4801      	ldr	r0, [pc, #4]	; (80122a4 <__malloc_lock+0x8>)
 801229e:	f7ff bdb0 	b.w	8011e02 <__retarget_lock_acquire_recursive>
 80122a2:	bf00      	nop
 80122a4:	2000b150 	.word	0x2000b150

080122a8 <__malloc_unlock>:
 80122a8:	4801      	ldr	r0, [pc, #4]	; (80122b0 <__malloc_unlock+0x8>)
 80122aa:	f7ff bdab 	b.w	8011e04 <__retarget_lock_release_recursive>
 80122ae:	bf00      	nop
 80122b0:	2000b150 	.word	0x2000b150

080122b4 <_free_r>:
 80122b4:	b538      	push	{r3, r4, r5, lr}
 80122b6:	4605      	mov	r5, r0
 80122b8:	2900      	cmp	r1, #0
 80122ba:	d043      	beq.n	8012344 <_free_r+0x90>
 80122bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80122c0:	1f0c      	subs	r4, r1, #4
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	bfb8      	it	lt
 80122c6:	18e4      	addlt	r4, r4, r3
 80122c8:	f7ff ffe8 	bl	801229c <__malloc_lock>
 80122cc:	4a1e      	ldr	r2, [pc, #120]	; (8012348 <_free_r+0x94>)
 80122ce:	6813      	ldr	r3, [r2, #0]
 80122d0:	4610      	mov	r0, r2
 80122d2:	b933      	cbnz	r3, 80122e2 <_free_r+0x2e>
 80122d4:	6063      	str	r3, [r4, #4]
 80122d6:	6014      	str	r4, [r2, #0]
 80122d8:	4628      	mov	r0, r5
 80122da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80122de:	f7ff bfe3 	b.w	80122a8 <__malloc_unlock>
 80122e2:	42a3      	cmp	r3, r4
 80122e4:	d90a      	bls.n	80122fc <_free_r+0x48>
 80122e6:	6821      	ldr	r1, [r4, #0]
 80122e8:	1862      	adds	r2, r4, r1
 80122ea:	4293      	cmp	r3, r2
 80122ec:	bf01      	itttt	eq
 80122ee:	681a      	ldreq	r2, [r3, #0]
 80122f0:	685b      	ldreq	r3, [r3, #4]
 80122f2:	1852      	addeq	r2, r2, r1
 80122f4:	6022      	streq	r2, [r4, #0]
 80122f6:	6063      	str	r3, [r4, #4]
 80122f8:	6004      	str	r4, [r0, #0]
 80122fa:	e7ed      	b.n	80122d8 <_free_r+0x24>
 80122fc:	461a      	mov	r2, r3
 80122fe:	685b      	ldr	r3, [r3, #4]
 8012300:	b10b      	cbz	r3, 8012306 <_free_r+0x52>
 8012302:	42a3      	cmp	r3, r4
 8012304:	d9fa      	bls.n	80122fc <_free_r+0x48>
 8012306:	6811      	ldr	r1, [r2, #0]
 8012308:	1850      	adds	r0, r2, r1
 801230a:	42a0      	cmp	r0, r4
 801230c:	d10b      	bne.n	8012326 <_free_r+0x72>
 801230e:	6820      	ldr	r0, [r4, #0]
 8012310:	4401      	add	r1, r0
 8012312:	1850      	adds	r0, r2, r1
 8012314:	4283      	cmp	r3, r0
 8012316:	6011      	str	r1, [r2, #0]
 8012318:	d1de      	bne.n	80122d8 <_free_r+0x24>
 801231a:	6818      	ldr	r0, [r3, #0]
 801231c:	685b      	ldr	r3, [r3, #4]
 801231e:	4401      	add	r1, r0
 8012320:	6011      	str	r1, [r2, #0]
 8012322:	6053      	str	r3, [r2, #4]
 8012324:	e7d8      	b.n	80122d8 <_free_r+0x24>
 8012326:	d902      	bls.n	801232e <_free_r+0x7a>
 8012328:	230c      	movs	r3, #12
 801232a:	602b      	str	r3, [r5, #0]
 801232c:	e7d4      	b.n	80122d8 <_free_r+0x24>
 801232e:	6820      	ldr	r0, [r4, #0]
 8012330:	1821      	adds	r1, r4, r0
 8012332:	428b      	cmp	r3, r1
 8012334:	bf01      	itttt	eq
 8012336:	6819      	ldreq	r1, [r3, #0]
 8012338:	685b      	ldreq	r3, [r3, #4]
 801233a:	1809      	addeq	r1, r1, r0
 801233c:	6021      	streq	r1, [r4, #0]
 801233e:	6063      	str	r3, [r4, #4]
 8012340:	6054      	str	r4, [r2, #4]
 8012342:	e7c9      	b.n	80122d8 <_free_r+0x24>
 8012344:	bd38      	pop	{r3, r4, r5, pc}
 8012346:	bf00      	nop
 8012348:	2000443c 	.word	0x2000443c

0801234c <__sfputc_r>:
 801234c:	6893      	ldr	r3, [r2, #8]
 801234e:	b410      	push	{r4}
 8012350:	3b01      	subs	r3, #1
 8012352:	2b00      	cmp	r3, #0
 8012354:	6093      	str	r3, [r2, #8]
 8012356:	da07      	bge.n	8012368 <__sfputc_r+0x1c>
 8012358:	6994      	ldr	r4, [r2, #24]
 801235a:	42a3      	cmp	r3, r4
 801235c:	db01      	blt.n	8012362 <__sfputc_r+0x16>
 801235e:	290a      	cmp	r1, #10
 8012360:	d102      	bne.n	8012368 <__sfputc_r+0x1c>
 8012362:	bc10      	pop	{r4}
 8012364:	f000 baf2 	b.w	801294c <__swbuf_r>
 8012368:	6813      	ldr	r3, [r2, #0]
 801236a:	1c58      	adds	r0, r3, #1
 801236c:	6010      	str	r0, [r2, #0]
 801236e:	7019      	strb	r1, [r3, #0]
 8012370:	4608      	mov	r0, r1
 8012372:	bc10      	pop	{r4}
 8012374:	4770      	bx	lr

08012376 <__sfputs_r>:
 8012376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012378:	4606      	mov	r6, r0
 801237a:	460f      	mov	r7, r1
 801237c:	4614      	mov	r4, r2
 801237e:	18d5      	adds	r5, r2, r3
 8012380:	42ac      	cmp	r4, r5
 8012382:	d101      	bne.n	8012388 <__sfputs_r+0x12>
 8012384:	2000      	movs	r0, #0
 8012386:	e007      	b.n	8012398 <__sfputs_r+0x22>
 8012388:	463a      	mov	r2, r7
 801238a:	4630      	mov	r0, r6
 801238c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012390:	f7ff ffdc 	bl	801234c <__sfputc_r>
 8012394:	1c43      	adds	r3, r0, #1
 8012396:	d1f3      	bne.n	8012380 <__sfputs_r+0xa>
 8012398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801239c <_vfiprintf_r>:
 801239c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123a0:	460d      	mov	r5, r1
 80123a2:	4614      	mov	r4, r2
 80123a4:	4698      	mov	r8, r3
 80123a6:	4606      	mov	r6, r0
 80123a8:	b09d      	sub	sp, #116	; 0x74
 80123aa:	b118      	cbz	r0, 80123b4 <_vfiprintf_r+0x18>
 80123ac:	6983      	ldr	r3, [r0, #24]
 80123ae:	b90b      	cbnz	r3, 80123b4 <_vfiprintf_r+0x18>
 80123b0:	f7ff fc64 	bl	8011c7c <__sinit>
 80123b4:	4b89      	ldr	r3, [pc, #548]	; (80125dc <_vfiprintf_r+0x240>)
 80123b6:	429d      	cmp	r5, r3
 80123b8:	d11b      	bne.n	80123f2 <_vfiprintf_r+0x56>
 80123ba:	6875      	ldr	r5, [r6, #4]
 80123bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80123be:	07d9      	lsls	r1, r3, #31
 80123c0:	d405      	bmi.n	80123ce <_vfiprintf_r+0x32>
 80123c2:	89ab      	ldrh	r3, [r5, #12]
 80123c4:	059a      	lsls	r2, r3, #22
 80123c6:	d402      	bmi.n	80123ce <_vfiprintf_r+0x32>
 80123c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80123ca:	f7ff fd1a 	bl	8011e02 <__retarget_lock_acquire_recursive>
 80123ce:	89ab      	ldrh	r3, [r5, #12]
 80123d0:	071b      	lsls	r3, r3, #28
 80123d2:	d501      	bpl.n	80123d8 <_vfiprintf_r+0x3c>
 80123d4:	692b      	ldr	r3, [r5, #16]
 80123d6:	b9eb      	cbnz	r3, 8012414 <_vfiprintf_r+0x78>
 80123d8:	4629      	mov	r1, r5
 80123da:	4630      	mov	r0, r6
 80123dc:	f000 fb08 	bl	80129f0 <__swsetup_r>
 80123e0:	b1c0      	cbz	r0, 8012414 <_vfiprintf_r+0x78>
 80123e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80123e4:	07dc      	lsls	r4, r3, #31
 80123e6:	d50e      	bpl.n	8012406 <_vfiprintf_r+0x6a>
 80123e8:	f04f 30ff 	mov.w	r0, #4294967295
 80123ec:	b01d      	add	sp, #116	; 0x74
 80123ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123f2:	4b7b      	ldr	r3, [pc, #492]	; (80125e0 <_vfiprintf_r+0x244>)
 80123f4:	429d      	cmp	r5, r3
 80123f6:	d101      	bne.n	80123fc <_vfiprintf_r+0x60>
 80123f8:	68b5      	ldr	r5, [r6, #8]
 80123fa:	e7df      	b.n	80123bc <_vfiprintf_r+0x20>
 80123fc:	4b79      	ldr	r3, [pc, #484]	; (80125e4 <_vfiprintf_r+0x248>)
 80123fe:	429d      	cmp	r5, r3
 8012400:	bf08      	it	eq
 8012402:	68f5      	ldreq	r5, [r6, #12]
 8012404:	e7da      	b.n	80123bc <_vfiprintf_r+0x20>
 8012406:	89ab      	ldrh	r3, [r5, #12]
 8012408:	0598      	lsls	r0, r3, #22
 801240a:	d4ed      	bmi.n	80123e8 <_vfiprintf_r+0x4c>
 801240c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801240e:	f7ff fcf9 	bl	8011e04 <__retarget_lock_release_recursive>
 8012412:	e7e9      	b.n	80123e8 <_vfiprintf_r+0x4c>
 8012414:	2300      	movs	r3, #0
 8012416:	9309      	str	r3, [sp, #36]	; 0x24
 8012418:	2320      	movs	r3, #32
 801241a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801241e:	2330      	movs	r3, #48	; 0x30
 8012420:	f04f 0901 	mov.w	r9, #1
 8012424:	f8cd 800c 	str.w	r8, [sp, #12]
 8012428:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80125e8 <_vfiprintf_r+0x24c>
 801242c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012430:	4623      	mov	r3, r4
 8012432:	469a      	mov	sl, r3
 8012434:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012438:	b10a      	cbz	r2, 801243e <_vfiprintf_r+0xa2>
 801243a:	2a25      	cmp	r2, #37	; 0x25
 801243c:	d1f9      	bne.n	8012432 <_vfiprintf_r+0x96>
 801243e:	ebba 0b04 	subs.w	fp, sl, r4
 8012442:	d00b      	beq.n	801245c <_vfiprintf_r+0xc0>
 8012444:	465b      	mov	r3, fp
 8012446:	4622      	mov	r2, r4
 8012448:	4629      	mov	r1, r5
 801244a:	4630      	mov	r0, r6
 801244c:	f7ff ff93 	bl	8012376 <__sfputs_r>
 8012450:	3001      	adds	r0, #1
 8012452:	f000 80aa 	beq.w	80125aa <_vfiprintf_r+0x20e>
 8012456:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012458:	445a      	add	r2, fp
 801245a:	9209      	str	r2, [sp, #36]	; 0x24
 801245c:	f89a 3000 	ldrb.w	r3, [sl]
 8012460:	2b00      	cmp	r3, #0
 8012462:	f000 80a2 	beq.w	80125aa <_vfiprintf_r+0x20e>
 8012466:	2300      	movs	r3, #0
 8012468:	f04f 32ff 	mov.w	r2, #4294967295
 801246c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012470:	f10a 0a01 	add.w	sl, sl, #1
 8012474:	9304      	str	r3, [sp, #16]
 8012476:	9307      	str	r3, [sp, #28]
 8012478:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801247c:	931a      	str	r3, [sp, #104]	; 0x68
 801247e:	4654      	mov	r4, sl
 8012480:	2205      	movs	r2, #5
 8012482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012486:	4858      	ldr	r0, [pc, #352]	; (80125e8 <_vfiprintf_r+0x24c>)
 8012488:	f000 fb84 	bl	8012b94 <memchr>
 801248c:	9a04      	ldr	r2, [sp, #16]
 801248e:	b9d8      	cbnz	r0, 80124c8 <_vfiprintf_r+0x12c>
 8012490:	06d1      	lsls	r1, r2, #27
 8012492:	bf44      	itt	mi
 8012494:	2320      	movmi	r3, #32
 8012496:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801249a:	0713      	lsls	r3, r2, #28
 801249c:	bf44      	itt	mi
 801249e:	232b      	movmi	r3, #43	; 0x2b
 80124a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80124a4:	f89a 3000 	ldrb.w	r3, [sl]
 80124a8:	2b2a      	cmp	r3, #42	; 0x2a
 80124aa:	d015      	beq.n	80124d8 <_vfiprintf_r+0x13c>
 80124ac:	4654      	mov	r4, sl
 80124ae:	2000      	movs	r0, #0
 80124b0:	f04f 0c0a 	mov.w	ip, #10
 80124b4:	9a07      	ldr	r2, [sp, #28]
 80124b6:	4621      	mov	r1, r4
 80124b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80124bc:	3b30      	subs	r3, #48	; 0x30
 80124be:	2b09      	cmp	r3, #9
 80124c0:	d94e      	bls.n	8012560 <_vfiprintf_r+0x1c4>
 80124c2:	b1b0      	cbz	r0, 80124f2 <_vfiprintf_r+0x156>
 80124c4:	9207      	str	r2, [sp, #28]
 80124c6:	e014      	b.n	80124f2 <_vfiprintf_r+0x156>
 80124c8:	eba0 0308 	sub.w	r3, r0, r8
 80124cc:	fa09 f303 	lsl.w	r3, r9, r3
 80124d0:	4313      	orrs	r3, r2
 80124d2:	46a2      	mov	sl, r4
 80124d4:	9304      	str	r3, [sp, #16]
 80124d6:	e7d2      	b.n	801247e <_vfiprintf_r+0xe2>
 80124d8:	9b03      	ldr	r3, [sp, #12]
 80124da:	1d19      	adds	r1, r3, #4
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	9103      	str	r1, [sp, #12]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	bfbb      	ittet	lt
 80124e4:	425b      	neglt	r3, r3
 80124e6:	f042 0202 	orrlt.w	r2, r2, #2
 80124ea:	9307      	strge	r3, [sp, #28]
 80124ec:	9307      	strlt	r3, [sp, #28]
 80124ee:	bfb8      	it	lt
 80124f0:	9204      	strlt	r2, [sp, #16]
 80124f2:	7823      	ldrb	r3, [r4, #0]
 80124f4:	2b2e      	cmp	r3, #46	; 0x2e
 80124f6:	d10c      	bne.n	8012512 <_vfiprintf_r+0x176>
 80124f8:	7863      	ldrb	r3, [r4, #1]
 80124fa:	2b2a      	cmp	r3, #42	; 0x2a
 80124fc:	d135      	bne.n	801256a <_vfiprintf_r+0x1ce>
 80124fe:	9b03      	ldr	r3, [sp, #12]
 8012500:	3402      	adds	r4, #2
 8012502:	1d1a      	adds	r2, r3, #4
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	9203      	str	r2, [sp, #12]
 8012508:	2b00      	cmp	r3, #0
 801250a:	bfb8      	it	lt
 801250c:	f04f 33ff 	movlt.w	r3, #4294967295
 8012510:	9305      	str	r3, [sp, #20]
 8012512:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80125f8 <_vfiprintf_r+0x25c>
 8012516:	2203      	movs	r2, #3
 8012518:	4650      	mov	r0, sl
 801251a:	7821      	ldrb	r1, [r4, #0]
 801251c:	f000 fb3a 	bl	8012b94 <memchr>
 8012520:	b140      	cbz	r0, 8012534 <_vfiprintf_r+0x198>
 8012522:	2340      	movs	r3, #64	; 0x40
 8012524:	eba0 000a 	sub.w	r0, r0, sl
 8012528:	fa03 f000 	lsl.w	r0, r3, r0
 801252c:	9b04      	ldr	r3, [sp, #16]
 801252e:	3401      	adds	r4, #1
 8012530:	4303      	orrs	r3, r0
 8012532:	9304      	str	r3, [sp, #16]
 8012534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012538:	2206      	movs	r2, #6
 801253a:	482c      	ldr	r0, [pc, #176]	; (80125ec <_vfiprintf_r+0x250>)
 801253c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012540:	f000 fb28 	bl	8012b94 <memchr>
 8012544:	2800      	cmp	r0, #0
 8012546:	d03f      	beq.n	80125c8 <_vfiprintf_r+0x22c>
 8012548:	4b29      	ldr	r3, [pc, #164]	; (80125f0 <_vfiprintf_r+0x254>)
 801254a:	bb1b      	cbnz	r3, 8012594 <_vfiprintf_r+0x1f8>
 801254c:	9b03      	ldr	r3, [sp, #12]
 801254e:	3307      	adds	r3, #7
 8012550:	f023 0307 	bic.w	r3, r3, #7
 8012554:	3308      	adds	r3, #8
 8012556:	9303      	str	r3, [sp, #12]
 8012558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801255a:	443b      	add	r3, r7
 801255c:	9309      	str	r3, [sp, #36]	; 0x24
 801255e:	e767      	b.n	8012430 <_vfiprintf_r+0x94>
 8012560:	460c      	mov	r4, r1
 8012562:	2001      	movs	r0, #1
 8012564:	fb0c 3202 	mla	r2, ip, r2, r3
 8012568:	e7a5      	b.n	80124b6 <_vfiprintf_r+0x11a>
 801256a:	2300      	movs	r3, #0
 801256c:	f04f 0c0a 	mov.w	ip, #10
 8012570:	4619      	mov	r1, r3
 8012572:	3401      	adds	r4, #1
 8012574:	9305      	str	r3, [sp, #20]
 8012576:	4620      	mov	r0, r4
 8012578:	f810 2b01 	ldrb.w	r2, [r0], #1
 801257c:	3a30      	subs	r2, #48	; 0x30
 801257e:	2a09      	cmp	r2, #9
 8012580:	d903      	bls.n	801258a <_vfiprintf_r+0x1ee>
 8012582:	2b00      	cmp	r3, #0
 8012584:	d0c5      	beq.n	8012512 <_vfiprintf_r+0x176>
 8012586:	9105      	str	r1, [sp, #20]
 8012588:	e7c3      	b.n	8012512 <_vfiprintf_r+0x176>
 801258a:	4604      	mov	r4, r0
 801258c:	2301      	movs	r3, #1
 801258e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012592:	e7f0      	b.n	8012576 <_vfiprintf_r+0x1da>
 8012594:	ab03      	add	r3, sp, #12
 8012596:	9300      	str	r3, [sp, #0]
 8012598:	462a      	mov	r2, r5
 801259a:	4630      	mov	r0, r6
 801259c:	4b15      	ldr	r3, [pc, #84]	; (80125f4 <_vfiprintf_r+0x258>)
 801259e:	a904      	add	r1, sp, #16
 80125a0:	f3af 8000 	nop.w
 80125a4:	4607      	mov	r7, r0
 80125a6:	1c78      	adds	r0, r7, #1
 80125a8:	d1d6      	bne.n	8012558 <_vfiprintf_r+0x1bc>
 80125aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80125ac:	07d9      	lsls	r1, r3, #31
 80125ae:	d405      	bmi.n	80125bc <_vfiprintf_r+0x220>
 80125b0:	89ab      	ldrh	r3, [r5, #12]
 80125b2:	059a      	lsls	r2, r3, #22
 80125b4:	d402      	bmi.n	80125bc <_vfiprintf_r+0x220>
 80125b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80125b8:	f7ff fc24 	bl	8011e04 <__retarget_lock_release_recursive>
 80125bc:	89ab      	ldrh	r3, [r5, #12]
 80125be:	065b      	lsls	r3, r3, #25
 80125c0:	f53f af12 	bmi.w	80123e8 <_vfiprintf_r+0x4c>
 80125c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80125c6:	e711      	b.n	80123ec <_vfiprintf_r+0x50>
 80125c8:	ab03      	add	r3, sp, #12
 80125ca:	9300      	str	r3, [sp, #0]
 80125cc:	462a      	mov	r2, r5
 80125ce:	4630      	mov	r0, r6
 80125d0:	4b08      	ldr	r3, [pc, #32]	; (80125f4 <_vfiprintf_r+0x258>)
 80125d2:	a904      	add	r1, sp, #16
 80125d4:	f000 f882 	bl	80126dc <_printf_i>
 80125d8:	e7e4      	b.n	80125a4 <_vfiprintf_r+0x208>
 80125da:	bf00      	nop
 80125dc:	08014be8 	.word	0x08014be8
 80125e0:	08014c08 	.word	0x08014c08
 80125e4:	08014bc8 	.word	0x08014bc8
 80125e8:	08014c2c 	.word	0x08014c2c
 80125ec:	08014c36 	.word	0x08014c36
 80125f0:	00000000 	.word	0x00000000
 80125f4:	08012377 	.word	0x08012377
 80125f8:	08014c32 	.word	0x08014c32

080125fc <_printf_common>:
 80125fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012600:	4616      	mov	r6, r2
 8012602:	4699      	mov	r9, r3
 8012604:	688a      	ldr	r2, [r1, #8]
 8012606:	690b      	ldr	r3, [r1, #16]
 8012608:	4607      	mov	r7, r0
 801260a:	4293      	cmp	r3, r2
 801260c:	bfb8      	it	lt
 801260e:	4613      	movlt	r3, r2
 8012610:	6033      	str	r3, [r6, #0]
 8012612:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012616:	460c      	mov	r4, r1
 8012618:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801261c:	b10a      	cbz	r2, 8012622 <_printf_common+0x26>
 801261e:	3301      	adds	r3, #1
 8012620:	6033      	str	r3, [r6, #0]
 8012622:	6823      	ldr	r3, [r4, #0]
 8012624:	0699      	lsls	r1, r3, #26
 8012626:	bf42      	ittt	mi
 8012628:	6833      	ldrmi	r3, [r6, #0]
 801262a:	3302      	addmi	r3, #2
 801262c:	6033      	strmi	r3, [r6, #0]
 801262e:	6825      	ldr	r5, [r4, #0]
 8012630:	f015 0506 	ands.w	r5, r5, #6
 8012634:	d106      	bne.n	8012644 <_printf_common+0x48>
 8012636:	f104 0a19 	add.w	sl, r4, #25
 801263a:	68e3      	ldr	r3, [r4, #12]
 801263c:	6832      	ldr	r2, [r6, #0]
 801263e:	1a9b      	subs	r3, r3, r2
 8012640:	42ab      	cmp	r3, r5
 8012642:	dc28      	bgt.n	8012696 <_printf_common+0x9a>
 8012644:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012648:	1e13      	subs	r3, r2, #0
 801264a:	6822      	ldr	r2, [r4, #0]
 801264c:	bf18      	it	ne
 801264e:	2301      	movne	r3, #1
 8012650:	0692      	lsls	r2, r2, #26
 8012652:	d42d      	bmi.n	80126b0 <_printf_common+0xb4>
 8012654:	4649      	mov	r1, r9
 8012656:	4638      	mov	r0, r7
 8012658:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801265c:	47c0      	blx	r8
 801265e:	3001      	adds	r0, #1
 8012660:	d020      	beq.n	80126a4 <_printf_common+0xa8>
 8012662:	6823      	ldr	r3, [r4, #0]
 8012664:	68e5      	ldr	r5, [r4, #12]
 8012666:	f003 0306 	and.w	r3, r3, #6
 801266a:	2b04      	cmp	r3, #4
 801266c:	bf18      	it	ne
 801266e:	2500      	movne	r5, #0
 8012670:	6832      	ldr	r2, [r6, #0]
 8012672:	f04f 0600 	mov.w	r6, #0
 8012676:	68a3      	ldr	r3, [r4, #8]
 8012678:	bf08      	it	eq
 801267a:	1aad      	subeq	r5, r5, r2
 801267c:	6922      	ldr	r2, [r4, #16]
 801267e:	bf08      	it	eq
 8012680:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012684:	4293      	cmp	r3, r2
 8012686:	bfc4      	itt	gt
 8012688:	1a9b      	subgt	r3, r3, r2
 801268a:	18ed      	addgt	r5, r5, r3
 801268c:	341a      	adds	r4, #26
 801268e:	42b5      	cmp	r5, r6
 8012690:	d11a      	bne.n	80126c8 <_printf_common+0xcc>
 8012692:	2000      	movs	r0, #0
 8012694:	e008      	b.n	80126a8 <_printf_common+0xac>
 8012696:	2301      	movs	r3, #1
 8012698:	4652      	mov	r2, sl
 801269a:	4649      	mov	r1, r9
 801269c:	4638      	mov	r0, r7
 801269e:	47c0      	blx	r8
 80126a0:	3001      	adds	r0, #1
 80126a2:	d103      	bne.n	80126ac <_printf_common+0xb0>
 80126a4:	f04f 30ff 	mov.w	r0, #4294967295
 80126a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126ac:	3501      	adds	r5, #1
 80126ae:	e7c4      	b.n	801263a <_printf_common+0x3e>
 80126b0:	2030      	movs	r0, #48	; 0x30
 80126b2:	18e1      	adds	r1, r4, r3
 80126b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80126b8:	1c5a      	adds	r2, r3, #1
 80126ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80126be:	4422      	add	r2, r4
 80126c0:	3302      	adds	r3, #2
 80126c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80126c6:	e7c5      	b.n	8012654 <_printf_common+0x58>
 80126c8:	2301      	movs	r3, #1
 80126ca:	4622      	mov	r2, r4
 80126cc:	4649      	mov	r1, r9
 80126ce:	4638      	mov	r0, r7
 80126d0:	47c0      	blx	r8
 80126d2:	3001      	adds	r0, #1
 80126d4:	d0e6      	beq.n	80126a4 <_printf_common+0xa8>
 80126d6:	3601      	adds	r6, #1
 80126d8:	e7d9      	b.n	801268e <_printf_common+0x92>
	...

080126dc <_printf_i>:
 80126dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80126e0:	460c      	mov	r4, r1
 80126e2:	7e27      	ldrb	r7, [r4, #24]
 80126e4:	4691      	mov	r9, r2
 80126e6:	2f78      	cmp	r7, #120	; 0x78
 80126e8:	4680      	mov	r8, r0
 80126ea:	469a      	mov	sl, r3
 80126ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80126ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80126f2:	d807      	bhi.n	8012704 <_printf_i+0x28>
 80126f4:	2f62      	cmp	r7, #98	; 0x62
 80126f6:	d80a      	bhi.n	801270e <_printf_i+0x32>
 80126f8:	2f00      	cmp	r7, #0
 80126fa:	f000 80d9 	beq.w	80128b0 <_printf_i+0x1d4>
 80126fe:	2f58      	cmp	r7, #88	; 0x58
 8012700:	f000 80a4 	beq.w	801284c <_printf_i+0x170>
 8012704:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012708:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801270c:	e03a      	b.n	8012784 <_printf_i+0xa8>
 801270e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012712:	2b15      	cmp	r3, #21
 8012714:	d8f6      	bhi.n	8012704 <_printf_i+0x28>
 8012716:	a001      	add	r0, pc, #4	; (adr r0, 801271c <_printf_i+0x40>)
 8012718:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801271c:	08012775 	.word	0x08012775
 8012720:	08012789 	.word	0x08012789
 8012724:	08012705 	.word	0x08012705
 8012728:	08012705 	.word	0x08012705
 801272c:	08012705 	.word	0x08012705
 8012730:	08012705 	.word	0x08012705
 8012734:	08012789 	.word	0x08012789
 8012738:	08012705 	.word	0x08012705
 801273c:	08012705 	.word	0x08012705
 8012740:	08012705 	.word	0x08012705
 8012744:	08012705 	.word	0x08012705
 8012748:	08012897 	.word	0x08012897
 801274c:	080127b9 	.word	0x080127b9
 8012750:	08012879 	.word	0x08012879
 8012754:	08012705 	.word	0x08012705
 8012758:	08012705 	.word	0x08012705
 801275c:	080128b9 	.word	0x080128b9
 8012760:	08012705 	.word	0x08012705
 8012764:	080127b9 	.word	0x080127b9
 8012768:	08012705 	.word	0x08012705
 801276c:	08012705 	.word	0x08012705
 8012770:	08012881 	.word	0x08012881
 8012774:	680b      	ldr	r3, [r1, #0]
 8012776:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801277a:	1d1a      	adds	r2, r3, #4
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	600a      	str	r2, [r1, #0]
 8012780:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012784:	2301      	movs	r3, #1
 8012786:	e0a4      	b.n	80128d2 <_printf_i+0x1f6>
 8012788:	6825      	ldr	r5, [r4, #0]
 801278a:	6808      	ldr	r0, [r1, #0]
 801278c:	062e      	lsls	r6, r5, #24
 801278e:	f100 0304 	add.w	r3, r0, #4
 8012792:	d50a      	bpl.n	80127aa <_printf_i+0xce>
 8012794:	6805      	ldr	r5, [r0, #0]
 8012796:	600b      	str	r3, [r1, #0]
 8012798:	2d00      	cmp	r5, #0
 801279a:	da03      	bge.n	80127a4 <_printf_i+0xc8>
 801279c:	232d      	movs	r3, #45	; 0x2d
 801279e:	426d      	negs	r5, r5
 80127a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80127a4:	230a      	movs	r3, #10
 80127a6:	485e      	ldr	r0, [pc, #376]	; (8012920 <_printf_i+0x244>)
 80127a8:	e019      	b.n	80127de <_printf_i+0x102>
 80127aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80127ae:	6805      	ldr	r5, [r0, #0]
 80127b0:	600b      	str	r3, [r1, #0]
 80127b2:	bf18      	it	ne
 80127b4:	b22d      	sxthne	r5, r5
 80127b6:	e7ef      	b.n	8012798 <_printf_i+0xbc>
 80127b8:	680b      	ldr	r3, [r1, #0]
 80127ba:	6825      	ldr	r5, [r4, #0]
 80127bc:	1d18      	adds	r0, r3, #4
 80127be:	6008      	str	r0, [r1, #0]
 80127c0:	0628      	lsls	r0, r5, #24
 80127c2:	d501      	bpl.n	80127c8 <_printf_i+0xec>
 80127c4:	681d      	ldr	r5, [r3, #0]
 80127c6:	e002      	b.n	80127ce <_printf_i+0xf2>
 80127c8:	0669      	lsls	r1, r5, #25
 80127ca:	d5fb      	bpl.n	80127c4 <_printf_i+0xe8>
 80127cc:	881d      	ldrh	r5, [r3, #0]
 80127ce:	2f6f      	cmp	r7, #111	; 0x6f
 80127d0:	bf0c      	ite	eq
 80127d2:	2308      	moveq	r3, #8
 80127d4:	230a      	movne	r3, #10
 80127d6:	4852      	ldr	r0, [pc, #328]	; (8012920 <_printf_i+0x244>)
 80127d8:	2100      	movs	r1, #0
 80127da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80127de:	6866      	ldr	r6, [r4, #4]
 80127e0:	2e00      	cmp	r6, #0
 80127e2:	bfa8      	it	ge
 80127e4:	6821      	ldrge	r1, [r4, #0]
 80127e6:	60a6      	str	r6, [r4, #8]
 80127e8:	bfa4      	itt	ge
 80127ea:	f021 0104 	bicge.w	r1, r1, #4
 80127ee:	6021      	strge	r1, [r4, #0]
 80127f0:	b90d      	cbnz	r5, 80127f6 <_printf_i+0x11a>
 80127f2:	2e00      	cmp	r6, #0
 80127f4:	d04d      	beq.n	8012892 <_printf_i+0x1b6>
 80127f6:	4616      	mov	r6, r2
 80127f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80127fc:	fb03 5711 	mls	r7, r3, r1, r5
 8012800:	5dc7      	ldrb	r7, [r0, r7]
 8012802:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012806:	462f      	mov	r7, r5
 8012808:	42bb      	cmp	r3, r7
 801280a:	460d      	mov	r5, r1
 801280c:	d9f4      	bls.n	80127f8 <_printf_i+0x11c>
 801280e:	2b08      	cmp	r3, #8
 8012810:	d10b      	bne.n	801282a <_printf_i+0x14e>
 8012812:	6823      	ldr	r3, [r4, #0]
 8012814:	07df      	lsls	r7, r3, #31
 8012816:	d508      	bpl.n	801282a <_printf_i+0x14e>
 8012818:	6923      	ldr	r3, [r4, #16]
 801281a:	6861      	ldr	r1, [r4, #4]
 801281c:	4299      	cmp	r1, r3
 801281e:	bfde      	ittt	le
 8012820:	2330      	movle	r3, #48	; 0x30
 8012822:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012826:	f106 36ff 	addle.w	r6, r6, #4294967295
 801282a:	1b92      	subs	r2, r2, r6
 801282c:	6122      	str	r2, [r4, #16]
 801282e:	464b      	mov	r3, r9
 8012830:	4621      	mov	r1, r4
 8012832:	4640      	mov	r0, r8
 8012834:	f8cd a000 	str.w	sl, [sp]
 8012838:	aa03      	add	r2, sp, #12
 801283a:	f7ff fedf 	bl	80125fc <_printf_common>
 801283e:	3001      	adds	r0, #1
 8012840:	d14c      	bne.n	80128dc <_printf_i+0x200>
 8012842:	f04f 30ff 	mov.w	r0, #4294967295
 8012846:	b004      	add	sp, #16
 8012848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801284c:	4834      	ldr	r0, [pc, #208]	; (8012920 <_printf_i+0x244>)
 801284e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012852:	680e      	ldr	r6, [r1, #0]
 8012854:	6823      	ldr	r3, [r4, #0]
 8012856:	f856 5b04 	ldr.w	r5, [r6], #4
 801285a:	061f      	lsls	r7, r3, #24
 801285c:	600e      	str	r6, [r1, #0]
 801285e:	d514      	bpl.n	801288a <_printf_i+0x1ae>
 8012860:	07d9      	lsls	r1, r3, #31
 8012862:	bf44      	itt	mi
 8012864:	f043 0320 	orrmi.w	r3, r3, #32
 8012868:	6023      	strmi	r3, [r4, #0]
 801286a:	b91d      	cbnz	r5, 8012874 <_printf_i+0x198>
 801286c:	6823      	ldr	r3, [r4, #0]
 801286e:	f023 0320 	bic.w	r3, r3, #32
 8012872:	6023      	str	r3, [r4, #0]
 8012874:	2310      	movs	r3, #16
 8012876:	e7af      	b.n	80127d8 <_printf_i+0xfc>
 8012878:	6823      	ldr	r3, [r4, #0]
 801287a:	f043 0320 	orr.w	r3, r3, #32
 801287e:	6023      	str	r3, [r4, #0]
 8012880:	2378      	movs	r3, #120	; 0x78
 8012882:	4828      	ldr	r0, [pc, #160]	; (8012924 <_printf_i+0x248>)
 8012884:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012888:	e7e3      	b.n	8012852 <_printf_i+0x176>
 801288a:	065e      	lsls	r6, r3, #25
 801288c:	bf48      	it	mi
 801288e:	b2ad      	uxthmi	r5, r5
 8012890:	e7e6      	b.n	8012860 <_printf_i+0x184>
 8012892:	4616      	mov	r6, r2
 8012894:	e7bb      	b.n	801280e <_printf_i+0x132>
 8012896:	680b      	ldr	r3, [r1, #0]
 8012898:	6826      	ldr	r6, [r4, #0]
 801289a:	1d1d      	adds	r5, r3, #4
 801289c:	6960      	ldr	r0, [r4, #20]
 801289e:	600d      	str	r5, [r1, #0]
 80128a0:	0635      	lsls	r5, r6, #24
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	d501      	bpl.n	80128aa <_printf_i+0x1ce>
 80128a6:	6018      	str	r0, [r3, #0]
 80128a8:	e002      	b.n	80128b0 <_printf_i+0x1d4>
 80128aa:	0671      	lsls	r1, r6, #25
 80128ac:	d5fb      	bpl.n	80128a6 <_printf_i+0x1ca>
 80128ae:	8018      	strh	r0, [r3, #0]
 80128b0:	2300      	movs	r3, #0
 80128b2:	4616      	mov	r6, r2
 80128b4:	6123      	str	r3, [r4, #16]
 80128b6:	e7ba      	b.n	801282e <_printf_i+0x152>
 80128b8:	680b      	ldr	r3, [r1, #0]
 80128ba:	1d1a      	adds	r2, r3, #4
 80128bc:	600a      	str	r2, [r1, #0]
 80128be:	681e      	ldr	r6, [r3, #0]
 80128c0:	2100      	movs	r1, #0
 80128c2:	4630      	mov	r0, r6
 80128c4:	6862      	ldr	r2, [r4, #4]
 80128c6:	f000 f965 	bl	8012b94 <memchr>
 80128ca:	b108      	cbz	r0, 80128d0 <_printf_i+0x1f4>
 80128cc:	1b80      	subs	r0, r0, r6
 80128ce:	6060      	str	r0, [r4, #4]
 80128d0:	6863      	ldr	r3, [r4, #4]
 80128d2:	6123      	str	r3, [r4, #16]
 80128d4:	2300      	movs	r3, #0
 80128d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80128da:	e7a8      	b.n	801282e <_printf_i+0x152>
 80128dc:	4632      	mov	r2, r6
 80128de:	4649      	mov	r1, r9
 80128e0:	4640      	mov	r0, r8
 80128e2:	6923      	ldr	r3, [r4, #16]
 80128e4:	47d0      	blx	sl
 80128e6:	3001      	adds	r0, #1
 80128e8:	d0ab      	beq.n	8012842 <_printf_i+0x166>
 80128ea:	6823      	ldr	r3, [r4, #0]
 80128ec:	079b      	lsls	r3, r3, #30
 80128ee:	d413      	bmi.n	8012918 <_printf_i+0x23c>
 80128f0:	68e0      	ldr	r0, [r4, #12]
 80128f2:	9b03      	ldr	r3, [sp, #12]
 80128f4:	4298      	cmp	r0, r3
 80128f6:	bfb8      	it	lt
 80128f8:	4618      	movlt	r0, r3
 80128fa:	e7a4      	b.n	8012846 <_printf_i+0x16a>
 80128fc:	2301      	movs	r3, #1
 80128fe:	4632      	mov	r2, r6
 8012900:	4649      	mov	r1, r9
 8012902:	4640      	mov	r0, r8
 8012904:	47d0      	blx	sl
 8012906:	3001      	adds	r0, #1
 8012908:	d09b      	beq.n	8012842 <_printf_i+0x166>
 801290a:	3501      	adds	r5, #1
 801290c:	68e3      	ldr	r3, [r4, #12]
 801290e:	9903      	ldr	r1, [sp, #12]
 8012910:	1a5b      	subs	r3, r3, r1
 8012912:	42ab      	cmp	r3, r5
 8012914:	dcf2      	bgt.n	80128fc <_printf_i+0x220>
 8012916:	e7eb      	b.n	80128f0 <_printf_i+0x214>
 8012918:	2500      	movs	r5, #0
 801291a:	f104 0619 	add.w	r6, r4, #25
 801291e:	e7f5      	b.n	801290c <_printf_i+0x230>
 8012920:	08014c3d 	.word	0x08014c3d
 8012924:	08014c4e 	.word	0x08014c4e

08012928 <_read_r>:
 8012928:	b538      	push	{r3, r4, r5, lr}
 801292a:	4604      	mov	r4, r0
 801292c:	4608      	mov	r0, r1
 801292e:	4611      	mov	r1, r2
 8012930:	2200      	movs	r2, #0
 8012932:	4d05      	ldr	r5, [pc, #20]	; (8012948 <_read_r+0x20>)
 8012934:	602a      	str	r2, [r5, #0]
 8012936:	461a      	mov	r2, r3
 8012938:	f7ee f9f2 	bl	8000d20 <_read>
 801293c:	1c43      	adds	r3, r0, #1
 801293e:	d102      	bne.n	8012946 <_read_r+0x1e>
 8012940:	682b      	ldr	r3, [r5, #0]
 8012942:	b103      	cbz	r3, 8012946 <_read_r+0x1e>
 8012944:	6023      	str	r3, [r4, #0]
 8012946:	bd38      	pop	{r3, r4, r5, pc}
 8012948:	2000b144 	.word	0x2000b144

0801294c <__swbuf_r>:
 801294c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801294e:	460e      	mov	r6, r1
 8012950:	4614      	mov	r4, r2
 8012952:	4605      	mov	r5, r0
 8012954:	b118      	cbz	r0, 801295e <__swbuf_r+0x12>
 8012956:	6983      	ldr	r3, [r0, #24]
 8012958:	b90b      	cbnz	r3, 801295e <__swbuf_r+0x12>
 801295a:	f7ff f98f 	bl	8011c7c <__sinit>
 801295e:	4b21      	ldr	r3, [pc, #132]	; (80129e4 <__swbuf_r+0x98>)
 8012960:	429c      	cmp	r4, r3
 8012962:	d12b      	bne.n	80129bc <__swbuf_r+0x70>
 8012964:	686c      	ldr	r4, [r5, #4]
 8012966:	69a3      	ldr	r3, [r4, #24]
 8012968:	60a3      	str	r3, [r4, #8]
 801296a:	89a3      	ldrh	r3, [r4, #12]
 801296c:	071a      	lsls	r2, r3, #28
 801296e:	d52f      	bpl.n	80129d0 <__swbuf_r+0x84>
 8012970:	6923      	ldr	r3, [r4, #16]
 8012972:	b36b      	cbz	r3, 80129d0 <__swbuf_r+0x84>
 8012974:	6923      	ldr	r3, [r4, #16]
 8012976:	6820      	ldr	r0, [r4, #0]
 8012978:	b2f6      	uxtb	r6, r6
 801297a:	1ac0      	subs	r0, r0, r3
 801297c:	6963      	ldr	r3, [r4, #20]
 801297e:	4637      	mov	r7, r6
 8012980:	4283      	cmp	r3, r0
 8012982:	dc04      	bgt.n	801298e <__swbuf_r+0x42>
 8012984:	4621      	mov	r1, r4
 8012986:	4628      	mov	r0, r5
 8012988:	f7ff fc3a 	bl	8012200 <_fflush_r>
 801298c:	bb30      	cbnz	r0, 80129dc <__swbuf_r+0x90>
 801298e:	68a3      	ldr	r3, [r4, #8]
 8012990:	3001      	adds	r0, #1
 8012992:	3b01      	subs	r3, #1
 8012994:	60a3      	str	r3, [r4, #8]
 8012996:	6823      	ldr	r3, [r4, #0]
 8012998:	1c5a      	adds	r2, r3, #1
 801299a:	6022      	str	r2, [r4, #0]
 801299c:	701e      	strb	r6, [r3, #0]
 801299e:	6963      	ldr	r3, [r4, #20]
 80129a0:	4283      	cmp	r3, r0
 80129a2:	d004      	beq.n	80129ae <__swbuf_r+0x62>
 80129a4:	89a3      	ldrh	r3, [r4, #12]
 80129a6:	07db      	lsls	r3, r3, #31
 80129a8:	d506      	bpl.n	80129b8 <__swbuf_r+0x6c>
 80129aa:	2e0a      	cmp	r6, #10
 80129ac:	d104      	bne.n	80129b8 <__swbuf_r+0x6c>
 80129ae:	4621      	mov	r1, r4
 80129b0:	4628      	mov	r0, r5
 80129b2:	f7ff fc25 	bl	8012200 <_fflush_r>
 80129b6:	b988      	cbnz	r0, 80129dc <__swbuf_r+0x90>
 80129b8:	4638      	mov	r0, r7
 80129ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129bc:	4b0a      	ldr	r3, [pc, #40]	; (80129e8 <__swbuf_r+0x9c>)
 80129be:	429c      	cmp	r4, r3
 80129c0:	d101      	bne.n	80129c6 <__swbuf_r+0x7a>
 80129c2:	68ac      	ldr	r4, [r5, #8]
 80129c4:	e7cf      	b.n	8012966 <__swbuf_r+0x1a>
 80129c6:	4b09      	ldr	r3, [pc, #36]	; (80129ec <__swbuf_r+0xa0>)
 80129c8:	429c      	cmp	r4, r3
 80129ca:	bf08      	it	eq
 80129cc:	68ec      	ldreq	r4, [r5, #12]
 80129ce:	e7ca      	b.n	8012966 <__swbuf_r+0x1a>
 80129d0:	4621      	mov	r1, r4
 80129d2:	4628      	mov	r0, r5
 80129d4:	f000 f80c 	bl	80129f0 <__swsetup_r>
 80129d8:	2800      	cmp	r0, #0
 80129da:	d0cb      	beq.n	8012974 <__swbuf_r+0x28>
 80129dc:	f04f 37ff 	mov.w	r7, #4294967295
 80129e0:	e7ea      	b.n	80129b8 <__swbuf_r+0x6c>
 80129e2:	bf00      	nop
 80129e4:	08014be8 	.word	0x08014be8
 80129e8:	08014c08 	.word	0x08014c08
 80129ec:	08014bc8 	.word	0x08014bc8

080129f0 <__swsetup_r>:
 80129f0:	4b32      	ldr	r3, [pc, #200]	; (8012abc <__swsetup_r+0xcc>)
 80129f2:	b570      	push	{r4, r5, r6, lr}
 80129f4:	681d      	ldr	r5, [r3, #0]
 80129f6:	4606      	mov	r6, r0
 80129f8:	460c      	mov	r4, r1
 80129fa:	b125      	cbz	r5, 8012a06 <__swsetup_r+0x16>
 80129fc:	69ab      	ldr	r3, [r5, #24]
 80129fe:	b913      	cbnz	r3, 8012a06 <__swsetup_r+0x16>
 8012a00:	4628      	mov	r0, r5
 8012a02:	f7ff f93b 	bl	8011c7c <__sinit>
 8012a06:	4b2e      	ldr	r3, [pc, #184]	; (8012ac0 <__swsetup_r+0xd0>)
 8012a08:	429c      	cmp	r4, r3
 8012a0a:	d10f      	bne.n	8012a2c <__swsetup_r+0x3c>
 8012a0c:	686c      	ldr	r4, [r5, #4]
 8012a0e:	89a3      	ldrh	r3, [r4, #12]
 8012a10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012a14:	0719      	lsls	r1, r3, #28
 8012a16:	d42c      	bmi.n	8012a72 <__swsetup_r+0x82>
 8012a18:	06dd      	lsls	r5, r3, #27
 8012a1a:	d411      	bmi.n	8012a40 <__swsetup_r+0x50>
 8012a1c:	2309      	movs	r3, #9
 8012a1e:	6033      	str	r3, [r6, #0]
 8012a20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012a24:	f04f 30ff 	mov.w	r0, #4294967295
 8012a28:	81a3      	strh	r3, [r4, #12]
 8012a2a:	e03e      	b.n	8012aaa <__swsetup_r+0xba>
 8012a2c:	4b25      	ldr	r3, [pc, #148]	; (8012ac4 <__swsetup_r+0xd4>)
 8012a2e:	429c      	cmp	r4, r3
 8012a30:	d101      	bne.n	8012a36 <__swsetup_r+0x46>
 8012a32:	68ac      	ldr	r4, [r5, #8]
 8012a34:	e7eb      	b.n	8012a0e <__swsetup_r+0x1e>
 8012a36:	4b24      	ldr	r3, [pc, #144]	; (8012ac8 <__swsetup_r+0xd8>)
 8012a38:	429c      	cmp	r4, r3
 8012a3a:	bf08      	it	eq
 8012a3c:	68ec      	ldreq	r4, [r5, #12]
 8012a3e:	e7e6      	b.n	8012a0e <__swsetup_r+0x1e>
 8012a40:	0758      	lsls	r0, r3, #29
 8012a42:	d512      	bpl.n	8012a6a <__swsetup_r+0x7a>
 8012a44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012a46:	b141      	cbz	r1, 8012a5a <__swsetup_r+0x6a>
 8012a48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012a4c:	4299      	cmp	r1, r3
 8012a4e:	d002      	beq.n	8012a56 <__swsetup_r+0x66>
 8012a50:	4630      	mov	r0, r6
 8012a52:	f7ff fc2f 	bl	80122b4 <_free_r>
 8012a56:	2300      	movs	r3, #0
 8012a58:	6363      	str	r3, [r4, #52]	; 0x34
 8012a5a:	89a3      	ldrh	r3, [r4, #12]
 8012a5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012a60:	81a3      	strh	r3, [r4, #12]
 8012a62:	2300      	movs	r3, #0
 8012a64:	6063      	str	r3, [r4, #4]
 8012a66:	6923      	ldr	r3, [r4, #16]
 8012a68:	6023      	str	r3, [r4, #0]
 8012a6a:	89a3      	ldrh	r3, [r4, #12]
 8012a6c:	f043 0308 	orr.w	r3, r3, #8
 8012a70:	81a3      	strh	r3, [r4, #12]
 8012a72:	6923      	ldr	r3, [r4, #16]
 8012a74:	b94b      	cbnz	r3, 8012a8a <__swsetup_r+0x9a>
 8012a76:	89a3      	ldrh	r3, [r4, #12]
 8012a78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012a80:	d003      	beq.n	8012a8a <__swsetup_r+0x9a>
 8012a82:	4621      	mov	r1, r4
 8012a84:	4630      	mov	r0, r6
 8012a86:	f000 f845 	bl	8012b14 <__smakebuf_r>
 8012a8a:	89a0      	ldrh	r0, [r4, #12]
 8012a8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012a90:	f010 0301 	ands.w	r3, r0, #1
 8012a94:	d00a      	beq.n	8012aac <__swsetup_r+0xbc>
 8012a96:	2300      	movs	r3, #0
 8012a98:	60a3      	str	r3, [r4, #8]
 8012a9a:	6963      	ldr	r3, [r4, #20]
 8012a9c:	425b      	negs	r3, r3
 8012a9e:	61a3      	str	r3, [r4, #24]
 8012aa0:	6923      	ldr	r3, [r4, #16]
 8012aa2:	b943      	cbnz	r3, 8012ab6 <__swsetup_r+0xc6>
 8012aa4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012aa8:	d1ba      	bne.n	8012a20 <__swsetup_r+0x30>
 8012aaa:	bd70      	pop	{r4, r5, r6, pc}
 8012aac:	0781      	lsls	r1, r0, #30
 8012aae:	bf58      	it	pl
 8012ab0:	6963      	ldrpl	r3, [r4, #20]
 8012ab2:	60a3      	str	r3, [r4, #8]
 8012ab4:	e7f4      	b.n	8012aa0 <__swsetup_r+0xb0>
 8012ab6:	2000      	movs	r0, #0
 8012ab8:	e7f7      	b.n	8012aaa <__swsetup_r+0xba>
 8012aba:	bf00      	nop
 8012abc:	20000018 	.word	0x20000018
 8012ac0:	08014be8 	.word	0x08014be8
 8012ac4:	08014c08 	.word	0x08014c08
 8012ac8:	08014bc8 	.word	0x08014bc8

08012acc <__swhatbuf_r>:
 8012acc:	b570      	push	{r4, r5, r6, lr}
 8012ace:	460e      	mov	r6, r1
 8012ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ad4:	4614      	mov	r4, r2
 8012ad6:	2900      	cmp	r1, #0
 8012ad8:	461d      	mov	r5, r3
 8012ada:	b096      	sub	sp, #88	; 0x58
 8012adc:	da07      	bge.n	8012aee <__swhatbuf_r+0x22>
 8012ade:	2300      	movs	r3, #0
 8012ae0:	602b      	str	r3, [r5, #0]
 8012ae2:	89b3      	ldrh	r3, [r6, #12]
 8012ae4:	061a      	lsls	r2, r3, #24
 8012ae6:	d410      	bmi.n	8012b0a <__swhatbuf_r+0x3e>
 8012ae8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012aec:	e00e      	b.n	8012b0c <__swhatbuf_r+0x40>
 8012aee:	466a      	mov	r2, sp
 8012af0:	f000 f85e 	bl	8012bb0 <_fstat_r>
 8012af4:	2800      	cmp	r0, #0
 8012af6:	dbf2      	blt.n	8012ade <__swhatbuf_r+0x12>
 8012af8:	9a01      	ldr	r2, [sp, #4]
 8012afa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012afe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012b02:	425a      	negs	r2, r3
 8012b04:	415a      	adcs	r2, r3
 8012b06:	602a      	str	r2, [r5, #0]
 8012b08:	e7ee      	b.n	8012ae8 <__swhatbuf_r+0x1c>
 8012b0a:	2340      	movs	r3, #64	; 0x40
 8012b0c:	2000      	movs	r0, #0
 8012b0e:	6023      	str	r3, [r4, #0]
 8012b10:	b016      	add	sp, #88	; 0x58
 8012b12:	bd70      	pop	{r4, r5, r6, pc}

08012b14 <__smakebuf_r>:
 8012b14:	898b      	ldrh	r3, [r1, #12]
 8012b16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012b18:	079d      	lsls	r5, r3, #30
 8012b1a:	4606      	mov	r6, r0
 8012b1c:	460c      	mov	r4, r1
 8012b1e:	d507      	bpl.n	8012b30 <__smakebuf_r+0x1c>
 8012b20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012b24:	6023      	str	r3, [r4, #0]
 8012b26:	6123      	str	r3, [r4, #16]
 8012b28:	2301      	movs	r3, #1
 8012b2a:	6163      	str	r3, [r4, #20]
 8012b2c:	b002      	add	sp, #8
 8012b2e:	bd70      	pop	{r4, r5, r6, pc}
 8012b30:	466a      	mov	r2, sp
 8012b32:	ab01      	add	r3, sp, #4
 8012b34:	f7ff ffca 	bl	8012acc <__swhatbuf_r>
 8012b38:	9900      	ldr	r1, [sp, #0]
 8012b3a:	4605      	mov	r5, r0
 8012b3c:	4630      	mov	r0, r6
 8012b3e:	f7ff f987 	bl	8011e50 <_malloc_r>
 8012b42:	b948      	cbnz	r0, 8012b58 <__smakebuf_r+0x44>
 8012b44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b48:	059a      	lsls	r2, r3, #22
 8012b4a:	d4ef      	bmi.n	8012b2c <__smakebuf_r+0x18>
 8012b4c:	f023 0303 	bic.w	r3, r3, #3
 8012b50:	f043 0302 	orr.w	r3, r3, #2
 8012b54:	81a3      	strh	r3, [r4, #12]
 8012b56:	e7e3      	b.n	8012b20 <__smakebuf_r+0xc>
 8012b58:	4b0d      	ldr	r3, [pc, #52]	; (8012b90 <__smakebuf_r+0x7c>)
 8012b5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8012b5c:	89a3      	ldrh	r3, [r4, #12]
 8012b5e:	6020      	str	r0, [r4, #0]
 8012b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b64:	81a3      	strh	r3, [r4, #12]
 8012b66:	9b00      	ldr	r3, [sp, #0]
 8012b68:	6120      	str	r0, [r4, #16]
 8012b6a:	6163      	str	r3, [r4, #20]
 8012b6c:	9b01      	ldr	r3, [sp, #4]
 8012b6e:	b15b      	cbz	r3, 8012b88 <__smakebuf_r+0x74>
 8012b70:	4630      	mov	r0, r6
 8012b72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012b76:	f000 f82d 	bl	8012bd4 <_isatty_r>
 8012b7a:	b128      	cbz	r0, 8012b88 <__smakebuf_r+0x74>
 8012b7c:	89a3      	ldrh	r3, [r4, #12]
 8012b7e:	f023 0303 	bic.w	r3, r3, #3
 8012b82:	f043 0301 	orr.w	r3, r3, #1
 8012b86:	81a3      	strh	r3, [r4, #12]
 8012b88:	89a0      	ldrh	r0, [r4, #12]
 8012b8a:	4305      	orrs	r5, r0
 8012b8c:	81a5      	strh	r5, [r4, #12]
 8012b8e:	e7cd      	b.n	8012b2c <__smakebuf_r+0x18>
 8012b90:	08011c15 	.word	0x08011c15

08012b94 <memchr>:
 8012b94:	4603      	mov	r3, r0
 8012b96:	b510      	push	{r4, lr}
 8012b98:	b2c9      	uxtb	r1, r1
 8012b9a:	4402      	add	r2, r0
 8012b9c:	4293      	cmp	r3, r2
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	d101      	bne.n	8012ba6 <memchr+0x12>
 8012ba2:	2000      	movs	r0, #0
 8012ba4:	e003      	b.n	8012bae <memchr+0x1a>
 8012ba6:	7804      	ldrb	r4, [r0, #0]
 8012ba8:	3301      	adds	r3, #1
 8012baa:	428c      	cmp	r4, r1
 8012bac:	d1f6      	bne.n	8012b9c <memchr+0x8>
 8012bae:	bd10      	pop	{r4, pc}

08012bb0 <_fstat_r>:
 8012bb0:	b538      	push	{r3, r4, r5, lr}
 8012bb2:	2300      	movs	r3, #0
 8012bb4:	4d06      	ldr	r5, [pc, #24]	; (8012bd0 <_fstat_r+0x20>)
 8012bb6:	4604      	mov	r4, r0
 8012bb8:	4608      	mov	r0, r1
 8012bba:	4611      	mov	r1, r2
 8012bbc:	602b      	str	r3, [r5, #0]
 8012bbe:	f7ee f8f3 	bl	8000da8 <_fstat>
 8012bc2:	1c43      	adds	r3, r0, #1
 8012bc4:	d102      	bne.n	8012bcc <_fstat_r+0x1c>
 8012bc6:	682b      	ldr	r3, [r5, #0]
 8012bc8:	b103      	cbz	r3, 8012bcc <_fstat_r+0x1c>
 8012bca:	6023      	str	r3, [r4, #0]
 8012bcc:	bd38      	pop	{r3, r4, r5, pc}
 8012bce:	bf00      	nop
 8012bd0:	2000b144 	.word	0x2000b144

08012bd4 <_isatty_r>:
 8012bd4:	b538      	push	{r3, r4, r5, lr}
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	4d05      	ldr	r5, [pc, #20]	; (8012bf0 <_isatty_r+0x1c>)
 8012bda:	4604      	mov	r4, r0
 8012bdc:	4608      	mov	r0, r1
 8012bde:	602b      	str	r3, [r5, #0]
 8012be0:	f7ee f8f1 	bl	8000dc6 <_isatty>
 8012be4:	1c43      	adds	r3, r0, #1
 8012be6:	d102      	bne.n	8012bee <_isatty_r+0x1a>
 8012be8:	682b      	ldr	r3, [r5, #0]
 8012bea:	b103      	cbz	r3, 8012bee <_isatty_r+0x1a>
 8012bec:	6023      	str	r3, [r4, #0]
 8012bee:	bd38      	pop	{r3, r4, r5, pc}
 8012bf0:	2000b144 	.word	0x2000b144

08012bf4 <_init>:
 8012bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bf6:	bf00      	nop
 8012bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012bfa:	bc08      	pop	{r3}
 8012bfc:	469e      	mov	lr, r3
 8012bfe:	4770      	bx	lr

08012c00 <_fini>:
 8012c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c02:	bf00      	nop
 8012c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c06:	bc08      	pop	{r3}
 8012c08:	469e      	mov	lr, r3
 8012c0a:	4770      	bx	lr
