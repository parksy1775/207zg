
nucleo144-f207-eth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eac0  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e98  0800ec44  0800ec44  0001ec44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010adc  08010adc  00030074  2**0
                  CONTENTS
  4 .ARM          00000008  08010adc  08010adc  00020adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010ae4  08010ae4  00030074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ae4  08010ae4  00020ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010ae8  08010ae8  00020ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08010aec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006c74  20000074  08010b60  00030074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006ce8  08010b60  00036ce8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d9a7  00000000  00000000  0003009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b0d  00000000  00000000  0005da44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  00063558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b0  00000000  00000000  00064928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b98f  00000000  00000000  00065bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023549  00000000  00000000  00091567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d36b9  00000000  00000000  000b4ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00188169  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056d4  00000000  00000000  001881bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000074 	.word	0x20000074
 80001a0:	00000000 	.word	0x00000000
 80001a4:	0800ec2c 	.word	0x0800ec2c

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000078 	.word	0x20000078
 80001c0:	0800ec2c 	.word	0x0800ec2c

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b96e 	b.w	80004b8 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9e08      	ldr	r6, [sp, #32]
 80001fa:	460d      	mov	r5, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	468e      	mov	lr, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	f040 8083 	bne.w	800030c <__udivmoddi4+0x118>
 8000206:	428a      	cmp	r2, r1
 8000208:	4617      	mov	r7, r2
 800020a:	d947      	bls.n	800029c <__udivmoddi4+0xa8>
 800020c:	fab2 f382 	clz	r3, r2
 8000210:	b14b      	cbz	r3, 8000226 <__udivmoddi4+0x32>
 8000212:	f1c3 0120 	rsb	r1, r3, #32
 8000216:	fa05 fe03 	lsl.w	lr, r5, r3
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	409f      	lsls	r7, r3
 8000220:	ea41 0e0e 	orr.w	lr, r1, lr
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	fbbe fcf8 	udiv	ip, lr, r8
 800022e:	fa1f f987 	uxth.w	r9, r7
 8000232:	fb08 e21c 	mls	r2, r8, ip, lr
 8000236:	fb0c f009 	mul.w	r0, ip, r9
 800023a:	0c21      	lsrs	r1, r4, #16
 800023c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x66>
 8000244:	18ba      	adds	r2, r7, r2
 8000246:	f10c 31ff 	add.w	r1, ip, #4294967295
 800024a:	f080 8118 	bcs.w	800047e <__udivmoddi4+0x28a>
 800024e:	4290      	cmp	r0, r2
 8000250:	f240 8115 	bls.w	800047e <__udivmoddi4+0x28a>
 8000254:	f1ac 0c02 	sub.w	ip, ip, #2
 8000258:	443a      	add	r2, r7
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	fbb2 f0f8 	udiv	r0, r2, r8
 8000260:	fb08 2210 	mls	r2, r8, r0, r2
 8000264:	fb00 f109 	mul.w	r1, r0, r9
 8000268:	b2a4      	uxth	r4, r4
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	42a1      	cmp	r1, r4
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x92>
 8000272:	193c      	adds	r4, r7, r4
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 8103 	bcs.w	8000482 <__udivmoddi4+0x28e>
 800027c:	42a1      	cmp	r1, r4
 800027e:	f240 8100 	bls.w	8000482 <__udivmoddi4+0x28e>
 8000282:	3802      	subs	r0, #2
 8000284:	443c      	add	r4, r7
 8000286:	1a64      	subs	r4, r4, r1
 8000288:	2100      	movs	r1, #0
 800028a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa4>
 8000290:	2200      	movs	r2, #0
 8000292:	40dc      	lsrs	r4, r3
 8000294:	e9c6 4200 	strd	r4, r2, [r6]
 8000298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029c:	b902      	cbnz	r2, 80002a0 <__udivmoddi4+0xac>
 800029e:	deff      	udf	#255	; 0xff
 80002a0:	fab2 f382 	clz	r3, r2
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d14f      	bne.n	8000348 <__udivmoddi4+0x154>
 80002a8:	1a8d      	subs	r5, r1, r2
 80002aa:	2101      	movs	r1, #1
 80002ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80002b0:	fa1f f882 	uxth.w	r8, r2
 80002b4:	fbb5 fcfe 	udiv	ip, r5, lr
 80002b8:	fb0e 551c 	mls	r5, lr, ip, r5
 80002bc:	fb08 f00c 	mul.w	r0, r8, ip
 80002c0:	0c22      	lsrs	r2, r4, #16
 80002c2:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80002c6:	42a8      	cmp	r0, r5
 80002c8:	d907      	bls.n	80002da <__udivmoddi4+0xe6>
 80002ca:	197d      	adds	r5, r7, r5
 80002cc:	f10c 32ff 	add.w	r2, ip, #4294967295
 80002d0:	d202      	bcs.n	80002d8 <__udivmoddi4+0xe4>
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	f200 80e9 	bhi.w	80004aa <__udivmoddi4+0x2b6>
 80002d8:	4694      	mov	ip, r2
 80002da:	1a2d      	subs	r5, r5, r0
 80002dc:	fbb5 f0fe 	udiv	r0, r5, lr
 80002e0:	fb0e 5510 	mls	r5, lr, r0, r5
 80002e4:	fb08 f800 	mul.w	r8, r8, r0
 80002e8:	b2a4      	uxth	r4, r4
 80002ea:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ee:	45a0      	cmp	r8, r4
 80002f0:	d907      	bls.n	8000302 <__udivmoddi4+0x10e>
 80002f2:	193c      	adds	r4, r7, r4
 80002f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x10c>
 80002fa:	45a0      	cmp	r8, r4
 80002fc:	f200 80d9 	bhi.w	80004b2 <__udivmoddi4+0x2be>
 8000300:	4610      	mov	r0, r2
 8000302:	eba4 0408 	sub.w	r4, r4, r8
 8000306:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030a:	e7c0      	b.n	800028e <__udivmoddi4+0x9a>
 800030c:	428b      	cmp	r3, r1
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0x12e>
 8000310:	2e00      	cmp	r6, #0
 8000312:	f000 80b1 	beq.w	8000478 <__udivmoddi4+0x284>
 8000316:	2100      	movs	r1, #0
 8000318:	e9c6 0500 	strd	r0, r5, [r6]
 800031c:	4608      	mov	r0, r1
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d14b      	bne.n	80003c2 <__udivmoddi4+0x1ce>
 800032a:	42ab      	cmp	r3, r5
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0x140>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80b9 	bhi.w	80004a6 <__udivmoddi4+0x2b2>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb65 0303 	sbc.w	r3, r5, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0aa      	beq.n	8000298 <__udivmoddi4+0xa4>
 8000342:	e9c6 4e00 	strd	r4, lr, [r6]
 8000346:	e7a7      	b.n	8000298 <__udivmoddi4+0xa4>
 8000348:	409f      	lsls	r7, r3
 800034a:	f1c3 0220 	rsb	r2, r3, #32
 800034e:	40d1      	lsrs	r1, r2
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000360:	fa24 f202 	lsr.w	r2, r4, r2
 8000364:	409d      	lsls	r5, r3
 8000366:	fb00 fc08 	mul.w	ip, r0, r8
 800036a:	432a      	orrs	r2, r5
 800036c:	0c15      	lsrs	r5, r2, #16
 800036e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000372:	45ac      	cmp	ip, r5
 8000374:	fa04 f403 	lsl.w	r4, r4, r3
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x19a>
 800037a:	197d      	adds	r5, r7, r5
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	f080 808f 	bcs.w	80004a2 <__udivmoddi4+0x2ae>
 8000384:	45ac      	cmp	ip, r5
 8000386:	f240 808c 	bls.w	80004a2 <__udivmoddi4+0x2ae>
 800038a:	3802      	subs	r0, #2
 800038c:	443d      	add	r5, r7
 800038e:	eba5 050c 	sub.w	r5, r5, ip
 8000392:	fbb5 f1fe 	udiv	r1, r5, lr
 8000396:	fb0e 5c11 	mls	ip, lr, r1, r5
 800039a:	fb01 f908 	mul.w	r9, r1, r8
 800039e:	b295      	uxth	r5, r2
 80003a0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80003a4:	45a9      	cmp	r9, r5
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0x1c4>
 80003a8:	197d      	adds	r5, r7, r5
 80003aa:	f101 32ff 	add.w	r2, r1, #4294967295
 80003ae:	d274      	bcs.n	800049a <__udivmoddi4+0x2a6>
 80003b0:	45a9      	cmp	r9, r5
 80003b2:	d972      	bls.n	800049a <__udivmoddi4+0x2a6>
 80003b4:	3902      	subs	r1, #2
 80003b6:	443d      	add	r5, r7
 80003b8:	eba5 0509 	sub.w	r5, r5, r9
 80003bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003c0:	e778      	b.n	80002b4 <__udivmoddi4+0xc0>
 80003c2:	f1c1 0720 	rsb	r7, r1, #32
 80003c6:	408b      	lsls	r3, r1
 80003c8:	fa22 fc07 	lsr.w	ip, r2, r7
 80003cc:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d0:	fa25 f407 	lsr.w	r4, r5, r7
 80003d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003d8:	fbb4 f9fe 	udiv	r9, r4, lr
 80003dc:	fa1f f88c 	uxth.w	r8, ip
 80003e0:	fb0e 4419 	mls	r4, lr, r9, r4
 80003e4:	fa20 f307 	lsr.w	r3, r0, r7
 80003e8:	fb09 fa08 	mul.w	sl, r9, r8
 80003ec:	408d      	lsls	r5, r1
 80003ee:	431d      	orrs	r5, r3
 80003f0:	0c2b      	lsrs	r3, r5, #16
 80003f2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f6:	45a2      	cmp	sl, r4
 80003f8:	fa02 f201 	lsl.w	r2, r2, r1
 80003fc:	fa00 f301 	lsl.w	r3, r0, r1
 8000400:	d909      	bls.n	8000416 <__udivmoddi4+0x222>
 8000402:	eb1c 0404 	adds.w	r4, ip, r4
 8000406:	f109 30ff 	add.w	r0, r9, #4294967295
 800040a:	d248      	bcs.n	800049e <__udivmoddi4+0x2aa>
 800040c:	45a2      	cmp	sl, r4
 800040e:	d946      	bls.n	800049e <__udivmoddi4+0x2aa>
 8000410:	f1a9 0902 	sub.w	r9, r9, #2
 8000414:	4464      	add	r4, ip
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	fbb4 f0fe 	udiv	r0, r4, lr
 800041e:	fb0e 4410 	mls	r4, lr, r0, r4
 8000422:	fb00 fa08 	mul.w	sl, r0, r8
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x24e>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f100 35ff 	add.w	r5, r0, #4294967295
 8000438:	d22d      	bcs.n	8000496 <__udivmoddi4+0x2a2>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d92b      	bls.n	8000496 <__udivmoddi4+0x2a2>
 800043e:	3802      	subs	r0, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	464d      	mov	r5, r9
 8000454:	d319      	bcc.n	800048a <__udivmoddi4+0x296>
 8000456:	d016      	beq.n	8000486 <__udivmoddi4+0x292>
 8000458:	b15e      	cbz	r6, 8000472 <__udivmoddi4+0x27e>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb64 0405 	sbc.w	r4, r4, r5
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	fa22 f301 	lsr.w	r3, r2, r1
 800046a:	431f      	orrs	r7, r3
 800046c:	40cc      	lsrs	r4, r1
 800046e:	e9c6 7400 	strd	r7, r4, [r6]
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	4631      	mov	r1, r6
 800047a:	4630      	mov	r0, r6
 800047c:	e70c      	b.n	8000298 <__udivmoddi4+0xa4>
 800047e:	468c      	mov	ip, r1
 8000480:	e6eb      	b.n	800025a <__udivmoddi4+0x66>
 8000482:	4610      	mov	r0, r2
 8000484:	e6ff      	b.n	8000286 <__udivmoddi4+0x92>
 8000486:	4543      	cmp	r3, r8
 8000488:	d2e6      	bcs.n	8000458 <__udivmoddi4+0x264>
 800048a:	ebb8 0e02 	subs.w	lr, r8, r2
 800048e:	eb69 050c 	sbc.w	r5, r9, ip
 8000492:	3801      	subs	r0, #1
 8000494:	e7e0      	b.n	8000458 <__udivmoddi4+0x264>
 8000496:	4628      	mov	r0, r5
 8000498:	e7d3      	b.n	8000442 <__udivmoddi4+0x24e>
 800049a:	4611      	mov	r1, r2
 800049c:	e78c      	b.n	80003b8 <__udivmoddi4+0x1c4>
 800049e:	4681      	mov	r9, r0
 80004a0:	e7b9      	b.n	8000416 <__udivmoddi4+0x222>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e773      	b.n	800038e <__udivmoddi4+0x19a>
 80004a6:	4608      	mov	r0, r1
 80004a8:	e749      	b.n	800033e <__udivmoddi4+0x14a>
 80004aa:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ae:	443d      	add	r5, r7
 80004b0:	e713      	b.n	80002da <__udivmoddi4+0xe6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	e724      	b.n	8000302 <__udivmoddi4+0x10e>

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c0:	f000 ff18 	bl	80012f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c4:	f000 f80d 	bl	80004e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 f8a6 	bl	8000618 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80004cc:	f000 f850 	bl	8000570 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004d0:	f000 f878 	bl	80005c4 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 80004d4:	f003 fcf2 	bl	8003ebc <MX_LWIP_Init>
  app_echoserver_init();
 80004d8:	f000 fbba 	bl	8000c50 <app_echoserver_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  MX_LWIP_Process();
 80004dc:	f003 fe20 	bl	8004120 <MX_LWIP_Process>
 80004e0:	e7fc      	b.n	80004dc <main+0x20>

080004e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b092      	sub	sp, #72	; 0x48
 80004e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e8:	f107 0318 	add.w	r3, r7, #24
 80004ec:	2230      	movs	r2, #48	; 0x30
 80004ee:	2100      	movs	r1, #0
 80004f0:	4618      	mov	r0, r3
 80004f2:	f00d fc33 	bl	800dd5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000504:	2302      	movs	r3, #2
 8000506:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000508:	2301      	movs	r3, #1
 800050a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800050c:	2310      	movs	r3, #16
 800050e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000510:	2302      	movs	r3, #2
 8000512:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000514:	2300      	movs	r3, #0
 8000516:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 8000518:	230d      	movs	r3, #13
 800051a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 800051c:	23c3      	movs	r3, #195	; 0xc3
 800051e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000520:	2302      	movs	r3, #2
 8000522:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000524:	2305      	movs	r3, #5
 8000526:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000528:	f107 0318 	add.w	r3, r7, #24
 800052c:	4618      	mov	r0, r3
 800052e:	f002 fc4d 	bl	8002dcc <HAL_RCC_OscConfig>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000538:	f000 f9ee 	bl	8000918 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053c:	230f      	movs	r3, #15
 800053e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000540:	2302      	movs	r3, #2
 8000542:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000548:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800054c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800054e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000552:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2103      	movs	r1, #3
 8000558:	4618      	mov	r0, r3
 800055a:	f002 fe87 	bl	800326c <HAL_RCC_ClockConfig>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000564:	f000 f9d8 	bl	8000918 <Error_Handler>
  }
}
 8000568:	bf00      	nop
 800056a:	3748      	adds	r7, #72	; 0x48
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000574:	4b11      	ldr	r3, [pc, #68]	; (80005bc <MX_USART3_UART_Init+0x4c>)
 8000576:	4a12      	ldr	r2, [pc, #72]	; (80005c0 <MX_USART3_UART_Init+0x50>)
 8000578:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800057a:	4b10      	ldr	r3, [pc, #64]	; (80005bc <MX_USART3_UART_Init+0x4c>)
 800057c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000580:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000582:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <MX_USART3_UART_Init+0x4c>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000588:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <MX_USART3_UART_Init+0x4c>)
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800058e:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <MX_USART3_UART_Init+0x4c>)
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000594:	4b09      	ldr	r3, [pc, #36]	; (80005bc <MX_USART3_UART_Init+0x4c>)
 8000596:	220c      	movs	r2, #12
 8000598:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800059a:	4b08      	ldr	r3, [pc, #32]	; (80005bc <MX_USART3_UART_Init+0x4c>)
 800059c:	2200      	movs	r2, #0
 800059e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <MX_USART3_UART_Init+0x4c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80005a6:	4805      	ldr	r0, [pc, #20]	; (80005bc <MX_USART3_UART_Init+0x4c>)
 80005a8:	f003 f87c 	bl	80036a4 <HAL_UART_Init>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80005b2:	f000 f9b1 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000210 	.word	0x20000210
 80005c0:	40004800 	.word	0x40004800

080005c4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80005ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80005ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80005d0:	4b10      	ldr	r3, [pc, #64]	; (8000614 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80005d2:	2204      	movs	r2, #4
 80005d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80005d8:	2202      	movs	r2, #2
 80005da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80005dc:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80005e4:	2202      	movs	r2, #2
 80005e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80005e8:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000600:	4804      	ldr	r0, [pc, #16]	; (8000614 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000602:	f002 fac6 	bl	8002b92 <HAL_PCD_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 800060c:	f000 f984 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000254 	.word	0x20000254

08000618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08e      	sub	sp, #56	; 0x38
 800061c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	623b      	str	r3, [r7, #32]
 8000632:	4bb1      	ldr	r3, [pc, #708]	; (80008f8 <MX_GPIO_Init+0x2e0>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4ab0      	ldr	r2, [pc, #704]	; (80008f8 <MX_GPIO_Init+0x2e0>)
 8000638:	f043 0310 	orr.w	r3, r3, #16
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4bae      	ldr	r3, [pc, #696]	; (80008f8 <MX_GPIO_Init+0x2e0>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0310 	and.w	r3, r3, #16
 8000646:	623b      	str	r3, [r7, #32]
 8000648:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]
 800064e:	4baa      	ldr	r3, [pc, #680]	; (80008f8 <MX_GPIO_Init+0x2e0>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4aa9      	ldr	r2, [pc, #676]	; (80008f8 <MX_GPIO_Init+0x2e0>)
 8000654:	f043 0304 	orr.w	r3, r3, #4
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4ba7      	ldr	r3, [pc, #668]	; (80008f8 <MX_GPIO_Init+0x2e0>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0304 	and.w	r3, r3, #4
 8000662:	61fb      	str	r3, [r7, #28]
 8000664:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	61bb      	str	r3, [r7, #24]
 800066a:	4ba3      	ldr	r3, [pc, #652]	; (80008f8 <MX_GPIO_Init+0x2e0>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4aa2      	ldr	r2, [pc, #648]	; (80008f8 <MX_GPIO_Init+0x2e0>)
 8000670:	f043 0320 	orr.w	r3, r3, #32
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4ba0      	ldr	r3, [pc, #640]	; (80008f8 <MX_GPIO_Init+0x2e0>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0320 	and.w	r3, r3, #32
 800067e:	61bb      	str	r3, [r7, #24]
 8000680:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]
 8000686:	4b9c      	ldr	r3, [pc, #624]	; (80008f8 <MX_GPIO_Init+0x2e0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a9b      	ldr	r2, [pc, #620]	; (80008f8 <MX_GPIO_Init+0x2e0>)
 800068c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b99      	ldr	r3, [pc, #612]	; (80008f8 <MX_GPIO_Init+0x2e0>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069a:	617b      	str	r3, [r7, #20]
 800069c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
 80006a2:	4b95      	ldr	r3, [pc, #596]	; (80008f8 <MX_GPIO_Init+0x2e0>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a94      	ldr	r2, [pc, #592]	; (80008f8 <MX_GPIO_Init+0x2e0>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b92      	ldr	r3, [pc, #584]	; (80008f8 <MX_GPIO_Init+0x2e0>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	4b8e      	ldr	r3, [pc, #568]	; (80008f8 <MX_GPIO_Init+0x2e0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a8d      	ldr	r2, [pc, #564]	; (80008f8 <MX_GPIO_Init+0x2e0>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b8b      	ldr	r3, [pc, #556]	; (80008f8 <MX_GPIO_Init+0x2e0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	4b87      	ldr	r3, [pc, #540]	; (80008f8 <MX_GPIO_Init+0x2e0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a86      	ldr	r2, [pc, #536]	; (80008f8 <MX_GPIO_Init+0x2e0>)
 80006e0:	f043 0308 	orr.w	r3, r3, #8
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b84      	ldr	r3, [pc, #528]	; (80008f8 <MX_GPIO_Init+0x2e0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0308 	and.w	r3, r3, #8
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b80      	ldr	r3, [pc, #512]	; (80008f8 <MX_GPIO_Init+0x2e0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a7f      	ldr	r2, [pc, #508]	; (80008f8 <MX_GPIO_Init+0x2e0>)
 80006fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b7d      	ldr	r3, [pc, #500]	; (80008f8 <MX_GPIO_Init+0x2e0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	213c      	movs	r1, #60	; 0x3c
 8000712:	487a      	ldr	r0, [pc, #488]	; (80008fc <MX_GPIO_Init+0x2e4>)
 8000714:	f002 fa25 	bl	8002b62 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	2102      	movs	r1, #2
 800071c:	4878      	ldr	r0, [pc, #480]	; (8000900 <MX_GPIO_Init+0x2e8>)
 800071e:	f002 fa20 	bl	8002b62 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	f641 010c 	movw	r1, #6156	; 0x180c
 8000728:	4876      	ldr	r0, [pc, #472]	; (8000904 <MX_GPIO_Init+0x2ec>)
 800072a:	f002 fa1a 	bl	8002b62 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	2118      	movs	r1, #24
 8000732:	4875      	ldr	r0, [pc, #468]	; (8000908 <MX_GPIO_Init+0x2f0>)
 8000734:	f002 fa15 	bl	8002b62 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_11|GPIO_PIN_12|LD3_Pin
 8000738:	2200      	movs	r2, #0
 800073a:	f645 0181 	movw	r1, #22657	; 0x5881
 800073e:	4873      	ldr	r0, [pc, #460]	; (800090c <MX_GPIO_Init+0x2f4>)
 8000740:	f002 fa0f 	bl	8002b62 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	2140      	movs	r1, #64	; 0x40
 8000748:	4871      	ldr	r0, [pc, #452]	; (8000910 <MX_GPIO_Init+0x2f8>)
 800074a:	f002 fa0a 	bl	8002b62 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800074e:	2200      	movs	r2, #0
 8000750:	21fe      	movs	r1, #254	; 0xfe
 8000752:	4870      	ldr	r0, [pc, #448]	; (8000914 <MX_GPIO_Init+0x2fc>)
 8000754:	f002 fa05 	bl	8002b62 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000758:	233c      	movs	r3, #60	; 0x3c
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075c:	2301      	movs	r3, #1
 800075e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	2300      	movs	r3, #0
 8000766:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076c:	4619      	mov	r1, r3
 800076e:	4863      	ldr	r0, [pc, #396]	; (80008fc <MX_GPIO_Init+0x2e4>)
 8000770:	f002 f842 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000774:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800077a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000788:	4619      	mov	r1, r3
 800078a:	485e      	ldr	r0, [pc, #376]	; (8000904 <MX_GPIO_Init+0x2ec>)
 800078c:	f002 f834 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000790:	2302      	movs	r3, #2
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000794:	2301      	movs	r3, #1
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a4:	4619      	mov	r1, r3
 80007a6:	4856      	ldr	r0, [pc, #344]	; (8000900 <MX_GPIO_Init+0x2e8>)
 80007a8:	f002 f826 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF4 PF10 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_10|GPIO_PIN_14;
 80007ac:	f244 4310 	movw	r3, #17424	; 0x4410
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b2:	2300      	movs	r3, #0
 80007b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007b6:	2302      	movs	r3, #2
 80007b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007be:	4619      	mov	r1, r3
 80007c0:	484f      	ldr	r0, [pc, #316]	; (8000900 <MX_GPIO_Init+0x2e8>)
 80007c2:	f002 f819 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_12;
 80007c6:	f641 030c 	movw	r3, #6156	; 0x180c
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007dc:	4619      	mov	r1, r3
 80007de:	4849      	ldr	r0, [pc, #292]	; (8000904 <MX_GPIO_Init+0x2ec>)
 80007e0:	f002 f80a 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80007e4:	2318      	movs	r3, #24
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f8:	4619      	mov	r1, r3
 80007fa:	4843      	ldr	r0, [pc, #268]	; (8000908 <MX_GPIO_Init+0x2f0>)
 80007fc:	f001 fffc 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000800:	2360      	movs	r3, #96	; 0x60
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000804:	2300      	movs	r3, #0
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000808:	2302      	movs	r3, #2
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000810:	4619      	mov	r1, r3
 8000812:	483d      	ldr	r0, [pc, #244]	; (8000908 <MX_GPIO_Init+0x2f0>)
 8000814:	f001 fff0 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB11 PB12 LD3_Pin
                           LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_11|GPIO_PIN_12|LD3_Pin
 8000818:	f645 0381 	movw	r3, #22657	; 0x5881
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082e:	4619      	mov	r1, r3
 8000830:	4836      	ldr	r0, [pc, #216]	; (800090c <MX_GPIO_Init+0x2f4>)
 8000832:	f001 ffe1 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB15
                           PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_15
 8000836:	f248 7336 	movw	r3, #34614	; 0x8736
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083c:	2300      	movs	r3, #0
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000840:	2302      	movs	r3, #2
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000848:	4619      	mov	r1, r3
 800084a:	4830      	ldr	r0, [pc, #192]	; (800090c <MX_GPIO_Init+0x2f4>)
 800084c:	f001 ffd4 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000850:	f44f 53bc 	mov.w	r3, #6016	; 0x1780
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800085a:	2302      	movs	r3, #2
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800085e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000862:	4619      	mov	r1, r3
 8000864:	4825      	ldr	r0, [pc, #148]	; (80008fc <MX_GPIO_Init+0x2e4>)
 8000866:	f001 ffc7 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13
                           PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800086a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000870:	2300      	movs	r3, #0
 8000872:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000874:	2302      	movs	r3, #2
 8000876:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087c:	4619      	mov	r1, r3
 800087e:	4825      	ldr	r0, [pc, #148]	; (8000914 <MX_GPIO_Init+0x2fc>)
 8000880:	f001 ffba 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000884:	2340      	movs	r3, #64	; 0x40
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	2301      	movs	r3, #1
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000898:	4619      	mov	r1, r3
 800089a:	481d      	ldr	r0, [pc, #116]	; (8000910 <MX_GPIO_Init+0x2f8>)
 800089c:	f001 ffac 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008a0:	2380      	movs	r3, #128	; 0x80
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b0:	4619      	mov	r1, r3
 80008b2:	4817      	ldr	r0, [pc, #92]	; (8000910 <MX_GPIO_Init+0x2f8>)
 80008b4:	f001 ffa0 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80008b8:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008c2:	2302      	movs	r3, #2
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ca:	4619      	mov	r1, r3
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <MX_GPIO_Init+0x2ec>)
 80008ce:	f001 ff93 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD1 PD2 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80008d2:	23fe      	movs	r3, #254	; 0xfe
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e6:	4619      	mov	r1, r3
 80008e8:	480a      	ldr	r0, [pc, #40]	; (8000914 <MX_GPIO_Init+0x2fc>)
 80008ea:	f001 ff85 	bl	80027f8 <HAL_GPIO_Init>

}
 80008ee:	bf00      	nop
 80008f0:	3738      	adds	r7, #56	; 0x38
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40021000 	.word	0x40021000
 8000900:	40021400 	.word	0x40021400
 8000904:	40020800 	.word	0x40020800
 8000908:	40020000 	.word	0x40020000
 800090c:	40020400 	.word	0x40020400
 8000910:	40021800 	.word	0x40021800
 8000914:	40020c00 	.word	0x40020c00

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000920:	e7fe      	b.n	8000920 <Error_Handler+0x8>
	...

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <HAL_MspInit+0x48>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	4a0e      	ldr	r2, [pc, #56]	; (800096c <HAL_MspInit+0x48>)
 8000934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000938:	6453      	str	r3, [r2, #68]	; 0x44
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <HAL_MspInit+0x48>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <HAL_MspInit+0x48>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	4a07      	ldr	r2, [pc, #28]	; (800096c <HAL_MspInit+0x48>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000954:	6413      	str	r3, [r2, #64]	; 0x40
 8000956:	4b05      	ldr	r3, [pc, #20]	; (800096c <HAL_MspInit+0x48>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	40023800 	.word	0x40023800

08000970 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a19      	ldr	r2, [pc, #100]	; (80009f4 <HAL_UART_MspInit+0x84>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d12c      	bne.n	80009ec <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <HAL_UART_MspInit+0x88>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	4a17      	ldr	r2, [pc, #92]	; (80009f8 <HAL_UART_MspInit+0x88>)
 800099c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009a0:	6413      	str	r3, [r2, #64]	; 0x40
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <HAL_UART_MspInit+0x88>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <HAL_UART_MspInit+0x88>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a10      	ldr	r2, [pc, #64]	; (80009f8 <HAL_UART_MspInit+0x88>)
 80009b8:	f043 0308 	orr.w	r3, r3, #8
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <HAL_UART_MspInit+0x88>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0308 	and.w	r3, r3, #8
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d8:	2303      	movs	r3, #3
 80009da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009dc:	2307      	movs	r3, #7
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <HAL_UART_MspInit+0x8c>)
 80009e8:	f001 ff06 	bl	80027f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009ec:	bf00      	nop
 80009ee:	3728      	adds	r7, #40	; 0x28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40004800 	.word	0x40004800
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40020c00 	.word	0x40020c00

08000a00 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	; 0x28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a20:	d13f      	bne.n	8000aa2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	4b21      	ldr	r3, [pc, #132]	; (8000aac <HAL_PCD_MspInit+0xac>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a20      	ldr	r2, [pc, #128]	; (8000aac <HAL_PCD_MspInit+0xac>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <HAL_PCD_MspInit+0xac>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a3e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a50:	230a      	movs	r3, #10
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4815      	ldr	r0, [pc, #84]	; (8000ab0 <HAL_PCD_MspInit+0xb0>)
 8000a5c:	f001 fecc 	bl	80027f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	480e      	ldr	r0, [pc, #56]	; (8000ab0 <HAL_PCD_MspInit+0xb0>)
 8000a76:	f001 febf 	bl	80027f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <HAL_PCD_MspInit+0xac>)
 8000a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a7e:	4a0b      	ldr	r2, [pc, #44]	; (8000aac <HAL_PCD_MspInit+0xac>)
 8000a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a84:	6353      	str	r3, [r2, #52]	; 0x34
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <HAL_PCD_MspInit+0xac>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	4a07      	ldr	r2, [pc, #28]	; (8000aac <HAL_PCD_MspInit+0xac>)
 8000a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a94:	6453      	str	r3, [r2, #68]	; 0x44
 8000a96:	4b05      	ldr	r3, [pc, #20]	; (8000aac <HAL_PCD_MspInit+0xac>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000aa2:	bf00      	nop
 8000aa4:	3728      	adds	r7, #40	; 0x28
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020000 	.word	0x40020000

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <NMI_Handler+0x4>

08000aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <HardFault_Handler+0x4>

08000ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <MemManage_Handler+0x4>

08000ac6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <BusFault_Handler+0x4>

08000acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <UsageFault_Handler+0x4>

08000ad2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr

08000ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr

08000aea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr

08000af6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afa:	f000 fc4d 	bl	8001398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b086      	sub	sp, #24
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	60f8      	str	r0, [r7, #12]
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
 8000b12:	e00a      	b.n	8000b2a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b14:	f3af 8000 	nop.w
 8000b18:	4601      	mov	r1, r0
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	1c5a      	adds	r2, r3, #1
 8000b1e:	60ba      	str	r2, [r7, #8]
 8000b20:	b2ca      	uxtb	r2, r1
 8000b22:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	3301      	adds	r3, #1
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	697a      	ldr	r2, [r7, #20]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	dbf0      	blt.n	8000b14 <_read+0x12>
	}

return len;
 8000b32:	687b      	ldr	r3, [r7, #4]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	e009      	b.n	8000b62 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	1c5a      	adds	r2, r3, #1
 8000b52:	60ba      	str	r2, [r7, #8]
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	697a      	ldr	r2, [r7, #20]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	dbf1      	blt.n	8000b4e <_write+0x12>
	}
	return len;
 8000b6a:	687b      	ldr	r3, [r7, #4]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <_close>:

int _close(int file)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	return -1;
 8000b7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr

08000b8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
 8000b92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b9a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr

08000ba8 <_isatty>:

int _isatty(int file)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	return 1;
 8000bb0:	2301      	movs	r3, #1
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
	return 0;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr

08000bd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b087      	sub	sp, #28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bdc:	4a14      	ldr	r2, [pc, #80]	; (8000c30 <_sbrk+0x5c>)
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <_sbrk+0x60>)
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be8:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <_sbrk+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d102      	bne.n	8000bf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <_sbrk+0x64>)
 8000bf2:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <_sbrk+0x68>)
 8000bf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <_sbrk+0x64>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d205      	bcs.n	8000c10 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <_sbrk+0x6c>)
 8000c06:	220c      	movs	r2, #12
 8000c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0e:	e009      	b.n	8000c24 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c10:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	4a06      	ldr	r2, [pc, #24]	; (8000c38 <_sbrk+0x64>)
 8000c20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c22:	68fb      	ldr	r3, [r7, #12]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	371c      	adds	r7, #28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	2001c000 	.word	0x2001c000
 8000c34:	00000400 	.word	0x00000400
 8000c38:	20000090 	.word	0x20000090
 8000c3c:	20006ce8 	.word	0x20006ce8
 8000c40:	20006cd8 	.word	0x20006cd8

08000c44 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <app_echoserver_init>:
static void app_send_data(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es); //send function
static void app_close_connection(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es); //close function

/* initialize echo server */
err_t app_echoserver_init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
  err_t err;
  pcb_server = tcp_new();		//allocate pcb memory
 8000c56:	f006 fbcb 	bl	80073f0 <tcp_new>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	4a1c      	ldr	r2, [pc, #112]	; (8000cd0 <app_echoserver_init+0x80>)
 8000c5e:	6013      	str	r3, [r2, #0]

  if (pcb_server == NULL)
 8000c60:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <app_echoserver_init+0x80>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d108      	bne.n	8000c7a <app_echoserver_init+0x2a>
  {
    //lack of memory
    memp_free(MEMP_TCP_PCB, pcb_server);
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <app_echoserver_init+0x80>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f004 f9f6 	bl	8005060 <memp_free>
    return ERR_MEM;
 8000c74:	f04f 33ff 	mov.w	r3, #4294967295
 8000c78:	e025      	b.n	8000cc6 <app_echoserver_init+0x76>
  }

  err = tcp_bind(pcb_server, IP_ADDR_ANY, ECHO_SERVER_LISTEN_PORT); //bind to port 7
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <app_echoserver_init+0x80>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2207      	movs	r2, #7
 8000c80:	4914      	ldr	r1, [pc, #80]	; (8000cd4 <app_echoserver_init+0x84>)
 8000c82:	4618      	mov	r0, r3
 8000c84:	f005 fc36 	bl	80064f4 <tcp_bind>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	71fb      	strb	r3, [r7, #7]
  if (err != ERR_OK)
 8000c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d008      	beq.n	8000ca6 <app_echoserver_init+0x56>
  {
    //fail to bind
    memp_free(MEMP_TCP_PCB, pcb_server);
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <app_echoserver_init+0x80>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f004 f9e0 	bl	8005060 <memp_free>
    return err;
 8000ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca4:	e00f      	b.n	8000cc6 <app_echoserver_init+0x76>
  }

  pcb_server = tcp_listen(pcb_server);	//listen
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <app_echoserver_init+0x80>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	21ff      	movs	r1, #255	; 0xff
 8000cac:	4618      	mov	r0, r3
 8000cae:	f005 fcc3 	bl	8006638 <tcp_listen_with_backlog>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	4a06      	ldr	r2, [pc, #24]	; (8000cd0 <app_echoserver_init+0x80>)
 8000cb6:	6013      	str	r3, [r2, #0]
  tcp_accept(pcb_server, app_callback_accepted);	//register accept callback
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <app_echoserver_init+0x80>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4906      	ldr	r1, [pc, #24]	; (8000cd8 <app_echoserver_init+0x88>)
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f006 fc12 	bl	80074e8 <tcp_accept>

  return ERR_OK;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000094 	.word	0x20000094
 8000cd4:	08010a30 	.word	0x08010a30
 8000cd8:	08000cdd 	.word	0x08000cdd

08000cdc <app_callback_accepted>:

/* accept callback */
static err_t app_callback_accepted(void *arg, struct tcp_pcb *pcb_new, err_t err)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	71fb      	strb	r3, [r7, #7]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(arg); //remove warning
  LWIP_UNUSED_ARG(err);

  tcp_setprio(pcb_new, TCP_PRIO_NORMAL); //set priority for new pcb
 8000cea:	2140      	movs	r1, #64	; 0x40
 8000cec:	68b8      	ldr	r0, [r7, #8]
 8000cee:	f006 f9f5 	bl	80070dc <tcp_setprio>

  es = (struct tcp_echoserver_struct*)
      mem_malloc(sizeof(struct tcp_echoserver_struct)); //allocate tcp_echoserver_struct
 8000cf2:	200c      	movs	r0, #12
 8000cf4:	f004 f80c 	bl	8004d10 <mem_malloc>
 8000cf8:	6178      	str	r0, [r7, #20]

  if (es == NULL) //lack of memory
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d106      	bne.n	8000d0e <app_callback_accepted+0x32>
  {
    app_close_connection(pcb_new, es); //close connection
 8000d00:	6979      	ldr	r1, [r7, #20]
 8000d02:	68b8      	ldr	r0, [r7, #8]
 8000d04:	f000 faa4 	bl	8001250 <app_close_connection>
    return ERR_MEM;
 8000d08:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0c:	e01d      	b.n	8000d4a <app_callback_accepted+0x6e>
  }

  es->state = ES_ACCEPTED; //accepted
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	2201      	movs	r2, #1
 8000d12:	701a      	strb	r2, [r3, #0]
  es->pcb = pcb_new; //set pcb pointer
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	605a      	str	r2, [r3, #4]
  es->retries = 0; //clear counter
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	705a      	strb	r2, [r3, #1]
  es->p = NULL; //clear buffer pointer
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]

  tcp_arg(pcb_new, es);		//send es structure as an argument
 8000d26:	6979      	ldr	r1, [r7, #20]
 8000d28:	68b8      	ldr	r0, [r7, #8]
 8000d2a:	f006 fb69 	bl	8007400 <tcp_arg>
  tcp_recv(pcb_new, app_callback_received);	//register receive callback
 8000d2e:	4909      	ldr	r1, [pc, #36]	; (8000d54 <app_callback_accepted+0x78>)
 8000d30:	68b8      	ldr	r0, [r7, #8]
 8000d32:	f006 fb75 	bl	8007420 <tcp_recv>
  tcp_err(pcb_new, app_callback_error); //register error callback
 8000d36:	4908      	ldr	r1, [pc, #32]	; (8000d58 <app_callback_accepted+0x7c>)
 8000d38:	68b8      	ldr	r0, [r7, #8]
 8000d3a:	f006 fbb3 	bl	80074a4 <tcp_err>
  tcp_poll(pcb_new, app_callback_poll, 0); //register poll callback
 8000d3e:	2200      	movs	r2, #0
 8000d40:	4906      	ldr	r1, [pc, #24]	; (8000d5c <app_callback_accepted+0x80>)
 8000d42:	68b8      	ldr	r0, [r7, #8]
 8000d44:	f006 fbe6 	bl	8007514 <tcp_poll>

  return ERR_OK;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	08000d61 	.word	0x08000d61
 8000d58:	08000e95 	.word	0x08000e95
 8000d5c:	08000eb9 	.word	0x08000eb9

08000d60 <app_callback_received>:

/* receive callback */
static err_t app_callback_received(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
 8000d6c:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL", arg != NULL); //check argument
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d105      	bne.n	8000d80 <app_callback_received+0x20>
 8000d74:	4b43      	ldr	r3, [pc, #268]	; (8000e84 <app_callback_received+0x124>)
 8000d76:	2251      	movs	r2, #81	; 0x51
 8000d78:	4943      	ldr	r1, [pc, #268]	; (8000e88 <app_callback_received+0x128>)
 8000d7a:	4844      	ldr	r0, [pc, #272]	; (8000e8c <app_callback_received+0x12c>)
 8000d7c:	f00c fff6 	bl	800dd6c <iprintf>
  es = (struct tcp_echoserver_struct*) arg;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	61bb      	str	r3, [r7, #24]


  if (p == NULL) //callback is called but there's no data
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d116      	bne.n	8000db8 <app_callback_received+0x58>
  {
    es->state = ES_CLOSING;
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	701a      	strb	r2, [r3, #0]
    if (es->p == NULL)
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d104      	bne.n	8000da2 <app_callback_received+0x42>
    {
      app_close_connection(tpcb, es); //close connection
 8000d98:	69b9      	ldr	r1, [r7, #24]
 8000d9a:	68b8      	ldr	r0, [r7, #8]
 8000d9c:	f000 fa58 	bl	8001250 <app_close_connection>
 8000da0:	e007      	b.n	8000db2 <app_callback_received+0x52>
    }
    else //if there's remained data to send
    {
      tcp_sent(tpcb, app_callback_sent); //register send callback
 8000da2:	493b      	ldr	r1, [pc, #236]	; (8000e90 <app_callback_received+0x130>)
 8000da4:	68b8      	ldr	r0, [r7, #8]
 8000da6:	f006 fb5d 	bl	8007464 <tcp_sent>
      app_send_data(tpcb, es); //send remained data
 8000daa:	69b9      	ldr	r1, [r7, #24]
 8000dac:	68b8      	ldr	r0, [r7, #8]
 8000dae:	f000 f8d7 	bl	8000f60 <app_send_data>
    }
    ret_err = ERR_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	77fb      	strb	r3, [r7, #31]
 8000db6:	e05f      	b.n	8000e78 <app_callback_received+0x118>
  }
  else if (err != ERR_OK) //error when receiving
 8000db8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d00b      	beq.n	8000dd8 <app_callback_received+0x78>
  {
    if (p != NULL) //buffer is not empty
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d005      	beq.n	8000dd2 <app_callback_received+0x72>
    {
      es->p = NULL;
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
      pbuf_free(p); //clear buffer
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f004 fe7f 	bl	8005ad0 <pbuf_free>
    }
    ret_err = err;
 8000dd2:	78fb      	ldrb	r3, [r7, #3]
 8000dd4:	77fb      	strb	r3, [r7, #31]
 8000dd6:	e04f      	b.n	8000e78 <app_callback_received+0x118>
  }
  else if (es->state == ES_ACCEPTED) //first data receiving
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d110      	bne.n	8000e02 <app_callback_received+0xa2>
  {
    es->state = ES_RECEIVED; //change state
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	2202      	movs	r2, #2
 8000de4:	701a      	strb	r2, [r3, #0]
    es->p = p; //set buffer pointer
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	609a      	str	r2, [r3, #8]

    tcp_sent(tpcb, app_callback_sent); //register send callback
 8000dec:	4928      	ldr	r1, [pc, #160]	; (8000e90 <app_callback_received+0x130>)
 8000dee:	68b8      	ldr	r0, [r7, #8]
 8000df0:	f006 fb38 	bl	8007464 <tcp_sent>
    app_send_data(tpcb, es); //send data via es->p
 8000df4:	69b9      	ldr	r1, [r7, #24]
 8000df6:	68b8      	ldr	r0, [r7, #8]
 8000df8:	f000 f8b2 	bl	8000f60 <app_send_data>
    ret_err = ERR_OK;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	77fb      	strb	r3, [r7, #31]
 8000e00:	e03a      	b.n	8000e78 <app_callback_received+0x118>
  }
  else if (es->state == ES_RECEIVED) //additional data receiving
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d115      	bne.n	8000e36 <app_callback_received+0xd6>
  {

    if (es->p == NULL) //no data to send
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d107      	bne.n	8000e22 <app_callback_received+0xc2>
    {
      es->p = p; //set buffer pointer
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	609a      	str	r2, [r3, #8]
      app_send_data(tpcb, es); //send data
 8000e18:	69b9      	ldr	r1, [r7, #24]
 8000e1a:	68b8      	ldr	r0, [r7, #8]
 8000e1c:	f000 f8a0 	bl	8000f60 <app_send_data>
 8000e20:	e006      	b.n	8000e30 <app_callback_received+0xd0>
    }
    else //buffer is not empty, there's data to send
    {
      struct pbuf *ptr = es->p; //head buffer
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr, p);	//append tail buffer to the head, this buffer will be handled by poll callback
 8000e28:	6879      	ldr	r1, [r7, #4]
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	f004 ff72 	bl	8005d14 <pbuf_chain>
    }
    ret_err = ERR_OK;
 8000e30:	2300      	movs	r3, #0
 8000e32:	77fb      	strb	r3, [r7, #31]
 8000e34:	e020      	b.n	8000e78 <app_callback_received+0x118>
  }
  else if (es->state == ES_CLOSING) //receiving data when connection is closing
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b03      	cmp	r3, #3
 8000e3c:	d10e      	bne.n	8000e5c <app_callback_received+0xfc>
  {
    tcp_recved(tpcb, p->tot_len);	//advertise window size
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	891b      	ldrh	r3, [r3, #8]
 8000e42:	4619      	mov	r1, r3
 8000e44:	68b8      	ldr	r0, [r7, #8]
 8000e46:	f005 fcef 	bl	8006828 <tcp_recved>


    es->p = NULL;
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f004 fe3d 	bl	8005ad0 <pbuf_free>
    ret_err = ERR_OK;
 8000e56:	2300      	movs	r3, #0
 8000e58:	77fb      	strb	r3, [r7, #31]
 8000e5a:	e00d      	b.n	8000e78 <app_callback_received+0x118>
  }
  else //undefined condition
  {
    tcp_recved(tpcb, p->tot_len);	//advertise window size
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	891b      	ldrh	r3, [r3, #8]
 8000e60:	4619      	mov	r1, r3
 8000e62:	68b8      	ldr	r0, [r7, #8]
 8000e64:	f005 fce0 	bl	8006828 <tcp_recved>
    es->p = NULL;
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f004 fe2e 	bl	8005ad0 <pbuf_free>
    ret_err = ERR_OK;
 8000e74:	2300      	movs	r3, #0
 8000e76:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8000e78:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3720      	adds	r7, #32
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	0800ec44 	.word	0x0800ec44
 8000e88:	0800ec5c 	.word	0x0800ec5c
 8000e8c:	0800ec68 	.word	0x0800ec68
 8000e90:	08000f11 	.word	0x08000f11

08000e94 <app_callback_error>:

/* error callback */
static void app_callback_error(void *arg, err_t err)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  LWIP_UNUSED_ARG(err);

  es = (struct tcp_echoserver_struct*) arg;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d002      	beq.n	8000eb0 <app_callback_error+0x1c>
  {
    mem_free(es);	//free es structure
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	f003 fdf2 	bl	8004a94 <mem_free>
  }

  //HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET); //turn on blue LED when there's error.
}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <app_callback_poll>:

/* poll callback */
static err_t app_callback_poll(void *arg, struct tcp_pcb *tpcb)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  struct tcp_echoserver_struct *es;
  es = (struct tcp_echoserver_struct*) arg;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	60fb      	str	r3, [r7, #12]

  if (es == NULL) //if there's no es structure
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d105      	bne.n	8000ed8 <app_callback_poll+0x20>
  {
    tcp_abort(tpcb); //abort connection
 8000ecc:	6838      	ldr	r0, [r7, #0]
 8000ece:	f005 fb05 	bl	80064dc <tcp_abort>
    return ERR_ABRT;
 8000ed2:	f06f 030c 	mvn.w	r3, #12
 8000ed6:	e015      	b.n	8000f04 <app_callback_poll+0x4c>
  }

  if (es->p != NULL) //if there's data to send
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d008      	beq.n	8000ef2 <app_callback_poll+0x3a>
  {
    tcp_sent(tpcb, app_callback_sent); //register send callback
 8000ee0:	490a      	ldr	r1, [pc, #40]	; (8000f0c <app_callback_poll+0x54>)
 8000ee2:	6838      	ldr	r0, [r7, #0]
 8000ee4:	f006 fabe 	bl	8007464 <tcp_sent>
    app_send_data(tpcb, es); //send data
 8000ee8:	68f9      	ldr	r1, [r7, #12]
 8000eea:	6838      	ldr	r0, [r7, #0]
 8000eec:	f000 f838 	bl	8000f60 <app_send_data>
 8000ef0:	e007      	b.n	8000f02 <app_callback_poll+0x4a>
  }
  else //no data to send
  {
    if (es->state == ES_CLOSING)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d103      	bne.n	8000f02 <app_callback_poll+0x4a>
    {
      app_close_connection(tpcb, es);		//close connection
 8000efa:	68f9      	ldr	r1, [r7, #12]
 8000efc:	6838      	ldr	r0, [r7, #0]
 8000efe:	f000 f9a7 	bl	8001250 <app_close_connection>
    }
  }

  return ERR_OK;
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	08000f11 	.word	0x08000f11

08000f10 <app_callback_sent>:

/* send callback */
static err_t app_callback_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	80fb      	strh	r3, [r7, #6]
  struct tcp_echoserver_struct *es;
  LWIP_UNUSED_ARG(len);

  es = (struct tcp_echoserver_struct*) arg;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	2200      	movs	r2, #0
 8000f26:	705a      	strb	r2, [r3, #1]

  if (es->p != NULL) //if there's data to send
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d008      	beq.n	8000f42 <app_callback_sent+0x32>
  {
    tcp_sent(tpcb, app_callback_sent); //register send callback
 8000f30:	490a      	ldr	r1, [pc, #40]	; (8000f5c <app_callback_sent+0x4c>)
 8000f32:	68b8      	ldr	r0, [r7, #8]
 8000f34:	f006 fa96 	bl	8007464 <tcp_sent>
    app_send_data(tpcb, es); //send data
 8000f38:	6979      	ldr	r1, [r7, #20]
 8000f3a:	68b8      	ldr	r0, [r7, #8]
 8000f3c:	f000 f810 	bl	8000f60 <app_send_data>
 8000f40:	e007      	b.n	8000f52 <app_callback_sent+0x42>
  }
  else //no data to send
  {
    if (es->state == ES_CLOSING)
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b03      	cmp	r3, #3
 8000f48:	d103      	bne.n	8000f52 <app_callback_sent+0x42>
    {
      app_close_connection(tpcb, es); //close connection
 8000f4a:	6979      	ldr	r1, [r7, #20]
 8000f4c:	68b8      	ldr	r0, [r7, #8]
 8000f4e:	f000 f97f 	bl	8001250 <app_close_connection>
    }
  }
  return ERR_OK;
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	08000f11 	.word	0x08000f11

08000f60 <app_send_data>:

/* send data */
static void app_send_data(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b0b8      	sub	sp, #224	; 0xe0
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

  // while no error, data to send, data size is smaller than the size of the send buffer
  while ((wr_err == ERR_OK) && (es->p != NULL)
 8000f70:	e14d      	b.n	800120e <app_send_data+0x2ae>
      && (es->p->len <= tcp_sndbuf(tpcb)))
  {
    ptr = es->p;
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    uint8_t data[100];
    uint8_t obuf[100];
    u16_t obuf_len = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    memcpy(data,es->p->payload,es->p->len);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	6859      	ldr	r1, [r3, #4]
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	895b      	ldrh	r3, [r3, #10]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	f107 030c 	add.w	r3, r7, #12
 8000f92:	4618      	mov	r0, r3
 8000f94:	f00c fed4 	bl	800dd40 <memcpy>
    if(data[0]==1){
 8000f98:	7b3b      	ldrb	r3, [r7, #12]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d15c      	bne.n	8001058 <app_send_data+0xf8>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, data[4]);
 8000f9e:	7c3b      	ldrb	r3, [r7, #16]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	2110      	movs	r1, #16
 8000fa4:	48a4      	ldr	r0, [pc, #656]	; (8001238 <app_send_data+0x2d8>)
 8000fa6:	f001 fddc 	bl	8002b62 <HAL_GPIO_WritePin>

    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, data[5]);
 8000faa:	7c7b      	ldrb	r3, [r7, #17]
 8000fac:	461a      	mov	r2, r3
 8000fae:	2104      	movs	r1, #4
 8000fb0:	48a2      	ldr	r0, [pc, #648]	; (800123c <app_send_data+0x2dc>)
 8000fb2:	f001 fdd6 	bl	8002b62 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, data[6]);
 8000fb6:	7cbb      	ldrb	r3, [r7, #18]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	2108      	movs	r1, #8
 8000fbc:	489f      	ldr	r0, [pc, #636]	; (800123c <app_send_data+0x2dc>)
 8000fbe:	f001 fdd0 	bl	8002b62 <HAL_GPIO_WritePin>

    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, data[7]);
 8000fc2:	7cfb      	ldrb	r3, [r7, #19]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	2108      	movs	r1, #8
 8000fc8:	489d      	ldr	r0, [pc, #628]	; (8001240 <app_send_data+0x2e0>)
 8000fca:	f001 fdca 	bl	8002b62 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, data[8]);
 8000fce:	7d3b      	ldrb	r3, [r7, #20]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	2110      	movs	r1, #16
 8000fd4:	489a      	ldr	r0, [pc, #616]	; (8001240 <app_send_data+0x2e0>)
 8000fd6:	f001 fdc4 	bl	8002b62 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, data[9]);
 8000fda:	7d7b      	ldrb	r3, [r7, #21]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	2120      	movs	r1, #32
 8000fe0:	4897      	ldr	r0, [pc, #604]	; (8001240 <app_send_data+0x2e0>)
 8000fe2:	f001 fdbe 	bl	8002b62 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, data[10]);
 8000fe6:	7dbb      	ldrb	r3, [r7, #22]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	2140      	movs	r1, #64	; 0x40
 8000fec:	4894      	ldr	r0, [pc, #592]	; (8001240 <app_send_data+0x2e0>)
 8000fee:	f001 fdb8 	bl	8002b62 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, data[11]);
 8000ff2:	7dfb      	ldrb	r3, [r7, #23]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	2180      	movs	r1, #128	; 0x80
 8000ff8:	4891      	ldr	r0, [pc, #580]	; (8001240 <app_send_data+0x2e0>)
 8000ffa:	f001 fdb2 	bl	8002b62 <HAL_GPIO_WritePin>

    	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, data[12]);
 8000ffe:	7e3b      	ldrb	r3, [r7, #24]
 8001000:	461a      	mov	r2, r3
 8001002:	2104      	movs	r1, #4
 8001004:	488f      	ldr	r0, [pc, #572]	; (8001244 <app_send_data+0x2e4>)
 8001006:	f001 fdac 	bl	8002b62 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, data[13]);
 800100a:	7e7b      	ldrb	r3, [r7, #25]
 800100c:	461a      	mov	r2, r3
 800100e:	2108      	movs	r1, #8
 8001010:	488c      	ldr	r0, [pc, #560]	; (8001244 <app_send_data+0x2e4>)
 8001012:	f001 fda6 	bl	8002b62 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, data[14]);
 8001016:	7ebb      	ldrb	r3, [r7, #26]
 8001018:	461a      	mov	r2, r3
 800101a:	2110      	movs	r1, #16
 800101c:	4889      	ldr	r0, [pc, #548]	; (8001244 <app_send_data+0x2e4>)
 800101e:	f001 fda0 	bl	8002b62 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, data[15]);
 8001022:	7efb      	ldrb	r3, [r7, #27]
 8001024:	461a      	mov	r2, r3
 8001026:	2120      	movs	r1, #32
 8001028:	4886      	ldr	r0, [pc, #536]	; (8001244 <app_send_data+0x2e4>)
 800102a:	f001 fd9a 	bl	8002b62 <HAL_GPIO_WritePin>

    	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, data[13]);
 800102e:	7e7b      	ldrb	r3, [r7, #25]
 8001030:	461a      	mov	r2, r3
 8001032:	2102      	movs	r1, #2
 8001034:	4884      	ldr	r0, [pc, #528]	; (8001248 <app_send_data+0x2e8>)
 8001036:	f001 fd94 	bl	8002b62 <HAL_GPIO_WritePin>
    	memcpy(obuf, data, es->p->len);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	895b      	ldrh	r3, [r3, #10]
 8001040:	461a      	mov	r2, r3
 8001042:	f107 010c 	add.w	r1, r7, #12
 8001046:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800104a:	4618      	mov	r0, r3
 800104c:	f00c fe78 	bl	800dd40 <memcpy>
    	obuf_len = 14;
 8001050:	230e      	movs	r3, #14
 8001052:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
 8001056:	e09c      	b.n	8001192 <app_send_data+0x232>
    }
    else if(data[0]==2){
 8001058:	7b3b      	ldrb	r3, [r7, #12]
 800105a:	2b02      	cmp	r3, #2
 800105c:	f040 8093 	bne.w	8001186 <app_send_data+0x226>
    	obuf[0] = 2;
 8001060:	2302      	movs	r3, #2
 8001062:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
    	obuf[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8001066:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800106a:	4878      	ldr	r0, [pc, #480]	; (800124c <app_send_data+0x2ec>)
 800106c:	f001 fd62 	bl	8002b34 <HAL_GPIO_ReadPin>
 8001070:	4603      	mov	r3, r0
 8001072:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
    	obuf[2] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 8001076:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800107a:	4874      	ldr	r0, [pc, #464]	; (800124c <app_send_data+0x2ec>)
 800107c:	f001 fd5a 	bl	8002b34 <HAL_GPIO_ReadPin>
 8001080:	4603      	mov	r3, r0
 8001082:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72

    	obuf[3] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_4);
 8001086:	2110      	movs	r1, #16
 8001088:	486f      	ldr	r0, [pc, #444]	; (8001248 <app_send_data+0x2e8>)
 800108a:	f001 fd53 	bl	8002b34 <HAL_GPIO_ReadPin>
 800108e:	4603      	mov	r3, r0
 8001090:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

    	obuf[4] = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_8);
 8001094:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001098:	486a      	ldr	r0, [pc, #424]	; (8001244 <app_send_data+0x2e4>)
 800109a:	f001 fd4b 	bl	8002b34 <HAL_GPIO_ReadPin>
 800109e:	4603      	mov	r3, r0
 80010a0:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    	obuf[5] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10);
 80010a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a8:	4867      	ldr	r0, [pc, #412]	; (8001248 <app_send_data+0x2e8>)
 80010aa:	f001 fd43 	bl	8002b34 <HAL_GPIO_ReadPin>
 80010ae:	4603      	mov	r3, r0
 80010b0:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75

    	obuf[6] = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 80010b4:	2180      	movs	r1, #128	; 0x80
 80010b6:	4863      	ldr	r0, [pc, #396]	; (8001244 <app_send_data+0x2e4>)
 80010b8:	f001 fd3c 	bl	8002b34 <HAL_GPIO_ReadPin>
 80010bc:	4603      	mov	r3, r0
 80010be:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    	obuf[7] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14);
 80010c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010c6:	485e      	ldr	r0, [pc, #376]	; (8001240 <app_send_data+0x2e0>)
 80010c8:	f001 fd34 	bl	8002b34 <HAL_GPIO_ReadPin>
 80010cc:	4603      	mov	r3, r0
 80010ce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    	obuf[8] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15);
 80010d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010d6:	485a      	ldr	r0, [pc, #360]	; (8001240 <app_send_data+0x2e0>)
 80010d8:	f001 fd2c 	bl	8002b34 <HAL_GPIO_ReadPin>
 80010dc:	4603      	mov	r3, r0
 80010de:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

    	obuf[9] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_14);
 80010e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010e6:	4858      	ldr	r0, [pc, #352]	; (8001248 <app_send_data+0x2e8>)
 80010e8:	f001 fd24 	bl	8002b34 <HAL_GPIO_ReadPin>
 80010ec:	4603      	mov	r3, r0
 80010ee:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79

    	obuf[10] = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9);
 80010f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f6:	4853      	ldr	r0, [pc, #332]	; (8001244 <app_send_data+0x2e4>)
 80010f8:	f001 fd1c 	bl	8002b34 <HAL_GPIO_ReadPin>
 80010fc:	4603      	mov	r3, r0
 80010fe:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    	obuf[11] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 8001102:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001106:	4851      	ldr	r0, [pc, #324]	; (800124c <app_send_data+0x2ec>)
 8001108:	f001 fd14 	bl	8002b34 <HAL_GPIO_ReadPin>
 800110c:	4603      	mov	r3, r0
 800110e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
    	obuf[12] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8001112:	2110      	movs	r1, #16
 8001114:	484d      	ldr	r0, [pc, #308]	; (800124c <app_send_data+0x2ec>)
 8001116:	f001 fd0d 	bl	8002b34 <HAL_GPIO_ReadPin>
 800111a:	4603      	mov	r3, r0
 800111c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
    	obuf[13] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001120:	2120      	movs	r1, #32
 8001122:	484a      	ldr	r0, [pc, #296]	; (800124c <app_send_data+0x2ec>)
 8001124:	f001 fd06 	bl	8002b34 <HAL_GPIO_ReadPin>
 8001128:	4603      	mov	r3, r0
 800112a:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

    	obuf[14] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13);
 800112e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001132:	4843      	ldr	r0, [pc, #268]	; (8001240 <app_send_data+0x2e0>)
 8001134:	f001 fcfe 	bl	8002b34 <HAL_GPIO_ReadPin>
 8001138:	4603      	mov	r3, r0
 800113a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
    	obuf[15] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12);
 800113e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001142:	483f      	ldr	r0, [pc, #252]	; (8001240 <app_send_data+0x2e0>)
 8001144:	f001 fcf6 	bl	8002b34 <HAL_GPIO_ReadPin>
 8001148:	4603      	mov	r3, r0
 800114a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    	obuf[16] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11);
 800114e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001152:	483b      	ldr	r0, [pc, #236]	; (8001240 <app_send_data+0x2e0>)
 8001154:	f001 fcee 	bl	8002b34 <HAL_GPIO_ReadPin>
 8001158:	4603      	mov	r3, r0
 800115a:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    	obuf[17] = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10);
 800115e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001162:	4838      	ldr	r0, [pc, #224]	; (8001244 <app_send_data+0x2e4>)
 8001164:	f001 fce6 	bl	8002b34 <HAL_GPIO_ReadPin>
 8001168:	4603      	mov	r3, r0
 800116a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
    	obuf[18] = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12);
 800116e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001172:	4834      	ldr	r0, [pc, #208]	; (8001244 <app_send_data+0x2e4>)
 8001174:	f001 fcde 	bl	8002b34 <HAL_GPIO_ReadPin>
 8001178:	4603      	mov	r3, r0
 800117a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
    	obuf_len = 19;
 800117e:	2313      	movs	r3, #19
 8001180:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
 8001184:	e005      	b.n	8001192 <app_send_data+0x232>
    }
    else{
    	obuf[0] = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
    	obuf_len = 1;
 800118c:	2301      	movs	r3, #1
 800118e:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    }


    wr_err = tcp_write(tpcb, obuf, obuf_len, 1); //send data
 8001192:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 8001196:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800119a:	2301      	movs	r3, #1
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f008 ff69 	bl	800a074 <tcp_write>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

    if (wr_err == ERR_OK)
 80011a8:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d124      	bne.n	80011fa <app_send_data+0x29a>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 80011b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80011b4:	895b      	ldrh	r3, [r3, #10]
 80011b6:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
      es->p = ptr->next;
 80011ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	609a      	str	r2, [r3, #8]

      if (es->p != NULL) //there's chained buffer to send
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d004      	beq.n	80011d6 <app_send_data+0x276>
      {
        pbuf_ref(es->p);	//increase reference counter
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f004 fd27 	bl	8005c24 <pbuf_ref>
      }

      do
      {
        freed = pbuf_free(ptr);		//free old buffer
 80011d6:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80011da:	f004 fc79 	bl	8005ad0 <pbuf_free>
 80011de:	4603      	mov	r3, r0
 80011e0:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
      }
      while (freed == 0);
 80011e4:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0f4      	beq.n	80011d6 <app_send_data+0x276>

      tcp_recved(tpcb, plen);			//advertise window size
 80011ec:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80011f0:	4619      	mov	r1, r3
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f005 fb18 	bl	8006828 <tcp_recved>
 80011f8:	e009      	b.n	800120e <app_send_data+0x2ae>
    }
    else
    {
      es->p = ptr;  //fail to send, recover buffer pointer
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001200:	609a      	str	r2, [r3, #8]
      es->retries++;  //increase counter
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	785b      	ldrb	r3, [r3, #1]
 8001206:	3301      	adds	r3, #1
 8001208:	b2da      	uxtb	r2, r3
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	705a      	strb	r2, [r3, #1]
  while ((wr_err == ERR_OK) && (es->p != NULL)
 800120e:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8001212:	2b00      	cmp	r3, #0
 8001214:	d10c      	bne.n	8001230 <app_send_data+0x2d0>
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d008      	beq.n	8001230 <app_send_data+0x2d0>
      && (es->p->len <= tcp_sndbuf(tpcb)))
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	895a      	ldrh	r2, [r3, #10]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800122a:	429a      	cmp	r2, r3
 800122c:	f67f aea1 	bls.w	8000f72 <app_send_data+0x12>
    }
  }
}
 8001230:	bf00      	nop
 8001232:	37e0      	adds	r7, #224	; 0xe0
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40020000 	.word	0x40020000
 800123c:	40020800 	.word	0x40020800
 8001240:	40020c00 	.word	0x40020c00
 8001244:	40021000 	.word	0x40021000
 8001248:	40021400 	.word	0x40021400
 800124c:	40020400 	.word	0x40020400

08001250 <app_close_connection>:

/* close connection */
static void app_close_connection(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  /* clear callback functions */
  tcp_arg(tpcb, NULL);
 800125a:	2100      	movs	r1, #0
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f006 f8cf 	bl	8007400 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8001262:	2100      	movs	r1, #0
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f006 f8fd 	bl	8007464 <tcp_sent>
  tcp_recv(tpcb, NULL);
 800126a:	2100      	movs	r1, #0
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f006 f8d7 	bl	8007420 <tcp_recv>
  tcp_err(tpcb, NULL);
 8001272:	2100      	movs	r1, #0
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f006 f915 	bl	80074a4 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f006 f948 	bl	8007514 <tcp_poll>

  if (es != NULL)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d002      	beq.n	8001290 <app_close_connection+0x40>
  {
    mem_free(es);		//free es structure
 800128a:	6838      	ldr	r0, [r7, #0]
 800128c:	f003 fc02 	bl	8004a94 <mem_free>
  }

  tcp_close(tpcb);		//close connection
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f005 f859 	bl	8006348 <tcp_close>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a4:	480d      	ldr	r0, [pc, #52]	; (80012dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012a6:	490e      	ldr	r1, [pc, #56]	; (80012e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012a8:	4a0e      	ldr	r2, [pc, #56]	; (80012e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012ac:	e002      	b.n	80012b4 <LoopCopyDataInit>

080012ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b2:	3304      	adds	r3, #4

080012b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b8:	d3f9      	bcc.n	80012ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ba:	4a0b      	ldr	r2, [pc, #44]	; (80012e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012bc:	4c0b      	ldr	r4, [pc, #44]	; (80012ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c0:	e001      	b.n	80012c6 <LoopFillZerobss>

080012c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c4:	3204      	adds	r2, #4

080012c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c8:	d3fb      	bcc.n	80012c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012ca:	f7ff fcbb 	bl	8000c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ce:	f00c fd05 	bl	800dcdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012d2:	f7ff f8f3 	bl	80004bc <main>
  bx  lr
 80012d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012d8:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80012dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80012e4:	08010aec 	.word	0x08010aec
  ldr r2, =_sbss
 80012e8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80012ec:	20006ce8 	.word	0x20006ce8

080012f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f0:	e7fe      	b.n	80012f0 <ADC_IRQHandler>
	...

080012f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_Init+0x40>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a0d      	ldr	r2, [pc, #52]	; (8001334 <HAL_Init+0x40>)
 80012fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001302:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001304:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <HAL_Init+0x40>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <HAL_Init+0x40>)
 800130a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800130e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <HAL_Init+0x40>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a07      	ldr	r2, [pc, #28]	; (8001334 <HAL_Init+0x40>)
 8001316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800131a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800131c:	2003      	movs	r0, #3
 800131e:	f000 f92b 	bl	8001578 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001322:	2000      	movs	r0, #0
 8001324:	f000 f808 	bl	8001338 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001328:	f7ff fafc 	bl	8000924 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40023c00 	.word	0x40023c00

08001338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_InitTick+0x54>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_InitTick+0x58>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001352:	fbb2 f3f3 	udiv	r3, r2, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f935 	bl	80015c6 <HAL_SYSTICK_Config>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e00e      	b.n	8001384 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b0f      	cmp	r3, #15
 800136a:	d80a      	bhi.n	8001382 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800136c:	2200      	movs	r2, #0
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	f000 f90b 	bl	800158e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001378:	4a06      	ldr	r2, [pc, #24]	; (8001394 <HAL_InitTick+0x5c>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	e000      	b.n	8001384 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000000 	.word	0x20000000
 8001390:	20000008 	.word	0x20000008
 8001394:	20000004 	.word	0x20000004

08001398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <HAL_IncTick+0x1c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <HAL_IncTick+0x20>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4413      	add	r3, r2
 80013a8:	4a03      	ldr	r2, [pc, #12]	; (80013b8 <HAL_IncTick+0x20>)
 80013aa:	6013      	str	r3, [r2, #0]
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	20000008 	.word	0x20000008
 80013b8:	20000654 	.word	0x20000654

080013bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return uwTick;
 80013c0:	4b02      	ldr	r3, [pc, #8]	; (80013cc <HAL_GetTick+0x10>)
 80013c2:	681b      	ldr	r3, [r3, #0]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	20000654 	.word	0x20000654

080013d0 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d8:	f7ff fff0 	bl	80013bc <HAL_GetTick>
 80013dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e8:	d005      	beq.n	80013f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <HAL_Delay+0x44>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	461a      	mov	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4413      	add	r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013f6:	bf00      	nop
 80013f8:	f7ff ffe0 	bl	80013bc <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	429a      	cmp	r2, r3
 8001406:	d8f7      	bhi.n	80013f8 <HAL_Delay+0x28>
  {
  }
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000008 	.word	0x20000008

08001418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <__NVIC_SetPriorityGrouping+0x44>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001434:	4013      	ands	r3, r2
 8001436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001440:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800144a:	4a04      	ldr	r2, [pc, #16]	; (800145c <__NVIC_SetPriorityGrouping+0x44>)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	60d3      	str	r3, [r2, #12]
}
 8001450:	bf00      	nop
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <__NVIC_GetPriorityGrouping+0x18>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	0a1b      	lsrs	r3, r3, #8
 800146a:	f003 0307 	and.w	r3, r3, #7
}
 800146e:	4618      	mov	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	6039      	str	r1, [r7, #0]
 8001486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148c:	2b00      	cmp	r3, #0
 800148e:	db0a      	blt.n	80014a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	b2da      	uxtb	r2, r3
 8001494:	490c      	ldr	r1, [pc, #48]	; (80014c8 <__NVIC_SetPriority+0x4c>)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	0112      	lsls	r2, r2, #4
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	440b      	add	r3, r1
 80014a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a4:	e00a      	b.n	80014bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4908      	ldr	r1, [pc, #32]	; (80014cc <__NVIC_SetPriority+0x50>)
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	3b04      	subs	r3, #4
 80014b4:	0112      	lsls	r2, r2, #4
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	440b      	add	r3, r1
 80014ba:	761a      	strb	r2, [r3, #24]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000e100 	.word	0xe000e100
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b089      	sub	sp, #36	; 0x24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f1c3 0307 	rsb	r3, r3, #7
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	bf28      	it	cs
 80014ee:	2304      	movcs	r3, #4
 80014f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3304      	adds	r3, #4
 80014f6:	2b06      	cmp	r3, #6
 80014f8:	d902      	bls.n	8001500 <NVIC_EncodePriority+0x30>
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3b03      	subs	r3, #3
 80014fe:	e000      	b.n	8001502 <NVIC_EncodePriority+0x32>
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001504:	f04f 32ff 	mov.w	r2, #4294967295
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43da      	mvns	r2, r3
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	401a      	ands	r2, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001518:	f04f 31ff 	mov.w	r1, #4294967295
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	fa01 f303 	lsl.w	r3, r1, r3
 8001522:	43d9      	mvns	r1, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	4313      	orrs	r3, r2
         );
}
 800152a:	4618      	mov	r0, r3
 800152c:	3724      	adds	r7, #36	; 0x24
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001544:	d301      	bcc.n	800154a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001546:	2301      	movs	r3, #1
 8001548:	e00f      	b.n	800156a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800154a:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <SysTick_Config+0x40>)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3b01      	subs	r3, #1
 8001550:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001552:	210f      	movs	r1, #15
 8001554:	f04f 30ff 	mov.w	r0, #4294967295
 8001558:	f7ff ff90 	bl	800147c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <SysTick_Config+0x40>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001562:	4b04      	ldr	r3, [pc, #16]	; (8001574 <SysTick_Config+0x40>)
 8001564:	2207      	movs	r2, #7
 8001566:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	e000e010 	.word	0xe000e010

08001578 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff ff49 	bl	8001418 <__NVIC_SetPriorityGrouping>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800158e:	b580      	push	{r7, lr}
 8001590:	b086      	sub	sp, #24
 8001592:	af00      	add	r7, sp, #0
 8001594:	4603      	mov	r3, r0
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	607a      	str	r2, [r7, #4]
 800159a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a0:	f7ff ff5e 	bl	8001460 <__NVIC_GetPriorityGrouping>
 80015a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	68b9      	ldr	r1, [r7, #8]
 80015aa:	6978      	ldr	r0, [r7, #20]
 80015ac:	f7ff ff90 	bl	80014d0 <NVIC_EncodePriority>
 80015b0:	4602      	mov	r2, r0
 80015b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b6:	4611      	mov	r1, r2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff5f 	bl	800147c <__NVIC_SetPriority>
}
 80015be:	bf00      	nop
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff ffb0 	bl	8001534 <SysTick_Config>
 80015d4:	4603      	mov	r3, r0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80015f0:	4ba3      	ldr	r3, [pc, #652]	; (8001880 <HAL_ETH_Init+0x2a0>)
 80015f2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80015f8:	2300      	movs	r3, #0
 80015fa:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e173      	b.n	80018ee <HAL_ETH_Init+0x30e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d106      	bne.n	8001620 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f002 fd8c 	bl	8004138 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001620:	2300      	movs	r3, #0
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	4b97      	ldr	r3, [pc, #604]	; (8001884 <HAL_ETH_Init+0x2a4>)
 8001626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001628:	4a96      	ldr	r2, [pc, #600]	; (8001884 <HAL_ETH_Init+0x2a4>)
 800162a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800162e:	6453      	str	r3, [r2, #68]	; 0x44
 8001630:	4b94      	ldr	r3, [pc, #592]	; (8001884 <HAL_ETH_Init+0x2a4>)
 8001632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800163c:	4b92      	ldr	r3, [pc, #584]	; (8001888 <HAL_ETH_Init+0x2a8>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	4a91      	ldr	r2, [pc, #580]	; (8001888 <HAL_ETH_Init+0x2a8>)
 8001642:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001646:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001648:	4b8f      	ldr	r3, [pc, #572]	; (8001888 <HAL_ETH_Init+0x2a8>)
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	498d      	ldr	r1, [pc, #564]	; (8001888 <HAL_ETH_Init+0x2a8>)
 8001652:	4313      	orrs	r3, r2
 8001654:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f042 0201 	orr.w	r2, r2, #1
 8001668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800166c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800166e:	f7ff fea5 	bl	80013bc <HAL_GetTick>
 8001672:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001674:	e011      	b.n	800169a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 8001676:	f7ff fea1 	bl	80013bc <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001684:	d909      	bls.n	800169a <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2203      	movs	r2, #3
 800168a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e129      	b.n	80018ee <HAL_ETH_Init+0x30e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1e4      	bne.n	8001676 <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f023 031c 	bic.w	r3, r3, #28
 80016ba:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80016bc:	f001 ffa4 	bl	8003608 <HAL_RCC_GetHCLKFreq>
 80016c0:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	4a71      	ldr	r2, [pc, #452]	; (800188c <HAL_ETH_Init+0x2ac>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d908      	bls.n	80016dc <HAL_ETH_Init+0xfc>
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	4a70      	ldr	r2, [pc, #448]	; (8001890 <HAL_ETH_Init+0x2b0>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d804      	bhi.n	80016dc <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	f043 0308 	orr.w	r3, r3, #8
 80016d8:	61fb      	str	r3, [r7, #28]
 80016da:	e01a      	b.n	8001712 <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	4a6c      	ldr	r2, [pc, #432]	; (8001890 <HAL_ETH_Init+0x2b0>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d908      	bls.n	80016f6 <HAL_ETH_Init+0x116>
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	4a66      	ldr	r2, [pc, #408]	; (8001880 <HAL_ETH_Init+0x2a0>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d204      	bcs.n	80016f6 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f043 030c 	orr.w	r3, r3, #12
 80016f2:	61fb      	str	r3, [r7, #28]
 80016f4:	e00d      	b.n	8001712 <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	4a61      	ldr	r2, [pc, #388]	; (8001880 <HAL_ETH_Init+0x2a0>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d303      	bcc.n	8001706 <HAL_ETH_Init+0x126>
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	4a64      	ldr	r2, [pc, #400]	; (8001894 <HAL_ETH_Init+0x2b4>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d904      	bls.n	8001710 <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	f043 0304 	orr.w	r3, r3, #4
 800170c:	61fb      	str	r3, [r7, #28]
 800170e:	e000      	b.n	8001712 <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001710:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	69fa      	ldr	r2, [r7, #28]
 8001718:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800171a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800171e:	2100      	movs	r1, #0
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 fb92 	bl	8001e4a <HAL_ETH_WritePHYRegister>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d00b      	beq.n	8001744 <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001730:	6939      	ldr	r1, [r7, #16]
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 fd48 	bl	80021c8 <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e0d4      	b.n	80018ee <HAL_ETH_Init+0x30e>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001744:	20ff      	movs	r0, #255	; 0xff
 8001746:	f7ff fe43 	bl	80013d0 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 80a2 	beq.w	8001898 <HAL_ETH_Init+0x2b8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001754:	f7ff fe32 	bl	80013bc <HAL_GetTick>
 8001758:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800175a:	f107 030c 	add.w	r3, r7, #12
 800175e:	461a      	mov	r2, r3
 8001760:	2101      	movs	r1, #1
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 fb09 	bl	8001d7a <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 8001768:	f7ff fe28 	bl	80013bc <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f241 3288 	movw	r2, #5000	; 0x1388
 8001776:	4293      	cmp	r3, r2
 8001778:	d90f      	bls.n	800179a <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800177e:	6939      	ldr	r1, [r7, #16]
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 fd21 	bl	80021c8 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e0a9      	b.n	80018ee <HAL_ETH_Init+0x30e>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0da      	beq.n	800175a <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80017a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017a8:	2100      	movs	r1, #0
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 fb4d 	bl	8001e4a <HAL_ETH_WritePHYRegister>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00b      	beq.n	80017ce <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80017ba:	6939      	ldr	r1, [r7, #16]
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f000 fd03 	bl	80021c8 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e08f      	b.n	80018ee <HAL_ETH_Init+0x30e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 80017ce:	f7ff fdf5 	bl	80013bc <HAL_GetTick>
 80017d2:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80017d4:	f107 030c 	add.w	r3, r7, #12
 80017d8:	461a      	mov	r2, r3
 80017da:	2101      	movs	r1, #1
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 facc 	bl	8001d7a <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80017e2:	f7ff fdeb 	bl	80013bc <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d90f      	bls.n	8001814 <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80017f8:	6939      	ldr	r1, [r7, #16]
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 fce4 	bl	80021c8 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e06c      	b.n	80018ee <HAL_ETH_Init+0x30e>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f003 0320 	and.w	r3, r3, #32
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0da      	beq.n	80017d4 <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800181e:	f107 030c 	add.w	r3, r7, #12
 8001822:	461a      	mov	r2, r3
 8001824:	2110      	movs	r1, #16
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 faa7 	bl	8001d7a <HAL_ETH_ReadPHYRegister>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00b      	beq.n	800184a <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001836:	6939      	ldr	r1, [r7, #16]
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 fcc5 	bl	80021c8 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e051      	b.n	80018ee <HAL_ETH_Init+0x30e>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	d004      	beq.n	800185e <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800185a:	60da      	str	r2, [r3, #12]
 800185c:	e002      	b.n	8001864 <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	e032      	b.n	80018dc <HAL_ETH_Init+0x2fc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	e02d      	b.n	80018dc <HAL_ETH_Init+0x2fc>
 8001880:	03938700 	.word	0x03938700
 8001884:	40023800 	.word	0x40023800
 8001888:	40013800 	.word	0x40013800
 800188c:	01312cff 	.word	0x01312cff
 8001890:	02160ebf 	.word	0x02160ebf
 8001894:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	08db      	lsrs	r3, r3, #3
 800189e:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	085b      	lsrs	r3, r3, #1
 80018a6:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80018a8:	4313      	orrs	r3, r2
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	461a      	mov	r2, r3
 80018ae:	2100      	movs	r1, #0
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 faca 	bl	8001e4a <HAL_ETH_WritePHYRegister>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00b      	beq.n	80018d4 <HAL_ETH_Init+0x2f4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80018c0:	6939      	ldr	r1, [r7, #16]
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 fc80 	bl	80021c8 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e00c      	b.n	80018ee <HAL_ETH_Init+0x30e>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80018d4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80018d8:	f7ff fd7a 	bl	80013d0 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80018dc:	6939      	ldr	r1, [r7, #16]
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 fc72 	bl	80021c8 <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3720      	adds	r7, #32
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop

080018f8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b087      	sub	sp, #28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001910:	2b01      	cmp	r3, #1
 8001912:	d101      	bne.n	8001918 <HAL_ETH_DMATxDescListInit+0x20>
 8001914:	2302      	movs	r3, #2
 8001916:	e052      	b.n	80019be <HAL_ETH_DMATxDescListInit+0xc6>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2202      	movs	r2, #2
 8001924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	e030      	b.n	8001996 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	015b      	lsls	r3, r3, #5
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	4413      	add	r3, r2
 800193c:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001944:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800194c:	fb02 f303 	mul.w	r3, r2, r3
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	4413      	add	r3, r2
 8001954:	461a      	mov	r2, r3
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d105      	bne.n	800196e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1))
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	3b01      	subs	r3, #1
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	429a      	cmp	r2, r3
 8001976:	d208      	bcs.n	800198a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1);
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	3301      	adds	r3, #1
 800197c:	015b      	lsls	r3, r3, #5
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	4413      	add	r3, r2
 8001982:	461a      	mov	r2, r3
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	60da      	str	r2, [r3, #12]
 8001988:	e002      	b.n	8001990 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	3301      	adds	r3, #1
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d3ca      	bcc.n	8001934 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a8:	3310      	adds	r3, #16
 80019aa:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	371c      	adds	r7, #28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr

080019c8 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b087      	sub	sp, #28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
 80019d4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <HAL_ETH_DMARxDescListInit+0x20>
 80019e4:	2302      	movs	r3, #2
 80019e6:	e056      	b.n	8001a96 <HAL_ETH_DMARxDescListInit+0xce>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2202      	movs	r2, #2
 80019f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	e034      	b.n	8001a6e <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	015b      	lsls	r3, r3, #5
 8001a08:	68ba      	ldr	r2, [r7, #8]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a14:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001a1c:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a24:	fb02 f303 	mul.w	r3, r2, r3
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d105      	bne.n	8001a46 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d208      	bcs.n	8001a62 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	3301      	adds	r3, #1
 8001a54:	015b      	lsls	r3, r3, #5
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	4413      	add	r3, r2
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	60da      	str	r2, [r3, #12]
 8001a60:	e002      	b.n	8001a68 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d3c6      	bcc.n	8001a04 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a80:	330c      	adds	r3, #12
 8001a82:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	371c      	adds	r7, #28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d101      	bne.n	8001ac4 <HAL_ETH_TransmitFrame+0x24>
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	e0cd      	b.n	8001c60 <HAL_ETH_TransmitFrame+0x1c0>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2202      	movs	r2, #2
 8001ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (FrameLength == 0U)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d109      	bne.n	8001aee <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return  HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e0b8      	b.n	8001c60 <HAL_ETH_TransmitFrame+0x1c0>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	da09      	bge.n	8001b0c <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2212      	movs	r2, #18
 8001afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0a9      	b.n	8001c60 <HAL_ETH_TransmitFrame+0x1c0>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d915      	bls.n	8001b42 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	4a54      	ldr	r2, [pc, #336]	; (8001c6c <HAL_ETH_TransmitFrame+0x1cc>)
 8001b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1e:	0a9b      	lsrs	r3, r3, #10
 8001b20:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	4b51      	ldr	r3, [pc, #324]	; (8001c6c <HAL_ETH_TransmitFrame+0x1cc>)
 8001b26:	fba3 1302 	umull	r1, r3, r3, r2
 8001b2a:	0a9b      	lsrs	r3, r3, #10
 8001b2c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001b30:	fb01 f303 	mul.w	r3, r1, r3
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d005      	beq.n	8001b46 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	e001      	b.n	8001b46 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 8001b42:	2301      	movs	r3, #1
 8001b44:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d11c      	bne.n	8001b86 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b56:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001b5a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001b66:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b72:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b76:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b84:	e04b      	b.n	8001c1e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	e044      	b.n	8001c16 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b96:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b9a:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d107      	bne.n	8001bb2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bb0:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001bba:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d116      	bne.n	8001bf4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001bd4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	4a25      	ldr	r2, [pc, #148]	; (8001c70 <HAL_ETH_TransmitFrame+0x1d0>)
 8001bda:	fb02 f203 	mul.w	r2, r2, r3
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	4413      	add	r3, r2
 8001be2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001be6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001bf2:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c02:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i = 0U; i < bufcount; i++)
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	3301      	adds	r3, #1
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d3b6      	bcc.n	8001b8c <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c26:	3314      	adds	r3, #20
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00d      	beq.n	8001c4e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c3a:	3314      	adds	r3, #20
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c48:	3304      	adds	r3, #4
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	371c      	adds	r7, #28
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	ac02b00b 	.word	0xac02b00b
 8001c70:	fffffa0c 	.word	0xfffffa0c

08001c74 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d101      	bne.n	8001c8e <HAL_ETH_GetReceivedFrame+0x1a>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e070      	b.n	8001d70 <HAL_ETH_GetReceivedFrame+0xfc>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2202      	movs	r2, #2
 8001c9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	db5a      	blt.n	8001d5e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if (((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d030      	beq.n	8001d18 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	639a      	str	r2, [r3, #56]	; 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d103      	bne.n	8001cd0 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	631a      	str	r2, [r3, #48]	; 0x30
      }

      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	0c1b      	lsrs	r3, r3, #16
 8001ce0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001ce4:	3b04      	subs	r3, #4
 8001ce6:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)((heth->RxDesc)->Buffer2NextDescAddr);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Return function status */
      return HAL_OK;
 8001d14:	2300      	movs	r3, #0
 8001d16:	e02b      	b.n	8001d70 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d010      	beq.n	8001d48 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	461a      	mov	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	629a      	str	r2, [r3, #40]	; 0x28
 8001d46:	e00a      	b.n	8001d5e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr

08001d7a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b086      	sub	sp, #24
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	60f8      	str	r0, [r7, #12]
 8001d82:	460b      	mov	r3, r1
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b82      	cmp	r3, #130	; 0x82
 8001d9a:	d101      	bne.n	8001da0 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e050      	b.n	8001e42 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2282      	movs	r2, #130	; 0x82
 8001da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f003 031c 	and.w	r3, r3, #28
 8001db6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8a1b      	ldrh	r3, [r3, #16]
 8001dbc:	02db      	lsls	r3, r3, #11
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001dc6:	897b      	ldrh	r3, [r7, #10]
 8001dc8:	019b      	lsls	r3, r3, #6
 8001dca:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f023 0302 	bic.w	r3, r3, #2
 8001dda:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dec:	f7ff fae6 	bl	80013bc <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001df2:	e015      	b.n	8001e20 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001df4:	f7ff fae2 	bl	80013bc <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e02:	d309      	bcc.n	8001e18 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e014      	b.n	8001e42 <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1e4      	bne.n	8001df4 <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	461a      	mov	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	60f8      	str	r0, [r7, #12]
 8001e52:	460b      	mov	r3, r1
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b42      	cmp	r3, #66	; 0x42
 8001e6a:	d101      	bne.n	8001e70 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e04e      	b.n	8001f0e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2242      	movs	r2, #66	; 0x42
 8001e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f003 031c 	and.w	r3, r3, #28
 8001e86:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8a1b      	ldrh	r3, [r3, #16]
 8001e8c:	02db      	lsls	r3, r3, #11
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001e96:	897b      	ldrh	r3, [r7, #10]
 8001e98:	019b      	lsls	r3, r3, #6
 8001e9a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f043 0302 	orr.w	r3, r3, #2
 8001eaa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ec6:	f7ff fa79 	bl	80013bc <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ecc:	e015      	b.n	8001efa <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001ece:	f7ff fa75 	bl	80013bc <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001edc:	d309      	bcc.n	8001ef2 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e00d      	b.n	8001f0e <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1e4      	bne.n	8001ece <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_ETH_Start>:
 * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <HAL_ETH_Start+0x16>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e01f      	b.n	8001f6c <HAL_ETH_Start+0x56>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2202      	movs	r2, #2
 8001f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 fb43 	bl	80025c8 <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 fb7a 	bl	800263c <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 fc0d 	bl	8002768 <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 fbae 	bl	80026b0 <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 fbd9 	bl	800270c <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d101      	bne.n	8001f8a <HAL_ETH_Stop+0x16>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e01f      	b.n	8001fca <HAL_ETH_Stop+0x56>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2202      	movs	r2, #2
 8001f96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 fb9f 	bl	80026de <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 fbca 	bl	800273a <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 fb65 	bl	8002676 <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 fbdb 	bl	8002768 <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 fb25 	bl	8002602 <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_ETH_ConfigMAC+0x1c>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e0e4      	b.n	80021ba <HAL_ETH_ConfigMAC+0x1e6>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 80b1 	beq.w	800216a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	4b6c      	ldr	r3, [pc, #432]	; (80021c4 <HAL_ETH_ConfigMAC+0x1f0>)
 8002014:	4013      	ands	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8002020:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 8002026:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 800202c:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 8002032:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 8002038:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 800203e:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 8002044:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 800204a:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 8002050:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 8002056:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          macconf->AutomaticPadCRCStrip |
 800205c:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          macconf->BackOffLimit |
 8002062:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4313      	orrs	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800207a:	2001      	movs	r0, #1
 800207c:	f7ff f9a8 	bl	80013d0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8002090:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002096:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800209c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception |
 80020a2:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80020a8:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80020ae:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80020ba:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 80020bc:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020c6:	2001      	movs	r0, #1
 80020c8:	f7ff f982 	bl	80013d0 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80020dc:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020e6:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80020f6:	4013      	ands	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fe:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002104:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800210a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002110:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect |
 8002116:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800211c:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	4313      	orrs	r3, r2
 8002122:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002134:	2001      	movs	r0, #1
 8002136:	f7ff f94b 	bl	80013d0 <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                             macconf->VLANTagIdentifier);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	430a      	orrs	r2, r1
 8002150:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800215a:	2001      	movs	r0, #1
 800215c:	f7ff f938 	bl	80013d0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	61da      	str	r2, [r3, #28]
 8002168:	e01e      	b.n	80021a8 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002178:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	4313      	orrs	r3, r2
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	4313      	orrs	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800219a:	2001      	movs	r0, #1
 800219c:	f7ff f918 	bl	80013d0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	ff20810f 	.word	0xff20810f

080021c8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b0b0      	sub	sp, #192	; 0xc0
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d007      	beq.n	80021ee <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021e4:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021ec:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80021ee:	2300      	movs	r3, #0
 80021f0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80021f2:	2300      	movs	r3, #0
 80021f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80021f6:	2300      	movs	r3, #0
 80021f8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80021fe:	2300      	movs	r3, #0
 8002200:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002202:	2300      	movs	r3, #0
 8002204:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d103      	bne.n	8002216 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800220e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002212:	663b      	str	r3, [r7, #96]	; 0x60
 8002214:	e001      	b.n	800221a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002216:	2300      	movs	r3, #0
 8002218:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800221a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800221e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002220:	2300      	movs	r3, #0
 8002222:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002224:	2300      	movs	r3, #0
 8002226:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002228:	2300      	movs	r3, #0
 800222a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800222c:	2300      	movs	r3, #0
 800222e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002230:	2300      	movs	r3, #0
 8002232:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002234:	2340      	movs	r3, #64	; 0x40
 8002236:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002238:	2300      	movs	r3, #0
 800223a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800223e:	2300      	movs	r3, #0
 8002240:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002244:	2300      	movs	r3, #0
 8002246:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800224a:	2300      	movs	r3, #0
 800224c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002250:	2300      	movs	r3, #0
 8002252:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002256:	2300      	movs	r3, #0
 8002258:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800225c:	2300      	movs	r3, #0
 800225e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002262:	2300      	movs	r3, #0
 8002264:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002268:	2380      	movs	r3, #128	; 0x80
 800226a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800226e:	2300      	movs	r3, #0
 8002270:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002274:	2300      	movs	r3, #0
 8002276:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800227a:	2300      	movs	r3, #0
 800227c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002280:	2300      	movs	r3, #0
 8002282:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002286:	2300      	movs	r3, #0
 8002288:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800228c:	2300      	movs	r3, #0
 800228e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800229c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022a0:	4bac      	ldr	r3, [pc, #688]	; (8002554 <ETH_MACDMAConfig+0x38c>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 80022a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 80022aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 80022ac:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 80022ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 80022b0:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 80022b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 80022b4:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 80022ba:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 80022bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 80022be:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 80022c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 80022c2:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 80022c8:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 80022ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 80022cc:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 80022ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 80022d0:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 80022d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 80022d4:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 80022d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 80022d8:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 80022da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 80022dc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 80022de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022f0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022fc:	2001      	movs	r0, #1
 80022fe:	f7ff f867 	bl	80013d0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800230a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 800230c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800230e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002310:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002312:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002314:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 8002316:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800231a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800231c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 8002320:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002322:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002326:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002328:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800232c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002330:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002338:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 800233a:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002346:	2001      	movs	r0, #1
 8002348:	f7ff f842 	bl	80013d0 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002354:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800235e:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002368:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002374:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002378:	f64f 7341 	movw	r3, #65345	; 0xff41
 800237c:	4013      	ands	r3, r2
 800237e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8002382:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002386:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002388:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 800238c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800238e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002392:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8002394:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002398:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800239a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 800239e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 80023a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80023a4:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 80023a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023aa:	4313      	orrs	r3, r2
 80023ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023b8:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023c4:	2001      	movs	r0, #1
 80023c6:	f7ff f803 	bl	80013d0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023d2:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 80023d4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 80023d8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023ee:	2001      	movs	r0, #1
 80023f0:	f7fe ffee 	bl	80013d0 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023fc:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80023fe:	2300      	movs	r3, #0
 8002400:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002402:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002406:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002408:	2300      	movs	r3, #0
 800240a:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 800240c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002410:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002412:	2300      	movs	r3, #0
 8002414:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800241a:	2300      	movs	r3, #0
 800241c:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800241e:	2300      	movs	r3, #0
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002422:	2304      	movs	r3, #4
 8002424:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002426:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800242a:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800242c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002430:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002432:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002436:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002438:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800243c:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800243e:	2380      	movs	r3, #128	; 0x80
 8002440:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 8002442:	2300      	movs	r3, #0
 8002444:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002446:	2300      	movs	r3, #0
 8002448:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002452:	3318      	adds	r3, #24
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800245a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800245e:	4b3e      	ldr	r3, [pc, #248]	; (8002558 <ETH_MACDMAConfig+0x390>)
 8002460:	4013      	ands	r3, r2
 8002462:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8002466:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 8002468:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800246a:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 800246c:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 800246e:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 8002470:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 8002472:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8002474:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 8002476:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 8002478:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 800247a:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 800247c:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 800247e:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 8002482:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 8002484:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ReceiveThresholdControl |
 8002486:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8002488:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800249a:	3318      	adds	r3, #24
 800249c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024a0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024aa:	3318      	adds	r3, #24
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024b2:	2001      	movs	r0, #1
 80024b4:	f7fe ff8c 	bl	80013d0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c0:	3318      	adds	r3, #24
 80024c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024c6:	601a      	str	r2, [r3, #0]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80024c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                        dmainit.FixedBurst |
 80024ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80024cc:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80024ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                        dmainit.FixedBurst |
 80024d0:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 80024d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80024d4:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 80024d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.TxDMABurstLength |
 80024d8:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 80024da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024dc:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 80024de:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 80024e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 80024e2:	431a      	orrs	r2, r3
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80024ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f0:	601a      	str	r2, [r3, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002500:	2001      	movs	r0, #1
 8002502:	f7fe ff65 	bl	80013d0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800250e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002512:	601a      	str	r2, [r3, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d10f      	bne.n	800253c <ETH_MACDMAConfig+0x374>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002524:	331c      	adds	r3, #28
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002538:	331c      	adds	r3, #28
 800253a:	601a      	str	r2, [r3, #0]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	461a      	mov	r2, r3
 8002542:	2100      	movs	r1, #0
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f809 	bl	800255c <ETH_MACAddressConfig>
}
 800254a:	bf00      	nop
 800254c:	37c0      	adds	r7, #192	; 0xc0
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	ff20810f 	.word	0xff20810f
 8002558:	f8de3f23 	.word	0xf8de3f23

0800255c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800255c:	b480      	push	{r7}
 800255e:	b087      	sub	sp, #28
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3305      	adds	r3, #5
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	021b      	lsls	r3, r3, #8
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	3204      	adds	r2, #4
 8002574:	7812      	ldrb	r2, [r2, #0]
 8002576:	4313      	orrs	r3, r2
 8002578:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <ETH_MACAddressConfig+0x64>)
 800257e:	4413      	add	r3, r2
 8002580:	461a      	mov	r2, r3
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3303      	adds	r3, #3
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	061a      	lsls	r2, r3, #24
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3302      	adds	r3, #2
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	041b      	lsls	r3, r3, #16
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3301      	adds	r3, #1
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	021b      	lsls	r3, r3, #8
 80025a0:	4313      	orrs	r3, r2
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	7812      	ldrb	r2, [r2, #0]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <ETH_MACAddressConfig+0x68>)
 80025ae:	4413      	add	r3, r2
 80025b0:	461a      	mov	r2, r3
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	6013      	str	r3, [r2, #0]
}
 80025b6:	bf00      	nop
 80025b8:	371c      	adds	r7, #28
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr
 80025c0:	40028040 	.word	0x40028040
 80025c4:	40028044 	.word	0x40028044

080025c8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0208 	orr.w	r2, r2, #8
 80025e2:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80025ec:	2001      	movs	r0, #1
 80025ee:	f000 f8e5 	bl	80027bc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	601a      	str	r2, [r3, #0]
}
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b084      	sub	sp, #16
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800260a:	2300      	movs	r3, #0
 800260c:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0208 	bic.w	r2, r2, #8
 800261c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002626:	2001      	movs	r0, #1
 8002628:	f000 f8c8 	bl	80027bc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	601a      	str	r2, [r3, #0]
}
 8002634:	bf00      	nop
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0204 	orr.w	r2, r2, #4
 8002656:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002660:	2001      	movs	r0, #1
 8002662:	f000 f8ab 	bl	80027bc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	601a      	str	r2, [r3, #0]
}
 800266e:	bf00      	nop
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0204 	bic.w	r2, r2, #4
 8002690:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800269a:	2001      	movs	r0, #1
 800269c:	f000 f88e 	bl	80027bc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	601a      	str	r2, [r3, #0]
}
 80026a8:	bf00      	nop
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c0:	3318      	adds	r3, #24
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026d0:	3318      	adds	r3, #24
 80026d2:	601a      	str	r2, [r3, #0]
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr

080026de <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ee:	3318      	adds	r3, #24
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026fe:	3318      	adds	r3, #24
 8002700:	601a      	str	r2, [r3, #0]
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800271c:	3318      	adds	r3, #24
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f042 0202 	orr.w	r2, r2, #2
 8002728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800272c:	3318      	adds	r3, #24
 800272e:	601a      	str	r2, [r3, #0]
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr

0800273a <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800274a:	3318      	adds	r3, #24
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0202 	bic.w	r2, r2, #2
 8002756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800275a:	3318      	adds	r3, #24
 800275c:	601a      	str	r2, [r3, #0]
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr

08002768 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800277c:	3318      	adds	r3, #24
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800278c:	3318      	adds	r3, #24
 800278e:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002798:	3318      	adds	r3, #24
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800279e:	2001      	movs	r0, #1
 80027a0:	f000 f80c 	bl	80027bc <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ae:	3318      	adds	r3, #24
 80027b0:	601a      	str	r2, [r3, #0]
}
 80027b2:	bf00      	nop
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027c4:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <ETH_Delay+0x34>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a0a      	ldr	r2, [pc, #40]	; (80027f4 <ETH_Delay+0x38>)
 80027ca:	fba2 2303 	umull	r2, r3, r2, r3
 80027ce:	0a5b      	lsrs	r3, r3, #9
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	fb02 f303 	mul.w	r3, r2, r3
 80027d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027d8:	bf00      	nop
  }
  while (Delay --);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1e5a      	subs	r2, r3, #1
 80027de:	60fa      	str	r2, [r7, #12]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f9      	bne.n	80027d8 <ETH_Delay+0x1c>
}
 80027e4:	bf00      	nop
 80027e6:	bf00      	nop
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr
 80027f0:	20000000 	.word	0x20000000
 80027f4:	10624dd3 	.word	0x10624dd3

080027f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002806:	e16f      	b.n	8002ae8 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	2101      	movs	r1, #1
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	fa01 f303 	lsl.w	r3, r1, r3
 8002814:	4013      	ands	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 8161 	beq.w	8002ae2 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	2b01      	cmp	r3, #1
 800282a:	d005      	beq.n	8002838 <HAL_GPIO_Init+0x40>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 0303 	and.w	r3, r3, #3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d130      	bne.n	800289a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	2203      	movs	r2, #3
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	4013      	ands	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800286e:	2201      	movs	r2, #1
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43db      	mvns	r3, r3
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	4013      	ands	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	091b      	lsrs	r3, r3, #4
 8002884:	f003 0201 	and.w	r2, r3, #1
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d017      	beq.n	80028d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	2203      	movs	r2, #3
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43db      	mvns	r3, r3
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4013      	ands	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d123      	bne.n	800292a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	08da      	lsrs	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3208      	adds	r2, #8
 80028ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	220f      	movs	r2, #15
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4013      	ands	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	691a      	ldr	r2, [r3, #16]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	4313      	orrs	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	08da      	lsrs	r2, r3, #3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3208      	adds	r2, #8
 8002924:	6939      	ldr	r1, [r7, #16]
 8002926:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	2203      	movs	r2, #3
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4013      	ands	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 0203 	and.w	r2, r3, #3
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80bb 	beq.w	8002ae2 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800296c:	2300      	movs	r3, #0
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	4b64      	ldr	r3, [pc, #400]	; (8002b04 <HAL_GPIO_Init+0x30c>)
 8002972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002974:	4a63      	ldr	r2, [pc, #396]	; (8002b04 <HAL_GPIO_Init+0x30c>)
 8002976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800297a:	6453      	str	r3, [r2, #68]	; 0x44
 800297c:	4b61      	ldr	r3, [pc, #388]	; (8002b04 <HAL_GPIO_Init+0x30c>)
 800297e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002988:	4a5f      	ldr	r2, [pc, #380]	; (8002b08 <HAL_GPIO_Init+0x310>)
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	089b      	lsrs	r3, r3, #2
 800298e:	3302      	adds	r3, #2
 8002990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002994:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	220f      	movs	r2, #15
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4013      	ands	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a57      	ldr	r2, [pc, #348]	; (8002b0c <HAL_GPIO_Init+0x314>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d031      	beq.n	8002a18 <HAL_GPIO_Init+0x220>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a56      	ldr	r2, [pc, #344]	; (8002b10 <HAL_GPIO_Init+0x318>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d02b      	beq.n	8002a14 <HAL_GPIO_Init+0x21c>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a55      	ldr	r2, [pc, #340]	; (8002b14 <HAL_GPIO_Init+0x31c>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d025      	beq.n	8002a10 <HAL_GPIO_Init+0x218>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a54      	ldr	r2, [pc, #336]	; (8002b18 <HAL_GPIO_Init+0x320>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d01f      	beq.n	8002a0c <HAL_GPIO_Init+0x214>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a53      	ldr	r2, [pc, #332]	; (8002b1c <HAL_GPIO_Init+0x324>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d019      	beq.n	8002a08 <HAL_GPIO_Init+0x210>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a52      	ldr	r2, [pc, #328]	; (8002b20 <HAL_GPIO_Init+0x328>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d013      	beq.n	8002a04 <HAL_GPIO_Init+0x20c>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a51      	ldr	r2, [pc, #324]	; (8002b24 <HAL_GPIO_Init+0x32c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d00d      	beq.n	8002a00 <HAL_GPIO_Init+0x208>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a50      	ldr	r2, [pc, #320]	; (8002b28 <HAL_GPIO_Init+0x330>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d007      	beq.n	80029fc <HAL_GPIO_Init+0x204>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a4f      	ldr	r2, [pc, #316]	; (8002b2c <HAL_GPIO_Init+0x334>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d101      	bne.n	80029f8 <HAL_GPIO_Init+0x200>
 80029f4:	2308      	movs	r3, #8
 80029f6:	e010      	b.n	8002a1a <HAL_GPIO_Init+0x222>
 80029f8:	2309      	movs	r3, #9
 80029fa:	e00e      	b.n	8002a1a <HAL_GPIO_Init+0x222>
 80029fc:	2307      	movs	r3, #7
 80029fe:	e00c      	b.n	8002a1a <HAL_GPIO_Init+0x222>
 8002a00:	2306      	movs	r3, #6
 8002a02:	e00a      	b.n	8002a1a <HAL_GPIO_Init+0x222>
 8002a04:	2305      	movs	r3, #5
 8002a06:	e008      	b.n	8002a1a <HAL_GPIO_Init+0x222>
 8002a08:	2304      	movs	r3, #4
 8002a0a:	e006      	b.n	8002a1a <HAL_GPIO_Init+0x222>
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e004      	b.n	8002a1a <HAL_GPIO_Init+0x222>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e002      	b.n	8002a1a <HAL_GPIO_Init+0x222>
 8002a14:	2301      	movs	r3, #1
 8002a16:	e000      	b.n	8002a1a <HAL_GPIO_Init+0x222>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	f002 0203 	and.w	r2, r2, #3
 8002a20:	0092      	lsls	r2, r2, #2
 8002a22:	4093      	lsls	r3, r2
 8002a24:	461a      	mov	r2, r3
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a2c:	4936      	ldr	r1, [pc, #216]	; (8002b08 <HAL_GPIO_Init+0x310>)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	089b      	lsrs	r3, r3, #2
 8002a32:	3302      	adds	r3, #2
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a3a:	4b3d      	ldr	r3, [pc, #244]	; (8002b30 <HAL_GPIO_Init+0x338>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	43db      	mvns	r3, r3
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4013      	ands	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a5e:	4a34      	ldr	r2, [pc, #208]	; (8002b30 <HAL_GPIO_Init+0x338>)
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a64:	4b32      	ldr	r3, [pc, #200]	; (8002b30 <HAL_GPIO_Init+0x338>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4013      	ands	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a88:	4a29      	ldr	r2, [pc, #164]	; (8002b30 <HAL_GPIO_Init+0x338>)
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a8e:	4b28      	ldr	r3, [pc, #160]	; (8002b30 <HAL_GPIO_Init+0x338>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	43db      	mvns	r3, r3
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ab2:	4a1f      	ldr	r2, [pc, #124]	; (8002b30 <HAL_GPIO_Init+0x338>)
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ab8:	4b1d      	ldr	r3, [pc, #116]	; (8002b30 <HAL_GPIO_Init+0x338>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002adc:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <HAL_GPIO_Init+0x338>)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	fa22 f303 	lsr.w	r3, r2, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f47f ae88 	bne.w	8002808 <HAL_GPIO_Init+0x10>
  }
}
 8002af8:	bf00      	nop
 8002afa:	bf00      	nop
 8002afc:	371c      	adds	r7, #28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr
 8002b04:	40023800 	.word	0x40023800
 8002b08:	40013800 	.word	0x40013800
 8002b0c:	40020000 	.word	0x40020000
 8002b10:	40020400 	.word	0x40020400
 8002b14:	40020800 	.word	0x40020800
 8002b18:	40020c00 	.word	0x40020c00
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40021400 	.word	0x40021400
 8002b24:	40021800 	.word	0x40021800
 8002b28:	40021c00 	.word	0x40021c00
 8002b2c:	40022000 	.word	0x40022000
 8002b30:	40013c00 	.word	0x40013c00

08002b34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691a      	ldr	r2, [r3, #16]
 8002b44:	887b      	ldrh	r3, [r7, #2]
 8002b46:	4013      	ands	r3, r2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
 8002b50:	e001      	b.n	8002b56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b52:	2300      	movs	r3, #0
 8002b54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	807b      	strh	r3, [r7, #2]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b72:	787b      	ldrb	r3, [r7, #1]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b78:	887a      	ldrh	r2, [r7, #2]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b7e:	e003      	b.n	8002b88 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b80:	887b      	ldrh	r3, [r7, #2]
 8002b82:	041a      	lsls	r2, r3, #16
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	619a      	str	r2, [r3, #24]
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr

08002b92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b94:	b08f      	sub	sp, #60	; 0x3c
 8002b96:	af0a      	add	r7, sp, #40	; 0x28
 8002b98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e10f      	b.n	8002dc4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d106      	bne.n	8002bc4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7fd ff1e 	bl	8000a00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d102      	bne.n	8002bde <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 feed 	bl	80039c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	603b      	str	r3, [r7, #0]
 8002bee:	687e      	ldr	r6, [r7, #4]
 8002bf0:	466d      	mov	r5, sp
 8002bf2:	f106 0410 	add.w	r4, r6, #16
 8002bf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bfe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c02:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c06:	1d33      	adds	r3, r6, #4
 8002c08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c0a:	6838      	ldr	r0, [r7, #0]
 8002c0c:	f000 fe82 	bl	8003914 <USB_CoreInit>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d005      	beq.n	8002c22 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2202      	movs	r2, #2
 8002c1a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e0d0      	b.n	8002dc4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2100      	movs	r1, #0
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 feda 	bl	80039e2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c2e:	2300      	movs	r3, #0
 8002c30:	73fb      	strb	r3, [r7, #15]
 8002c32:	e04a      	b.n	8002cca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c34:	7bfa      	ldrb	r2, [r7, #15]
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	333d      	adds	r3, #61	; 0x3d
 8002c44:	2201      	movs	r2, #1
 8002c46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c48:	7bfa      	ldrb	r2, [r7, #15]
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	1a9b      	subs	r3, r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	333c      	adds	r3, #60	; 0x3c
 8002c58:	7bfa      	ldrb	r2, [r7, #15]
 8002c5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c5c:	7bfa      	ldrb	r2, [r7, #15]
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
 8002c60:	b298      	uxth	r0, r3
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	1a9b      	subs	r3, r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	3342      	adds	r3, #66	; 0x42
 8002c70:	4602      	mov	r2, r0
 8002c72:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c74:	7bfa      	ldrb	r2, [r7, #15]
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	1a9b      	subs	r3, r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	333f      	adds	r3, #63	; 0x3f
 8002c84:	2200      	movs	r2, #0
 8002c86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c88:	7bfa      	ldrb	r2, [r7, #15]
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	1a9b      	subs	r3, r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	3344      	adds	r3, #68	; 0x44
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c9c:	7bfa      	ldrb	r2, [r7, #15]
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	1a9b      	subs	r3, r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	3348      	adds	r3, #72	; 0x48
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cb0:	7bfa      	ldrb	r2, [r7, #15]
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	3350      	adds	r3, #80	; 0x50
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	73fb      	strb	r3, [r7, #15]
 8002cca:	7bfa      	ldrb	r2, [r7, #15]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d3af      	bcc.n	8002c34 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	73fb      	strb	r3, [r7, #15]
 8002cd8:	e044      	b.n	8002d64 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cda:	7bfa      	ldrb	r2, [r7, #15]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	1a9b      	subs	r3, r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002cec:	2200      	movs	r2, #0
 8002cee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cf0:	7bfa      	ldrb	r2, [r7, #15]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002d02:	7bfa      	ldrb	r2, [r7, #15]
 8002d04:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d06:	7bfa      	ldrb	r2, [r7, #15]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	1a9b      	subs	r3, r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002d18:	2200      	movs	r2, #0
 8002d1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d1c:	7bfa      	ldrb	r2, [r7, #15]
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	1a9b      	subs	r3, r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d32:	7bfa      	ldrb	r2, [r7, #15]
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	1a9b      	subs	r3, r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d48:	7bfa      	ldrb	r2, [r7, #15]
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	3301      	adds	r3, #1
 8002d62:	73fb      	strb	r3, [r7, #15]
 8002d64:	7bfa      	ldrb	r2, [r7, #15]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d3b5      	bcc.n	8002cda <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	687e      	ldr	r6, [r7, #4]
 8002d76:	466d      	mov	r5, sp
 8002d78:	f106 0410 	add.w	r4, r6, #16
 8002d7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d84:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d88:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d8c:	1d33      	adds	r3, r6, #4
 8002d8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d90:	6838      	ldr	r0, [r7, #0]
 8002d92:	f000 fe73 	bl	8003a7c <USB_DevInit>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d005      	beq.n	8002da8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e00d      	b.n	8002dc4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f001 f81d 	bl	8003dfc <USB_DevDisconnect>

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002dcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08a      	sub	sp, #40	; 0x28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e237      	b.n	800324e <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d050      	beq.n	8002e8c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dea:	4ba3      	ldr	r3, [pc, #652]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d00c      	beq.n	8002e10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002df6:	4ba0      	ldr	r3, [pc, #640]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d112      	bne.n	8002e28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e02:	4b9d      	ldr	r3, [pc, #628]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e0e:	d10b      	bne.n	8002e28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e10:	4b99      	ldr	r3, [pc, #612]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d036      	beq.n	8002e8a <HAL_RCC_OscConfig+0xbe>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d132      	bne.n	8002e8a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e212      	b.n	800324e <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	4b93      	ldr	r3, [pc, #588]	; (800307c <HAL_RCC_OscConfig+0x2b0>)
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d013      	beq.n	8002e62 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3a:	f7fe fabf 	bl	80013bc <HAL_GetTick>
 8002e3e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e42:	f7fe fabb 	bl	80013bc <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b64      	cmp	r3, #100	; 0x64
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e1fc      	b.n	800324e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e54:	4b88      	ldr	r3, [pc, #544]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0x76>
 8002e60:	e014      	b.n	8002e8c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e62:	f7fe faab 	bl	80013bc <HAL_GetTick>
 8002e66:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e6a:	f7fe faa7 	bl	80013bc <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b64      	cmp	r3, #100	; 0x64
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e1e8      	b.n	800324e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e7c:	4b7e      	ldr	r3, [pc, #504]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1f0      	bne.n	8002e6a <HAL_RCC_OscConfig+0x9e>
 8002e88:	e000      	b.n	8002e8c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e8a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d077      	beq.n	8002f88 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e98:	4b77      	ldr	r3, [pc, #476]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 030c 	and.w	r3, r3, #12
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00b      	beq.n	8002ebc <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ea4:	4b74      	ldr	r3, [pc, #464]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d126      	bne.n	8002efe <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eb0:	4b71      	ldr	r3, [pc, #452]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d120      	bne.n	8002efe <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ebc:	4b6e      	ldr	r3, [pc, #440]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x108>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e1bc      	b.n	800324e <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed4:	4b68      	ldr	r3, [pc, #416]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	21f8      	movs	r1, #248	; 0xf8
 8002ee2:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee4:	69b9      	ldr	r1, [r7, #24]
 8002ee6:	fa91 f1a1 	rbit	r1, r1
 8002eea:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002eec:	6979      	ldr	r1, [r7, #20]
 8002eee:	fab1 f181 	clz	r1, r1
 8002ef2:	b2c9      	uxtb	r1, r1
 8002ef4:	408b      	lsls	r3, r1
 8002ef6:	4960      	ldr	r1, [pc, #384]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002efc:	e044      	b.n	8002f88 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d02a      	beq.n	8002f5c <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f06:	4b5e      	ldr	r3, [pc, #376]	; (8003080 <HAL_RCC_OscConfig+0x2b4>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0c:	f7fe fa56 	bl	80013bc <HAL_GetTick>
 8002f10:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f14:	f7fe fa52 	bl	80013bc <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e193      	b.n	800324e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f26:	4b54      	ldr	r3, [pc, #336]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f32:	4b51      	ldr	r3, [pc, #324]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	21f8      	movs	r1, #248	; 0xf8
 8002f40:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f42:	6939      	ldr	r1, [r7, #16]
 8002f44:	fa91 f1a1 	rbit	r1, r1
 8002f48:	60f9      	str	r1, [r7, #12]
  return result;
 8002f4a:	68f9      	ldr	r1, [r7, #12]
 8002f4c:	fab1 f181 	clz	r1, r1
 8002f50:	b2c9      	uxtb	r1, r1
 8002f52:	408b      	lsls	r3, r1
 8002f54:	4948      	ldr	r1, [pc, #288]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]
 8002f5a:	e015      	b.n	8002f88 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f5c:	4b48      	ldr	r3, [pc, #288]	; (8003080 <HAL_RCC_OscConfig+0x2b4>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f62:	f7fe fa2b 	bl	80013bc <HAL_GetTick>
 8002f66:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f6a:	f7fe fa27 	bl	80013bc <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e168      	b.n	800324e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f7c:	4b3e      	ldr	r3, [pc, #248]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1f0      	bne.n	8002f6a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d030      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d016      	beq.n	8002fca <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f9c:	4b39      	ldr	r3, [pc, #228]	; (8003084 <HAL_RCC_OscConfig+0x2b8>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa2:	f7fe fa0b 	bl	80013bc <HAL_GetTick>
 8002fa6:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002faa:	f7fe fa07 	bl	80013bc <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e148      	b.n	800324e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fbc:	4b2e      	ldr	r3, [pc, #184]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002fbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0f0      	beq.n	8002faa <HAL_RCC_OscConfig+0x1de>
 8002fc8:	e015      	b.n	8002ff6 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fca:	4b2e      	ldr	r3, [pc, #184]	; (8003084 <HAL_RCC_OscConfig+0x2b8>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd0:	f7fe f9f4 	bl	80013bc <HAL_GetTick>
 8002fd4:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fd8:	f7fe f9f0 	bl	80013bc <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e131      	b.n	800324e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fea:	4b23      	ldr	r3, [pc, #140]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0304 	and.w	r3, r3, #4
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 8088 	beq.w	8003114 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003004:	2300      	movs	r3, #0
 8003006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800300a:	4b1b      	ldr	r3, [pc, #108]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d110      	bne.n	8003038 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	60bb      	str	r3, [r7, #8]
 800301a:	4b17      	ldr	r3, [pc, #92]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	4a16      	ldr	r2, [pc, #88]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8003020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003024:	6413      	str	r3, [r2, #64]	; 0x40
 8003026:	4b14      	ldr	r3, [pc, #80]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302e:	60bb      	str	r3, [r7, #8]
 8003030:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003032:	2301      	movs	r3, #1
 8003034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003038:	4b13      	ldr	r3, [pc, #76]	; (8003088 <HAL_RCC_OscConfig+0x2bc>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a12      	ldr	r2, [pc, #72]	; (8003088 <HAL_RCC_OscConfig+0x2bc>)
 800303e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003042:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003044:	4b10      	ldr	r3, [pc, #64]	; (8003088 <HAL_RCC_OscConfig+0x2bc>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304c:	2b00      	cmp	r3, #0
 800304e:	d123      	bne.n	8003098 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003050:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <HAL_RCC_OscConfig+0x2bc>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a0c      	ldr	r2, [pc, #48]	; (8003088 <HAL_RCC_OscConfig+0x2bc>)
 8003056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800305a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800305c:	f7fe f9ae 	bl	80013bc <HAL_GetTick>
 8003060:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003062:	e013      	b.n	800308c <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003064:	f7fe f9aa 	bl	80013bc <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d90c      	bls.n	800308c <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e0eb      	b.n	800324e <HAL_RCC_OscConfig+0x482>
 8003076:	bf00      	nop
 8003078:	40023800 	.word	0x40023800
 800307c:	40023802 	.word	0x40023802
 8003080:	42470000 	.word	0x42470000
 8003084:	42470e80 	.word	0x42470e80
 8003088:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308c:	4b72      	ldr	r3, [pc, #456]	; (8003258 <HAL_RCC_OscConfig+0x48c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0e5      	beq.n	8003064 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	4b6f      	ldr	r3, [pc, #444]	; (800325c <HAL_RCC_OscConfig+0x490>)
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d015      	beq.n	80030d6 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030aa:	f7fe f987 	bl	80013bc <HAL_GetTick>
 80030ae:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b0:	e00a      	b.n	80030c8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030b2:	f7fe f983 	bl	80013bc <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e0c2      	b.n	800324e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c8:	4b65      	ldr	r3, [pc, #404]	; (8003260 <HAL_RCC_OscConfig+0x494>)
 80030ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0ee      	beq.n	80030b2 <HAL_RCC_OscConfig+0x2e6>
 80030d4:	e014      	b.n	8003100 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d6:	f7fe f971 	bl	80013bc <HAL_GetTick>
 80030da:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030dc:	e00a      	b.n	80030f4 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030de:	f7fe f96d 	bl	80013bc <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e0ac      	b.n	800324e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f4:	4b5a      	ldr	r3, [pc, #360]	; (8003260 <HAL_RCC_OscConfig+0x494>)
 80030f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1ee      	bne.n	80030de <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003104:	2b01      	cmp	r3, #1
 8003106:	d105      	bne.n	8003114 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003108:	4b55      	ldr	r3, [pc, #340]	; (8003260 <HAL_RCC_OscConfig+0x494>)
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	4a54      	ldr	r2, [pc, #336]	; (8003260 <HAL_RCC_OscConfig+0x494>)
 800310e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003112:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 8097 	beq.w	800324c <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800311e:	4b50      	ldr	r3, [pc, #320]	; (8003260 <HAL_RCC_OscConfig+0x494>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 030c 	and.w	r3, r3, #12
 8003126:	2b08      	cmp	r3, #8
 8003128:	d061      	beq.n	80031ee <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d146      	bne.n	80031c0 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003132:	4b4c      	ldr	r3, [pc, #304]	; (8003264 <HAL_RCC_OscConfig+0x498>)
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003138:	f7fe f940 	bl	80013bc <HAL_GetTick>
 800313c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003140:	f7fe f93c 	bl	80013bc <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	6a3b      	ldr	r3, [r7, #32]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b64      	cmp	r3, #100	; 0x64
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e07d      	b.n	800324e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003152:	4b43      	ldr	r3, [pc, #268]	; (8003260 <HAL_RCC_OscConfig+0x494>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800315e:	4b40      	ldr	r3, [pc, #256]	; (8003260 <HAL_RCC_OscConfig+0x494>)
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	4b41      	ldr	r3, [pc, #260]	; (8003268 <HAL_RCC_OscConfig+0x49c>)
 8003164:	4013      	ands	r3, r2
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	69d1      	ldr	r1, [r2, #28]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6a12      	ldr	r2, [r2, #32]
 800316e:	4311      	orrs	r1, r2
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003174:	0192      	lsls	r2, r2, #6
 8003176:	4311      	orrs	r1, r2
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800317c:	0612      	lsls	r2, r2, #24
 800317e:	4311      	orrs	r1, r2
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003184:	0852      	lsrs	r2, r2, #1
 8003186:	3a01      	subs	r2, #1
 8003188:	0412      	lsls	r2, r2, #16
 800318a:	430a      	orrs	r2, r1
 800318c:	4934      	ldr	r1, [pc, #208]	; (8003260 <HAL_RCC_OscConfig+0x494>)
 800318e:	4313      	orrs	r3, r2
 8003190:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003192:	4b34      	ldr	r3, [pc, #208]	; (8003264 <HAL_RCC_OscConfig+0x498>)
 8003194:	2201      	movs	r2, #1
 8003196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003198:	f7fe f910 	bl	80013bc <HAL_GetTick>
 800319c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a0:	f7fe f90c 	bl	80013bc <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b64      	cmp	r3, #100	; 0x64
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e04d      	b.n	800324e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b2:	4b2b      	ldr	r3, [pc, #172]	; (8003260 <HAL_RCC_OscConfig+0x494>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0f0      	beq.n	80031a0 <HAL_RCC_OscConfig+0x3d4>
 80031be:	e045      	b.n	800324c <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c0:	4b28      	ldr	r3, [pc, #160]	; (8003264 <HAL_RCC_OscConfig+0x498>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c6:	f7fe f8f9 	bl	80013bc <HAL_GetTick>
 80031ca:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ce:	f7fe f8f5 	bl	80013bc <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b64      	cmp	r3, #100	; 0x64
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e036      	b.n	800324e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e0:	4b1f      	ldr	r3, [pc, #124]	; (8003260 <HAL_RCC_OscConfig+0x494>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1f0      	bne.n	80031ce <HAL_RCC_OscConfig+0x402>
 80031ec:	e02e      	b.n	800324c <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e029      	b.n	800324e <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80031fa:	4b19      	ldr	r3, [pc, #100]	; (8003260 <HAL_RCC_OscConfig+0x494>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	429a      	cmp	r2, r3
 800320c:	d11c      	bne.n	8003248 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003218:	429a      	cmp	r2, r3
 800321a:	d115      	bne.n	8003248 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	099b      	lsrs	r3, r3, #6
 8003220:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003228:	429a      	cmp	r2, r3
 800322a:	d10d      	bne.n	8003248 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003236:	429a      	cmp	r2, r3
 8003238:	d106      	bne.n	8003248 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e000      	b.n	800324e <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3728      	adds	r7, #40	; 0x28
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40007000 	.word	0x40007000
 800325c:	40023870 	.word	0x40023870
 8003260:	40023800 	.word	0x40023800
 8003264:	42470060 	.word	0x42470060
 8003268:	f0bc8000 	.word	0xf0bc8000

0800326c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e0d2      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003280:	4b6b      	ldr	r3, [pc, #428]	; (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 030f 	and.w	r3, r3, #15
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	429a      	cmp	r2, r3
 800328c:	d90c      	bls.n	80032a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328e:	4b68      	ldr	r3, [pc, #416]	; (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003296:	4b66      	ldr	r3, [pc, #408]	; (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d001      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e0be      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d020      	beq.n	80032f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d005      	beq.n	80032cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032c0:	4b5c      	ldr	r3, [pc, #368]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	4a5b      	ldr	r2, [pc, #364]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 80032c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80032d8:	4b56      	ldr	r3, [pc, #344]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	4a55      	ldr	r2, [pc, #340]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 80032de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032e4:	4b53      	ldr	r3, [pc, #332]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	4950      	ldr	r1, [pc, #320]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d040      	beq.n	8003384 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d107      	bne.n	800331a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330a:	4b4a      	ldr	r3, [pc, #296]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d115      	bne.n	8003342 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e085      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b02      	cmp	r3, #2
 8003320:	d107      	bne.n	8003332 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003322:	4b44      	ldr	r3, [pc, #272]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d109      	bne.n	8003342 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e079      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003332:	4b40      	ldr	r3, [pc, #256]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e071      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003342:	4b3c      	ldr	r3, [pc, #240]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f023 0203 	bic.w	r2, r3, #3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	4939      	ldr	r1, [pc, #228]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 8003350:	4313      	orrs	r3, r2
 8003352:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003354:	f7fe f832 	bl	80013bc <HAL_GetTick>
 8003358:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335a:	e00a      	b.n	8003372 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800335c:	f7fe f82e 	bl	80013bc <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	f241 3288 	movw	r2, #5000	; 0x1388
 800336a:	4293      	cmp	r3, r2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e059      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003372:	4b30      	ldr	r3, [pc, #192]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 020c 	and.w	r2, r3, #12
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	429a      	cmp	r2, r3
 8003382:	d1eb      	bne.n	800335c <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003384:	4b2a      	ldr	r3, [pc, #168]	; (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 030f 	and.w	r3, r3, #15
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	429a      	cmp	r2, r3
 8003390:	d20c      	bcs.n	80033ac <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003392:	4b27      	ldr	r3, [pc, #156]	; (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800339a:	4b25      	ldr	r3, [pc, #148]	; (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d001      	beq.n	80033ac <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e03c      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d008      	beq.n	80033ca <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b8:	4b1e      	ldr	r3, [pc, #120]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	491b      	ldr	r1, [pc, #108]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d009      	beq.n	80033ea <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033d6:	4b17      	ldr	r3, [pc, #92]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	4913      	ldr	r1, [pc, #76]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80033ea:	f000 f82b 	bl	8003444 <HAL_RCC_GetSysClockFreq>
 80033ee:	4601      	mov	r1, r0
 80033f0:	4b10      	ldr	r3, [pc, #64]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033f8:	22f0      	movs	r2, #240	; 0xf0
 80033fa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	fa92 f2a2 	rbit	r2, r2
 8003402:	60fa      	str	r2, [r7, #12]
  return result;
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	fab2 f282 	clz	r2, r2
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	40d3      	lsrs	r3, r2
 800340e:	4a0a      	ldr	r2, [pc, #40]	; (8003438 <HAL_RCC_ClockConfig+0x1cc>)
 8003410:	5cd3      	ldrb	r3, [r2, r3]
 8003412:	fa21 f303 	lsr.w	r3, r1, r3
 8003416:	4a09      	ldr	r2, [pc, #36]	; (800343c <HAL_RCC_ClockConfig+0x1d0>)
 8003418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800341a:	4b09      	ldr	r3, [pc, #36]	; (8003440 <HAL_RCC_ClockConfig+0x1d4>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f7fd ff8a 	bl	8001338 <HAL_InitTick>

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40023c00 	.word	0x40023c00
 8003434:	40023800 	.word	0x40023800
 8003438:	08010948 	.word	0x08010948
 800343c:	20000000 	.word	0x20000000
 8003440:	20000004 	.word	0x20000004

08003444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003444:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	607b      	str	r3, [r7, #4]
 8003450:	2300      	movs	r3, #0
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	2300      	movs	r3, #0
 8003456:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800345c:	4b67      	ldr	r3, [pc, #412]	; (80035fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 030c 	and.w	r3, r3, #12
 8003464:	2b08      	cmp	r3, #8
 8003466:	d00d      	beq.n	8003484 <HAL_RCC_GetSysClockFreq+0x40>
 8003468:	2b08      	cmp	r3, #8
 800346a:	f200 80bd 	bhi.w	80035e8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800346e:	2b00      	cmp	r3, #0
 8003470:	d002      	beq.n	8003478 <HAL_RCC_GetSysClockFreq+0x34>
 8003472:	2b04      	cmp	r3, #4
 8003474:	d003      	beq.n	800347e <HAL_RCC_GetSysClockFreq+0x3a>
 8003476:	e0b7      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003478:	4b61      	ldr	r3, [pc, #388]	; (8003600 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800347a:	60bb      	str	r3, [r7, #8]
       break;
 800347c:	e0b7      	b.n	80035ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800347e:	4b61      	ldr	r3, [pc, #388]	; (8003604 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003480:	60bb      	str	r3, [r7, #8]
      break;
 8003482:	e0b4      	b.n	80035ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003484:	4b5d      	ldr	r3, [pc, #372]	; (80035fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800348c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800348e:	4b5b      	ldr	r3, [pc, #364]	; (80035fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d04d      	beq.n	8003536 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800349a:	4b58      	ldr	r3, [pc, #352]	; (80035fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	099b      	lsrs	r3, r3, #6
 80034a0:	461a      	mov	r2, r3
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80034aa:	f04f 0100 	mov.w	r1, #0
 80034ae:	ea02 0800 	and.w	r8, r2, r0
 80034b2:	ea03 0901 	and.w	r9, r3, r1
 80034b6:	4640      	mov	r0, r8
 80034b8:	4649      	mov	r1, r9
 80034ba:	f04f 0200 	mov.w	r2, #0
 80034be:	f04f 0300 	mov.w	r3, #0
 80034c2:	014b      	lsls	r3, r1, #5
 80034c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034c8:	0142      	lsls	r2, r0, #5
 80034ca:	4610      	mov	r0, r2
 80034cc:	4619      	mov	r1, r3
 80034ce:	ebb0 0008 	subs.w	r0, r0, r8
 80034d2:	eb61 0109 	sbc.w	r1, r1, r9
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	018b      	lsls	r3, r1, #6
 80034e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034e4:	0182      	lsls	r2, r0, #6
 80034e6:	1a12      	subs	r2, r2, r0
 80034e8:	eb63 0301 	sbc.w	r3, r3, r1
 80034ec:	f04f 0000 	mov.w	r0, #0
 80034f0:	f04f 0100 	mov.w	r1, #0
 80034f4:	00d9      	lsls	r1, r3, #3
 80034f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034fa:	00d0      	lsls	r0, r2, #3
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	eb12 0208 	adds.w	r2, r2, r8
 8003504:	eb43 0309 	adc.w	r3, r3, r9
 8003508:	f04f 0000 	mov.w	r0, #0
 800350c:	f04f 0100 	mov.w	r1, #0
 8003510:	0259      	lsls	r1, r3, #9
 8003512:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003516:	0250      	lsls	r0, r2, #9
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	4610      	mov	r0, r2
 800351e:	4619      	mov	r1, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	461a      	mov	r2, r3
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	f7fc fe4c 	bl	80001c4 <__aeabi_uldivmod>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4613      	mov	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	e04a      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003536:	4b31      	ldr	r3, [pc, #196]	; (80035fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	099b      	lsrs	r3, r3, #6
 800353c:	461a      	mov	r2, r3
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003546:	f04f 0100 	mov.w	r1, #0
 800354a:	ea02 0400 	and.w	r4, r2, r0
 800354e:	ea03 0501 	and.w	r5, r3, r1
 8003552:	4620      	mov	r0, r4
 8003554:	4629      	mov	r1, r5
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	f04f 0300 	mov.w	r3, #0
 800355e:	014b      	lsls	r3, r1, #5
 8003560:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003564:	0142      	lsls	r2, r0, #5
 8003566:	4610      	mov	r0, r2
 8003568:	4619      	mov	r1, r3
 800356a:	1b00      	subs	r0, r0, r4
 800356c:	eb61 0105 	sbc.w	r1, r1, r5
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	018b      	lsls	r3, r1, #6
 800357a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800357e:	0182      	lsls	r2, r0, #6
 8003580:	1a12      	subs	r2, r2, r0
 8003582:	eb63 0301 	sbc.w	r3, r3, r1
 8003586:	f04f 0000 	mov.w	r0, #0
 800358a:	f04f 0100 	mov.w	r1, #0
 800358e:	00d9      	lsls	r1, r3, #3
 8003590:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003594:	00d0      	lsls	r0, r2, #3
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	1912      	adds	r2, r2, r4
 800359c:	eb45 0303 	adc.w	r3, r5, r3
 80035a0:	f04f 0000 	mov.w	r0, #0
 80035a4:	f04f 0100 	mov.w	r1, #0
 80035a8:	0299      	lsls	r1, r3, #10
 80035aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80035ae:	0290      	lsls	r0, r2, #10
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4610      	mov	r0, r2
 80035b6:	4619      	mov	r1, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	461a      	mov	r2, r3
 80035bc:	f04f 0300 	mov.w	r3, #0
 80035c0:	f7fc fe00 	bl	80001c4 <__aeabi_uldivmod>
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4613      	mov	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035cc:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	0c1b      	lsrs	r3, r3, #16
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	3301      	adds	r3, #1
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e4:	60bb      	str	r3, [r7, #8]
      break;
 80035e6:	e002      	b.n	80035ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035e8:	4b05      	ldr	r3, [pc, #20]	; (8003600 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035ea:	60bb      	str	r3, [r7, #8]
      break;
 80035ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035ee:	68bb      	ldr	r3, [r7, #8]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80035fa:	bf00      	nop
 80035fc:	40023800 	.word	0x40023800
 8003600:	00f42400 	.word	0x00f42400
 8003604:	007a1200 	.word	0x007a1200

08003608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800360c:	4b02      	ldr	r3, [pc, #8]	; (8003618 <HAL_RCC_GetHCLKFreq+0x10>)
 800360e:	681b      	ldr	r3, [r3, #0]
}
 8003610:	4618      	mov	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr
 8003618:	20000000 	.word	0x20000000

0800361c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8003622:	f7ff fff1 	bl	8003608 <HAL_RCC_GetHCLKFreq>
 8003626:	4601      	mov	r1, r0
 8003628:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003630:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8003634:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	fa92 f2a2 	rbit	r2, r2
 800363c:	603a      	str	r2, [r7, #0]
  return result;
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	fab2 f282 	clz	r2, r2
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	40d3      	lsrs	r3, r2
 8003648:	4a04      	ldr	r2, [pc, #16]	; (800365c <HAL_RCC_GetPCLK1Freq+0x40>)
 800364a:	5cd3      	ldrb	r3, [r2, r3]
 800364c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003650:	4618      	mov	r0, r3
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40023800 	.word	0x40023800
 800365c:	08010958 	.word	0x08010958

08003660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8003666:	f7ff ffcf 	bl	8003608 <HAL_RCC_GetHCLKFreq>
 800366a:	4601      	mov	r1, r0
 800366c:	4b0b      	ldr	r3, [pc, #44]	; (800369c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003674:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8003678:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	fa92 f2a2 	rbit	r2, r2
 8003680:	603a      	str	r2, [r7, #0]
  return result;
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	fab2 f282 	clz	r2, r2
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	40d3      	lsrs	r3, r2
 800368c:	4a04      	ldr	r2, [pc, #16]	; (80036a0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800368e:	5cd3      	ldrb	r3, [r2, r3]
 8003690:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003694:	4618      	mov	r0, r3
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40023800 	.word	0x40023800
 80036a0:	08010958 	.word	0x08010958

080036a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e03f      	b.n	8003736 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d106      	bne.n	80036d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7fd f950 	bl	8000970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2224      	movs	r2, #36	; 0x24
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f829 	bl	8003740 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	691a      	ldr	r2, [r3, #16]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695a      	ldr	r2, [r3, #20]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800370c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800371c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
	...

08003740 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	431a      	orrs	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	4313      	orrs	r3, r2
 8003774:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003780:	f023 030c 	bic.w	r3, r3, #12
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	68b9      	ldr	r1, [r7, #8]
 800378a:	430b      	orrs	r3, r1
 800378c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	699a      	ldr	r2, [r3, #24]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a57      	ldr	r2, [pc, #348]	; (8003908 <UART_SetConfig+0x1c8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d004      	beq.n	80037b8 <UART_SetConfig+0x78>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a56      	ldr	r2, [pc, #344]	; (800390c <UART_SetConfig+0x1cc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d103      	bne.n	80037c0 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037b8:	f7ff ff52 	bl	8003660 <HAL_RCC_GetPCLK2Freq>
 80037bc:	60f8      	str	r0, [r7, #12]
 80037be:	e002      	b.n	80037c6 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037c0:	f7ff ff2c 	bl	800361c <HAL_RCC_GetPCLK1Freq>
 80037c4:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ce:	d14c      	bne.n	800386a <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	009a      	lsls	r2, r3, #2
 80037da:	441a      	add	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e6:	4a4a      	ldr	r2, [pc, #296]	; (8003910 <UART_SetConfig+0x1d0>)
 80037e8:	fba2 2303 	umull	r2, r3, r2, r3
 80037ec:	095b      	lsrs	r3, r3, #5
 80037ee:	0119      	lsls	r1, r3, #4
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	009a      	lsls	r2, r3, #2
 80037fa:	441a      	add	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	fbb2 f2f3 	udiv	r2, r2, r3
 8003806:	4b42      	ldr	r3, [pc, #264]	; (8003910 <UART_SetConfig+0x1d0>)
 8003808:	fba3 0302 	umull	r0, r3, r3, r2
 800380c:	095b      	lsrs	r3, r3, #5
 800380e:	2064      	movs	r0, #100	; 0x64
 8003810:	fb00 f303 	mul.w	r3, r0, r3
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	3332      	adds	r3, #50	; 0x32
 800381a:	4a3d      	ldr	r2, [pc, #244]	; (8003910 <UART_SetConfig+0x1d0>)
 800381c:	fba2 2303 	umull	r2, r3, r2, r3
 8003820:	095b      	lsrs	r3, r3, #5
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003828:	4419      	add	r1, r3
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	4613      	mov	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	009a      	lsls	r2, r3, #2
 8003834:	441a      	add	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003840:	4b33      	ldr	r3, [pc, #204]	; (8003910 <UART_SetConfig+0x1d0>)
 8003842:	fba3 0302 	umull	r0, r3, r3, r2
 8003846:	095b      	lsrs	r3, r3, #5
 8003848:	2064      	movs	r0, #100	; 0x64
 800384a:	fb00 f303 	mul.w	r3, r0, r3
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	3332      	adds	r3, #50	; 0x32
 8003854:	4a2e      	ldr	r2, [pc, #184]	; (8003910 <UART_SetConfig+0x1d0>)
 8003856:	fba2 2303 	umull	r2, r3, r2, r3
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	f003 0207 	and.w	r2, r3, #7
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	440a      	add	r2, r1
 8003866:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003868:	e04a      	b.n	8003900 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	4613      	mov	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	009a      	lsls	r2, r3, #2
 8003874:	441a      	add	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003880:	4a23      	ldr	r2, [pc, #140]	; (8003910 <UART_SetConfig+0x1d0>)
 8003882:	fba2 2303 	umull	r2, r3, r2, r3
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	0119      	lsls	r1, r3, #4
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	009a      	lsls	r2, r3, #2
 8003894:	441a      	add	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	fbb2 f2f3 	udiv	r2, r2, r3
 80038a0:	4b1b      	ldr	r3, [pc, #108]	; (8003910 <UART_SetConfig+0x1d0>)
 80038a2:	fba3 0302 	umull	r0, r3, r3, r2
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	2064      	movs	r0, #100	; 0x64
 80038aa:	fb00 f303 	mul.w	r3, r0, r3
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	011b      	lsls	r3, r3, #4
 80038b2:	3332      	adds	r3, #50	; 0x32
 80038b4:	4a16      	ldr	r2, [pc, #88]	; (8003910 <UART_SetConfig+0x1d0>)
 80038b6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038c0:	4419      	add	r1, r3
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	4613      	mov	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	009a      	lsls	r2, r3, #2
 80038cc:	441a      	add	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80038d8:	4b0d      	ldr	r3, [pc, #52]	; (8003910 <UART_SetConfig+0x1d0>)
 80038da:	fba3 0302 	umull	r0, r3, r3, r2
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	2064      	movs	r0, #100	; 0x64
 80038e2:	fb00 f303 	mul.w	r3, r0, r3
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	3332      	adds	r3, #50	; 0x32
 80038ec:	4a08      	ldr	r2, [pc, #32]	; (8003910 <UART_SetConfig+0x1d0>)
 80038ee:	fba2 2303 	umull	r2, r3, r2, r3
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	f003 020f 	and.w	r2, r3, #15
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	440a      	add	r2, r1
 80038fe:	609a      	str	r2, [r3, #8]
}
 8003900:	bf00      	nop
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40011000 	.word	0x40011000
 800390c:	40011400 	.word	0x40011400
 8003910:	51eb851f 	.word	0x51eb851f

08003914 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003914:	b084      	sub	sp, #16
 8003916:	b580      	push	{r7, lr}
 8003918:	b084      	sub	sp, #16
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
 800391e:	f107 001c 	add.w	r0, r7, #28
 8003922:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003928:	2b01      	cmp	r3, #1
 800392a:	d122      	bne.n	8003972 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003930:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003956:	2b01      	cmp	r3, #1
 8003958:	d105      	bne.n	8003966 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fa76 	bl	8003e58 <USB_CoreReset>
 800396c:	4603      	mov	r3, r0
 800396e:	73fb      	strb	r3, [r7, #15]
 8003970:	e010      	b.n	8003994 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fa6a 	bl	8003e58 <USB_CoreReset>
 8003984:	4603      	mov	r3, r0
 8003986:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003996:	2b01      	cmp	r3, #1
 8003998:	d10b      	bne.n	80039b2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f043 0206 	orr.w	r2, r3, #6
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f043 0220 	orr.w	r2, r3, #32
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039be:	b004      	add	sp, #16
 80039c0:	4770      	bx	lr

080039c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f023 0201 	bic.w	r2, r3, #1
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	bc80      	pop	{r7}
 80039e0:	4770      	bx	lr

080039e2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b084      	sub	sp, #16
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	460b      	mov	r3, r1
 80039ec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80039fe:	78fb      	ldrb	r3, [r7, #3]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d115      	bne.n	8003a30 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a10:	2001      	movs	r0, #1
 8003a12:	f7fd fcdd 	bl	80013d0 <HAL_Delay>
      ms++;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 fa0d 	bl	8003e3c <USB_GetMode>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d01e      	beq.n	8003a66 <USB_SetCurrentMode+0x84>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b31      	cmp	r3, #49	; 0x31
 8003a2c:	d9f0      	bls.n	8003a10 <USB_SetCurrentMode+0x2e>
 8003a2e:	e01a      	b.n	8003a66 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d115      	bne.n	8003a62 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a42:	2001      	movs	r0, #1
 8003a44:	f7fd fcc4 	bl	80013d0 <HAL_Delay>
      ms++;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f9f4 	bl	8003e3c <USB_GetMode>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d005      	beq.n	8003a66 <USB_SetCurrentMode+0x84>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b31      	cmp	r3, #49	; 0x31
 8003a5e:	d9f0      	bls.n	8003a42 <USB_SetCurrentMode+0x60>
 8003a60:	e001      	b.n	8003a66 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e005      	b.n	8003a72 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b32      	cmp	r3, #50	; 0x32
 8003a6a:	d101      	bne.n	8003a70 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e000      	b.n	8003a72 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
	...

08003a7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a7c:	b084      	sub	sp, #16
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b086      	sub	sp, #24
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
 8003a86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003a8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a96:	2300      	movs	r3, #0
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	e009      	b.n	8003ab0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	3340      	adds	r3, #64	; 0x40
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	3301      	adds	r3, #1
 8003aae:	613b      	str	r3, [r7, #16]
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	2b0e      	cmp	r3, #14
 8003ab4:	d9f2      	bls.n	8003a9c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d11c      	bne.n	8003af6 <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aca:	f043 0302 	orr.w	r3, r3, #2
 8003ace:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	639a      	str	r2, [r3, #56]	; 0x38
 8003af4:	e00b      	b.n	8003b0e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b06:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b14:	461a      	mov	r2, r3
 8003b16:	2300      	movs	r3, #0
 8003b18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b20:	4619      	mov	r1, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b28:	461a      	mov	r2, r3
 8003b2a:	680b      	ldr	r3, [r1, #0]
 8003b2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d10c      	bne.n	8003b4e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d104      	bne.n	8003b44 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f945 	bl	8003dcc <USB_SetDevSpeed>
 8003b42:	e008      	b.n	8003b56 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b44:	2101      	movs	r1, #1
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f940 	bl	8003dcc <USB_SetDevSpeed>
 8003b4c:	e003      	b.n	8003b56 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b4e:	2103      	movs	r1, #3
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f93b 	bl	8003dcc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b56:	2110      	movs	r1, #16
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f8f3 	bl	8003d44 <USB_FlushTxFifo>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f90f 	bl	8003d8c <USB_FlushRxFifo>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b7e:	461a      	mov	r2, r3
 8003b80:	2300      	movs	r3, #0
 8003b82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b96:	461a      	mov	r2, r3
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	613b      	str	r3, [r7, #16]
 8003ba0:	e043      	b.n	8003c2a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	015a      	lsls	r2, r3, #5
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bb8:	d118      	bne.n	8003bec <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10a      	bne.n	8003bd6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bcc:	461a      	mov	r2, r3
 8003bce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	e013      	b.n	8003bfe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be2:	461a      	mov	r2, r3
 8003be4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	e008      	b.n	8003bfe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	015a      	lsls	r2, r3, #5
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	015a      	lsls	r2, r3, #5
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4413      	add	r3, r2
 8003c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	3301      	adds	r3, #1
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d3b7      	bcc.n	8003ba2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c32:	2300      	movs	r3, #0
 8003c34:	613b      	str	r3, [r7, #16]
 8003c36:	e043      	b.n	8003cc0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c4e:	d118      	bne.n	8003c82 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10a      	bne.n	8003c6c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c62:	461a      	mov	r2, r3
 8003c64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	e013      	b.n	8003c94 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	015a      	lsls	r2, r3, #5
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c78:	461a      	mov	r2, r3
 8003c7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c7e:	6013      	str	r3, [r2, #0]
 8003c80:	e008      	b.n	8003c94 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	015a      	lsls	r2, r3, #5
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8e:	461a      	mov	r2, r3
 8003c90:	2300      	movs	r3, #0
 8003c92:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	015a      	lsls	r2, r3, #5
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cb8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	613b      	str	r3, [r7, #16]
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d3b7      	bcc.n	8003c38 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cda:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003ce8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d105      	bne.n	8003cfc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	f043 0210 	orr.w	r2, r3, #16
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699a      	ldr	r2, [r3, #24]
 8003d00:	4b0f      	ldr	r3, [pc, #60]	; (8003d40 <USB_DevInit+0x2c4>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d005      	beq.n	8003d1a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	f043 0208 	orr.w	r2, r3, #8
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d107      	bne.n	8003d30 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d28:	f043 0304 	orr.w	r3, r3, #4
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3718      	adds	r7, #24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d3c:	b004      	add	sp, #16
 8003d3e:	4770      	bx	lr
 8003d40:	803c3800 	.word	0x803c3800

08003d44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	019b      	lsls	r3, r3, #6
 8003d56:	f043 0220 	orr.w	r2, r3, #32
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	3301      	adds	r3, #1
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4a08      	ldr	r2, [pc, #32]	; (8003d88 <USB_FlushTxFifo+0x44>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d901      	bls.n	8003d70 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e006      	b.n	8003d7e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	f003 0320 	and.w	r3, r3, #32
 8003d78:	2b20      	cmp	r3, #32
 8003d7a:	d0f0      	beq.n	8003d5e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr
 8003d88:	00030d40 	.word	0x00030d40

08003d8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003d94:	2300      	movs	r3, #0
 8003d96:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2210      	movs	r2, #16
 8003d9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	3301      	adds	r3, #1
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4a08      	ldr	r2, [pc, #32]	; (8003dc8 <USB_FlushRxFifo+0x3c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d901      	bls.n	8003db0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e006      	b.n	8003dbe <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	f003 0310 	and.w	r3, r3, #16
 8003db8:	2b10      	cmp	r3, #16
 8003dba:	d0f0      	beq.n	8003d9e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bc80      	pop	{r7}
 8003dc6:	4770      	bx	lr
 8003dc8:	00030d40 	.word	0x00030d40

08003dcc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	78fb      	ldrb	r3, [r7, #3]
 8003de6:	68f9      	ldr	r1, [r7, #12]
 8003de8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dec:	4313      	orrs	r3, r2
 8003dee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bc80      	pop	{r7}
 8003dfa:	4770      	bx	lr

08003dfc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003e16:	f023 0303 	bic.w	r3, r3, #3
 8003e1a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e2a:	f043 0302 	orr.w	r3, r3, #2
 8003e2e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr

08003e3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	f003 0301 	and.w	r3, r3, #1
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bc80      	pop	{r7}
 8003e54:	4770      	bx	lr
	...

08003e58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	3301      	adds	r3, #1
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	4a12      	ldr	r2, [pc, #72]	; (8003eb8 <USB_CoreReset+0x60>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d901      	bls.n	8003e76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e01b      	b.n	8003eae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	daf2      	bge.n	8003e64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	f043 0201 	orr.w	r2, r3, #1
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	3301      	adds	r3, #1
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4a08      	ldr	r2, [pc, #32]	; (8003eb8 <USB_CoreReset+0x60>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d901      	bls.n	8003ea0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e006      	b.n	8003eae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d0f0      	beq.n	8003e8e <USB_CoreReset+0x36>

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3714      	adds	r7, #20
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr
 8003eb8:	00030d40 	.word	0x00030d40

08003ebc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003ec2:	4b8d      	ldr	r3, [pc, #564]	; (80040f8 <MX_LWIP_Init+0x23c>)
 8003ec4:	22c0      	movs	r2, #192	; 0xc0
 8003ec6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003ec8:	4b8b      	ldr	r3, [pc, #556]	; (80040f8 <MX_LWIP_Init+0x23c>)
 8003eca:	22a8      	movs	r2, #168	; 0xa8
 8003ecc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8003ece:	4b8a      	ldr	r3, [pc, #552]	; (80040f8 <MX_LWIP_Init+0x23c>)
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 32;
 8003ed4:	4b88      	ldr	r3, [pc, #544]	; (80040f8 <MX_LWIP_Init+0x23c>)
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003eda:	4b88      	ldr	r3, [pc, #544]	; (80040fc <MX_LWIP_Init+0x240>)
 8003edc:	22ff      	movs	r2, #255	; 0xff
 8003ede:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003ee0:	4b86      	ldr	r3, [pc, #536]	; (80040fc <MX_LWIP_Init+0x240>)
 8003ee2:	22ff      	movs	r2, #255	; 0xff
 8003ee4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003ee6:	4b85      	ldr	r3, [pc, #532]	; (80040fc <MX_LWIP_Init+0x240>)
 8003ee8:	22ff      	movs	r2, #255	; 0xff
 8003eea:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003eec:	4b83      	ldr	r3, [pc, #524]	; (80040fc <MX_LWIP_Init+0x240>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8003ef2:	4b83      	ldr	r3, [pc, #524]	; (8004100 <MX_LWIP_Init+0x244>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8003ef8:	4b81      	ldr	r3, [pc, #516]	; (8004100 <MX_LWIP_Init+0x244>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8003efe:	4b80      	ldr	r3, [pc, #512]	; (8004100 <MX_LWIP_Init+0x244>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8003f04:	4b7e      	ldr	r3, [pc, #504]	; (8004100 <MX_LWIP_Init+0x244>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8003f0a:	f000 fcd9 	bl	80048c0 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003f0e:	4b7a      	ldr	r3, [pc, #488]	; (80040f8 <MX_LWIP_Init+0x23c>)
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	061a      	lsls	r2, r3, #24
 8003f14:	4b78      	ldr	r3, [pc, #480]	; (80040f8 <MX_LWIP_Init+0x23c>)
 8003f16:	785b      	ldrb	r3, [r3, #1]
 8003f18:	041b      	lsls	r3, r3, #16
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	4b76      	ldr	r3, [pc, #472]	; (80040f8 <MX_LWIP_Init+0x23c>)
 8003f1e:	789b      	ldrb	r3, [r3, #2]
 8003f20:	021b      	lsls	r3, r3, #8
 8003f22:	4313      	orrs	r3, r2
 8003f24:	4a74      	ldr	r2, [pc, #464]	; (80040f8 <MX_LWIP_Init+0x23c>)
 8003f26:	78d2      	ldrb	r2, [r2, #3]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	061a      	lsls	r2, r3, #24
 8003f2c:	4b72      	ldr	r3, [pc, #456]	; (80040f8 <MX_LWIP_Init+0x23c>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	0619      	lsls	r1, r3, #24
 8003f32:	4b71      	ldr	r3, [pc, #452]	; (80040f8 <MX_LWIP_Init+0x23c>)
 8003f34:	785b      	ldrb	r3, [r3, #1]
 8003f36:	041b      	lsls	r3, r3, #16
 8003f38:	4319      	orrs	r1, r3
 8003f3a:	4b6f      	ldr	r3, [pc, #444]	; (80040f8 <MX_LWIP_Init+0x23c>)
 8003f3c:	789b      	ldrb	r3, [r3, #2]
 8003f3e:	021b      	lsls	r3, r3, #8
 8003f40:	430b      	orrs	r3, r1
 8003f42:	496d      	ldr	r1, [pc, #436]	; (80040f8 <MX_LWIP_Init+0x23c>)
 8003f44:	78c9      	ldrb	r1, [r1, #3]
 8003f46:	430b      	orrs	r3, r1
 8003f48:	021b      	lsls	r3, r3, #8
 8003f4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	4b69      	ldr	r3, [pc, #420]	; (80040f8 <MX_LWIP_Init+0x23c>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	0619      	lsls	r1, r3, #24
 8003f56:	4b68      	ldr	r3, [pc, #416]	; (80040f8 <MX_LWIP_Init+0x23c>)
 8003f58:	785b      	ldrb	r3, [r3, #1]
 8003f5a:	041b      	lsls	r3, r3, #16
 8003f5c:	4319      	orrs	r1, r3
 8003f5e:	4b66      	ldr	r3, [pc, #408]	; (80040f8 <MX_LWIP_Init+0x23c>)
 8003f60:	789b      	ldrb	r3, [r3, #2]
 8003f62:	021b      	lsls	r3, r3, #8
 8003f64:	430b      	orrs	r3, r1
 8003f66:	4964      	ldr	r1, [pc, #400]	; (80040f8 <MX_LWIP_Init+0x23c>)
 8003f68:	78c9      	ldrb	r1, [r1, #3]
 8003f6a:	430b      	orrs	r3, r1
 8003f6c:	0a1b      	lsrs	r3, r3, #8
 8003f6e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003f72:	431a      	orrs	r2, r3
 8003f74:	4b60      	ldr	r3, [pc, #384]	; (80040f8 <MX_LWIP_Init+0x23c>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	0619      	lsls	r1, r3, #24
 8003f7a:	4b5f      	ldr	r3, [pc, #380]	; (80040f8 <MX_LWIP_Init+0x23c>)
 8003f7c:	785b      	ldrb	r3, [r3, #1]
 8003f7e:	041b      	lsls	r3, r3, #16
 8003f80:	4319      	orrs	r1, r3
 8003f82:	4b5d      	ldr	r3, [pc, #372]	; (80040f8 <MX_LWIP_Init+0x23c>)
 8003f84:	789b      	ldrb	r3, [r3, #2]
 8003f86:	021b      	lsls	r3, r3, #8
 8003f88:	430b      	orrs	r3, r1
 8003f8a:	495b      	ldr	r1, [pc, #364]	; (80040f8 <MX_LWIP_Init+0x23c>)
 8003f8c:	78c9      	ldrb	r1, [r1, #3]
 8003f8e:	430b      	orrs	r3, r1
 8003f90:	0e1b      	lsrs	r3, r3, #24
 8003f92:	4313      	orrs	r3, r2
 8003f94:	4a5b      	ldr	r2, [pc, #364]	; (8004104 <MX_LWIP_Init+0x248>)
 8003f96:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003f98:	4b58      	ldr	r3, [pc, #352]	; (80040fc <MX_LWIP_Init+0x240>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	061a      	lsls	r2, r3, #24
 8003f9e:	4b57      	ldr	r3, [pc, #348]	; (80040fc <MX_LWIP_Init+0x240>)
 8003fa0:	785b      	ldrb	r3, [r3, #1]
 8003fa2:	041b      	lsls	r3, r3, #16
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	4b55      	ldr	r3, [pc, #340]	; (80040fc <MX_LWIP_Init+0x240>)
 8003fa8:	789b      	ldrb	r3, [r3, #2]
 8003faa:	021b      	lsls	r3, r3, #8
 8003fac:	4313      	orrs	r3, r2
 8003fae:	4a53      	ldr	r2, [pc, #332]	; (80040fc <MX_LWIP_Init+0x240>)
 8003fb0:	78d2      	ldrb	r2, [r2, #3]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	061a      	lsls	r2, r3, #24
 8003fb6:	4b51      	ldr	r3, [pc, #324]	; (80040fc <MX_LWIP_Init+0x240>)
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	0619      	lsls	r1, r3, #24
 8003fbc:	4b4f      	ldr	r3, [pc, #316]	; (80040fc <MX_LWIP_Init+0x240>)
 8003fbe:	785b      	ldrb	r3, [r3, #1]
 8003fc0:	041b      	lsls	r3, r3, #16
 8003fc2:	4319      	orrs	r1, r3
 8003fc4:	4b4d      	ldr	r3, [pc, #308]	; (80040fc <MX_LWIP_Init+0x240>)
 8003fc6:	789b      	ldrb	r3, [r3, #2]
 8003fc8:	021b      	lsls	r3, r3, #8
 8003fca:	430b      	orrs	r3, r1
 8003fcc:	494b      	ldr	r1, [pc, #300]	; (80040fc <MX_LWIP_Init+0x240>)
 8003fce:	78c9      	ldrb	r1, [r1, #3]
 8003fd0:	430b      	orrs	r3, r1
 8003fd2:	021b      	lsls	r3, r3, #8
 8003fd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	4b48      	ldr	r3, [pc, #288]	; (80040fc <MX_LWIP_Init+0x240>)
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	0619      	lsls	r1, r3, #24
 8003fe0:	4b46      	ldr	r3, [pc, #280]	; (80040fc <MX_LWIP_Init+0x240>)
 8003fe2:	785b      	ldrb	r3, [r3, #1]
 8003fe4:	041b      	lsls	r3, r3, #16
 8003fe6:	4319      	orrs	r1, r3
 8003fe8:	4b44      	ldr	r3, [pc, #272]	; (80040fc <MX_LWIP_Init+0x240>)
 8003fea:	789b      	ldrb	r3, [r3, #2]
 8003fec:	021b      	lsls	r3, r3, #8
 8003fee:	430b      	orrs	r3, r1
 8003ff0:	4942      	ldr	r1, [pc, #264]	; (80040fc <MX_LWIP_Init+0x240>)
 8003ff2:	78c9      	ldrb	r1, [r1, #3]
 8003ff4:	430b      	orrs	r3, r1
 8003ff6:	0a1b      	lsrs	r3, r3, #8
 8003ff8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	4b3f      	ldr	r3, [pc, #252]	; (80040fc <MX_LWIP_Init+0x240>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	0619      	lsls	r1, r3, #24
 8004004:	4b3d      	ldr	r3, [pc, #244]	; (80040fc <MX_LWIP_Init+0x240>)
 8004006:	785b      	ldrb	r3, [r3, #1]
 8004008:	041b      	lsls	r3, r3, #16
 800400a:	4319      	orrs	r1, r3
 800400c:	4b3b      	ldr	r3, [pc, #236]	; (80040fc <MX_LWIP_Init+0x240>)
 800400e:	789b      	ldrb	r3, [r3, #2]
 8004010:	021b      	lsls	r3, r3, #8
 8004012:	430b      	orrs	r3, r1
 8004014:	4939      	ldr	r1, [pc, #228]	; (80040fc <MX_LWIP_Init+0x240>)
 8004016:	78c9      	ldrb	r1, [r1, #3]
 8004018:	430b      	orrs	r3, r1
 800401a:	0e1b      	lsrs	r3, r3, #24
 800401c:	4313      	orrs	r3, r2
 800401e:	4a3a      	ldr	r2, [pc, #232]	; (8004108 <MX_LWIP_Init+0x24c>)
 8004020:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004022:	4b37      	ldr	r3, [pc, #220]	; (8004100 <MX_LWIP_Init+0x244>)
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	061a      	lsls	r2, r3, #24
 8004028:	4b35      	ldr	r3, [pc, #212]	; (8004100 <MX_LWIP_Init+0x244>)
 800402a:	785b      	ldrb	r3, [r3, #1]
 800402c:	041b      	lsls	r3, r3, #16
 800402e:	431a      	orrs	r2, r3
 8004030:	4b33      	ldr	r3, [pc, #204]	; (8004100 <MX_LWIP_Init+0x244>)
 8004032:	789b      	ldrb	r3, [r3, #2]
 8004034:	021b      	lsls	r3, r3, #8
 8004036:	4313      	orrs	r3, r2
 8004038:	4a31      	ldr	r2, [pc, #196]	; (8004100 <MX_LWIP_Init+0x244>)
 800403a:	78d2      	ldrb	r2, [r2, #3]
 800403c:	4313      	orrs	r3, r2
 800403e:	061a      	lsls	r2, r3, #24
 8004040:	4b2f      	ldr	r3, [pc, #188]	; (8004100 <MX_LWIP_Init+0x244>)
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	0619      	lsls	r1, r3, #24
 8004046:	4b2e      	ldr	r3, [pc, #184]	; (8004100 <MX_LWIP_Init+0x244>)
 8004048:	785b      	ldrb	r3, [r3, #1]
 800404a:	041b      	lsls	r3, r3, #16
 800404c:	4319      	orrs	r1, r3
 800404e:	4b2c      	ldr	r3, [pc, #176]	; (8004100 <MX_LWIP_Init+0x244>)
 8004050:	789b      	ldrb	r3, [r3, #2]
 8004052:	021b      	lsls	r3, r3, #8
 8004054:	430b      	orrs	r3, r1
 8004056:	492a      	ldr	r1, [pc, #168]	; (8004100 <MX_LWIP_Init+0x244>)
 8004058:	78c9      	ldrb	r1, [r1, #3]
 800405a:	430b      	orrs	r3, r1
 800405c:	021b      	lsls	r3, r3, #8
 800405e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004062:	431a      	orrs	r2, r3
 8004064:	4b26      	ldr	r3, [pc, #152]	; (8004100 <MX_LWIP_Init+0x244>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	0619      	lsls	r1, r3, #24
 800406a:	4b25      	ldr	r3, [pc, #148]	; (8004100 <MX_LWIP_Init+0x244>)
 800406c:	785b      	ldrb	r3, [r3, #1]
 800406e:	041b      	lsls	r3, r3, #16
 8004070:	4319      	orrs	r1, r3
 8004072:	4b23      	ldr	r3, [pc, #140]	; (8004100 <MX_LWIP_Init+0x244>)
 8004074:	789b      	ldrb	r3, [r3, #2]
 8004076:	021b      	lsls	r3, r3, #8
 8004078:	430b      	orrs	r3, r1
 800407a:	4921      	ldr	r1, [pc, #132]	; (8004100 <MX_LWIP_Init+0x244>)
 800407c:	78c9      	ldrb	r1, [r1, #3]
 800407e:	430b      	orrs	r3, r1
 8004080:	0a1b      	lsrs	r3, r3, #8
 8004082:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004086:	431a      	orrs	r2, r3
 8004088:	4b1d      	ldr	r3, [pc, #116]	; (8004100 <MX_LWIP_Init+0x244>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	0619      	lsls	r1, r3, #24
 800408e:	4b1c      	ldr	r3, [pc, #112]	; (8004100 <MX_LWIP_Init+0x244>)
 8004090:	785b      	ldrb	r3, [r3, #1]
 8004092:	041b      	lsls	r3, r3, #16
 8004094:	4319      	orrs	r1, r3
 8004096:	4b1a      	ldr	r3, [pc, #104]	; (8004100 <MX_LWIP_Init+0x244>)
 8004098:	789b      	ldrb	r3, [r3, #2]
 800409a:	021b      	lsls	r3, r3, #8
 800409c:	430b      	orrs	r3, r1
 800409e:	4918      	ldr	r1, [pc, #96]	; (8004100 <MX_LWIP_Init+0x244>)
 80040a0:	78c9      	ldrb	r1, [r1, #3]
 80040a2:	430b      	orrs	r3, r1
 80040a4:	0e1b      	lsrs	r3, r3, #24
 80040a6:	4313      	orrs	r3, r2
 80040a8:	4a18      	ldr	r2, [pc, #96]	; (800410c <MX_LWIP_Init+0x250>)
 80040aa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80040ac:	4b18      	ldr	r3, [pc, #96]	; (8004110 <MX_LWIP_Init+0x254>)
 80040ae:	9302      	str	r3, [sp, #8]
 80040b0:	4b18      	ldr	r3, [pc, #96]	; (8004114 <MX_LWIP_Init+0x258>)
 80040b2:	9301      	str	r3, [sp, #4]
 80040b4:	2300      	movs	r3, #0
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	4b14      	ldr	r3, [pc, #80]	; (800410c <MX_LWIP_Init+0x250>)
 80040ba:	4a13      	ldr	r2, [pc, #76]	; (8004108 <MX_LWIP_Init+0x24c>)
 80040bc:	4911      	ldr	r1, [pc, #68]	; (8004104 <MX_LWIP_Init+0x248>)
 80040be:	4816      	ldr	r0, [pc, #88]	; (8004118 <MX_LWIP_Init+0x25c>)
 80040c0:	f000 fffe 	bl	80050c0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80040c4:	4814      	ldr	r0, [pc, #80]	; (8004118 <MX_LWIP_Init+0x25c>)
 80040c6:	f001 f8dd 	bl	8005284 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80040ca:	4b13      	ldr	r3, [pc, #76]	; (8004118 <MX_LWIP_Init+0x25c>)
 80040cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80040d0:	089b      	lsrs	r3, r3, #2
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80040dc:	480e      	ldr	r0, [pc, #56]	; (8004118 <MX_LWIP_Init+0x25c>)
 80040de:	f001 f8df 	bl	80052a0 <netif_set_up>
 80040e2:	e002      	b.n	80040ea <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80040e4:	480c      	ldr	r0, [pc, #48]	; (8004118 <MX_LWIP_Init+0x25c>)
 80040e6:	f001 f91f 	bl	8005328 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80040ea:	490c      	ldr	r1, [pc, #48]	; (800411c <MX_LWIP_Init+0x260>)
 80040ec:	480a      	ldr	r0, [pc, #40]	; (8004118 <MX_LWIP_Init+0x25c>)
 80040ee:	f001 f93d 	bl	800536c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80040f2:	bf00      	nop
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	20000698 	.word	0x20000698
 80040fc:	20000694 	.word	0x20000694
 8004100:	20000658 	.word	0x20000658
 8004104:	20000690 	.word	0x20000690
 8004108:	2000069c 	.word	0x2000069c
 800410c:	200006a0 	.word	0x200006a0
 8004110:	0800db21 	.word	0x0800db21
 8004114:	08004701 	.word	0x08004701
 8004118:	2000065c 	.word	0x2000065c
 800411c:	0800476d 	.word	0x0800476d

08004120 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8004124:	4803      	ldr	r0, [pc, #12]	; (8004134 <MX_LWIP_Process+0x14>)
 8004126:	f000 facb 	bl	80046c0 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800412a:	f007 fa23 	bl	800b574 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800412e:	bf00      	nop
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	2000065c 	.word	0x2000065c

08004138 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08e      	sub	sp, #56	; 0x38
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	605a      	str	r2, [r3, #4]
 800414a:	609a      	str	r2, [r3, #8]
 800414c:	60da      	str	r2, [r3, #12]
 800414e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a55      	ldr	r2, [pc, #340]	; (80042ac <HAL_ETH_MspInit+0x174>)
 8004156:	4293      	cmp	r3, r2
 8004158:	f040 80a4 	bne.w	80042a4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800415c:	2300      	movs	r3, #0
 800415e:	623b      	str	r3, [r7, #32]
 8004160:	4b53      	ldr	r3, [pc, #332]	; (80042b0 <HAL_ETH_MspInit+0x178>)
 8004162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004164:	4a52      	ldr	r2, [pc, #328]	; (80042b0 <HAL_ETH_MspInit+0x178>)
 8004166:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800416a:	6313      	str	r3, [r2, #48]	; 0x30
 800416c:	4b50      	ldr	r3, [pc, #320]	; (80042b0 <HAL_ETH_MspInit+0x178>)
 800416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004174:	623b      	str	r3, [r7, #32]
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	2300      	movs	r3, #0
 800417a:	61fb      	str	r3, [r7, #28]
 800417c:	4b4c      	ldr	r3, [pc, #304]	; (80042b0 <HAL_ETH_MspInit+0x178>)
 800417e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004180:	4a4b      	ldr	r2, [pc, #300]	; (80042b0 <HAL_ETH_MspInit+0x178>)
 8004182:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004186:	6313      	str	r3, [r2, #48]	; 0x30
 8004188:	4b49      	ldr	r3, [pc, #292]	; (80042b0 <HAL_ETH_MspInit+0x178>)
 800418a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004190:	61fb      	str	r3, [r7, #28]
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	2300      	movs	r3, #0
 8004196:	61bb      	str	r3, [r7, #24]
 8004198:	4b45      	ldr	r3, [pc, #276]	; (80042b0 <HAL_ETH_MspInit+0x178>)
 800419a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419c:	4a44      	ldr	r2, [pc, #272]	; (80042b0 <HAL_ETH_MspInit+0x178>)
 800419e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80041a2:	6313      	str	r3, [r2, #48]	; 0x30
 80041a4:	4b42      	ldr	r3, [pc, #264]	; (80042b0 <HAL_ETH_MspInit+0x178>)
 80041a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041ac:	61bb      	str	r3, [r7, #24]
 80041ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	4b3e      	ldr	r3, [pc, #248]	; (80042b0 <HAL_ETH_MspInit+0x178>)
 80041b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b8:	4a3d      	ldr	r2, [pc, #244]	; (80042b0 <HAL_ETH_MspInit+0x178>)
 80041ba:	f043 0304 	orr.w	r3, r3, #4
 80041be:	6313      	str	r3, [r2, #48]	; 0x30
 80041c0:	4b3b      	ldr	r3, [pc, #236]	; (80042b0 <HAL_ETH_MspInit+0x178>)
 80041c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041cc:	2300      	movs	r3, #0
 80041ce:	613b      	str	r3, [r7, #16]
 80041d0:	4b37      	ldr	r3, [pc, #220]	; (80042b0 <HAL_ETH_MspInit+0x178>)
 80041d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d4:	4a36      	ldr	r2, [pc, #216]	; (80042b0 <HAL_ETH_MspInit+0x178>)
 80041d6:	f043 0301 	orr.w	r3, r3, #1
 80041da:	6313      	str	r3, [r2, #48]	; 0x30
 80041dc:	4b34      	ldr	r3, [pc, #208]	; (80042b0 <HAL_ETH_MspInit+0x178>)
 80041de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041e8:	2300      	movs	r3, #0
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	4b30      	ldr	r3, [pc, #192]	; (80042b0 <HAL_ETH_MspInit+0x178>)
 80041ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f0:	4a2f      	ldr	r2, [pc, #188]	; (80042b0 <HAL_ETH_MspInit+0x178>)
 80041f2:	f043 0302 	orr.w	r3, r3, #2
 80041f6:	6313      	str	r3, [r2, #48]	; 0x30
 80041f8:	4b2d      	ldr	r3, [pc, #180]	; (80042b0 <HAL_ETH_MspInit+0x178>)
 80041fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004204:	2300      	movs	r3, #0
 8004206:	60bb      	str	r3, [r7, #8]
 8004208:	4b29      	ldr	r3, [pc, #164]	; (80042b0 <HAL_ETH_MspInit+0x178>)
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420c:	4a28      	ldr	r2, [pc, #160]	; (80042b0 <HAL_ETH_MspInit+0x178>)
 800420e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004212:	6313      	str	r3, [r2, #48]	; 0x30
 8004214:	4b26      	ldr	r3, [pc, #152]	; (80042b0 <HAL_ETH_MspInit+0x178>)
 8004216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421c:	60bb      	str	r3, [r7, #8]
 800421e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004220:	2332      	movs	r3, #50	; 0x32
 8004222:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004224:	2302      	movs	r3, #2
 8004226:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004228:	2300      	movs	r3, #0
 800422a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800422c:	2303      	movs	r3, #3
 800422e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004230:	230b      	movs	r3, #11
 8004232:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004238:	4619      	mov	r1, r3
 800423a:	481e      	ldr	r0, [pc, #120]	; (80042b4 <HAL_ETH_MspInit+0x17c>)
 800423c:	f7fe fadc 	bl	80027f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004240:	2386      	movs	r3, #134	; 0x86
 8004242:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004244:	2302      	movs	r3, #2
 8004246:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004248:	2300      	movs	r3, #0
 800424a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800424c:	2303      	movs	r3, #3
 800424e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004250:	230b      	movs	r3, #11
 8004252:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004258:	4619      	mov	r1, r3
 800425a:	4817      	ldr	r0, [pc, #92]	; (80042b8 <HAL_ETH_MspInit+0x180>)
 800425c:	f7fe facc 	bl	80027f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004260:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004264:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004266:	2302      	movs	r3, #2
 8004268:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426a:	2300      	movs	r3, #0
 800426c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800426e:	2303      	movs	r3, #3
 8004270:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004272:	230b      	movs	r3, #11
 8004274:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800427a:	4619      	mov	r1, r3
 800427c:	480f      	ldr	r0, [pc, #60]	; (80042bc <HAL_ETH_MspInit+0x184>)
 800427e:	f7fe fabb 	bl	80027f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004282:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004286:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004288:	2302      	movs	r3, #2
 800428a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800428c:	2300      	movs	r3, #0
 800428e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004290:	2303      	movs	r3, #3
 8004292:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004294:	230b      	movs	r3, #11
 8004296:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800429c:	4619      	mov	r1, r3
 800429e:	4808      	ldr	r0, [pc, #32]	; (80042c0 <HAL_ETH_MspInit+0x188>)
 80042a0:	f7fe faaa 	bl	80027f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80042a4:	bf00      	nop
 80042a6:	3738      	adds	r7, #56	; 0x38
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40028000 	.word	0x40028000
 80042b0:	40023800 	.word	0x40023800
 80042b4:	40020800 	.word	0x40020800
 80042b8:	40020000 	.word	0x40020000
 80042bc:	40020400 	.word	0x40020400
 80042c0:	40021800 	.word	0x40021800

080042c4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80042cc:	2300      	movs	r3, #0
 80042ce:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80042d0:	4b4d      	ldr	r3, [pc, #308]	; (8004408 <low_level_init+0x144>)
 80042d2:	4a4e      	ldr	r2, [pc, #312]	; (800440c <low_level_init+0x148>)
 80042d4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80042d6:	4b4c      	ldr	r3, [pc, #304]	; (8004408 <low_level_init+0x144>)
 80042d8:	2201      	movs	r2, #1
 80042da:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80042dc:	4b4a      	ldr	r3, [pc, #296]	; (8004408 <low_level_init+0x144>)
 80042de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80042e2:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80042e4:	4b48      	ldr	r3, [pc, #288]	; (8004408 <low_level_init+0x144>)
 80042e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042ea:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80042ec:	4b46      	ldr	r3, [pc, #280]	; (8004408 <low_level_init+0x144>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80042f2:	2300      	movs	r3, #0
 80042f4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x15;
 80042f6:	2315      	movs	r3, #21
 80042f8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x7E;
 80042fa:	237e      	movs	r3, #126	; 0x7e
 80042fc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80042fe:	2300      	movs	r3, #0
 8004300:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004302:	2300      	movs	r3, #0
 8004304:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004306:	2300      	movs	r3, #0
 8004308:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800430a:	4a3f      	ldr	r2, [pc, #252]	; (8004408 <low_level_init+0x144>)
 800430c:	f107 0308 	add.w	r3, r7, #8
 8004310:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8004312:	4b3d      	ldr	r3, [pc, #244]	; (8004408 <low_level_init+0x144>)
 8004314:	2200      	movs	r2, #0
 8004316:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004318:	4b3b      	ldr	r3, [pc, #236]	; (8004408 <low_level_init+0x144>)
 800431a:	2200      	movs	r2, #0
 800431c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800431e:	4b3a      	ldr	r3, [pc, #232]	; (8004408 <low_level_init+0x144>)
 8004320:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004324:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004326:	4838      	ldr	r0, [pc, #224]	; (8004408 <low_level_init+0x144>)
 8004328:	f7fd f95a 	bl	80015e0 <HAL_ETH_Init>
 800432c:	4603      	mov	r3, r0
 800432e:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8004330:	7dfb      	ldrb	r3, [r7, #23]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d108      	bne.n	8004348 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800433c:	f043 0304 	orr.w	r3, r3, #4
 8004340:	b2da      	uxtb	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004348:	2304      	movs	r3, #4
 800434a:	4a31      	ldr	r2, [pc, #196]	; (8004410 <low_level_init+0x14c>)
 800434c:	4931      	ldr	r1, [pc, #196]	; (8004414 <low_level_init+0x150>)
 800434e:	482e      	ldr	r0, [pc, #184]	; (8004408 <low_level_init+0x144>)
 8004350:	f7fd fad2 	bl	80018f8 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004354:	2304      	movs	r3, #4
 8004356:	4a30      	ldr	r2, [pc, #192]	; (8004418 <low_level_init+0x154>)
 8004358:	4930      	ldr	r1, [pc, #192]	; (800441c <low_level_init+0x158>)
 800435a:	482b      	ldr	r0, [pc, #172]	; (8004408 <low_level_init+0x144>)
 800435c:	f7fd fb34 	bl	80019c8 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2206      	movs	r2, #6
 8004364:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004368:	4b27      	ldr	r3, [pc, #156]	; (8004408 <low_level_init+0x144>)
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	781a      	ldrb	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004374:	4b24      	ldr	r3, [pc, #144]	; (8004408 <low_level_init+0x144>)
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	785a      	ldrb	r2, [r3, #1]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004380:	4b21      	ldr	r3, [pc, #132]	; (8004408 <low_level_init+0x144>)
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	789a      	ldrb	r2, [r3, #2]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800438c:	4b1e      	ldr	r3, [pc, #120]	; (8004408 <low_level_init+0x144>)
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	78da      	ldrb	r2, [r3, #3]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004398:	4b1b      	ldr	r3, [pc, #108]	; (8004408 <low_level_init+0x144>)
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	791a      	ldrb	r2, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80043a4:	4b18      	ldr	r3, [pc, #96]	; (8004408 <low_level_init+0x144>)
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	795a      	ldrb	r2, [r3, #5]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* maximum transfer unit */
  netif->mtu = 1500;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80043b6:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80043be:	f043 030a 	orr.w	r3, r3, #10
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80043ca:	480f      	ldr	r0, [pc, #60]	; (8004408 <low_level_init+0x144>)
 80043cc:	f7fd fda3 	bl	8001f16 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80043d0:	f107 0310 	add.w	r3, r7, #16
 80043d4:	461a      	mov	r2, r3
 80043d6:	211d      	movs	r1, #29
 80043d8:	480b      	ldr	r0, [pc, #44]	; (8004408 <low_level_init+0x144>)
 80043da:	f7fd fcce 	bl	8001d7a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	f043 030b 	orr.w	r3, r3, #11
 80043e4:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	461a      	mov	r2, r3
 80043ea:	211d      	movs	r1, #29
 80043ec:	4806      	ldr	r0, [pc, #24]	; (8004408 <low_level_init+0x144>)
 80043ee:	f7fd fd2c 	bl	8001e4a <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80043f2:	f107 0310 	add.w	r3, r7, #16
 80043f6:	461a      	mov	r2, r3
 80043f8:	211d      	movs	r1, #29
 80043fa:	4803      	ldr	r0, [pc, #12]	; (8004408 <low_level_init+0x144>)
 80043fc:	f7fd fcbd 	bl	8001d7a <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004400:	bf00      	nop
 8004402:	3718      	adds	r7, #24
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	20001f74 	.word	0x20001f74
 800440c:	40028000 	.word	0x40028000
 8004410:	20001fbc 	.word	0x20001fbc
 8004414:	200006a4 	.word	0x200006a4
 8004418:	20000724 	.word	0x20000724
 800441c:	20001ef4 	.word	0x20001ef4

08004420 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b08a      	sub	sp, #40	; 0x28
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800442a:	4b4b      	ldr	r3, [pc, #300]	; (8004558 <low_level_output+0x138>)
 800442c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004432:	2300      	movs	r3, #0
 8004434:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004436:	2300      	movs	r3, #0
 8004438:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800443a:	2300      	movs	r3, #0
 800443c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800443e:	2300      	movs	r3, #0
 8004440:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004442:	4b45      	ldr	r3, [pc, #276]	; (8004558 <low_level_output+0x138>)
 8004444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004446:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004448:	2300      	movs	r3, #0
 800444a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	623b      	str	r3, [r7, #32]
 8004450:	e05a      	b.n	8004508 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	da03      	bge.n	8004462 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800445a:	23f8      	movs	r3, #248	; 0xf8
 800445c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004460:	e05c      	b.n	800451c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	895b      	ldrh	r3, [r3, #10]
 8004466:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004468:	2300      	movs	r3, #0
 800446a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800446c:	e02f      	b.n	80044ce <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800446e:	69fa      	ldr	r2, [r7, #28]
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	18d0      	adds	r0, r2, r3
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	18d1      	adds	r1, r2, r3
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004482:	3304      	adds	r3, #4
 8004484:	461a      	mov	r2, r3
 8004486:	f009 fc5b 	bl	800dd40 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	da03      	bge.n	80044a0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004498:	23f8      	movs	r3, #248	; 0xf8
 800449a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800449e:	e03d      	b.n	800451c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4413      	add	r3, r2
 80044ac:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80044b0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80044bc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80044c8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80044ca:	2300      	movs	r3, #0
 80044cc:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	4413      	add	r3, r2
 80044d4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80044d8:	4293      	cmp	r3, r2
 80044da:	d8c8      	bhi.n	800446e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80044dc:	69fa      	ldr	r2, [r7, #28]
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	18d0      	adds	r0, r2, r3
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	4413      	add	r3, r2
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4619      	mov	r1, r3
 80044ee:	f009 fc27 	bl	800dd40 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4413      	add	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4413      	add	r3, r2
 8004500:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	623b      	str	r3, [r7, #32]
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1a1      	bne.n	8004452 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800450e:	6979      	ldr	r1, [r7, #20]
 8004510:	4811      	ldr	r0, [pc, #68]	; (8004558 <low_level_output+0x138>)
 8004512:	f7fd fac5 	bl	8001aa0 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8004516:	2300      	movs	r3, #0
 8004518:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800451c:	4b0e      	ldr	r3, [pc, #56]	; (8004558 <low_level_output+0x138>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004524:	3314      	adds	r3, #20
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0320 	and.w	r3, r3, #32
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00d      	beq.n	800454c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004530:	4b09      	ldr	r3, [pc, #36]	; (8004558 <low_level_output+0x138>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004538:	3314      	adds	r3, #20
 800453a:	2220      	movs	r2, #32
 800453c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800453e:	4b06      	ldr	r3, [pc, #24]	; (8004558 <low_level_output+0x138>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004546:	3304      	adds	r3, #4
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800454c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004550:	4618      	mov	r0, r3
 8004552:	3728      	adds	r7, #40	; 0x28
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	20001f74 	.word	0x20001f74

0800455c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b08c      	sub	sp, #48	; 0x30
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004564:	2300      	movs	r3, #0
 8004566:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004568:	2300      	movs	r3, #0
 800456a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800456c:	2300      	movs	r3, #0
 800456e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004574:	2300      	movs	r3, #0
 8004576:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004578:	2300      	movs	r3, #0
 800457a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800457c:	2300      	movs	r3, #0
 800457e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8004580:	484e      	ldr	r0, [pc, #312]	; (80046bc <low_level_input+0x160>)
 8004582:	f7fd fb77 	bl	8001c74 <HAL_ETH_GetReceivedFrame>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <low_level_input+0x34>

    return NULL;
 800458c:	2300      	movs	r3, #0
 800458e:	e091      	b.n	80046b4 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004590:	4b4a      	ldr	r3, [pc, #296]	; (80046bc <low_level_input+0x160>)
 8004592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004594:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004596:	4b49      	ldr	r3, [pc, #292]	; (80046bc <low_level_input+0x160>)
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800459c:	89fb      	ldrh	r3, [r7, #14]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d006      	beq.n	80045b0 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80045a2:	89fb      	ldrh	r3, [r7, #14]
 80045a4:	2203      	movs	r2, #3
 80045a6:	4619      	mov	r1, r3
 80045a8:	2004      	movs	r0, #4
 80045aa:	f000 ff1f 	bl	80053ec <pbuf_alloc>
 80045ae:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80045b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d04b      	beq.n	800464e <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80045b6:	4b41      	ldr	r3, [pc, #260]	; (80046bc <low_level_input+0x160>)
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80045bc:	2300      	movs	r3, #0
 80045be:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80045c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80045c4:	e040      	b.n	8004648 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	895b      	ldrh	r3, [r3, #10]
 80045ca:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80045cc:	2300      	movs	r3, #0
 80045ce:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80045d0:	e021      	b.n	8004616 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80045d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	18d0      	adds	r0, r2, r3
 80045da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	18d1      	adds	r1, r2, r3
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80045e6:	3304      	adds	r3, #4
 80045e8:	461a      	mov	r2, r3
 80045ea:	f009 fba9 	bl	800dd40 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80045f4:	6a3b      	ldr	r3, [r7, #32]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80045fa:	69fa      	ldr	r2, [r7, #28]
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	4413      	add	r3, r2
 8004600:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004604:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004610:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004612:	2300      	movs	r3, #0
 8004614:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	4413      	add	r3, r2
 800461c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004620:	4293      	cmp	r3, r2
 8004622:	d8d6      	bhi.n	80045d2 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	18d0      	adds	r0, r2, r3
 800462c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	4413      	add	r3, r2
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	4619      	mov	r1, r3
 8004636:	f009 fb83 	bl	800dd40 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800463a:	69fa      	ldr	r2, [r7, #28]
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	4413      	add	r3, r2
 8004640:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	62bb      	str	r3, [r7, #40]	; 0x28
 8004648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1bb      	bne.n	80045c6 <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800464e:	4b1b      	ldr	r3, [pc, #108]	; (80046bc <low_level_input+0x160>)
 8004650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004652:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004654:	2300      	movs	r3, #0
 8004656:	613b      	str	r3, [r7, #16]
 8004658:	e00b      	b.n	8004672 <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004662:	6a3b      	ldr	r3, [r7, #32]
 8004664:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004666:	6a3b      	ldr	r3, [r7, #32]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	3301      	adds	r3, #1
 8004670:	613b      	str	r3, [r7, #16]
 8004672:	4b12      	ldr	r3, [pc, #72]	; (80046bc <low_level_input+0x160>)
 8004674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	429a      	cmp	r2, r3
 800467a:	d3ee      	bcc.n	800465a <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800467c:	4b0f      	ldr	r3, [pc, #60]	; (80046bc <low_level_input+0x160>)
 800467e:	2200      	movs	r2, #0
 8004680:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8004682:	4b0e      	ldr	r3, [pc, #56]	; (80046bc <low_level_input+0x160>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800468a:	3314      	adds	r3, #20
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00d      	beq.n	80046b2 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004696:	4b09      	ldr	r3, [pc, #36]	; (80046bc <low_level_input+0x160>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800469e:	3314      	adds	r3, #20
 80046a0:	2280      	movs	r2, #128	; 0x80
 80046a2:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80046a4:	4b05      	ldr	r3, [pc, #20]	; (80046bc <low_level_input+0x160>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ac:	3308      	adds	r3, #8
 80046ae:	2200      	movs	r2, #0
 80046b0:	601a      	str	r2, [r3, #0]
  }
  return p;
 80046b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3730      	adds	r7, #48	; 0x30
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	20001f74 	.word	0x20001f74

080046c0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7ff ff47 	bl	800455c <low_level_input>
 80046ce:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d010      	beq.n	80046f8 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	6879      	ldr	r1, [r7, #4]
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	4798      	blx	r3
 80046e0:	4603      	mov	r3, r0
 80046e2:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 80046e4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d006      	beq.n	80046fa <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f001 f9ef 	bl	8005ad0 <pbuf_free>
    p = NULL;
 80046f2:	2300      	movs	r3, #0
 80046f4:	60fb      	str	r3, [r7, #12]
 80046f6:	e000      	b.n	80046fa <ethernetif_input+0x3a>
  if (p == NULL) return;
 80046f8:	bf00      	nop
  }
}
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <ethernetif_init+0x1c>
 800470e:	4b0e      	ldr	r3, [pc, #56]	; (8004748 <ethernetif_init+0x48>)
 8004710:	f240 2211 	movw	r2, #529	; 0x211
 8004714:	490d      	ldr	r1, [pc, #52]	; (800474c <ethernetif_init+0x4c>)
 8004716:	480e      	ldr	r0, [pc, #56]	; (8004750 <ethernetif_init+0x50>)
 8004718:	f009 fb28 	bl	800dd6c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2273      	movs	r2, #115	; 0x73
 8004720:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2274      	movs	r2, #116	; 0x74
 8004728:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a09      	ldr	r2, [pc, #36]	; (8004754 <ethernetif_init+0x54>)
 8004730:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a08      	ldr	r2, [pc, #32]	; (8004758 <ethernetif_init+0x58>)
 8004736:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7ff fdc3 	bl	80042c4 <low_level_init>

  return ERR_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	0800ec90 	.word	0x0800ec90
 800474c:	0800ecac 	.word	0x0800ecac
 8004750:	0800ecbc 	.word	0x0800ecbc
 8004754:	0800c101 	.word	0x0800c101
 8004758:	08004421 	.word	0x08004421

0800475c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004760:	f7fc fe2c 	bl	80013bc <HAL_GetTick>
 8004764:	4603      	mov	r3, r0
}
 8004766:	4618      	mov	r0, r3
 8004768:	bd80      	pop	{r7, pc}
	...

0800476c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8004774:	2300      	movs	r3, #0
 8004776:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8004778:	2300      	movs	r3, #0
 800477a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004782:	089b      	lsrs	r3, r3, #2
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d05d      	beq.n	800484a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800478e:	4b34      	ldr	r3, [pc, #208]	; (8004860 <ethernetif_update_config+0xf4>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d03f      	beq.n	8004816 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8004796:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800479a:	2100      	movs	r1, #0
 800479c:	4830      	ldr	r0, [pc, #192]	; (8004860 <ethernetif_update_config+0xf4>)
 800479e:	f7fd fb54 	bl	8001e4a <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80047a2:	f7fc fe0b 	bl	80013bc <HAL_GetTick>
 80047a6:	4603      	mov	r3, r0
 80047a8:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80047aa:	f107 0308 	add.w	r3, r7, #8
 80047ae:	461a      	mov	r2, r3
 80047b0:	2101      	movs	r1, #1
 80047b2:	482b      	ldr	r0, [pc, #172]	; (8004860 <ethernetif_update_config+0xf4>)
 80047b4:	f7fd fae1 	bl	8001d7a <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80047b8:	f7fc fe00 	bl	80013bc <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047c6:	d828      	bhi.n	800481a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f003 0320 	and.w	r3, r3, #32
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0eb      	beq.n	80047aa <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80047d2:	f107 0308 	add.w	r3, r7, #8
 80047d6:	461a      	mov	r2, r3
 80047d8:	2110      	movs	r1, #16
 80047da:	4821      	ldr	r0, [pc, #132]	; (8004860 <ethernetif_update_config+0xf4>)
 80047dc:	f7fd facd 	bl	8001d7a <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f003 0304 	and.w	r3, r3, #4
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d004      	beq.n	80047f4 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80047ea:	4b1d      	ldr	r3, [pc, #116]	; (8004860 <ethernetif_update_config+0xf4>)
 80047ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047f0:	60da      	str	r2, [r3, #12]
 80047f2:	e002      	b.n	80047fa <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80047f4:	4b1a      	ldr	r3, [pc, #104]	; (8004860 <ethernetif_update_config+0xf4>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8004804:	4b16      	ldr	r3, [pc, #88]	; (8004860 <ethernetif_update_config+0xf4>)
 8004806:	2200      	movs	r2, #0
 8004808:	609a      	str	r2, [r3, #8]
 800480a:	e016      	b.n	800483a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800480c:	4b14      	ldr	r3, [pc, #80]	; (8004860 <ethernetif_update_config+0xf4>)
 800480e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004812:	609a      	str	r2, [r3, #8]
 8004814:	e011      	b.n	800483a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8004816:	bf00      	nop
 8004818:	e000      	b.n	800481c <ethernetif_update_config+0xb0>
          goto error;
 800481a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800481c:	4b10      	ldr	r3, [pc, #64]	; (8004860 <ethernetif_update_config+0xf4>)
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	08db      	lsrs	r3, r3, #3
 8004822:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004824:	4b0e      	ldr	r3, [pc, #56]	; (8004860 <ethernetif_update_config+0xf4>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	085b      	lsrs	r3, r3, #1
 800482a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800482c:	4313      	orrs	r3, r2
 800482e:	b29b      	uxth	r3, r3
 8004830:	461a      	mov	r2, r3
 8004832:	2100      	movs	r1, #0
 8004834:	480a      	ldr	r0, [pc, #40]	; (8004860 <ethernetif_update_config+0xf4>)
 8004836:	f7fd fb08 	bl	8001e4a <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800483a:	2100      	movs	r1, #0
 800483c:	4808      	ldr	r0, [pc, #32]	; (8004860 <ethernetif_update_config+0xf4>)
 800483e:	f7fd fbc9 	bl	8001fd4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8004842:	4807      	ldr	r0, [pc, #28]	; (8004860 <ethernetif_update_config+0xf4>)
 8004844:	f7fd fb67 	bl	8001f16 <HAL_ETH_Start>
 8004848:	e002      	b.n	8004850 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800484a:	4805      	ldr	r0, [pc, #20]	; (8004860 <ethernetif_update_config+0xf4>)
 800484c:	f7fd fb92 	bl	8001f74 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f807 	bl	8004864 <ethernetif_notify_conn_changed>
}
 8004856:	bf00      	nop
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	20001f74 	.word	0x20001f74

08004864 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	bc80      	pop	{r7}
 8004874:	4770      	bx	lr

08004876 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	4603      	mov	r3, r0
 800487e:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8004880:	88fb      	ldrh	r3, [r7, #6]
 8004882:	ba5b      	rev16	r3, r3
 8004884:	b29b      	uxth	r3, r3
}
 8004886:	4618      	mov	r0, r3
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	bc80      	pop	{r7}
 800488e:	4770      	bx	lr

08004890 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	061a      	lsls	r2, r3, #24
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	021b      	lsls	r3, r3, #8
 80048a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80048a4:	431a      	orrs	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	0a1b      	lsrs	r3, r3, #8
 80048aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	0e1b      	lsrs	r3, r3, #24
 80048b4:	4313      	orrs	r3, r2
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr

080048c0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80048c6:	2300      	movs	r3, #0
 80048c8:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80048ca:	f000 f8a7 	bl	8004a1c <mem_init>
  memp_init();
 80048ce:	f000 fb37 	bl	8004f40 <memp_init>
  pbuf_init();
  netif_init();
 80048d2:	f000 fbef 	bl	80050b4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80048d6:	f006 fe9f 	bl	800b618 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80048da:	f001 fb71 	bl	8005fc0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 80048de:	f006 fd7d 	bl	800b3dc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80048e2:	bf00      	nop
 80048e4:	3708      	adds	r7, #8
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
	...

080048ec <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80048f4:	4b40      	ldr	r3, [pc, #256]	; (80049f8 <plug_holes+0x10c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d206      	bcs.n	800490c <plug_holes+0x20>
 80048fe:	4b3f      	ldr	r3, [pc, #252]	; (80049fc <plug_holes+0x110>)
 8004900:	f240 125d 	movw	r2, #349	; 0x15d
 8004904:	493e      	ldr	r1, [pc, #248]	; (8004a00 <plug_holes+0x114>)
 8004906:	483f      	ldr	r0, [pc, #252]	; (8004a04 <plug_holes+0x118>)
 8004908:	f009 fa30 	bl	800dd6c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800490c:	4b3e      	ldr	r3, [pc, #248]	; (8004a08 <plug_holes+0x11c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	429a      	cmp	r2, r3
 8004914:	d306      	bcc.n	8004924 <plug_holes+0x38>
 8004916:	4b39      	ldr	r3, [pc, #228]	; (80049fc <plug_holes+0x110>)
 8004918:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800491c:	493b      	ldr	r1, [pc, #236]	; (8004a0c <plug_holes+0x120>)
 800491e:	4839      	ldr	r0, [pc, #228]	; (8004a04 <plug_holes+0x118>)
 8004920:	f009 fa24 	bl	800dd6c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	791b      	ldrb	r3, [r3, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d006      	beq.n	800493a <plug_holes+0x4e>
 800492c:	4b33      	ldr	r3, [pc, #204]	; (80049fc <plug_holes+0x110>)
 800492e:	f240 125f 	movw	r2, #351	; 0x15f
 8004932:	4937      	ldr	r1, [pc, #220]	; (8004a10 <plug_holes+0x124>)
 8004934:	4833      	ldr	r0, [pc, #204]	; (8004a04 <plug_holes+0x118>)
 8004936:	f009 fa19 	bl	800dd6c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	881b      	ldrh	r3, [r3, #0]
 800493e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004942:	d906      	bls.n	8004952 <plug_holes+0x66>
 8004944:	4b2d      	ldr	r3, [pc, #180]	; (80049fc <plug_holes+0x110>)
 8004946:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800494a:	4932      	ldr	r1, [pc, #200]	; (8004a14 <plug_holes+0x128>)
 800494c:	482d      	ldr	r0, [pc, #180]	; (8004a04 <plug_holes+0x118>)
 800494e:	f009 fa0d 	bl	800dd6c <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8004952:	4b29      	ldr	r3, [pc, #164]	; (80049f8 <plug_holes+0x10c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	8812      	ldrh	r2, [r2, #0]
 800495a:	4413      	add	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	429a      	cmp	r2, r3
 8004964:	d01f      	beq.n	80049a6 <plug_holes+0xba>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	791b      	ldrb	r3, [r3, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d11b      	bne.n	80049a6 <plug_holes+0xba>
 800496e:	4b26      	ldr	r3, [pc, #152]	; (8004a08 <plug_holes+0x11c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	429a      	cmp	r2, r3
 8004976:	d016      	beq.n	80049a6 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004978:	4b27      	ldr	r3, [pc, #156]	; (8004a18 <plug_holes+0x12c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	429a      	cmp	r2, r3
 8004980:	d102      	bne.n	8004988 <plug_holes+0x9c>
      lfree = mem;
 8004982:	4a25      	ldr	r2, [pc, #148]	; (8004a18 <plug_holes+0x12c>)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	881a      	ldrh	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8004990:	4b19      	ldr	r3, [pc, #100]	; (80049f8 <plug_holes+0x10c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	1ad1      	subs	r1, r2, r3
 8004998:	4b17      	ldr	r3, [pc, #92]	; (80049f8 <plug_holes+0x10c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	8812      	ldrh	r2, [r2, #0]
 80049a0:	4413      	add	r3, r2
 80049a2:	b28a      	uxth	r2, r1
 80049a4:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80049a6:	4b14      	ldr	r3, [pc, #80]	; (80049f8 <plug_holes+0x10c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	8852      	ldrh	r2, [r2, #2]
 80049ae:	4413      	add	r3, r2
 80049b0:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d01a      	beq.n	80049f0 <plug_holes+0x104>
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	791b      	ldrb	r3, [r3, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d116      	bne.n	80049f0 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80049c2:	4b15      	ldr	r3, [pc, #84]	; (8004a18 <plug_holes+0x12c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d102      	bne.n	80049d2 <plug_holes+0xe6>
      lfree = pmem;
 80049cc:	4a12      	ldr	r2, [pc, #72]	; (8004a18 <plug_holes+0x12c>)
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	881a      	ldrh	r2, [r3, #0]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 80049da:	4b07      	ldr	r3, [pc, #28]	; (80049f8 <plug_holes+0x10c>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	1ad1      	subs	r1, r2, r3
 80049e2:	4b05      	ldr	r3, [pc, #20]	; (80049f8 <plug_holes+0x10c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	8812      	ldrh	r2, [r2, #0]
 80049ea:	4413      	add	r3, r2
 80049ec:	b28a      	uxth	r2, r1
 80049ee:	805a      	strh	r2, [r3, #2]
  }
}
 80049f0:	bf00      	nop
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	20000098 	.word	0x20000098
 80049fc:	0800ece4 	.word	0x0800ece4
 8004a00:	0800ed14 	.word	0x0800ed14
 8004a04:	0800ed2c 	.word	0x0800ed2c
 8004a08:	2000009c 	.word	0x2000009c
 8004a0c:	0800ed54 	.word	0x0800ed54
 8004a10:	0800ed70 	.word	0x0800ed70
 8004a14:	0800ed8c 	.word	0x0800ed8c
 8004a18:	200000a0 	.word	0x200000a0

08004a1c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004a22:	4b18      	ldr	r3, [pc, #96]	; (8004a84 <mem_init+0x68>)
 8004a24:	3303      	adds	r3, #3
 8004a26:	f023 0303 	bic.w	r3, r3, #3
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	4b16      	ldr	r3, [pc, #88]	; (8004a88 <mem_init+0x6c>)
 8004a2e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004a30:	4b15      	ldr	r3, [pc, #84]	; (8004a88 <mem_init+0x6c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004a3c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8004a4a:	4b0f      	ldr	r3, [pc, #60]	; (8004a88 <mem_init+0x6c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8004a52:	4a0e      	ldr	r2, [pc, #56]	; (8004a8c <mem_init+0x70>)
 8004a54:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004a56:	4b0d      	ldr	r3, [pc, #52]	; (8004a8c <mem_init+0x70>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004a5e:	4b0b      	ldr	r3, [pc, #44]	; (8004a8c <mem_init+0x70>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004a66:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004a68:	4b08      	ldr	r3, [pc, #32]	; (8004a8c <mem_init+0x70>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004a70:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004a72:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <mem_init+0x6c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a06      	ldr	r2, [pc, #24]	; (8004a90 <mem_init+0x74>)
 8004a78:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bc80      	pop	{r7}
 8004a82:	4770      	bx	lr
 8004a84:	200037a4 	.word	0x200037a4
 8004a88:	20000098 	.word	0x20000098
 8004a8c:	2000009c 	.word	0x2000009c
 8004a90:	200000a0 	.word	0x200000a0

08004a94 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d043      	beq.n	8004b2a <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f003 0303 	and.w	r3, r3, #3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d006      	beq.n	8004aba <mem_free+0x26>
 8004aac:	4b22      	ldr	r3, [pc, #136]	; (8004b38 <mem_free+0xa4>)
 8004aae:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8004ab2:	4922      	ldr	r1, [pc, #136]	; (8004b3c <mem_free+0xa8>)
 8004ab4:	4822      	ldr	r0, [pc, #136]	; (8004b40 <mem_free+0xac>)
 8004ab6:	f009 f959 	bl	800dd6c <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004aba:	4b22      	ldr	r3, [pc, #136]	; (8004b44 <mem_free+0xb0>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d304      	bcc.n	8004ace <mem_free+0x3a>
 8004ac4:	4b20      	ldr	r3, [pc, #128]	; (8004b48 <mem_free+0xb4>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d306      	bcc.n	8004adc <mem_free+0x48>
 8004ace:	4b1a      	ldr	r3, [pc, #104]	; (8004b38 <mem_free+0xa4>)
 8004ad0:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8004ad4:	491d      	ldr	r1, [pc, #116]	; (8004b4c <mem_free+0xb8>)
 8004ad6:	481a      	ldr	r0, [pc, #104]	; (8004b40 <mem_free+0xac>)
 8004ad8:	f009 f948 	bl	800dd6c <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004adc:	4b19      	ldr	r3, [pc, #100]	; (8004b44 <mem_free+0xb0>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d323      	bcc.n	8004b2e <mem_free+0x9a>
 8004ae6:	4b18      	ldr	r3, [pc, #96]	; (8004b48 <mem_free+0xb4>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d21e      	bcs.n	8004b2e <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3b08      	subs	r3, #8
 8004af4:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	791b      	ldrb	r3, [r3, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d106      	bne.n	8004b0c <mem_free+0x78>
 8004afe:	4b0e      	ldr	r3, [pc, #56]	; (8004b38 <mem_free+0xa4>)
 8004b00:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8004b04:	4912      	ldr	r1, [pc, #72]	; (8004b50 <mem_free+0xbc>)
 8004b06:	480e      	ldr	r0, [pc, #56]	; (8004b40 <mem_free+0xac>)
 8004b08:	f009 f930 	bl	800dd6c <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004b12:	4b10      	ldr	r3, [pc, #64]	; (8004b54 <mem_free+0xc0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d202      	bcs.n	8004b22 <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004b1c:	4a0d      	ldr	r2, [pc, #52]	; (8004b54 <mem_free+0xc0>)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f7ff fee2 	bl	80048ec <plug_holes>
 8004b28:	e002      	b.n	8004b30 <mem_free+0x9c>
    return;
 8004b2a:	bf00      	nop
 8004b2c:	e000      	b.n	8004b30 <mem_free+0x9c>
    return;
 8004b2e:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	0800ece4 	.word	0x0800ece4
 8004b3c:	0800edb8 	.word	0x0800edb8
 8004b40:	0800ed2c 	.word	0x0800ed2c
 8004b44:	20000098 	.word	0x20000098
 8004b48:	2000009c 	.word	0x2000009c
 8004b4c:	0800eddc 	.word	0x0800eddc
 8004b50:	0800edf4 	.word	0x0800edf4
 8004b54:	200000a0 	.word	0x200000a0

08004b58 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	460b      	mov	r3, r1
 8004b62:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8004b64:	887b      	ldrh	r3, [r7, #2]
 8004b66:	3303      	adds	r3, #3
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	f023 0303 	bic.w	r3, r3, #3
 8004b6e:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8004b70:	887b      	ldrh	r3, [r7, #2]
 8004b72:	2b0b      	cmp	r3, #11
 8004b74:	d801      	bhi.n	8004b7a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004b76:	230c      	movs	r3, #12
 8004b78:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8004b7a:	887b      	ldrh	r3, [r7, #2]
 8004b7c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004b80:	d901      	bls.n	8004b86 <mem_trim+0x2e>
    return NULL;
 8004b82:	2300      	movs	r3, #0
 8004b84:	e0b1      	b.n	8004cea <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004b86:	4b5b      	ldr	r3, [pc, #364]	; (8004cf4 <mem_trim+0x19c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d304      	bcc.n	8004b9a <mem_trim+0x42>
 8004b90:	4b59      	ldr	r3, [pc, #356]	; (8004cf8 <mem_trim+0x1a0>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d306      	bcc.n	8004ba8 <mem_trim+0x50>
 8004b9a:	4b58      	ldr	r3, [pc, #352]	; (8004cfc <mem_trim+0x1a4>)
 8004b9c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004ba0:	4957      	ldr	r1, [pc, #348]	; (8004d00 <mem_trim+0x1a8>)
 8004ba2:	4858      	ldr	r0, [pc, #352]	; (8004d04 <mem_trim+0x1ac>)
 8004ba4:	f009 f8e2 	bl	800dd6c <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004ba8:	4b52      	ldr	r3, [pc, #328]	; (8004cf4 <mem_trim+0x19c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d304      	bcc.n	8004bbc <mem_trim+0x64>
 8004bb2:	4b51      	ldr	r3, [pc, #324]	; (8004cf8 <mem_trim+0x1a0>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d301      	bcc.n	8004bc0 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	e094      	b.n	8004cea <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3b08      	subs	r3, #8
 8004bc4:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8004bc6:	4b4b      	ldr	r3, [pc, #300]	; (8004cf4 <mem_trim+0x19c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	881a      	ldrh	r2, [r3, #0]
 8004bd4:	8a7b      	ldrh	r3, [r7, #18]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	3b08      	subs	r3, #8
 8004bdc:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004bde:	887a      	ldrh	r2, [r7, #2]
 8004be0:	8a3b      	ldrh	r3, [r7, #16]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d906      	bls.n	8004bf4 <mem_trim+0x9c>
 8004be6:	4b45      	ldr	r3, [pc, #276]	; (8004cfc <mem_trim+0x1a4>)
 8004be8:	f240 2206 	movw	r2, #518	; 0x206
 8004bec:	4946      	ldr	r1, [pc, #280]	; (8004d08 <mem_trim+0x1b0>)
 8004bee:	4845      	ldr	r0, [pc, #276]	; (8004d04 <mem_trim+0x1ac>)
 8004bf0:	f009 f8bc 	bl	800dd6c <iprintf>
  if (newsize > size) {
 8004bf4:	887a      	ldrh	r2, [r7, #2]
 8004bf6:	8a3b      	ldrh	r3, [r7, #16]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d901      	bls.n	8004c00 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	e074      	b.n	8004cea <mem_trim+0x192>
  }
  if (newsize == size) {
 8004c00:	887a      	ldrh	r2, [r7, #2]
 8004c02:	8a3b      	ldrh	r3, [r7, #16]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d101      	bne.n	8004c0c <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	e06e      	b.n	8004cea <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8004c0c:	4b39      	ldr	r3, [pc, #228]	; (8004cf4 <mem_trim+0x19c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	8812      	ldrh	r2, [r2, #0]
 8004c14:	4413      	add	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	791b      	ldrb	r3, [r3, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d131      	bne.n	8004c84 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8004c26:	8a7a      	ldrh	r2, [r7, #18]
 8004c28:	887b      	ldrh	r3, [r7, #2]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	3308      	adds	r3, #8
 8004c30:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 8004c32:	4b36      	ldr	r3, [pc, #216]	; (8004d0c <mem_trim+0x1b4>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d105      	bne.n	8004c48 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8004c3c:	4b2d      	ldr	r3, [pc, #180]	; (8004cf4 <mem_trim+0x19c>)
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	897b      	ldrh	r3, [r7, #10]
 8004c42:	4413      	add	r3, r2
 8004c44:	4a31      	ldr	r2, [pc, #196]	; (8004d0c <mem_trim+0x1b4>)
 8004c46:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8004c48:	4b2a      	ldr	r3, [pc, #168]	; (8004cf4 <mem_trim+0x19c>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	897b      	ldrh	r3, [r7, #10]
 8004c4e:	4413      	add	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	893a      	ldrh	r2, [r7, #8]
 8004c5c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8a7a      	ldrh	r2, [r7, #18]
 8004c62:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	897a      	ldrh	r2, [r7, #10]
 8004c68:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c72:	d039      	beq.n	8004ce8 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004c74:	4b1f      	ldr	r3, [pc, #124]	; (8004cf4 <mem_trim+0x19c>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	8812      	ldrh	r2, [r2, #0]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	897a      	ldrh	r2, [r7, #10]
 8004c80:	805a      	strh	r2, [r3, #2]
 8004c82:	e031      	b.n	8004ce8 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004c84:	887b      	ldrh	r3, [r7, #2]
 8004c86:	f103 0214 	add.w	r2, r3, #20
 8004c8a:	8a3b      	ldrh	r3, [r7, #16]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d82b      	bhi.n	8004ce8 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8004c90:	8a7a      	ldrh	r2, [r7, #18]
 8004c92:	887b      	ldrh	r3, [r7, #2]
 8004c94:	4413      	add	r3, r2
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	3308      	adds	r3, #8
 8004c9a:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8004c9c:	4b15      	ldr	r3, [pc, #84]	; (8004cf4 <mem_trim+0x19c>)
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	897b      	ldrh	r3, [r7, #10]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8004ca6:	4b19      	ldr	r3, [pc, #100]	; (8004d0c <mem_trim+0x1b4>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d202      	bcs.n	8004cb6 <mem_trim+0x15e>
      lfree = mem2;
 8004cb0:	4a16      	ldr	r2, [pc, #88]	; (8004d0c <mem_trim+0x1b4>)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	881a      	ldrh	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8a7a      	ldrh	r2, [r7, #18]
 8004cc8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	897a      	ldrh	r2, [r7, #10]
 8004cce:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	881b      	ldrh	r3, [r3, #0]
 8004cd4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004cd8:	d006      	beq.n	8004ce8 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004cda:	4b06      	ldr	r3, [pc, #24]	; (8004cf4 <mem_trim+0x19c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	8812      	ldrh	r2, [r2, #0]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	897a      	ldrh	r2, [r7, #10]
 8004ce6:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004ce8:	687b      	ldr	r3, [r7, #4]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	20000098 	.word	0x20000098
 8004cf8:	2000009c 	.word	0x2000009c
 8004cfc:	0800ece4 	.word	0x0800ece4
 8004d00:	0800ee08 	.word	0x0800ee08
 8004d04:	0800ed2c 	.word	0x0800ed2c
 8004d08:	0800ee20 	.word	0x0800ee20
 8004d0c:	200000a0 	.word	0x200000a0

08004d10 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b088      	sub	sp, #32
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	4603      	mov	r3, r0
 8004d18:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8004d1a:	88fb      	ldrh	r3, [r7, #6]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <mem_malloc+0x14>
    return NULL;
 8004d20:	2300      	movs	r3, #0
 8004d22:	e0c7      	b.n	8004eb4 <mem_malloc+0x1a4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8004d24:	88fb      	ldrh	r3, [r7, #6]
 8004d26:	3303      	adds	r3, #3
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	f023 0303 	bic.w	r3, r3, #3
 8004d2e:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8004d30:	88fb      	ldrh	r3, [r7, #6]
 8004d32:	2b0b      	cmp	r3, #11
 8004d34:	d801      	bhi.n	8004d3a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004d36:	230c      	movs	r3, #12
 8004d38:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8004d3a:	88fb      	ldrh	r3, [r7, #6]
 8004d3c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004d40:	d901      	bls.n	8004d46 <mem_malloc+0x36>
    return NULL;
 8004d42:	2300      	movs	r3, #0
 8004d44:	e0b6      	b.n	8004eb4 <mem_malloc+0x1a4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004d46:	4b5d      	ldr	r3, [pc, #372]	; (8004ebc <mem_malloc+0x1ac>)
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	4b5d      	ldr	r3, [pc, #372]	; (8004ec0 <mem_malloc+0x1b0>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	83fb      	strh	r3, [r7, #30]
 8004d52:	e0a7      	b.n	8004ea4 <mem_malloc+0x194>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8004d54:	4b5a      	ldr	r3, [pc, #360]	; (8004ec0 <mem_malloc+0x1b0>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	8bfb      	ldrh	r3, [r7, #30]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	791b      	ldrb	r3, [r3, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f040 8098 	bne.w	8004e98 <mem_malloc+0x188>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	8bfb      	ldrh	r3, [r7, #30]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	f1a3 0208 	sub.w	r2, r3, #8
 8004d76:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	f0c0 808d 	bcc.w	8004e98 <mem_malloc+0x188>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	881b      	ldrh	r3, [r3, #0]
 8004d82:	461a      	mov	r2, r3
 8004d84:	8bfb      	ldrh	r3, [r7, #30]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	f1a3 0208 	sub.w	r2, r3, #8
 8004d8c:	88fb      	ldrh	r3, [r7, #6]
 8004d8e:	3314      	adds	r3, #20
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d327      	bcc.n	8004de4 <mem_malloc+0xd4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8004d94:	8bfa      	ldrh	r2, [r7, #30]
 8004d96:	88fb      	ldrh	r3, [r7, #6]
 8004d98:	4413      	add	r3, r2
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3308      	adds	r3, #8
 8004d9e:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8004da0:	4b47      	ldr	r3, [pc, #284]	; (8004ec0 <mem_malloc+0x1b0>)
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	8a7b      	ldrh	r3, [r7, #18]
 8004da6:	4413      	add	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	881a      	ldrh	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8bfa      	ldrh	r2, [r7, #30]
 8004dbc:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	8a7a      	ldrh	r2, [r7, #18]
 8004dc2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004dd2:	d00a      	beq.n	8004dea <mem_malloc+0xda>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004dd4:	4b3a      	ldr	r3, [pc, #232]	; (8004ec0 <mem_malloc+0x1b0>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	8812      	ldrh	r2, [r2, #0]
 8004ddc:	4413      	add	r3, r2
 8004dde:	8a7a      	ldrh	r2, [r7, #18]
 8004de0:	805a      	strh	r2, [r3, #2]
 8004de2:	e002      	b.n	8004dea <mem_malloc+0xda>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	2201      	movs	r2, #1
 8004de8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004dea:	4b34      	ldr	r3, [pc, #208]	; (8004ebc <mem_malloc+0x1ac>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d127      	bne.n	8004e44 <mem_malloc+0x134>
          struct mem *cur = lfree;
 8004df4:	4b31      	ldr	r3, [pc, #196]	; (8004ebc <mem_malloc+0x1ac>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004dfa:	e005      	b.n	8004e08 <mem_malloc+0xf8>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8004dfc:	4b30      	ldr	r3, [pc, #192]	; (8004ec0 <mem_malloc+0x1b0>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	8812      	ldrh	r2, [r2, #0]
 8004e04:	4413      	add	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	791b      	ldrb	r3, [r3, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d004      	beq.n	8004e1a <mem_malloc+0x10a>
 8004e10:	4b2c      	ldr	r3, [pc, #176]	; (8004ec4 <mem_malloc+0x1b4>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d1f0      	bne.n	8004dfc <mem_malloc+0xec>
          }
          lfree = cur;
 8004e1a:	4a28      	ldr	r2, [pc, #160]	; (8004ebc <mem_malloc+0x1ac>)
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004e20:	4b26      	ldr	r3, [pc, #152]	; (8004ebc <mem_malloc+0x1ac>)
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	4b27      	ldr	r3, [pc, #156]	; (8004ec4 <mem_malloc+0x1b4>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d00b      	beq.n	8004e44 <mem_malloc+0x134>
 8004e2c:	4b23      	ldr	r3, [pc, #140]	; (8004ebc <mem_malloc+0x1ac>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	791b      	ldrb	r3, [r3, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d006      	beq.n	8004e44 <mem_malloc+0x134>
 8004e36:	4b24      	ldr	r3, [pc, #144]	; (8004ec8 <mem_malloc+0x1b8>)
 8004e38:	f240 22cf 	movw	r2, #719	; 0x2cf
 8004e3c:	4923      	ldr	r1, [pc, #140]	; (8004ecc <mem_malloc+0x1bc>)
 8004e3e:	4824      	ldr	r0, [pc, #144]	; (8004ed0 <mem_malloc+0x1c0>)
 8004e40:	f008 ff94 	bl	800dd6c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004e44:	88fa      	ldrh	r2, [r7, #6]
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	4413      	add	r3, r2
 8004e4a:	3308      	adds	r3, #8
 8004e4c:	4a1d      	ldr	r2, [pc, #116]	; (8004ec4 <mem_malloc+0x1b4>)
 8004e4e:	6812      	ldr	r2, [r2, #0]
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d906      	bls.n	8004e62 <mem_malloc+0x152>
 8004e54:	4b1c      	ldr	r3, [pc, #112]	; (8004ec8 <mem_malloc+0x1b8>)
 8004e56:	f240 22d3 	movw	r2, #723	; 0x2d3
 8004e5a:	491e      	ldr	r1, [pc, #120]	; (8004ed4 <mem_malloc+0x1c4>)
 8004e5c:	481c      	ldr	r0, [pc, #112]	; (8004ed0 <mem_malloc+0x1c0>)
 8004e5e:	f008 ff85 	bl	800dd6c <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f003 0303 	and.w	r3, r3, #3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d006      	beq.n	8004e7a <mem_malloc+0x16a>
 8004e6c:	4b16      	ldr	r3, [pc, #88]	; (8004ec8 <mem_malloc+0x1b8>)
 8004e6e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8004e72:	4919      	ldr	r1, [pc, #100]	; (8004ed8 <mem_malloc+0x1c8>)
 8004e74:	4816      	ldr	r0, [pc, #88]	; (8004ed0 <mem_malloc+0x1c0>)
 8004e76:	f008 ff79 	bl	800dd6c <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f003 0303 	and.w	r3, r3, #3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d006      	beq.n	8004e92 <mem_malloc+0x182>
 8004e84:	4b10      	ldr	r3, [pc, #64]	; (8004ec8 <mem_malloc+0x1b8>)
 8004e86:	f240 22d7 	movw	r2, #727	; 0x2d7
 8004e8a:	4914      	ldr	r1, [pc, #80]	; (8004edc <mem_malloc+0x1cc>)
 8004e8c:	4810      	ldr	r0, [pc, #64]	; (8004ed0 <mem_malloc+0x1c0>)
 8004e8e:	f008 ff6d 	bl	800dd6c <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	3308      	adds	r3, #8
 8004e96:	e00d      	b.n	8004eb4 <mem_malloc+0x1a4>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8004e98:	4b09      	ldr	r3, [pc, #36]	; (8004ec0 <mem_malloc+0x1b0>)
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	8bfb      	ldrh	r3, [r7, #30]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004ea4:	8bfa      	ldrh	r2, [r7, #30]
 8004ea6:	88fb      	ldrh	r3, [r7, #6]
 8004ea8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8004eac:	429a      	cmp	r2, r3
 8004eae:	f4ff af51 	bcc.w	8004d54 <mem_malloc+0x44>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3720      	adds	r7, #32
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	200000a0 	.word	0x200000a0
 8004ec0:	20000098 	.word	0x20000098
 8004ec4:	2000009c 	.word	0x2000009c
 8004ec8:	0800ece4 	.word	0x0800ece4
 8004ecc:	0800ee40 	.word	0x0800ee40
 8004ed0:	0800ed2c 	.word	0x0800ed2c
 8004ed4:	0800ee5c 	.word	0x0800ee5c
 8004ed8:	0800ee8c 	.word	0x0800ee8c
 8004edc:	0800eebc 	.word	0x0800eebc

08004ee0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	3303      	adds	r3, #3
 8004ef6:	f023 0303 	bic.w	r3, r3, #3
 8004efa:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004efc:	2300      	movs	r3, #0
 8004efe:	60fb      	str	r3, [r7, #12]
 8004f00:	e011      	b.n	8004f26 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	881b      	ldrh	r3, [r3, #0]
 8004f18:	461a      	mov	r2, r3
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	3301      	adds	r3, #1
 8004f24:	60fb      	str	r3, [r7, #12]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	885b      	ldrh	r3, [r3, #2]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	dbe7      	blt.n	8004f02 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004f32:	bf00      	nop
 8004f34:	bf00      	nop
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bc80      	pop	{r7}
 8004f3c:	4770      	bx	lr
	...

08004f40 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004f46:	2300      	movs	r3, #0
 8004f48:	80fb      	strh	r3, [r7, #6]
 8004f4a:	e009      	b.n	8004f60 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004f4c:	88fb      	ldrh	r3, [r7, #6]
 8004f4e:	4a08      	ldr	r2, [pc, #32]	; (8004f70 <memp_init+0x30>)
 8004f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7ff ffc3 	bl	8004ee0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004f5a:	88fb      	ldrh	r3, [r7, #6]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	80fb      	strh	r3, [r7, #6]
 8004f60:	88fb      	ldrh	r3, [r7, #6]
 8004f62:	2b08      	cmp	r3, #8
 8004f64:	d9f2      	bls.n	8004f4c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004f66:	bf00      	nop
 8004f68:	bf00      	nop
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	080109cc 	.word	0x080109cc

08004f74 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d012      	beq.n	8004fb0 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	6812      	ldr	r2, [r2, #0]
 8004f92:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d006      	beq.n	8004fac <do_memp_malloc_pool+0x38>
 8004f9e:	4b07      	ldr	r3, [pc, #28]	; (8004fbc <do_memp_malloc_pool+0x48>)
 8004fa0:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8004fa4:	4906      	ldr	r1, [pc, #24]	; (8004fc0 <do_memp_malloc_pool+0x4c>)
 8004fa6:	4807      	ldr	r0, [pc, #28]	; (8004fc4 <do_memp_malloc_pool+0x50>)
 8004fa8:	f008 fee0 	bl	800dd6c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	e000      	b.n	8004fb2 <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	0800eee0 	.word	0x0800eee0
 8004fc0:	0800ef10 	.word	0x0800ef10
 8004fc4:	0800ef34 	.word	0x0800ef34

08004fc8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	4603      	mov	r3, r0
 8004fd0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004fd2:	79fb      	ldrb	r3, [r7, #7]
 8004fd4:	2b08      	cmp	r3, #8
 8004fd6:	d908      	bls.n	8004fea <memp_malloc+0x22>
 8004fd8:	4b0a      	ldr	r3, [pc, #40]	; (8005004 <memp_malloc+0x3c>)
 8004fda:	f240 1287 	movw	r2, #391	; 0x187
 8004fde:	490a      	ldr	r1, [pc, #40]	; (8005008 <memp_malloc+0x40>)
 8004fe0:	480a      	ldr	r0, [pc, #40]	; (800500c <memp_malloc+0x44>)
 8004fe2:	f008 fec3 	bl	800dd6c <iprintf>
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	e008      	b.n	8004ffc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004fea:	79fb      	ldrb	r3, [r7, #7]
 8004fec:	4a08      	ldr	r2, [pc, #32]	; (8005010 <memp_malloc+0x48>)
 8004fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7ff ffbe 	bl	8004f74 <do_memp_malloc_pool>
 8004ff8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	0800eee0 	.word	0x0800eee0
 8005008:	0800ef70 	.word	0x0800ef70
 800500c:	0800ef34 	.word	0x0800ef34
 8005010:	080109cc 	.word	0x080109cc

08005014 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	f003 0303 	and.w	r3, r3, #3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d006      	beq.n	8005036 <do_memp_free_pool+0x22>
 8005028:	4b0a      	ldr	r3, [pc, #40]	; (8005054 <do_memp_free_pool+0x40>)
 800502a:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800502e:	490a      	ldr	r1, [pc, #40]	; (8005058 <do_memp_free_pool+0x44>)
 8005030:	480a      	ldr	r0, [pc, #40]	; (800505c <do_memp_free_pool+0x48>)
 8005032:	f008 fe9b 	bl	800dd6c <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800504c:	bf00      	nop
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	0800eee0 	.word	0x0800eee0
 8005058:	0800ef90 	.word	0x0800ef90
 800505c:	0800ef34 	.word	0x0800ef34

08005060 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	4603      	mov	r3, r0
 8005068:	6039      	str	r1, [r7, #0]
 800506a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800506c:	79fb      	ldrb	r3, [r7, #7]
 800506e:	2b08      	cmp	r3, #8
 8005070:	d907      	bls.n	8005082 <memp_free+0x22>
 8005072:	4b0c      	ldr	r3, [pc, #48]	; (80050a4 <memp_free+0x44>)
 8005074:	f240 12db 	movw	r2, #475	; 0x1db
 8005078:	490b      	ldr	r1, [pc, #44]	; (80050a8 <memp_free+0x48>)
 800507a:	480c      	ldr	r0, [pc, #48]	; (80050ac <memp_free+0x4c>)
 800507c:	f008 fe76 	bl	800dd6c <iprintf>
 8005080:	e00c      	b.n	800509c <memp_free+0x3c>

  if (mem == NULL) {
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d008      	beq.n	800509a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005088:	79fb      	ldrb	r3, [r7, #7]
 800508a:	4a09      	ldr	r2, [pc, #36]	; (80050b0 <memp_free+0x50>)
 800508c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005090:	6839      	ldr	r1, [r7, #0]
 8005092:	4618      	mov	r0, r3
 8005094:	f7ff ffbe 	bl	8005014 <do_memp_free_pool>
 8005098:	e000      	b.n	800509c <memp_free+0x3c>
    return;
 800509a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	0800eee0 	.word	0x0800eee0
 80050a8:	0800efb0 	.word	0x0800efb0
 80050ac:	0800ef34 	.word	0x0800ef34
 80050b0:	080109cc 	.word	0x080109cc

080050b4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80050b8:	bf00      	nop
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bc80      	pop	{r7}
 80050be:	4770      	bx	lr

080050c0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
 80050cc:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d105      	bne.n	80050e0 <netif_add+0x20>
 80050d4:	4b21      	ldr	r3, [pc, #132]	; (800515c <netif_add+0x9c>)
 80050d6:	22fb      	movs	r2, #251	; 0xfb
 80050d8:	4921      	ldr	r1, [pc, #132]	; (8005160 <netif_add+0xa0>)
 80050da:	4822      	ldr	r0, [pc, #136]	; (8005164 <netif_add+0xa4>)
 80050dc:	f008 fe46 	bl	800dd6c <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2203      	movs	r2, #3
 80050fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 800510e:	4b16      	ldr	r3, [pc, #88]	; (8005168 <netif_add+0xa8>)
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	b2d1      	uxtb	r1, r2
 8005116:	4a14      	ldr	r2, [pc, #80]	; (8005168 <netif_add+0xa8>)
 8005118:	7011      	strb	r1, [r2, #0]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6a3a      	ldr	r2, [r7, #32]
 8005124:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	68b9      	ldr	r1, [r7, #8]
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 f81f 	bl	8005170 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	4798      	blx	r3
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <netif_add+0x82>
    return NULL;
 800513e:	2300      	movs	r3, #0
 8005140:	e007      	b.n	8005152 <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005142:	4b0a      	ldr	r3, [pc, #40]	; (800516c <netif_add+0xac>)
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800514a:	4a08      	ldr	r2, [pc, #32]	; (800516c <netif_add+0xac>)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8005150:	68fb      	ldr	r3, [r7, #12]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	0800efcc 	.word	0x0800efcc
 8005160:	0800f000 	.word	0x0800f000
 8005164:	0800f018 	.word	0x0800f018
 8005168:	200000c8 	.word	0x200000c8
 800516c:	20006cac 	.word	0x20006cac

08005170 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
 800517c:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d003      	beq.n	800518c <netif_set_addr+0x1c>
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10c      	bne.n	80051a6 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800518c:	68b9      	ldr	r1, [r7, #8]
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 f81a 	bl	80051c8 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8005194:	6879      	ldr	r1, [r7, #4]
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f000 f861 	bl	800525e <netif_set_netmask>
    netif_set_gw(netif, gw);
 800519c:	6839      	ldr	r1, [r7, #0]
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 f84a 	bl	8005238 <netif_set_gw>
 80051a4:	e00c      	b.n	80051c0 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 80051a6:	6879      	ldr	r1, [r7, #4]
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 f858 	bl	800525e <netif_set_netmask>
    netif_set_gw(netif, gw);
 80051ae:	6839      	ldr	r1, [r7, #0]
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 f841 	bl	8005238 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 80051b6:	68b9      	ldr	r1, [r7, #8]
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f000 f805 	bl	80051c8 <netif_set_ipaddr>
  }
}
 80051be:	bf00      	nop
 80051c0:	bf00      	nop
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <netif_set_ipaddr+0x18>
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	60fb      	str	r3, [r7, #12]
 80051de:	e002      	b.n	80051e6 <netif_set_ipaddr+0x1e>
 80051e0:	4b14      	ldr	r3, [pc, #80]	; (8005234 <netif_set_ipaddr+0x6c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	3304      	adds	r3, #4
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d01c      	beq.n	800522c <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	3304      	adds	r3, #4
 80051f6:	f107 020c 	add.w	r2, r7, #12
 80051fa:	4611      	mov	r1, r2
 80051fc:	4618      	mov	r0, r3
 80051fe:	f002 fac7 	bl	8007790 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	3304      	adds	r3, #4
 8005206:	f107 020c 	add.w	r2, r7, #12
 800520a:	4611      	mov	r1, r2
 800520c:	4618      	mov	r0, r3
 800520e:	f006 fb29 	bl	800b864 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <netif_set_ipaddr+0x56>
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	e000      	b.n	8005220 <netif_set_ipaddr+0x58>
 800521e:	2300      	movs	r3, #0
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005224:	2101      	movs	r1, #1
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f85d 	bl	80052e6 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800522c:	bf00      	nop
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	08010a30 	.word	0x08010a30

08005238 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d002      	beq.n	800524e <netif_set_gw+0x16>
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	e000      	b.n	8005250 <netif_set_gw+0x18>
 800524e:	2300      	movs	r3, #0
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	bc80      	pop	{r7}
 800525c:	4770      	bx	lr

0800525e <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800525e:	b480      	push	{r7}
 8005260:	b083      	sub	sp, #12
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
 8005266:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <netif_set_netmask+0x16>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	e000      	b.n	8005276 <netif_set_netmask+0x18>
 8005274:	2300      	movs	r3, #0
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	bc80      	pop	{r7}
 8005282:	4770      	bx	lr

08005284 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800528c:	4a03      	ldr	r2, [pc, #12]	; (800529c <netif_set_default+0x18>)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005292:	bf00      	nop
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	bc80      	pop	{r7}
 800529a:	4770      	bx	lr
 800529c:	20006cb0 	.word	0x20006cb0

080052a0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d113      	bne.n	80052de <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80052bc:	f043 0301 	orr.w	r3, r3, #1
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80052ce:	f003 0304 	and.w	r3, r3, #4
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 80052d6:	2103      	movs	r1, #3
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 f804 	bl	80052e6 <netif_issue_reports>
    }
  }
}
 80052de:	bf00      	nop
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b082      	sub	sp, #8
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
 80052ee:	460b      	mov	r3, r1
 80052f0:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80052f2:	78fb      	ldrb	r3, [r7, #3]
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d011      	beq.n	8005320 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3304      	adds	r3, #4
 8005300:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00c      	beq.n	8005320 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800530c:	f003 0308 	and.w	r3, r3, #8
 8005310:	2b00      	cmp	r3, #0
 8005312:	d005      	beq.n	8005320 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	3304      	adds	r3, #4
 8005318:	4619      	mov	r1, r3
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f007 f9d4 	bl	800c6c8 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8005320:	bf00      	nop
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d012      	beq.n	8005364 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005344:	f023 0301 	bic.w	r3, r3, #1
 8005348:	b2da      	uxtb	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005356:	f003 0308 	and.w	r3, r3, #8
 800535a:	2b00      	cmp	r3, #0
 800535c:	d002      	beq.n	8005364 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f006 fd78 	bl	800be54 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005364:	bf00      	nop
 8005366:	3708      	adds	r7, #8
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  if (netif) {
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	61da      	str	r2, [r3, #28]
  }
}
 8005382:	bf00      	nop
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	bc80      	pop	{r7}
 800538a:	4770      	bx	lr

0800538c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005392:	4b0e      	ldr	r3, [pc, #56]	; (80053cc <pbuf_free_ooseq+0x40>)
 8005394:	2200      	movs	r2, #0
 8005396:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005398:	4b0d      	ldr	r3, [pc, #52]	; (80053d0 <pbuf_free_ooseq+0x44>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	607b      	str	r3, [r7, #4]
 800539e:	e00f      	b.n	80053c0 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d008      	beq.n	80053ba <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ac:	4618      	mov	r0, r3
 80053ae:	f001 fe68 	bl	8007082 <tcp_segs_free>
      pcb->ooseq = NULL;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 80053b8:	e005      	b.n	80053c6 <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	607b      	str	r3, [r7, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1ec      	bne.n	80053a0 <pbuf_free_ooseq+0x14>
    }
  }
}
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	20006cb4 	.word	0x20006cb4
 80053d0:	20006cbc 	.word	0x20006cbc

080053d4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80053d4:	b480      	push	{r7}
 80053d6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80053d8:	4b03      	ldr	r3, [pc, #12]	; (80053e8 <pbuf_pool_is_empty+0x14>)
 80053da:	2201      	movs	r2, #1
 80053dc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80053de:	bf00      	nop
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	20006cb4 	.word	0x20006cb4

080053ec <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	4603      	mov	r3, r0
 80053f4:	71fb      	strb	r3, [r7, #7]
 80053f6:	460b      	mov	r3, r1
 80053f8:	80bb      	strh	r3, [r7, #4]
 80053fa:	4613      	mov	r3, r2
 80053fc:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 80053fe:	79fb      	ldrb	r3, [r7, #7]
 8005400:	2b04      	cmp	r3, #4
 8005402:	d81c      	bhi.n	800543e <pbuf_alloc+0x52>
 8005404:	a201      	add	r2, pc, #4	; (adr r2, 800540c <pbuf_alloc+0x20>)
 8005406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540a:	bf00      	nop
 800540c:	08005421 	.word	0x08005421
 8005410:	08005427 	.word	0x08005427
 8005414:	0800542d 	.word	0x0800542d
 8005418:	08005433 	.word	0x08005433
 800541c:	08005439 	.word	0x08005439
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8005420:	2336      	movs	r3, #54	; 0x36
 8005422:	82fb      	strh	r3, [r7, #22]
    break;
 8005424:	e014      	b.n	8005450 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8005426:	2322      	movs	r3, #34	; 0x22
 8005428:	82fb      	strh	r3, [r7, #22]
    break;
 800542a:	e011      	b.n	8005450 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800542c:	230e      	movs	r3, #14
 800542e:	82fb      	strh	r3, [r7, #22]
    break;
 8005430:	e00e      	b.n	8005450 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8005432:	2300      	movs	r3, #0
 8005434:	82fb      	strh	r3, [r7, #22]
    break;
 8005436:	e00b      	b.n	8005450 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8005438:	2300      	movs	r3, #0
 800543a:	82fb      	strh	r3, [r7, #22]
    break;
 800543c:	e008      	b.n	8005450 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800543e:	4ba5      	ldr	r3, [pc, #660]	; (80056d4 <pbuf_alloc+0x2e8>)
 8005440:	f44f 728b 	mov.w	r2, #278	; 0x116
 8005444:	49a4      	ldr	r1, [pc, #656]	; (80056d8 <pbuf_alloc+0x2ec>)
 8005446:	48a5      	ldr	r0, [pc, #660]	; (80056dc <pbuf_alloc+0x2f0>)
 8005448:	f008 fc90 	bl	800dd6c <iprintf>
    return NULL;
 800544c:	2300      	movs	r3, #0
 800544e:	e15d      	b.n	800570c <pbuf_alloc+0x320>
  }

  switch (type) {
 8005450:	79bb      	ldrb	r3, [r7, #6]
 8005452:	2b03      	cmp	r3, #3
 8005454:	d00d      	beq.n	8005472 <pbuf_alloc+0x86>
 8005456:	2b03      	cmp	r3, #3
 8005458:	f300 8133 	bgt.w	80056c2 <pbuf_alloc+0x2d6>
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 80d0 	beq.w	8005602 <pbuf_alloc+0x216>
 8005462:	2b00      	cmp	r3, #0
 8005464:	f2c0 812d 	blt.w	80056c2 <pbuf_alloc+0x2d6>
 8005468:	3b01      	subs	r3, #1
 800546a:	2b01      	cmp	r3, #1
 800546c:	f200 8129 	bhi.w	80056c2 <pbuf_alloc+0x2d6>
 8005470:	e10d      	b.n	800568e <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005472:	2008      	movs	r0, #8
 8005474:	f7ff fda8 	bl	8004fc8 <memp_malloc>
 8005478:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d103      	bne.n	8005488 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 8005480:	f7ff ffa8 	bl	80053d4 <pbuf_pool_is_empty>
      return NULL;
 8005484:	2300      	movs	r3, #0
 8005486:	e141      	b.n	800570c <pbuf_alloc+0x320>
    }
    p->type = type;
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	79ba      	ldrb	r2, [r7, #6]
 800548c:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	2200      	movs	r2, #0
 8005492:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8005494:	8afb      	ldrh	r3, [r7, #22]
 8005496:	3310      	adds	r3, #16
 8005498:	69fa      	ldr	r2, [r7, #28]
 800549a:	4413      	add	r3, r2
 800549c:	3303      	adds	r3, #3
 800549e:	f023 0303 	bic.w	r3, r3, #3
 80054a2:	461a      	mov	r2, r3
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f003 0303 	and.w	r3, r3, #3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d006      	beq.n	80054c2 <pbuf_alloc+0xd6>
 80054b4:	4b87      	ldr	r3, [pc, #540]	; (80056d4 <pbuf_alloc+0x2e8>)
 80054b6:	f44f 7294 	mov.w	r2, #296	; 0x128
 80054ba:	4989      	ldr	r1, [pc, #548]	; (80056e0 <pbuf_alloc+0x2f4>)
 80054bc:	4887      	ldr	r0, [pc, #540]	; (80056dc <pbuf_alloc+0x2f0>)
 80054be:	f008 fc55 	bl	800dd6c <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	88ba      	ldrh	r2, [r7, #4]
 80054c6:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80054c8:	8afb      	ldrh	r3, [r7, #22]
 80054ca:	3303      	adds	r3, #3
 80054cc:	f023 0303 	bic.w	r3, r3, #3
 80054d0:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 80054d4:	88bb      	ldrh	r3, [r7, #4]
 80054d6:	4293      	cmp	r3, r2
 80054d8:	bf28      	it	cs
 80054da:	4613      	movcs	r3, r2
 80054dc:	b29a      	uxth	r2, r3
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	69fa      	ldr	r2, [r7, #28]
 80054e8:	8952      	ldrh	r2, [r2, #10]
 80054ea:	441a      	add	r2, r3
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d906      	bls.n	8005504 <pbuf_alloc+0x118>
 80054f6:	4b77      	ldr	r3, [pc, #476]	; (80056d4 <pbuf_alloc+0x2e8>)
 80054f8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80054fc:	4979      	ldr	r1, [pc, #484]	; (80056e4 <pbuf_alloc+0x2f8>)
 80054fe:	4877      	ldr	r0, [pc, #476]	; (80056dc <pbuf_alloc+0x2f0>)
 8005500:	f008 fc34 	bl	800dd6c <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005504:	8afb      	ldrh	r3, [r7, #22]
 8005506:	3303      	adds	r3, #3
 8005508:	f023 0303 	bic.w	r3, r3, #3
 800550c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005510:	d106      	bne.n	8005520 <pbuf_alloc+0x134>
 8005512:	4b70      	ldr	r3, [pc, #448]	; (80056d4 <pbuf_alloc+0x2e8>)
 8005514:	f240 1231 	movw	r2, #305	; 0x131
 8005518:	4973      	ldr	r1, [pc, #460]	; (80056e8 <pbuf_alloc+0x2fc>)
 800551a:	4870      	ldr	r0, [pc, #448]	; (80056dc <pbuf_alloc+0x2f0>)
 800551c:	f008 fc26 	bl	800dd6c <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	2201      	movs	r2, #1
 8005524:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800552a:	88bb      	ldrh	r3, [r7, #4]
 800552c:	69fa      	ldr	r2, [r7, #28]
 800552e:	8952      	ldrh	r2, [r2, #10]
 8005530:	1a9b      	subs	r3, r3, r2
 8005532:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8005534:	e061      	b.n	80055fa <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005536:	2008      	movs	r0, #8
 8005538:	f7ff fd46 	bl	8004fc8 <memp_malloc>
 800553c:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d106      	bne.n	8005552 <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 8005544:	f7ff ff46 	bl	80053d4 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8005548:	69f8      	ldr	r0, [r7, #28]
 800554a:	f000 fac1 	bl	8005ad0 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800554e:	2300      	movs	r3, #0
 8005550:	e0dc      	b.n	800570c <pbuf_alloc+0x320>
      }
      q->type = type;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	79ba      	ldrb	r2, [r7, #6]
 8005556:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005570:	4293      	cmp	r3, r2
 8005572:	dd06      	ble.n	8005582 <pbuf_alloc+0x196>
 8005574:	4b57      	ldr	r3, [pc, #348]	; (80056d4 <pbuf_alloc+0x2e8>)
 8005576:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800557a:	495c      	ldr	r1, [pc, #368]	; (80056ec <pbuf_alloc+0x300>)
 800557c:	4857      	ldr	r0, [pc, #348]	; (80056dc <pbuf_alloc+0x2f0>)
 800557e:	f008 fbf5 	bl	800dd6c <iprintf>
      q->tot_len = (u16_t)rem_len;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	b29a      	uxth	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	b29b      	uxth	r3, r3
 800558e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005592:	bf28      	it	cs
 8005594:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8005598:	b29a      	uxth	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f103 0210 	add.w	r2, r3, #16
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f003 0303 	and.w	r3, r3, #3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d006      	beq.n	80055c2 <pbuf_alloc+0x1d6>
 80055b4:	4b47      	ldr	r3, [pc, #284]	; (80056d4 <pbuf_alloc+0x2e8>)
 80055b6:	f240 1251 	movw	r2, #337	; 0x151
 80055ba:	494d      	ldr	r1, [pc, #308]	; (80056f0 <pbuf_alloc+0x304>)
 80055bc:	4847      	ldr	r0, [pc, #284]	; (80056dc <pbuf_alloc+0x2f0>)
 80055be:	f008 fbd5 	bl	800dd6c <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	69fa      	ldr	r2, [r7, #28]
 80055c8:	8952      	ldrh	r2, [r2, #10]
 80055ca:	441a      	add	r2, r3
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d906      	bls.n	80055e4 <pbuf_alloc+0x1f8>
 80055d6:	4b3f      	ldr	r3, [pc, #252]	; (80056d4 <pbuf_alloc+0x2e8>)
 80055d8:	f240 1253 	movw	r2, #339	; 0x153
 80055dc:	4941      	ldr	r1, [pc, #260]	; (80056e4 <pbuf_alloc+0x2f8>)
 80055de:	483f      	ldr	r0, [pc, #252]	; (80056dc <pbuf_alloc+0x2f0>)
 80055e0:	f008 fbc4 	bl	800dd6c <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2201      	movs	r2, #1
 80055e8:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	895b      	ldrh	r3, [r3, #10]
 80055ee:	461a      	mov	r2, r3
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	1a9b      	subs	r3, r3, r2
 80055f4:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	dc9a      	bgt.n	8005536 <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8005600:	e07d      	b.n	80056fe <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8005602:	8afb      	ldrh	r3, [r7, #22]
 8005604:	3313      	adds	r3, #19
 8005606:	b29b      	uxth	r3, r3
 8005608:	f023 0303 	bic.w	r3, r3, #3
 800560c:	b29a      	uxth	r2, r3
 800560e:	88bb      	ldrh	r3, [r7, #4]
 8005610:	3303      	adds	r3, #3
 8005612:	b29b      	uxth	r3, r3
 8005614:	f023 0303 	bic.w	r3, r3, #3
 8005618:	b29b      	uxth	r3, r3
 800561a:	4413      	add	r3, r2
 800561c:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800561e:	897a      	ldrh	r2, [r7, #10]
 8005620:	88bb      	ldrh	r3, [r7, #4]
 8005622:	3303      	adds	r3, #3
 8005624:	f023 0303 	bic.w	r3, r3, #3
 8005628:	429a      	cmp	r2, r3
 800562a:	d201      	bcs.n	8005630 <pbuf_alloc+0x244>
        return NULL;
 800562c:	2300      	movs	r3, #0
 800562e:	e06d      	b.n	800570c <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8005630:	897b      	ldrh	r3, [r7, #10]
 8005632:	4618      	mov	r0, r3
 8005634:	f7ff fb6c 	bl	8004d10 <mem_malloc>
 8005638:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d101      	bne.n	8005644 <pbuf_alloc+0x258>
      return NULL;
 8005640:	2300      	movs	r3, #0
 8005642:	e063      	b.n	800570c <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8005644:	8afb      	ldrh	r3, [r7, #22]
 8005646:	3310      	adds	r3, #16
 8005648:	69fa      	ldr	r2, [r7, #28]
 800564a:	4413      	add	r3, r2
 800564c:	3303      	adds	r3, #3
 800564e:	f023 0303 	bic.w	r3, r3, #3
 8005652:	461a      	mov	r2, r3
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	88ba      	ldrh	r2, [r7, #4]
 800565c:	811a      	strh	r2, [r3, #8]
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	891a      	ldrh	r2, [r3, #8]
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	2200      	movs	r2, #0
 800566a:	601a      	str	r2, [r3, #0]
    p->type = type;
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	79ba      	ldrb	r2, [r7, #6]
 8005670:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d03e      	beq.n	80056fc <pbuf_alloc+0x310>
 800567e:	4b15      	ldr	r3, [pc, #84]	; (80056d4 <pbuf_alloc+0x2e8>)
 8005680:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8005684:	491b      	ldr	r1, [pc, #108]	; (80056f4 <pbuf_alloc+0x308>)
 8005686:	4815      	ldr	r0, [pc, #84]	; (80056dc <pbuf_alloc+0x2f0>)
 8005688:	f008 fb70 	bl	800dd6c <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800568c:	e036      	b.n	80056fc <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800568e:	2007      	movs	r0, #7
 8005690:	f7ff fc9a 	bl	8004fc8 <memp_malloc>
 8005694:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d101      	bne.n	80056a0 <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800569c:	2300      	movs	r3, #0
 800569e:	e035      	b.n	800570c <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	2200      	movs	r2, #0
 80056a4:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	88ba      	ldrh	r2, [r7, #4]
 80056aa:	811a      	strh	r2, [r3, #8]
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	891a      	ldrh	r2, [r3, #8]
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	2200      	movs	r2, #0
 80056b8:	601a      	str	r2, [r3, #0]
    p->type = type;
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	79ba      	ldrb	r2, [r7, #6]
 80056be:	731a      	strb	r2, [r3, #12]
    break;
 80056c0:	e01d      	b.n	80056fe <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80056c2:	4b04      	ldr	r3, [pc, #16]	; (80056d4 <pbuf_alloc+0x2e8>)
 80056c4:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80056c8:	490b      	ldr	r1, [pc, #44]	; (80056f8 <pbuf_alloc+0x30c>)
 80056ca:	4804      	ldr	r0, [pc, #16]	; (80056dc <pbuf_alloc+0x2f0>)
 80056cc:	f008 fb4e 	bl	800dd6c <iprintf>
    return NULL;
 80056d0:	2300      	movs	r3, #0
 80056d2:	e01b      	b.n	800570c <pbuf_alloc+0x320>
 80056d4:	0800f040 	.word	0x0800f040
 80056d8:	0800f070 	.word	0x0800f070
 80056dc:	0800f08c 	.word	0x0800f08c
 80056e0:	0800f0b4 	.word	0x0800f0b4
 80056e4:	0800f0e4 	.word	0x0800f0e4
 80056e8:	0800f118 	.word	0x0800f118
 80056ec:	0800f14c 	.word	0x0800f14c
 80056f0:	0800f160 	.word	0x0800f160
 80056f4:	0800f190 	.word	0x0800f190
 80056f8:	0800f1bc 	.word	0x0800f1bc
    break;
 80056fc:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	2201      	movs	r2, #1
 8005702:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	2200      	movs	r2, #0
 8005708:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800570a:	69fb      	ldr	r3, [r7, #28]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3720      	adds	r7, #32
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	603b      	str	r3, [r7, #0]
 800571c:	4603      	mov	r3, r0
 800571e:	71fb      	strb	r3, [r7, #7]
 8005720:	460b      	mov	r3, r1
 8005722:	80bb      	strh	r3, [r7, #4]
 8005724:	4613      	mov	r3, r2
 8005726:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8005728:	79fb      	ldrb	r3, [r7, #7]
 800572a:	2b04      	cmp	r3, #4
 800572c:	d81b      	bhi.n	8005766 <pbuf_alloced_custom+0x52>
 800572e:	a201      	add	r2, pc, #4	; (adr r2, 8005734 <pbuf_alloced_custom+0x20>)
 8005730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005734:	08005749 	.word	0x08005749
 8005738:	0800574f 	.word	0x0800574f
 800573c:	08005755 	.word	0x08005755
 8005740:	0800575b 	.word	0x0800575b
 8005744:	08005761 	.word	0x08005761
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8005748:	2336      	movs	r3, #54	; 0x36
 800574a:	81fb      	strh	r3, [r7, #14]
    break;
 800574c:	e014      	b.n	8005778 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800574e:	2322      	movs	r3, #34	; 0x22
 8005750:	81fb      	strh	r3, [r7, #14]
    break;
 8005752:	e011      	b.n	8005778 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8005754:	230e      	movs	r3, #14
 8005756:	81fb      	strh	r3, [r7, #14]
    break;
 8005758:	e00e      	b.n	8005778 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800575a:	2300      	movs	r3, #0
 800575c:	81fb      	strh	r3, [r7, #14]
    break;
 800575e:	e00b      	b.n	8005778 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8005760:	2300      	movs	r3, #0
 8005762:	81fb      	strh	r3, [r7, #14]
    break;
 8005764:	e008      	b.n	8005778 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8005766:	4b1d      	ldr	r3, [pc, #116]	; (80057dc <pbuf_alloced_custom+0xc8>)
 8005768:	f240 12c5 	movw	r2, #453	; 0x1c5
 800576c:	491c      	ldr	r1, [pc, #112]	; (80057e0 <pbuf_alloced_custom+0xcc>)
 800576e:	481d      	ldr	r0, [pc, #116]	; (80057e4 <pbuf_alloced_custom+0xd0>)
 8005770:	f008 fafc 	bl	800dd6c <iprintf>
    return NULL;
 8005774:	2300      	movs	r3, #0
 8005776:	e02d      	b.n	80057d4 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005778:	89fb      	ldrh	r3, [r7, #14]
 800577a:	3303      	adds	r3, #3
 800577c:	f023 0203 	bic.w	r2, r3, #3
 8005780:	88bb      	ldrh	r3, [r7, #4]
 8005782:	441a      	add	r2, r3
 8005784:	8bbb      	ldrh	r3, [r7, #28]
 8005786:	429a      	cmp	r2, r3
 8005788:	d901      	bls.n	800578e <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800578a:	2300      	movs	r3, #0
 800578c:	e022      	b.n	80057d4 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2200      	movs	r2, #0
 8005792:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d008      	beq.n	80057ac <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800579a:	89fb      	ldrh	r3, [r7, #14]
 800579c:	3303      	adds	r3, #3
 800579e:	f023 0303 	bic.w	r3, r3, #3
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	441a      	add	r2, r3
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	605a      	str	r2, [r3, #4]
 80057aa:	e002      	b.n	80057b2 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	2200      	movs	r2, #0
 80057b0:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2202      	movs	r2, #2
 80057b6:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	88ba      	ldrh	r2, [r7, #4]
 80057bc:	811a      	strh	r2, [r3, #8]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	891a      	ldrh	r2, [r3, #8]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	79ba      	ldrb	r2, [r7, #6]
 80057ca:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	2201      	movs	r2, #1
 80057d0:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 80057d2:	683b      	ldr	r3, [r7, #0]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	0800f040 	.word	0x0800f040
 80057e0:	0800f1d8 	.word	0x0800f1d8
 80057e4:	0800f08c 	.word	0x0800f08c

080057e8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	460b      	mov	r3, r1
 80057f2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d106      	bne.n	8005808 <pbuf_realloc+0x20>
 80057fa:	4b4b      	ldr	r3, [pc, #300]	; (8005928 <pbuf_realloc+0x140>)
 80057fc:	f240 12f3 	movw	r2, #499	; 0x1f3
 8005800:	494a      	ldr	r1, [pc, #296]	; (800592c <pbuf_realloc+0x144>)
 8005802:	484b      	ldr	r0, [pc, #300]	; (8005930 <pbuf_realloc+0x148>)
 8005804:	f008 fab2 	bl	800dd6c <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	7b1b      	ldrb	r3, [r3, #12]
 800580c:	2b03      	cmp	r3, #3
 800580e:	d012      	beq.n	8005836 <pbuf_realloc+0x4e>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	7b1b      	ldrb	r3, [r3, #12]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d00e      	beq.n	8005836 <pbuf_realloc+0x4e>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	7b1b      	ldrb	r3, [r3, #12]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00a      	beq.n	8005836 <pbuf_realloc+0x4e>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	7b1b      	ldrb	r3, [r3, #12]
 8005824:	2b02      	cmp	r3, #2
 8005826:	d006      	beq.n	8005836 <pbuf_realloc+0x4e>
 8005828:	4b3f      	ldr	r3, [pc, #252]	; (8005928 <pbuf_realloc+0x140>)
 800582a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800582e:	4941      	ldr	r1, [pc, #260]	; (8005934 <pbuf_realloc+0x14c>)
 8005830:	483f      	ldr	r0, [pc, #252]	; (8005930 <pbuf_realloc+0x148>)
 8005832:	f008 fa9b 	bl	800dd6c <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	891b      	ldrh	r3, [r3, #8]
 800583a:	887a      	ldrh	r2, [r7, #2]
 800583c:	429a      	cmp	r2, r3
 800583e:	d26e      	bcs.n	800591e <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8005840:	887b      	ldrh	r3, [r7, #2]
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	8912      	ldrh	r2, [r2, #8]
 8005846:	1a9b      	subs	r3, r3, r2
 8005848:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800584a:	887b      	ldrh	r3, [r7, #2]
 800584c:	827b      	strh	r3, [r7, #18]
  q = p;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005852:	e025      	b.n	80058a0 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	895b      	ldrh	r3, [r3, #10]
 8005858:	8a7a      	ldrh	r2, [r7, #18]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005864:	4293      	cmp	r3, r2
 8005866:	dd06      	ble.n	8005876 <pbuf_realloc+0x8e>
 8005868:	4b2f      	ldr	r3, [pc, #188]	; (8005928 <pbuf_realloc+0x140>)
 800586a:	f240 220b 	movw	r2, #523	; 0x20b
 800586e:	4932      	ldr	r1, [pc, #200]	; (8005938 <pbuf_realloc+0x150>)
 8005870:	482f      	ldr	r0, [pc, #188]	; (8005930 <pbuf_realloc+0x148>)
 8005872:	f008 fa7b 	bl	800dd6c <iprintf>
    q->tot_len += (u16_t)grow;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	891a      	ldrh	r2, [r3, #8]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	b29b      	uxth	r3, r3
 800587e:	4413      	add	r3, r2
 8005880:	b29a      	uxth	r2, r3
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d106      	bne.n	80058a0 <pbuf_realloc+0xb8>
 8005892:	4b25      	ldr	r3, [pc, #148]	; (8005928 <pbuf_realloc+0x140>)
 8005894:	f240 220f 	movw	r2, #527	; 0x20f
 8005898:	4928      	ldr	r1, [pc, #160]	; (800593c <pbuf_realloc+0x154>)
 800589a:	4825      	ldr	r0, [pc, #148]	; (8005930 <pbuf_realloc+0x148>)
 800589c:	f008 fa66 	bl	800dd6c <iprintf>
  while (rem_len > q->len) {
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	895b      	ldrh	r3, [r3, #10]
 80058a4:	8a7a      	ldrh	r2, [r7, #18]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d8d4      	bhi.n	8005854 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	7b1b      	ldrb	r3, [r3, #12]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d121      	bne.n	80058f6 <pbuf_realloc+0x10e>
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	895b      	ldrh	r3, [r3, #10]
 80058b6:	8a7a      	ldrh	r2, [r7, #18]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d01c      	beq.n	80058f6 <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	7b5b      	ldrb	r3, [r3, #13]
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d116      	bne.n	80058f6 <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	8a7b      	ldrh	r3, [r7, #18]
 80058d4:	4413      	add	r3, r2
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	4619      	mov	r1, r3
 80058da:	6978      	ldr	r0, [r7, #20]
 80058dc:	f7ff f93c 	bl	8004b58 <mem_trim>
 80058e0:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d106      	bne.n	80058f6 <pbuf_realloc+0x10e>
 80058e8:	4b0f      	ldr	r3, [pc, #60]	; (8005928 <pbuf_realloc+0x140>)
 80058ea:	f240 221d 	movw	r2, #541	; 0x21d
 80058ee:	4914      	ldr	r1, [pc, #80]	; (8005940 <pbuf_realloc+0x158>)
 80058f0:	480f      	ldr	r0, [pc, #60]	; (8005930 <pbuf_realloc+0x148>)
 80058f2:	f008 fa3b 	bl	800dd6c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	8a7a      	ldrh	r2, [r7, #18]
 80058fa:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	895a      	ldrh	r2, [r3, #10]
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d004      	beq.n	8005916 <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4618      	mov	r0, r3
 8005912:	f000 f8dd 	bl	8005ad0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	2200      	movs	r2, #0
 800591a:	601a      	str	r2, [r3, #0]
 800591c:	e000      	b.n	8005920 <pbuf_realloc+0x138>
    return;
 800591e:	bf00      	nop

}
 8005920:	3718      	adds	r7, #24
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	0800f040 	.word	0x0800f040
 800592c:	0800f1fc 	.word	0x0800f1fc
 8005930:	0800f08c 	.word	0x0800f08c
 8005934:	0800f214 	.word	0x0800f214
 8005938:	0800f230 	.word	0x0800f230
 800593c:	0800f244 	.word	0x0800f244
 8005940:	0800f25c 	.word	0x0800f25c

08005944 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	460b      	mov	r3, r1
 800594e:	807b      	strh	r3, [r7, #2]
 8005950:	4613      	mov	r3, r2
 8005952:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d106      	bne.n	8005968 <pbuf_header_impl+0x24>
 800595a:	4b46      	ldr	r3, [pc, #280]	; (8005a74 <pbuf_header_impl+0x130>)
 800595c:	f240 223f 	movw	r2, #575	; 0x23f
 8005960:	4945      	ldr	r1, [pc, #276]	; (8005a78 <pbuf_header_impl+0x134>)
 8005962:	4846      	ldr	r0, [pc, #280]	; (8005a7c <pbuf_header_impl+0x138>)
 8005964:	f008 fa02 	bl	800dd6c <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8005968:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d002      	beq.n	8005976 <pbuf_header_impl+0x32>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <pbuf_header_impl+0x36>
    return 0;
 8005976:	2300      	movs	r3, #0
 8005978:	e078      	b.n	8005a6c <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800597a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800597e:	2b00      	cmp	r3, #0
 8005980:	da10      	bge.n	80059a4 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 8005982:	887b      	ldrh	r3, [r7, #2]
 8005984:	425b      	negs	r3, r3
 8005986:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	895b      	ldrh	r3, [r3, #10]
 800598c:	89fa      	ldrh	r2, [r7, #14]
 800598e:	429a      	cmp	r2, r3
 8005990:	d90a      	bls.n	80059a8 <pbuf_header_impl+0x64>
 8005992:	4b38      	ldr	r3, [pc, #224]	; (8005a74 <pbuf_header_impl+0x130>)
 8005994:	f240 2247 	movw	r2, #583	; 0x247
 8005998:	4939      	ldr	r1, [pc, #228]	; (8005a80 <pbuf_header_impl+0x13c>)
 800599a:	4838      	ldr	r0, [pc, #224]	; (8005a7c <pbuf_header_impl+0x138>)
 800599c:	f008 f9e6 	bl	800dd6c <iprintf>
 80059a0:	2301      	movs	r3, #1
 80059a2:	e063      	b.n	8005a6c <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 80059a4:	887b      	ldrh	r3, [r7, #2]
 80059a6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	7b1b      	ldrb	r3, [r3, #12]
 80059ac:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80059b4:	89bb      	ldrh	r3, [r7, #12]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d002      	beq.n	80059c0 <pbuf_header_impl+0x7c>
 80059ba:	89bb      	ldrh	r3, [r7, #12]
 80059bc:	2b03      	cmp	r3, #3
 80059be:	d112      	bne.n	80059e6 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80059c8:	425b      	negs	r3, r3
 80059ca:	441a      	add	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3310      	adds	r3, #16
 80059d8:	429a      	cmp	r2, r3
 80059da:	d238      	bcs.n	8005a4e <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e042      	b.n	8005a6c <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 80059e6:	89bb      	ldrh	r3, [r7, #12]
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d002      	beq.n	80059f2 <pbuf_header_impl+0xae>
 80059ec:	89bb      	ldrh	r3, [r7, #12]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d124      	bne.n	8005a3c <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80059f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	da0d      	bge.n	8005a16 <pbuf_header_impl+0xd2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	895b      	ldrh	r3, [r3, #10]
 80059fe:	89fa      	ldrh	r2, [r7, #14]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d808      	bhi.n	8005a16 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005a0c:	425b      	negs	r3, r3
 8005a0e:	441a      	add	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	605a      	str	r2, [r3, #4]
 8005a14:	e011      	b.n	8005a3a <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8005a16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	dd0b      	ble.n	8005a36 <pbuf_header_impl+0xf2>
 8005a1e:	787b      	ldrb	r3, [r7, #1]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d008      	beq.n	8005a36 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005a2c:	425b      	negs	r3, r3
 8005a2e:	441a      	add	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	605a      	str	r2, [r3, #4]
 8005a34:	e001      	b.n	8005a3a <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e018      	b.n	8005a6c <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8005a3a:	e008      	b.n	8005a4e <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8005a3c:	4b0d      	ldr	r3, [pc, #52]	; (8005a74 <pbuf_header_impl+0x130>)
 8005a3e:	f240 2277 	movw	r2, #631	; 0x277
 8005a42:	4910      	ldr	r1, [pc, #64]	; (8005a84 <pbuf_header_impl+0x140>)
 8005a44:	480d      	ldr	r0, [pc, #52]	; (8005a7c <pbuf_header_impl+0x138>)
 8005a46:	f008 f991 	bl	800dd6c <iprintf>
    return 1;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e00e      	b.n	8005a6c <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	895a      	ldrh	r2, [r3, #10]
 8005a52:	887b      	ldrh	r3, [r7, #2]
 8005a54:	4413      	add	r3, r2
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	891a      	ldrh	r2, [r3, #8]
 8005a60:	887b      	ldrh	r3, [r7, #2]
 8005a62:	4413      	add	r3, r2
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	0800f040 	.word	0x0800f040
 8005a78:	0800f278 	.word	0x0800f278
 8005a7c:	0800f08c 	.word	0x0800f08c
 8005a80:	0800f284 	.word	0x0800f284
 8005a84:	0800f2a4 	.word	0x0800f2a4

08005a88 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	460b      	mov	r3, r1
 8005a92:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8005a94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7ff ff51 	bl	8005944 <pbuf_header_impl>
 8005aa2:	4603      	mov	r3, r0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3708      	adds	r7, #8
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8005ab8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005abc:	2201      	movs	r2, #1
 8005abe:	4619      	mov	r1, r3
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f7ff ff3f 	bl	8005944 <pbuf_header_impl>
 8005ac6:	4603      	mov	r3, r0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3708      	adds	r7, #8
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10b      	bne.n	8005af6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d106      	bne.n	8005af2 <pbuf_free+0x22>
 8005ae4:	4b3e      	ldr	r3, [pc, #248]	; (8005be0 <pbuf_free+0x110>)
 8005ae6:	f240 22d2 	movw	r2, #722	; 0x2d2
 8005aea:	493e      	ldr	r1, [pc, #248]	; (8005be4 <pbuf_free+0x114>)
 8005aec:	483e      	ldr	r0, [pc, #248]	; (8005be8 <pbuf_free+0x118>)
 8005aee:	f008 f93d 	bl	800dd6c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005af2:	2300      	movs	r3, #0
 8005af4:	e070      	b.n	8005bd8 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	7b1b      	ldrb	r3, [r3, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d012      	beq.n	8005b24 <pbuf_free+0x54>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	7b1b      	ldrb	r3, [r3, #12]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d00e      	beq.n	8005b24 <pbuf_free+0x54>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	7b1b      	ldrb	r3, [r3, #12]
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d00a      	beq.n	8005b24 <pbuf_free+0x54>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	7b1b      	ldrb	r3, [r3, #12]
 8005b12:	2b03      	cmp	r3, #3
 8005b14:	d006      	beq.n	8005b24 <pbuf_free+0x54>
 8005b16:	4b32      	ldr	r3, [pc, #200]	; (8005be0 <pbuf_free+0x110>)
 8005b18:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8005b1c:	4933      	ldr	r1, [pc, #204]	; (8005bec <pbuf_free+0x11c>)
 8005b1e:	4832      	ldr	r0, [pc, #200]	; (8005be8 <pbuf_free+0x118>)
 8005b20:	f008 f924 	bl	800dd6c <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8005b24:	2300      	movs	r3, #0
 8005b26:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005b28:	e052      	b.n	8005bd0 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	89db      	ldrh	r3, [r3, #14]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d106      	bne.n	8005b40 <pbuf_free+0x70>
 8005b32:	4b2b      	ldr	r3, [pc, #172]	; (8005be0 <pbuf_free+0x110>)
 8005b34:	f240 22eb 	movw	r2, #747	; 0x2eb
 8005b38:	492d      	ldr	r1, [pc, #180]	; (8005bf0 <pbuf_free+0x120>)
 8005b3a:	482b      	ldr	r0, [pc, #172]	; (8005be8 <pbuf_free+0x118>)
 8005b3c:	f008 f916 	bl	800dd6c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	89db      	ldrh	r3, [r3, #14]
 8005b44:	3b01      	subs	r3, #1
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	81da      	strh	r2, [r3, #14]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	89db      	ldrh	r3, [r3, #14]
 8005b50:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005b52:	8abb      	ldrh	r3, [r7, #20]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d139      	bne.n	8005bcc <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	7b1b      	ldrb	r3, [r3, #12]
 8005b62:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	7b5b      	ldrb	r3, [r3, #13]
 8005b68:	f003 0302 	and.w	r3, r3, #2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d011      	beq.n	8005b94 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d106      	bne.n	8005b8a <pbuf_free+0xba>
 8005b7c:	4b18      	ldr	r3, [pc, #96]	; (8005be0 <pbuf_free+0x110>)
 8005b7e:	f240 22f9 	movw	r2, #761	; 0x2f9
 8005b82:	491c      	ldr	r1, [pc, #112]	; (8005bf4 <pbuf_free+0x124>)
 8005b84:	4818      	ldr	r0, [pc, #96]	; (8005be8 <pbuf_free+0x118>)
 8005b86:	f008 f8f1 	bl	800dd6c <iprintf>
        pc->custom_free_function(p);
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	4798      	blx	r3
 8005b92:	e015      	b.n	8005bc0 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8005b94:	89fb      	ldrh	r3, [r7, #14]
 8005b96:	2b03      	cmp	r3, #3
 8005b98:	d104      	bne.n	8005ba4 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 8005b9a:	6879      	ldr	r1, [r7, #4]
 8005b9c:	2008      	movs	r0, #8
 8005b9e:	f7ff fa5f 	bl	8005060 <memp_free>
 8005ba2:	e00d      	b.n	8005bc0 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8005ba4:	89fb      	ldrh	r3, [r7, #14]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d002      	beq.n	8005bb0 <pbuf_free+0xe0>
 8005baa:	89fb      	ldrh	r3, [r7, #14]
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d104      	bne.n	8005bba <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 8005bb0:	6879      	ldr	r1, [r7, #4]
 8005bb2:	2007      	movs	r0, #7
 8005bb4:	f7ff fa54 	bl	8005060 <memp_free>
 8005bb8:	e002      	b.n	8005bc0 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f7fe ff6a 	bl	8004a94 <mem_free>
        }
      }
      count++;
 8005bc0:	7dfb      	ldrb	r3, [r7, #23]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	607b      	str	r3, [r7, #4]
 8005bca:	e001      	b.n	8005bd0 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1a9      	bne.n	8005b2a <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	0800f040 	.word	0x0800f040
 8005be4:	0800f278 	.word	0x0800f278
 8005be8:	0800f08c 	.word	0x0800f08c
 8005bec:	0800f2b4 	.word	0x0800f2b4
 8005bf0:	0800f2cc 	.word	0x0800f2cc
 8005bf4:	0800f2e4 	.word	0x0800f2e4

08005bf8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005c00:	2300      	movs	r3, #0
 8005c02:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005c04:	e005      	b.n	8005c12 <pbuf_clen+0x1a>
    ++len;
 8005c06:	89fb      	ldrh	r3, [r7, #14]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1f6      	bne.n	8005c06 <pbuf_clen+0xe>
  }
  return len;
 8005c18:	89fb      	ldrh	r3, [r7, #14]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bc80      	pop	{r7}
 8005c22:	4770      	bx	lr

08005c24 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d010      	beq.n	8005c54 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	89db      	ldrh	r3, [r3, #14]
 8005c36:	3301      	adds	r3, #1
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	89db      	ldrh	r3, [r3, #14]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d106      	bne.n	8005c54 <pbuf_ref+0x30>
 8005c46:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <pbuf_ref+0x38>)
 8005c48:	f240 3239 	movw	r2, #825	; 0x339
 8005c4c:	4904      	ldr	r1, [pc, #16]	; (8005c60 <pbuf_ref+0x3c>)
 8005c4e:	4805      	ldr	r0, [pc, #20]	; (8005c64 <pbuf_ref+0x40>)
 8005c50:	f008 f88c 	bl	800dd6c <iprintf>
  }
}
 8005c54:	bf00      	nop
 8005c56:	3708      	adds	r7, #8
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	0800f040 	.word	0x0800f040
 8005c60:	0800f308 	.word	0x0800f308
 8005c64:	0800f08c 	.word	0x0800f08c

08005c68 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d002      	beq.n	8005c7e <pbuf_cat+0x16>
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d107      	bne.n	8005c8e <pbuf_cat+0x26>
 8005c7e:	4b20      	ldr	r3, [pc, #128]	; (8005d00 <pbuf_cat+0x98>)
 8005c80:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8005c84:	491f      	ldr	r1, [pc, #124]	; (8005d04 <pbuf_cat+0x9c>)
 8005c86:	4820      	ldr	r0, [pc, #128]	; (8005d08 <pbuf_cat+0xa0>)
 8005c88:	f008 f870 	bl	800dd6c <iprintf>
 8005c8c:	e034      	b.n	8005cf8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	60fb      	str	r3, [r7, #12]
 8005c92:	e00a      	b.n	8005caa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	891a      	ldrh	r2, [r3, #8]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	891b      	ldrh	r3, [r3, #8]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	60fb      	str	r3, [r7, #12]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1f0      	bne.n	8005c94 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	891a      	ldrh	r2, [r3, #8]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	895b      	ldrh	r3, [r3, #10]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d006      	beq.n	8005ccc <pbuf_cat+0x64>
 8005cbe:	4b10      	ldr	r3, [pc, #64]	; (8005d00 <pbuf_cat+0x98>)
 8005cc0:	f240 3255 	movw	r2, #853	; 0x355
 8005cc4:	4911      	ldr	r1, [pc, #68]	; (8005d0c <pbuf_cat+0xa4>)
 8005cc6:	4810      	ldr	r0, [pc, #64]	; (8005d08 <pbuf_cat+0xa0>)
 8005cc8:	f008 f850 	bl	800dd6c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d006      	beq.n	8005ce2 <pbuf_cat+0x7a>
 8005cd4:	4b0a      	ldr	r3, [pc, #40]	; (8005d00 <pbuf_cat+0x98>)
 8005cd6:	f240 3256 	movw	r2, #854	; 0x356
 8005cda:	490d      	ldr	r1, [pc, #52]	; (8005d10 <pbuf_cat+0xa8>)
 8005cdc:	480a      	ldr	r0, [pc, #40]	; (8005d08 <pbuf_cat+0xa0>)
 8005cde:	f008 f845 	bl	800dd6c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	891a      	ldrh	r2, [r3, #8]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	891b      	ldrh	r3, [r3, #8]
 8005cea:	4413      	add	r3, r2
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	0800f040 	.word	0x0800f040
 8005d04:	0800f31c 	.word	0x0800f31c
 8005d08:	0800f08c 	.word	0x0800f08c
 8005d0c:	0800f354 	.word	0x0800f354
 8005d10:	0800f384 	.word	0x0800f384

08005d14 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8005d1e:	6839      	ldr	r1, [r7, #0]
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f7ff ffa1 	bl	8005c68 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8005d26:	6838      	ldr	r0, [r7, #0]
 8005d28:	f7ff ff7c 	bl	8005c24 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8005d2c:	bf00      	nop
 8005d2e:	3708      	adds	r7, #8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	81fb      	strh	r3, [r7, #14]
 8005d42:	2300      	movs	r3, #0
 8005d44:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d008      	beq.n	8005d5e <pbuf_copy+0x2a>
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d005      	beq.n	8005d5e <pbuf_copy+0x2a>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	891a      	ldrh	r2, [r3, #8]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	891b      	ldrh	r3, [r3, #8]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d209      	bcs.n	8005d72 <pbuf_copy+0x3e>
 8005d5e:	4b54      	ldr	r3, [pc, #336]	; (8005eb0 <pbuf_copy+0x17c>)
 8005d60:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8005d64:	4953      	ldr	r1, [pc, #332]	; (8005eb4 <pbuf_copy+0x180>)
 8005d66:	4854      	ldr	r0, [pc, #336]	; (8005eb8 <pbuf_copy+0x184>)
 8005d68:	f008 f800 	bl	800dd6c <iprintf>
 8005d6c:	f06f 030f 	mvn.w	r3, #15
 8005d70:	e099      	b.n	8005ea6 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	895b      	ldrh	r3, [r3, #10]
 8005d76:	461a      	mov	r2, r3
 8005d78:	89fb      	ldrh	r3, [r7, #14]
 8005d7a:	1ad2      	subs	r2, r2, r3
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	895b      	ldrh	r3, [r3, #10]
 8005d80:	4619      	mov	r1, r3
 8005d82:	89bb      	ldrh	r3, [r7, #12]
 8005d84:	1acb      	subs	r3, r1, r3
 8005d86:	429a      	cmp	r2, r3
 8005d88:	db05      	blt.n	8005d96 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	895a      	ldrh	r2, [r3, #10]
 8005d8e:	89bb      	ldrh	r3, [r7, #12]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	817b      	strh	r3, [r7, #10]
 8005d94:	e004      	b.n	8005da0 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	895a      	ldrh	r2, [r3, #10]
 8005d9a:	89fb      	ldrh	r3, [r7, #14]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	89fb      	ldrh	r3, [r7, #14]
 8005da6:	18d0      	adds	r0, r2, r3
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	89bb      	ldrh	r3, [r7, #12]
 8005dae:	4413      	add	r3, r2
 8005db0:	897a      	ldrh	r2, [r7, #10]
 8005db2:	4619      	mov	r1, r3
 8005db4:	f007 ffc4 	bl	800dd40 <memcpy>
    offset_to += len;
 8005db8:	89fa      	ldrh	r2, [r7, #14]
 8005dba:	897b      	ldrh	r3, [r7, #10]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8005dc0:	89ba      	ldrh	r2, [r7, #12]
 8005dc2:	897b      	ldrh	r3, [r7, #10]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	895b      	ldrh	r3, [r3, #10]
 8005dcc:	89fa      	ldrh	r2, [r7, #14]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d906      	bls.n	8005de0 <pbuf_copy+0xac>
 8005dd2:	4b37      	ldr	r3, [pc, #220]	; (8005eb0 <pbuf_copy+0x17c>)
 8005dd4:	f240 32cd 	movw	r2, #973	; 0x3cd
 8005dd8:	4938      	ldr	r1, [pc, #224]	; (8005ebc <pbuf_copy+0x188>)
 8005dda:	4837      	ldr	r0, [pc, #220]	; (8005eb8 <pbuf_copy+0x184>)
 8005ddc:	f007 ffc6 	bl	800dd6c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	895b      	ldrh	r3, [r3, #10]
 8005de4:	89ba      	ldrh	r2, [r7, #12]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d906      	bls.n	8005df8 <pbuf_copy+0xc4>
 8005dea:	4b31      	ldr	r3, [pc, #196]	; (8005eb0 <pbuf_copy+0x17c>)
 8005dec:	f240 32ce 	movw	r2, #974	; 0x3ce
 8005df0:	4933      	ldr	r1, [pc, #204]	; (8005ec0 <pbuf_copy+0x18c>)
 8005df2:	4831      	ldr	r0, [pc, #196]	; (8005eb8 <pbuf_copy+0x184>)
 8005df4:	f007 ffba 	bl	800dd6c <iprintf>
    if (offset_from >= p_from->len) {
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	895b      	ldrh	r3, [r3, #10]
 8005dfc:	89ba      	ldrh	r2, [r7, #12]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d304      	bcc.n	8005e0c <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005e02:	2300      	movs	r3, #0
 8005e04:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	895b      	ldrh	r3, [r3, #10]
 8005e10:	89fa      	ldrh	r2, [r7, #14]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d114      	bne.n	8005e40 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005e16:	2300      	movs	r3, #0
 8005e18:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10c      	bne.n	8005e40 <pbuf_copy+0x10c>
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d009      	beq.n	8005e40 <pbuf_copy+0x10c>
 8005e2c:	4b20      	ldr	r3, [pc, #128]	; (8005eb0 <pbuf_copy+0x17c>)
 8005e2e:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8005e32:	4924      	ldr	r1, [pc, #144]	; (8005ec4 <pbuf_copy+0x190>)
 8005e34:	4820      	ldr	r0, [pc, #128]	; (8005eb8 <pbuf_copy+0x184>)
 8005e36:	f007 ff99 	bl	800dd6c <iprintf>
 8005e3a:	f06f 030f 	mvn.w	r3, #15
 8005e3e:	e032      	b.n	8005ea6 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d013      	beq.n	8005e6e <pbuf_copy+0x13a>
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	895a      	ldrh	r2, [r3, #10]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	891b      	ldrh	r3, [r3, #8]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d10d      	bne.n	8005e6e <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d009      	beq.n	8005e6e <pbuf_copy+0x13a>
 8005e5a:	4b15      	ldr	r3, [pc, #84]	; (8005eb0 <pbuf_copy+0x17c>)
 8005e5c:	f240 32dd 	movw	r2, #989	; 0x3dd
 8005e60:	4919      	ldr	r1, [pc, #100]	; (8005ec8 <pbuf_copy+0x194>)
 8005e62:	4815      	ldr	r0, [pc, #84]	; (8005eb8 <pbuf_copy+0x184>)
 8005e64:	f007 ff82 	bl	800dd6c <iprintf>
 8005e68:	f06f 0305 	mvn.w	r3, #5
 8005e6c:	e01b      	b.n	8005ea6 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d013      	beq.n	8005e9c <pbuf_copy+0x168>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	895a      	ldrh	r2, [r3, #10]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	891b      	ldrh	r3, [r3, #8]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d10d      	bne.n	8005e9c <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d009      	beq.n	8005e9c <pbuf_copy+0x168>
 8005e88:	4b09      	ldr	r3, [pc, #36]	; (8005eb0 <pbuf_copy+0x17c>)
 8005e8a:	f240 32e2 	movw	r2, #994	; 0x3e2
 8005e8e:	490e      	ldr	r1, [pc, #56]	; (8005ec8 <pbuf_copy+0x194>)
 8005e90:	4809      	ldr	r0, [pc, #36]	; (8005eb8 <pbuf_copy+0x184>)
 8005e92:	f007 ff6b 	bl	800dd6c <iprintf>
 8005e96:	f06f 0305 	mvn.w	r3, #5
 8005e9a:	e004      	b.n	8005ea6 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f47f af67 	bne.w	8005d72 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	0800f040 	.word	0x0800f040
 8005eb4:	0800f3d0 	.word	0x0800f3d0
 8005eb8:	0800f08c 	.word	0x0800f08c
 8005ebc:	0800f400 	.word	0x0800f400
 8005ec0:	0800f418 	.word	0x0800f418
 8005ec4:	0800f434 	.word	0x0800f434
 8005ec8:	0800f444 	.word	0x0800f444

08005ecc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b088      	sub	sp, #32
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	4611      	mov	r1, r2
 8005ed8:	461a      	mov	r2, r3
 8005eda:	460b      	mov	r3, r1
 8005edc:	80fb      	strh	r3, [r7, #6]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d108      	bne.n	8005efe <pbuf_copy_partial+0x32>
 8005eec:	4b30      	ldr	r3, [pc, #192]	; (8005fb0 <pbuf_copy_partial+0xe4>)
 8005eee:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8005ef2:	4930      	ldr	r1, [pc, #192]	; (8005fb4 <pbuf_copy_partial+0xe8>)
 8005ef4:	4830      	ldr	r0, [pc, #192]	; (8005fb8 <pbuf_copy_partial+0xec>)
 8005ef6:	f007 ff39 	bl	800dd6c <iprintf>
 8005efa:	2300      	movs	r3, #0
 8005efc:	e054      	b.n	8005fa8 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d108      	bne.n	8005f16 <pbuf_copy_partial+0x4a>
 8005f04:	4b2a      	ldr	r3, [pc, #168]	; (8005fb0 <pbuf_copy_partial+0xe4>)
 8005f06:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005f0a:	492c      	ldr	r1, [pc, #176]	; (8005fbc <pbuf_copy_partial+0xf0>)
 8005f0c:	482a      	ldr	r0, [pc, #168]	; (8005fb8 <pbuf_copy_partial+0xec>)
 8005f0e:	f007 ff2d 	bl	800dd6c <iprintf>
 8005f12:	2300      	movs	r3, #0
 8005f14:	e048      	b.n	8005fa8 <pbuf_copy_partial+0xdc>

  left = 0;
 8005f16:	2300      	movs	r3, #0
 8005f18:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <pbuf_copy_partial+0x5a>
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <pbuf_copy_partial+0x5e>
    return 0;
 8005f26:	2300      	movs	r3, #0
 8005f28:	e03e      	b.n	8005fa8 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	61fb      	str	r3, [r7, #28]
 8005f2e:	e034      	b.n	8005f9a <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8005f30:	88bb      	ldrh	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00a      	beq.n	8005f4c <pbuf_copy_partial+0x80>
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	895b      	ldrh	r3, [r3, #10]
 8005f3a:	88ba      	ldrh	r2, [r7, #4]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d305      	bcc.n	8005f4c <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	895b      	ldrh	r3, [r3, #10]
 8005f44:	88ba      	ldrh	r2, [r7, #4]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	80bb      	strh	r3, [r7, #4]
 8005f4a:	e023      	b.n	8005f94 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	895a      	ldrh	r2, [r3, #10]
 8005f50:	88bb      	ldrh	r3, [r7, #4]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005f56:	8b3a      	ldrh	r2, [r7, #24]
 8005f58:	88fb      	ldrh	r3, [r7, #6]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d901      	bls.n	8005f62 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8005f5e:	88fb      	ldrh	r3, [r7, #6]
 8005f60:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8005f62:	8b7b      	ldrh	r3, [r7, #26]
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	18d0      	adds	r0, r2, r3
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	88bb      	ldrh	r3, [r7, #4]
 8005f6e:	4413      	add	r3, r2
 8005f70:	8b3a      	ldrh	r2, [r7, #24]
 8005f72:	4619      	mov	r1, r3
 8005f74:	f007 fee4 	bl	800dd40 <memcpy>
      copied_total += buf_copy_len;
 8005f78:	8afa      	ldrh	r2, [r7, #22]
 8005f7a:	8b3b      	ldrh	r3, [r7, #24]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8005f80:	8b7a      	ldrh	r2, [r7, #26]
 8005f82:	8b3b      	ldrh	r3, [r7, #24]
 8005f84:	4413      	add	r3, r2
 8005f86:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8005f88:	88fa      	ldrh	r2, [r7, #6]
 8005f8a:	8b3b      	ldrh	r3, [r7, #24]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005f90:	2300      	movs	r3, #0
 8005f92:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	61fb      	str	r3, [r7, #28]
 8005f9a:	88fb      	ldrh	r3, [r7, #6]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d002      	beq.n	8005fa6 <pbuf_copy_partial+0xda>
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1c4      	bne.n	8005f30 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8005fa6:	8afb      	ldrh	r3, [r7, #22]
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3720      	adds	r7, #32
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	0800f040 	.word	0x0800f040
 8005fb4:	0800f470 	.word	0x0800f470
 8005fb8:	0800f08c 	.word	0x0800f08c
 8005fbc:	0800f490 	.word	0x0800f490

08005fc0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8005fc4:	bf00      	nop
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bc80      	pop	{r7}
 8005fca:	4770      	bx	lr

08005fcc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005fd0:	f000 ff8a 	bl	8006ee8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005fd4:	4b07      	ldr	r3, [pc, #28]	; (8005ff4 <tcp_tmr+0x28>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	4b05      	ldr	r3, [pc, #20]	; (8005ff4 <tcp_tmr+0x28>)
 8005fde:	701a      	strb	r2, [r3, #0]
 8005fe0:	4b04      	ldr	r3, [pc, #16]	; (8005ff4 <tcp_tmr+0x28>)
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d001      	beq.n	8005ff0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005fec:	f000 fcba 	bl	8006964 <tcp_slowtmr>
  }
}
 8005ff0:	bf00      	nop
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	200000c9 	.word	0x200000c9

08005ff8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	60fb      	str	r3, [r7, #12]
 8006006:	e00a      	b.n	800601e <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	429a      	cmp	r2, r3
 8006010:	d102      	bne.n	8006018 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1f1      	bne.n	8006008 <tcp_remove_listener+0x10>
      }
   }
}
 8006024:	bf00      	nop
 8006026:	bf00      	nop
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	bc80      	pop	{r7}
 800602e:	4770      	bx	lr

08006030 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d105      	bne.n	800604a <tcp_listen_closed+0x1a>
 800603e:	4b13      	ldr	r3, [pc, #76]	; (800608c <tcp_listen_closed+0x5c>)
 8006040:	22c0      	movs	r2, #192	; 0xc0
 8006042:	4913      	ldr	r1, [pc, #76]	; (8006090 <tcp_listen_closed+0x60>)
 8006044:	4813      	ldr	r0, [pc, #76]	; (8006094 <tcp_listen_closed+0x64>)
 8006046:	f007 fe91 	bl	800dd6c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	7d1b      	ldrb	r3, [r3, #20]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d005      	beq.n	800605e <tcp_listen_closed+0x2e>
 8006052:	4b0e      	ldr	r3, [pc, #56]	; (800608c <tcp_listen_closed+0x5c>)
 8006054:	22c1      	movs	r2, #193	; 0xc1
 8006056:	4910      	ldr	r1, [pc, #64]	; (8006098 <tcp_listen_closed+0x68>)
 8006058:	480e      	ldr	r0, [pc, #56]	; (8006094 <tcp_listen_closed+0x64>)
 800605a:	f007 fe87 	bl	800dd6c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800605e:	2301      	movs	r3, #1
 8006060:	60fb      	str	r3, [r7, #12]
 8006062:	e00b      	b.n	800607c <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8006064:	4a0d      	ldr	r2, [pc, #52]	; (800609c <tcp_listen_closed+0x6c>)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6879      	ldr	r1, [r7, #4]
 8006070:	4618      	mov	r0, r3
 8006072:	f7ff ffc1 	bl	8005ff8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	3301      	adds	r3, #1
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2b03      	cmp	r3, #3
 8006080:	d9f0      	bls.n	8006064 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006082:	bf00      	nop
 8006084:	bf00      	nop
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	0800f5c4 	.word	0x0800f5c4
 8006090:	0800f5f4 	.word	0x0800f5f4
 8006094:	0800f600 	.word	0x0800f600
 8006098:	0800f628 	.word	0x0800f628
 800609c:	08010a08 	.word	0x08010a08

080060a0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80060a0:	b5b0      	push	{r4, r5, r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af02      	add	r7, sp, #8
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	460b      	mov	r3, r1
 80060aa:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80060ac:	78fb      	ldrb	r3, [r7, #3]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d075      	beq.n	800619e <tcp_close_shutdown+0xfe>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	7d1b      	ldrb	r3, [r3, #20]
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	d003      	beq.n	80060c2 <tcp_close_shutdown+0x22>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	7d1b      	ldrb	r3, [r3, #20]
 80060be:	2b07      	cmp	r3, #7
 80060c0:	d16d      	bne.n	800619e <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d104      	bne.n	80060d4 <tcp_close_shutdown+0x34>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ce:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80060d2:	d064      	beq.n	800619e <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	7e9b      	ldrb	r3, [r3, #26]
 80060d8:	f003 0310 	and.w	r3, r3, #16
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d106      	bne.n	80060ee <tcp_close_shutdown+0x4e>
 80060e0:	4b5b      	ldr	r3, [pc, #364]	; (8006250 <tcp_close_shutdown+0x1b0>)
 80060e2:	f240 120f 	movw	r2, #271	; 0x10f
 80060e6:	495b      	ldr	r1, [pc, #364]	; (8006254 <tcp_close_shutdown+0x1b4>)
 80060e8:	485b      	ldr	r0, [pc, #364]	; (8006258 <tcp_close_shutdown+0x1b8>)
 80060ea:	f007 fe3f 	bl	800dd6c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80060f6:	687c      	ldr	r4, [r7, #4]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	1d1d      	adds	r5, r3, #4
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	8adb      	ldrh	r3, [r3, #22]
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	8b12      	ldrh	r2, [r2, #24]
 8006104:	9201      	str	r2, [sp, #4]
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	462b      	mov	r3, r5
 800610a:	4622      	mov	r2, r4
 800610c:	f004 fee8 	bl	800aee0 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f001 fa23 	bl	800755c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006116:	4b51      	ldr	r3, [pc, #324]	; (800625c <tcp_close_shutdown+0x1bc>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	429a      	cmp	r2, r3
 800611e:	d105      	bne.n	800612c <tcp_close_shutdown+0x8c>
 8006120:	4b4e      	ldr	r3, [pc, #312]	; (800625c <tcp_close_shutdown+0x1bc>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	4a4d      	ldr	r2, [pc, #308]	; (800625c <tcp_close_shutdown+0x1bc>)
 8006128:	6013      	str	r3, [r2, #0]
 800612a:	e013      	b.n	8006154 <tcp_close_shutdown+0xb4>
 800612c:	4b4b      	ldr	r3, [pc, #300]	; (800625c <tcp_close_shutdown+0x1bc>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	e00c      	b.n	800614e <tcp_close_shutdown+0xae>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	429a      	cmp	r2, r3
 800613c:	d104      	bne.n	8006148 <tcp_close_shutdown+0xa8>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68da      	ldr	r2, [r3, #12]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	60da      	str	r2, [r3, #12]
 8006146:	e005      	b.n	8006154 <tcp_close_shutdown+0xb4>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	60fb      	str	r3, [r7, #12]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1ef      	bne.n	8006134 <tcp_close_shutdown+0x94>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	60da      	str	r2, [r3, #12]
 800615a:	4b41      	ldr	r3, [pc, #260]	; (8006260 <tcp_close_shutdown+0x1c0>)
 800615c:	2201      	movs	r2, #1
 800615e:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	7d1b      	ldrb	r3, [r3, #20]
 8006164:	2b04      	cmp	r3, #4
 8006166:	d10c      	bne.n	8006182 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	220a      	movs	r2, #10
 800616c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800616e:	4b3d      	ldr	r3, [pc, #244]	; (8006264 <tcp_close_shutdown+0x1c4>)
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	60da      	str	r2, [r3, #12]
 8006176:	4a3b      	ldr	r2, [pc, #236]	; (8006264 <tcp_close_shutdown+0x1c4>)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6013      	str	r3, [r2, #0]
 800617c:	f005 f8f8 	bl	800b370 <tcp_timer_needed>
 8006180:	e00b      	b.n	800619a <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8006182:	4b39      	ldr	r3, [pc, #228]	; (8006268 <tcp_close_shutdown+0x1c8>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	429a      	cmp	r2, r3
 800618a:	d102      	bne.n	8006192 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800618c:	f003 fd48 	bl	8009c20 <tcp_trigger_input_pcb_close>
 8006190:	e003      	b.n	800619a <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8006192:	6879      	ldr	r1, [r7, #4]
 8006194:	2001      	movs	r0, #1
 8006196:	f7fe ff63 	bl	8005060 <memp_free>
        }
      }
      return ERR_OK;
 800619a:	2300      	movs	r3, #0
 800619c:	e053      	b.n	8006246 <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	7d1b      	ldrb	r3, [r3, #20]
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d03d      	beq.n	8006222 <tcp_close_shutdown+0x182>
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	dc47      	bgt.n	800623a <tcp_close_shutdown+0x19a>
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d002      	beq.n	80061b4 <tcp_close_shutdown+0x114>
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d02b      	beq.n	800620a <tcp_close_shutdown+0x16a>
 80061b2:	e042      	b.n	800623a <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	8adb      	ldrh	r3, [r3, #22]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d021      	beq.n	8006200 <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80061bc:	4b2b      	ldr	r3, [pc, #172]	; (800626c <tcp_close_shutdown+0x1cc>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d105      	bne.n	80061d2 <tcp_close_shutdown+0x132>
 80061c6:	4b29      	ldr	r3, [pc, #164]	; (800626c <tcp_close_shutdown+0x1cc>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	4a27      	ldr	r2, [pc, #156]	; (800626c <tcp_close_shutdown+0x1cc>)
 80061ce:	6013      	str	r3, [r2, #0]
 80061d0:	e013      	b.n	80061fa <tcp_close_shutdown+0x15a>
 80061d2:	4b26      	ldr	r3, [pc, #152]	; (800626c <tcp_close_shutdown+0x1cc>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	60bb      	str	r3, [r7, #8]
 80061d8:	e00c      	b.n	80061f4 <tcp_close_shutdown+0x154>
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d104      	bne.n	80061ee <tcp_close_shutdown+0x14e>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	68da      	ldr	r2, [r3, #12]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	60da      	str	r2, [r3, #12]
 80061ec:	e005      	b.n	80061fa <tcp_close_shutdown+0x15a>
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	60bb      	str	r3, [r7, #8]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1ef      	bne.n	80061da <tcp_close_shutdown+0x13a>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8006200:	6879      	ldr	r1, [r7, #4]
 8006202:	2001      	movs	r0, #1
 8006204:	f7fe ff2c 	bl	8005060 <memp_free>
    break;
 8006208:	e01c      	b.n	8006244 <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7ff ff10 	bl	8006030 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006210:	6879      	ldr	r1, [r7, #4]
 8006212:	4817      	ldr	r0, [pc, #92]	; (8006270 <tcp_close_shutdown+0x1d0>)
 8006214:	f001 f9e4 	bl	80075e0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006218:	6879      	ldr	r1, [r7, #4]
 800621a:	2002      	movs	r0, #2
 800621c:	f7fe ff20 	bl	8005060 <memp_free>
    break;
 8006220:	e010      	b.n	8006244 <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8006222:	6879      	ldr	r1, [r7, #4]
 8006224:	480d      	ldr	r0, [pc, #52]	; (800625c <tcp_close_shutdown+0x1bc>)
 8006226:	f001 f9db 	bl	80075e0 <tcp_pcb_remove>
 800622a:	4b0d      	ldr	r3, [pc, #52]	; (8006260 <tcp_close_shutdown+0x1c0>)
 800622c:	2201      	movs	r2, #1
 800622e:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8006230:	6879      	ldr	r1, [r7, #4]
 8006232:	2001      	movs	r0, #1
 8006234:	f7fe ff14 	bl	8005060 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8006238:	e004      	b.n	8006244 <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f81a 	bl	8006274 <tcp_close_shutdown_fin>
 8006240:	4603      	mov	r3, r0
 8006242:	e000      	b.n	8006246 <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bdb0      	pop	{r4, r5, r7, pc}
 800624e:	bf00      	nop
 8006250:	0800f5c4 	.word	0x0800f5c4
 8006254:	0800f640 	.word	0x0800f640
 8006258:	0800f600 	.word	0x0800f600
 800625c:	20006cbc 	.word	0x20006cbc
 8006260:	20006cb8 	.word	0x20006cb8
 8006264:	20006ccc 	.word	0x20006ccc
 8006268:	20006cd0 	.word	0x20006cd0
 800626c:	20006cc8 	.word	0x20006cc8
 8006270:	20006cc4 	.word	0x20006cc4

08006274 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d106      	bne.n	8006290 <tcp_close_shutdown_fin+0x1c>
 8006282:	4b2e      	ldr	r3, [pc, #184]	; (800633c <tcp_close_shutdown_fin+0xc8>)
 8006284:	f240 124d 	movw	r2, #333	; 0x14d
 8006288:	492d      	ldr	r1, [pc, #180]	; (8006340 <tcp_close_shutdown_fin+0xcc>)
 800628a:	482e      	ldr	r0, [pc, #184]	; (8006344 <tcp_close_shutdown_fin+0xd0>)
 800628c:	f007 fd6e 	bl	800dd6c <iprintf>

  switch (pcb->state) {
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	7d1b      	ldrb	r3, [r3, #20]
 8006294:	2b07      	cmp	r3, #7
 8006296:	d020      	beq.n	80062da <tcp_close_shutdown_fin+0x66>
 8006298:	2b07      	cmp	r3, #7
 800629a:	dc2b      	bgt.n	80062f4 <tcp_close_shutdown_fin+0x80>
 800629c:	2b03      	cmp	r3, #3
 800629e:	d002      	beq.n	80062a6 <tcp_close_shutdown_fin+0x32>
 80062a0:	2b04      	cmp	r3, #4
 80062a2:	d00d      	beq.n	80062c0 <tcp_close_shutdown_fin+0x4c>
 80062a4:	e026      	b.n	80062f4 <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f003 fd44 	bl	8009d34 <tcp_send_fin>
 80062ac:	4603      	mov	r3, r0
 80062ae:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80062b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d11f      	bne.n	80062f8 <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2205      	movs	r2, #5
 80062bc:	751a      	strb	r2, [r3, #20]
    }
    break;
 80062be:	e01b      	b.n	80062f8 <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f003 fd37 	bl	8009d34 <tcp_send_fin>
 80062c6:	4603      	mov	r3, r0
 80062c8:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80062ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d114      	bne.n	80062fc <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2205      	movs	r2, #5
 80062d6:	751a      	strb	r2, [r3, #20]
    }
    break;
 80062d8:	e010      	b.n	80062fc <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f003 fd2a 	bl	8009d34 <tcp_send_fin>
 80062e0:	4603      	mov	r3, r0
 80062e2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80062e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d109      	bne.n	8006300 <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2209      	movs	r2, #9
 80062f0:	751a      	strb	r2, [r3, #20]
    }
    break;
 80062f2:	e005      	b.n	8006300 <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 80062f4:	2300      	movs	r3, #0
 80062f6:	e01c      	b.n	8006332 <tcp_close_shutdown_fin+0xbe>
    break;
 80062f8:	bf00      	nop
 80062fa:	e002      	b.n	8006302 <tcp_close_shutdown_fin+0x8e>
    break;
 80062fc:	bf00      	nop
 80062fe:	e000      	b.n	8006302 <tcp_close_shutdown_fin+0x8e>
    break;
 8006300:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d103      	bne.n	8006312 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f004 fb64 	bl	800a9d8 <tcp_output>
 8006310:	e00d      	b.n	800632e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800631a:	d108      	bne.n	800632e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	7e9b      	ldrb	r3, [r3, #26]
 8006320:	f043 0308 	orr.w	r3, r3, #8
 8006324:	b2da      	uxtb	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800632a:	2300      	movs	r3, #0
 800632c:	e001      	b.n	8006332 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800632e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	0800f5c4 	.word	0x0800f5c4
 8006340:	0800f5f4 	.word	0x0800f5f4
 8006344:	0800f600 	.word	0x0800f600

08006348 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	7d1b      	ldrb	r3, [r3, #20]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d006      	beq.n	8006366 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	7e9b      	ldrb	r3, [r3, #26]
 800635c:	f043 0310 	orr.w	r3, r3, #16
 8006360:	b2da      	uxtb	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006366:	2101      	movs	r1, #1
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f7ff fe99 	bl	80060a0 <tcp_close_shutdown>
 800636e:	4603      	mov	r3, r0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b08c      	sub	sp, #48	; 0x30
 800637c:	af02      	add	r7, sp, #8
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	7d1b      	ldrb	r3, [r3, #20]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d106      	bne.n	8006398 <tcp_abandon+0x20>
 800638a:	4b4d      	ldr	r3, [pc, #308]	; (80064c0 <tcp_abandon+0x148>)
 800638c:	f240 12df 	movw	r2, #479	; 0x1df
 8006390:	494c      	ldr	r1, [pc, #304]	; (80064c4 <tcp_abandon+0x14c>)
 8006392:	484d      	ldr	r0, [pc, #308]	; (80064c8 <tcp_abandon+0x150>)
 8006394:	f007 fcea 	bl	800dd6c <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	7d1b      	ldrb	r3, [r3, #20]
 800639c:	2b0a      	cmp	r3, #10
 800639e:	d108      	bne.n	80063b2 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80063a0:	6879      	ldr	r1, [r7, #4]
 80063a2:	484a      	ldr	r0, [pc, #296]	; (80064cc <tcp_abandon+0x154>)
 80063a4:	f001 f91c 	bl	80075e0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80063a8:	6879      	ldr	r1, [r7, #4]
 80063aa:	2001      	movs	r0, #1
 80063ac:	f7fe fe58 	bl	8005060 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 80063b0:	e081      	b.n	80064b6 <tcp_abandon+0x13e>
    int send_rst = 0;
 80063b2:	2300      	movs	r3, #0
 80063b4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80063b6:	2300      	movs	r3, #0
 80063b8:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063be:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063cc:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	7d1b      	ldrb	r3, [r3, #20]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d126      	bne.n	800642a <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	8adb      	ldrh	r3, [r3, #22]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d02e      	beq.n	8006442 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80063e4:	4b3a      	ldr	r3, [pc, #232]	; (80064d0 <tcp_abandon+0x158>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d105      	bne.n	80063fa <tcp_abandon+0x82>
 80063ee:	4b38      	ldr	r3, [pc, #224]	; (80064d0 <tcp_abandon+0x158>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	4a36      	ldr	r2, [pc, #216]	; (80064d0 <tcp_abandon+0x158>)
 80063f6:	6013      	str	r3, [r2, #0]
 80063f8:	e013      	b.n	8006422 <tcp_abandon+0xaa>
 80063fa:	4b35      	ldr	r3, [pc, #212]	; (80064d0 <tcp_abandon+0x158>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	61fb      	str	r3, [r7, #28]
 8006400:	e00c      	b.n	800641c <tcp_abandon+0xa4>
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	429a      	cmp	r2, r3
 800640a:	d104      	bne.n	8006416 <tcp_abandon+0x9e>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	68da      	ldr	r2, [r3, #12]
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	60da      	str	r2, [r3, #12]
 8006414:	e005      	b.n	8006422 <tcp_abandon+0xaa>
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	61fb      	str	r3, [r7, #28]
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1ef      	bne.n	8006402 <tcp_abandon+0x8a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	60da      	str	r2, [r3, #12]
 8006428:	e00b      	b.n	8006442 <tcp_abandon+0xca>
      send_rst = reset;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	8adb      	ldrh	r3, [r3, #22]
 8006432:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006434:	6879      	ldr	r1, [r7, #4]
 8006436:	4827      	ldr	r0, [pc, #156]	; (80064d4 <tcp_abandon+0x15c>)
 8006438:	f001 f8d2 	bl	80075e0 <tcp_pcb_remove>
 800643c:	4b26      	ldr	r3, [pc, #152]	; (80064d8 <tcp_abandon+0x160>)
 800643e:	2201      	movs	r2, #1
 8006440:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006446:	2b00      	cmp	r3, #0
 8006448:	d004      	beq.n	8006454 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800644e:	4618      	mov	r0, r3
 8006450:	f000 fe17 	bl	8007082 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006458:	2b00      	cmp	r3, #0
 800645a:	d004      	beq.n	8006466 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006460:	4618      	mov	r0, r3
 8006462:	f000 fe0e 	bl	8007082 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800646a:	2b00      	cmp	r3, #0
 800646c:	d004      	beq.n	8006478 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006472:	4618      	mov	r0, r3
 8006474:	f000 fe05 	bl	8007082 <tcp_segs_free>
    if (send_rst) {
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00c      	beq.n	8006498 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	1d19      	adds	r1, r3, #4
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	8b1b      	ldrh	r3, [r3, #24]
 8006488:	9301      	str	r3, [sp, #4]
 800648a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	460b      	mov	r3, r1
 8006490:	6979      	ldr	r1, [r7, #20]
 8006492:	69b8      	ldr	r0, [r7, #24]
 8006494:	f004 fd24 	bl	800aee0 <tcp_rst>
    last_state = pcb->state;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	7d1b      	ldrb	r3, [r3, #20]
 800649c:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800649e:	6879      	ldr	r1, [r7, #4]
 80064a0:	2001      	movs	r0, #1
 80064a2:	f7fe fddd 	bl	8005060 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d004      	beq.n	80064b6 <tcp_abandon+0x13e>
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	f06f 010c 	mvn.w	r1, #12
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	4798      	blx	r3
}
 80064b6:	bf00      	nop
 80064b8:	3728      	adds	r7, #40	; 0x28
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	0800f5c4 	.word	0x0800f5c4
 80064c4:	0800f65c 	.word	0x0800f65c
 80064c8:	0800f600 	.word	0x0800f600
 80064cc:	20006ccc 	.word	0x20006ccc
 80064d0:	20006cc8 	.word	0x20006cc8
 80064d4:	20006cbc 	.word	0x20006cbc
 80064d8:	20006cb8 	.word	0x20006cb8

080064dc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80064e4:	2101      	movs	r1, #1
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7ff ff46 	bl	8006378 <tcp_abandon>
}
 80064ec:	bf00      	nop
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b088      	sub	sp, #32
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	4613      	mov	r3, r2
 8006500:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8006502:	2304      	movs	r3, #4
 8006504:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800650c:	4b3c      	ldr	r3, [pc, #240]	; (8006600 <tcp_bind+0x10c>)
 800650e:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d002      	beq.n	800651c <tcp_bind+0x28>
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d102      	bne.n	8006522 <tcp_bind+0x2e>
    return ERR_VAL;
 800651c:	f06f 0305 	mvn.w	r3, #5
 8006520:	e06a      	b.n	80065f8 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	7d1b      	ldrb	r3, [r3, #20]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d009      	beq.n	800653e <tcp_bind+0x4a>
 800652a:	4b36      	ldr	r3, [pc, #216]	; (8006604 <tcp_bind+0x110>)
 800652c:	f44f 7211 	mov.w	r2, #580	; 0x244
 8006530:	4935      	ldr	r1, [pc, #212]	; (8006608 <tcp_bind+0x114>)
 8006532:	4836      	ldr	r0, [pc, #216]	; (800660c <tcp_bind+0x118>)
 8006534:	f007 fc1a 	bl	800dd6c <iprintf>
 8006538:	f06f 0305 	mvn.w	r3, #5
 800653c:	e05c      	b.n	80065f8 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 800653e:	88fb      	ldrh	r3, [r7, #6]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d109      	bne.n	8006558 <tcp_bind+0x64>
    port = tcp_new_port();
 8006544:	f000 f9ca 	bl	80068dc <tcp_new_port>
 8006548:	4603      	mov	r3, r0
 800654a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800654c:	88fb      	ldrh	r3, [r7, #6]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d135      	bne.n	80065be <tcp_bind+0xca>
      return ERR_BUF;
 8006552:	f06f 0301 	mvn.w	r3, #1
 8006556:	e04f      	b.n	80065f8 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8006558:	2300      	movs	r3, #0
 800655a:	61fb      	str	r3, [r7, #28]
 800655c:	e02b      	b.n	80065b6 <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800655e:	4a2c      	ldr	r2, [pc, #176]	; (8006610 <tcp_bind+0x11c>)
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	61bb      	str	r3, [r7, #24]
 800656a:	e01e      	b.n	80065aa <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	8adb      	ldrh	r3, [r3, #22]
 8006570:	88fa      	ldrh	r2, [r7, #6]
 8006572:	429a      	cmp	r2, r3
 8006574:	d116      	bne.n	80065a4 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8006576:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006578:	2b00      	cmp	r3, #0
 800657a:	d010      	beq.n	800659e <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00c      	beq.n	800659e <tcp_bind+0xaa>
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d009      	beq.n	800659e <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d005      	beq.n	800659e <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800659a:	429a      	cmp	r2, r3
 800659c:	d102      	bne.n	80065a4 <tcp_bind+0xb0>
              return ERR_USE;
 800659e:	f06f 0307 	mvn.w	r3, #7
 80065a2:	e029      	b.n	80065f8 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	61bb      	str	r3, [r7, #24]
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1dd      	bne.n	800656c <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	3301      	adds	r3, #1
 80065b4:	61fb      	str	r3, [r7, #28]
 80065b6:	69fa      	ldr	r2, [r7, #28]
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	dbcf      	blt.n	800655e <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00c      	beq.n	80065de <tcp_bind+0xea>
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d008      	beq.n	80065de <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d002      	beq.n	80065d8 <tcp_bind+0xe4>
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	e000      	b.n	80065da <tcp_bind+0xe6>
 80065d8:	2300      	movs	r3, #0
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	88fa      	ldrh	r2, [r7, #6]
 80065e2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80065e4:	4b0b      	ldr	r3, [pc, #44]	; (8006614 <tcp_bind+0x120>)
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	60da      	str	r2, [r3, #12]
 80065ec:	4a09      	ldr	r2, [pc, #36]	; (8006614 <tcp_bind+0x120>)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6013      	str	r3, [r2, #0]
 80065f2:	f004 febd 	bl	800b370 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3720      	adds	r7, #32
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	08010a30 	.word	0x08010a30
 8006604:	0800f5c4 	.word	0x0800f5c4
 8006608:	0800f690 	.word	0x0800f690
 800660c:	0800f600 	.word	0x0800f600
 8006610:	08010a08 	.word	0x08010a08
 8006614:	20006cc8 	.word	0x20006cc8

08006618 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	4613      	mov	r3, r2
 8006624:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 8006626:	68b8      	ldr	r0, [r7, #8]
 8006628:	f7ff ff58 	bl	80064dc <tcp_abort>

  return ERR_ABRT;
 800662c:	f06f 030c 	mvn.w	r3, #12
}
 8006630:	4618      	mov	r0, r3
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	460b      	mov	r3, r1
 8006642:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8006644:	78fb      	ldrb	r3, [r7, #3]
 8006646:	2200      	movs	r2, #0
 8006648:	4619      	mov	r1, r3
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f806 	bl	800665c <tcp_listen_with_backlog_and_err>
 8006650:	4603      	mov	r3, r0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
	...

0800665c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b088      	sub	sp, #32
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	460b      	mov	r3, r1
 8006666:	607a      	str	r2, [r7, #4]
 8006668:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800666a:	2300      	movs	r3, #0
 800666c:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	7d1b      	ldrb	r3, [r3, #20]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d009      	beq.n	800668a <tcp_listen_with_backlog_and_err+0x2e>
 8006676:	4b3f      	ldr	r3, [pc, #252]	; (8006774 <tcp_listen_with_backlog_and_err+0x118>)
 8006678:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 800667c:	493e      	ldr	r1, [pc, #248]	; (8006778 <tcp_listen_with_backlog_and_err+0x11c>)
 800667e:	483f      	ldr	r0, [pc, #252]	; (800677c <tcp_listen_with_backlog_and_err+0x120>)
 8006680:	f007 fb74 	bl	800dd6c <iprintf>
 8006684:	23f1      	movs	r3, #241	; 0xf1
 8006686:	76fb      	strb	r3, [r7, #27]
 8006688:	e069      	b.n	800675e <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	7d1b      	ldrb	r3, [r3, #20]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d104      	bne.n	800669c <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8006696:	23f7      	movs	r3, #247	; 0xf7
 8006698:	76fb      	strb	r3, [r7, #27]
    goto done;
 800669a:	e060      	b.n	800675e <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800669c:	2002      	movs	r0, #2
 800669e:	f7fe fc93 	bl	8004fc8 <memp_malloc>
 80066a2:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d102      	bne.n	80066b0 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 80066aa:	23ff      	movs	r3, #255	; 0xff
 80066ac:	76fb      	strb	r3, [r7, #27]
    goto done;
 80066ae:	e056      	b.n	800675e <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	691a      	ldr	r2, [r3, #16]
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	8ada      	ldrh	r2, [r3, #22]
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	2201      	movs	r2, #1
 80066c4:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	7d5a      	ldrb	r2, [r3, #21]
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	7a1a      	ldrb	r2, [r3, #8]
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	7a9a      	ldrb	r2, [r3, #10]
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	7a5a      	ldrb	r2, [r3, #9]
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	8adb      	ldrh	r3, [r3, #22]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d021      	beq.n	800673a <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80066f6:	4b22      	ldr	r3, [pc, #136]	; (8006780 <tcp_listen_with_backlog_and_err+0x124>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d105      	bne.n	800670c <tcp_listen_with_backlog_and_err+0xb0>
 8006700:	4b1f      	ldr	r3, [pc, #124]	; (8006780 <tcp_listen_with_backlog_and_err+0x124>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	4a1e      	ldr	r2, [pc, #120]	; (8006780 <tcp_listen_with_backlog_and_err+0x124>)
 8006708:	6013      	str	r3, [r2, #0]
 800670a:	e013      	b.n	8006734 <tcp_listen_with_backlog_and_err+0xd8>
 800670c:	4b1c      	ldr	r3, [pc, #112]	; (8006780 <tcp_listen_with_backlog_and_err+0x124>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	617b      	str	r3, [r7, #20]
 8006712:	e00c      	b.n	800672e <tcp_listen_with_backlog_and_err+0xd2>
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	429a      	cmp	r2, r3
 800671c:	d104      	bne.n	8006728 <tcp_listen_with_backlog_and_err+0xcc>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	68da      	ldr	r2, [r3, #12]
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	60da      	str	r2, [r3, #12]
 8006726:	e005      	b.n	8006734 <tcp_listen_with_backlog_and_err+0xd8>
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	617b      	str	r3, [r7, #20]
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1ef      	bne.n	8006714 <tcp_listen_with_backlog_and_err+0xb8>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 800673a:	68f9      	ldr	r1, [r7, #12]
 800673c:	2001      	movs	r0, #1
 800673e:	f7fe fc8f 	bl	8005060 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	4a0f      	ldr	r2, [pc, #60]	; (8006784 <tcp_listen_with_backlog_and_err+0x128>)
 8006746:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8006748:	4b0f      	ldr	r3, [pc, #60]	; (8006788 <tcp_listen_with_backlog_and_err+0x12c>)
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	60da      	str	r2, [r3, #12]
 8006750:	4a0d      	ldr	r2, [pc, #52]	; (8006788 <tcp_listen_with_backlog_and_err+0x12c>)
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	6013      	str	r3, [r2, #0]
 8006756:	f004 fe0b 	bl	800b370 <tcp_timer_needed>
  res = ERR_OK;
 800675a:	2300      	movs	r3, #0
 800675c:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d002      	beq.n	800676a <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	7efa      	ldrb	r2, [r7, #27]
 8006768:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800676a:	69fb      	ldr	r3, [r7, #28]
}
 800676c:	4618      	mov	r0, r3
 800676e:	3720      	adds	r7, #32
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	0800f5c4 	.word	0x0800f5c4
 8006778:	0800f6b8 	.word	0x0800f6b8
 800677c:	0800f600 	.word	0x0800f600
 8006780:	20006cc8 	.word	0x20006cc8
 8006784:	08006619 	.word	0x08006619
 8006788:	20006cc4 	.word	0x20006cc4

0800678c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800679c:	4413      	add	r3, r2
 800679e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80067a8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80067ac:	bf28      	it	cs
 80067ae:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80067b2:	b292      	uxth	r2, r2
 80067b4:	4413      	add	r3, r2
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	db08      	blt.n	80067d0 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	e020      	b.n	8006812 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	dd03      	ble.n	80067e6 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067e4:	e014      	b.n	8006810 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067f8:	d306      	bcc.n	8006808 <tcp_update_rcv_ann_wnd+0x7c>
 80067fa:	4b08      	ldr	r3, [pc, #32]	; (800681c <tcp_update_rcv_ann_wnd+0x90>)
 80067fc:	f44f 7242 	mov.w	r2, #776	; 0x308
 8006800:	4907      	ldr	r1, [pc, #28]	; (8006820 <tcp_update_rcv_ann_wnd+0x94>)
 8006802:	4808      	ldr	r0, [pc, #32]	; (8006824 <tcp_update_rcv_ann_wnd+0x98>)
 8006804:	f007 fab2 	bl	800dd6c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	b29a      	uxth	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006810:	2300      	movs	r3, #0
  }
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	0800f5c4 	.word	0x0800f5c4
 8006820:	0800f6dc 	.word	0x0800f6dc
 8006824:	0800f600 	.word	0x0800f600

08006828 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	460b      	mov	r3, r1
 8006832:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	7d1b      	ldrb	r3, [r3, #20]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d106      	bne.n	800684a <tcp_recved+0x22>
 800683c:	4b23      	ldr	r3, [pc, #140]	; (80068cc <tcp_recved+0xa4>)
 800683e:	f240 321f 	movw	r2, #799	; 0x31f
 8006842:	4923      	ldr	r1, [pc, #140]	; (80068d0 <tcp_recved+0xa8>)
 8006844:	4823      	ldr	r0, [pc, #140]	; (80068d4 <tcp_recved+0xac>)
 8006846:	f007 fa91 	bl	800dd6c <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800684e:	887b      	ldrh	r3, [r7, #2]
 8006850:	4413      	add	r3, r2
 8006852:	b29a      	uxth	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800685c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006860:	d904      	bls.n	800686c <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006868:	851a      	strh	r2, [r3, #40]	; 0x28
 800686a:	e017      	b.n	800689c <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006870:	2b00      	cmp	r3, #0
 8006872:	d113      	bne.n	800689c <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	7d1b      	ldrb	r3, [r3, #20]
 8006878:	2b07      	cmp	r3, #7
 800687a:	d003      	beq.n	8006884 <tcp_recved+0x5c>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	7d1b      	ldrb	r3, [r3, #20]
 8006880:	2b09      	cmp	r3, #9
 8006882:	d104      	bne.n	800688e <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800688a:	851a      	strh	r2, [r3, #40]	; 0x28
 800688c:	e006      	b.n	800689c <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800688e:	4b0f      	ldr	r3, [pc, #60]	; (80068cc <tcp_recved+0xa4>)
 8006890:	f240 322d 	movw	r2, #813	; 0x32d
 8006894:	4910      	ldr	r1, [pc, #64]	; (80068d8 <tcp_recved+0xb0>)
 8006896:	480f      	ldr	r0, [pc, #60]	; (80068d4 <tcp_recved+0xac>)
 8006898:	f007 fa68 	bl	800dd6c <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f7ff ff75 	bl	800678c <tcp_update_rcv_ann_wnd>
 80068a2:	4603      	mov	r3, r0
 80068a4:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80068ac:	db09      	blt.n	80068c2 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	7e9b      	ldrb	r3, [r3, #26]
 80068b2:	f043 0302 	orr.w	r3, r3, #2
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f004 f88b 	bl	800a9d8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80068c2:	bf00      	nop
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	0800f5c4 	.word	0x0800f5c4
 80068d0:	0800f6f8 	.word	0x0800f6f8
 80068d4:	0800f600 	.word	0x0800f600
 80068d8:	0800f720 	.word	0x0800f720

080068dc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80068e2:	2300      	movs	r3, #0
 80068e4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 80068e6:	4b1d      	ldr	r3, [pc, #116]	; (800695c <tcp_new_port+0x80>)
 80068e8:	881b      	ldrh	r3, [r3, #0]
 80068ea:	1c5a      	adds	r2, r3, #1
 80068ec:	b291      	uxth	r1, r2
 80068ee:	4a1b      	ldr	r2, [pc, #108]	; (800695c <tcp_new_port+0x80>)
 80068f0:	8011      	strh	r1, [r2, #0]
 80068f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d103      	bne.n	8006902 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80068fa:	4b18      	ldr	r3, [pc, #96]	; (800695c <tcp_new_port+0x80>)
 80068fc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8006900:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006902:	2300      	movs	r3, #0
 8006904:	71fb      	strb	r3, [r7, #7]
 8006906:	e01e      	b.n	8006946 <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006908:	79fb      	ldrb	r3, [r7, #7]
 800690a:	4a15      	ldr	r2, [pc, #84]	; (8006960 <tcp_new_port+0x84>)
 800690c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	603b      	str	r3, [r7, #0]
 8006914:	e011      	b.n	800693a <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	8ada      	ldrh	r2, [r3, #22]
 800691a:	4b10      	ldr	r3, [pc, #64]	; (800695c <tcp_new_port+0x80>)
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	429a      	cmp	r2, r3
 8006920:	d108      	bne.n	8006934 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8006922:	88bb      	ldrh	r3, [r7, #4]
 8006924:	3301      	adds	r3, #1
 8006926:	80bb      	strh	r3, [r7, #4]
 8006928:	88bb      	ldrh	r3, [r7, #4]
 800692a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800692e:	d3da      	bcc.n	80068e6 <tcp_new_port+0xa>
          return 0;
 8006930:	2300      	movs	r3, #0
 8006932:	e00d      	b.n	8006950 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	603b      	str	r3, [r7, #0]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1ea      	bne.n	8006916 <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006940:	79fb      	ldrb	r3, [r7, #7]
 8006942:	3301      	adds	r3, #1
 8006944:	71fb      	strb	r3, [r7, #7]
 8006946:	79fb      	ldrb	r3, [r7, #7]
 8006948:	2b03      	cmp	r3, #3
 800694a:	d9dd      	bls.n	8006908 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800694c:	4b03      	ldr	r3, [pc, #12]	; (800695c <tcp_new_port+0x80>)
 800694e:	881b      	ldrh	r3, [r3, #0]
}
 8006950:	4618      	mov	r0, r3
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	bc80      	pop	{r7}
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	2000000a 	.word	0x2000000a
 8006960:	08010a08 	.word	0x08010a08

08006964 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006964:	b5b0      	push	{r4, r5, r7, lr}
 8006966:	b08c      	sub	sp, #48	; 0x30
 8006968:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800696a:	2300      	movs	r3, #0
 800696c:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800696e:	4b97      	ldr	r3, [pc, #604]	; (8006bcc <tcp_slowtmr+0x268>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3301      	adds	r3, #1
 8006974:	4a95      	ldr	r2, [pc, #596]	; (8006bcc <tcp_slowtmr+0x268>)
 8006976:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006978:	4b95      	ldr	r3, [pc, #596]	; (8006bd0 <tcp_slowtmr+0x26c>)
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	3301      	adds	r3, #1
 800697e:	b2da      	uxtb	r2, r3
 8006980:	4b93      	ldr	r3, [pc, #588]	; (8006bd0 <tcp_slowtmr+0x26c>)
 8006982:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8006984:	2300      	movs	r3, #0
 8006986:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8006988:	4b92      	ldr	r3, [pc, #584]	; (8006bd4 <tcp_slowtmr+0x270>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800698e:	e227      	b.n	8006de0 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006992:	7d1b      	ldrb	r3, [r3, #20]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d106      	bne.n	80069a6 <tcp_slowtmr+0x42>
 8006998:	4b8f      	ldr	r3, [pc, #572]	; (8006bd8 <tcp_slowtmr+0x274>)
 800699a:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800699e:	498f      	ldr	r1, [pc, #572]	; (8006bdc <tcp_slowtmr+0x278>)
 80069a0:	488f      	ldr	r0, [pc, #572]	; (8006be0 <tcp_slowtmr+0x27c>)
 80069a2:	f007 f9e3 	bl	800dd6c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	7d1b      	ldrb	r3, [r3, #20]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d106      	bne.n	80069bc <tcp_slowtmr+0x58>
 80069ae:	4b8a      	ldr	r3, [pc, #552]	; (8006bd8 <tcp_slowtmr+0x274>)
 80069b0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80069b4:	498b      	ldr	r1, [pc, #556]	; (8006be4 <tcp_slowtmr+0x280>)
 80069b6:	488a      	ldr	r0, [pc, #552]	; (8006be0 <tcp_slowtmr+0x27c>)
 80069b8:	f007 f9d8 	bl	800dd6c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80069bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069be:	7d1b      	ldrb	r3, [r3, #20]
 80069c0:	2b0a      	cmp	r3, #10
 80069c2:	d106      	bne.n	80069d2 <tcp_slowtmr+0x6e>
 80069c4:	4b84      	ldr	r3, [pc, #528]	; (8006bd8 <tcp_slowtmr+0x274>)
 80069c6:	f240 32f2 	movw	r2, #1010	; 0x3f2
 80069ca:	4987      	ldr	r1, [pc, #540]	; (8006be8 <tcp_slowtmr+0x284>)
 80069cc:	4884      	ldr	r0, [pc, #528]	; (8006be0 <tcp_slowtmr+0x27c>)
 80069ce:	f007 f9cd 	bl	800dd6c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	7f5a      	ldrb	r2, [r3, #29]
 80069d6:	4b7e      	ldr	r3, [pc, #504]	; (8006bd0 <tcp_slowtmr+0x26c>)
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d103      	bne.n	80069e6 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 80069e4:	e1fc      	b.n	8006de0 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 80069e6:	4b7a      	ldr	r3, [pc, #488]	; (8006bd0 <tcp_slowtmr+0x26c>)
 80069e8:	781a      	ldrb	r2, [r3, #0]
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 80069ee:	2300      	movs	r3, #0
 80069f0:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 80069f2:	2300      	movs	r3, #0
 80069f4:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	7d1b      	ldrb	r3, [r3, #20]
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d108      	bne.n	8006a10 <tcp_slowtmr+0xac>
 80069fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a04:	2b05      	cmp	r3, #5
 8006a06:	d903      	bls.n	8006a10 <tcp_slowtmr+0xac>
      ++pcb_remove;
 8006a08:	7ffb      	ldrb	r3, [r7, #31]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	77fb      	strb	r3, [r7, #31]
 8006a0e:	e0a2      	b.n	8006b56 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a16:	2b0b      	cmp	r3, #11
 8006a18:	d903      	bls.n	8006a22 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8006a1a:	7ffb      	ldrb	r3, [r7, #31]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	77fb      	strb	r3, [r7, #31]
 8006a20:	e099      	b.n	8006b56 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8006a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a24:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d032      	beq.n	8006a92 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8006a32:	3b01      	subs	r3, #1
 8006a34:	4a6d      	ldr	r2, [pc, #436]	; (8006bec <tcp_slowtmr+0x288>)
 8006a36:	5cd3      	ldrb	r3, [r2, r3]
 8006a38:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8006a40:	7cfa      	ldrb	r2, [r7, #19]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d907      	bls.n	8006a56 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 8006a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a48:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	b2da      	uxtb	r2, r3
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 8006a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a58:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8006a5c:	7cfa      	ldrb	r2, [r7, #19]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d879      	bhi.n	8006b56 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8006a62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a64:	f004 fbc3 	bl	800b1ee <tcp_zero_window_probe>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d173      	bne.n	8006b56 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8006a7c:	2b06      	cmp	r3, #6
 8006a7e:	d86a      	bhi.n	8006b56 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8006a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a82:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8006a86:	3301      	adds	r3, #1
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8006a90:	e061      	b.n	8006b56 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 8006a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a94:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	db08      	blt.n	8006aae <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	b21a      	sxth	r2, r3
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8006aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d04f      	beq.n	8006b56 <tcp_slowtmr+0x1f2>
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab8:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8006abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abe:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	db47      	blt.n	8006b56 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac8:	7d1b      	ldrb	r3, [r3, #20]
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d018      	beq.n	8006b00 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8006ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ad4:	2b0c      	cmp	r3, #12
 8006ad6:	bf28      	it	cs
 8006ad8:	230c      	movcs	r3, #12
 8006ada:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006ae2:	10db      	asrs	r3, r3, #3
 8006ae4:	b21b      	sxth	r3, r3
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006aee:	4413      	add	r3, r2
 8006af0:	7dfa      	ldrb	r2, [r7, #23]
 8006af2:	493f      	ldr	r1, [pc, #252]	; (8006bf0 <tcp_slowtmr+0x28c>)
 8006af4:	5c8a      	ldrb	r2, [r1, r2]
 8006af6:	4093      	lsls	r3, r2
 8006af8:	b21a      	sxth	r2, r3
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8006b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b02:	2200      	movs	r2, #0
 8006b04:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b08:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006b12:	4293      	cmp	r3, r2
 8006b14:	bf28      	it	cs
 8006b16:	4613      	movcs	r3, r2
 8006b18:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8006b1a:	8abb      	ldrh	r3, [r7, #20]
 8006b1c:	085b      	lsrs	r3, r3, #1
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b28:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b30:	005b      	lsls	r3, r3, #1
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d206      	bcs.n	8006b46 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8006b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b3c:	005b      	lsls	r3, r3, #1
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b42:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 8006b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b48:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8006b50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b52:	f004 fa3b 	bl	800afcc <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b58:	7d1b      	ldrb	r3, [r3, #20]
 8006b5a:	2b06      	cmp	r3, #6
 8006b5c:	d10f      	bne.n	8006b7e <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	7e9b      	ldrb	r3, [r3, #26]
 8006b62:	f003 0310 	and.w	r3, r3, #16
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d009      	beq.n	8006b7e <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006b6a:	4b18      	ldr	r3, [pc, #96]	; (8006bcc <tcp_slowtmr+0x268>)
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	2b28      	cmp	r3, #40	; 0x28
 8006b76:	d902      	bls.n	8006b7e <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8006b78:	7ffb      	ldrb	r3, [r7, #31]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	7a1b      	ldrb	r3, [r3, #8]
 8006b82:	f003 0308 	and.w	r3, r3, #8
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d05d      	beq.n	8006c46 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006b8e:	2b04      	cmp	r3, #4
 8006b90:	d003      	beq.n	8006b9a <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b94:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8006b96:	2b07      	cmp	r3, #7
 8006b98:	d155      	bne.n	8006c46 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006b9a:	4b0c      	ldr	r3, [pc, #48]	; (8006bcc <tcp_slowtmr+0x268>)
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006baa:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8006bae:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8006bb2:	4910      	ldr	r1, [pc, #64]	; (8006bf4 <tcp_slowtmr+0x290>)
 8006bb4:	fba1 1303 	umull	r1, r3, r1, r3
 8006bb8:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d91c      	bls.n	8006bf8 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8006bbe:	7ffb      	ldrb	r3, [r7, #31]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8006bc4:	7fbb      	ldrb	r3, [r7, #30]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	77bb      	strb	r3, [r7, #30]
 8006bca:	e03c      	b.n	8006c46 <tcp_slowtmr+0x2e2>
 8006bcc:	20006cc0 	.word	0x20006cc0
 8006bd0:	200000ca 	.word	0x200000ca
 8006bd4:	20006cbc 	.word	0x20006cbc
 8006bd8:	0800f5c4 	.word	0x0800f5c4
 8006bdc:	0800f774 	.word	0x0800f774
 8006be0:	0800f600 	.word	0x0800f600
 8006be4:	0800f7a0 	.word	0x0800f7a0
 8006be8:	0800f7cc 	.word	0x0800f7cc
 8006bec:	08010a00 	.word	0x08010a00
 8006bf0:	080109f0 	.word	0x080109f0
 8006bf4:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006bf8:	4b97      	ldr	r3, [pc, #604]	; (8006e58 <tcp_slowtmr+0x4f4>)
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	6a1b      	ldr	r3, [r3, #32]
 8006c00:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c04:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8006c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8006c0e:	4618      	mov	r0, r3
 8006c10:	4b92      	ldr	r3, [pc, #584]	; (8006e5c <tcp_slowtmr+0x4f8>)
 8006c12:	fb03 f300 	mul.w	r3, r3, r0
 8006c16:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8006c18:	4991      	ldr	r1, [pc, #580]	; (8006e60 <tcp_slowtmr+0x4fc>)
 8006c1a:	fba1 1303 	umull	r1, r3, r1, r3
 8006c1e:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d910      	bls.n	8006c46 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8006c24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c26:	f004 faa5 	bl	800b174 <tcp_keepalive>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8006c2e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d107      	bne.n	8006c46 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 8006c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c38:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	b2da      	uxtb	r2, r3
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c42:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d016      	beq.n	8006c7c <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8006c4e:	4b82      	ldr	r3, [pc, #520]	; (8006e58 <tcp_slowtmr+0x4f4>)
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	1ad2      	subs	r2, r2, r3
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006c5e:	4619      	mov	r1, r3
 8006c60:	460b      	mov	r3, r1
 8006c62:	005b      	lsls	r3, r3, #1
 8006c64:	440b      	add	r3, r1
 8006c66:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d307      	bcc.n	8006c7c <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c70:	4618      	mov	r0, r3
 8006c72:	f000 fa06 	bl	8007082 <tcp_segs_free>
      pcb->ooseq = NULL;
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c78:	2200      	movs	r2, #0
 8006c7a:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7e:	7d1b      	ldrb	r3, [r3, #20]
 8006c80:	2b03      	cmp	r3, #3
 8006c82:	d109      	bne.n	8006c98 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006c84:	4b74      	ldr	r3, [pc, #464]	; (8006e58 <tcp_slowtmr+0x4f4>)
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	6a1b      	ldr	r3, [r3, #32]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	2b28      	cmp	r3, #40	; 0x28
 8006c90:	d902      	bls.n	8006c98 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8006c92:	7ffb      	ldrb	r3, [r7, #31]
 8006c94:	3301      	adds	r3, #1
 8006c96:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	7d1b      	ldrb	r3, [r3, #20]
 8006c9c:	2b09      	cmp	r3, #9
 8006c9e:	d109      	bne.n	8006cb4 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006ca0:	4b6d      	ldr	r3, [pc, #436]	; (8006e58 <tcp_slowtmr+0x4f4>)
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	6a1b      	ldr	r3, [r3, #32]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	2bf0      	cmp	r3, #240	; 0xf0
 8006cac:	d902      	bls.n	8006cb4 <tcp_slowtmr+0x350>
        ++pcb_remove;
 8006cae:	7ffb      	ldrb	r3, [r7, #31]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006cb4:	7ffb      	ldrb	r3, [r7, #31]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d05d      	beq.n	8006d76 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8006cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cc0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8006cc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006cc4:	f000 fc4a 	bl	800755c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8006cc8:	6a3b      	ldr	r3, [r7, #32]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d010      	beq.n	8006cf0 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006cce:	4b65      	ldr	r3, [pc, #404]	; (8006e64 <tcp_slowtmr+0x500>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d106      	bne.n	8006ce6 <tcp_slowtmr+0x382>
 8006cd8:	4b63      	ldr	r3, [pc, #396]	; (8006e68 <tcp_slowtmr+0x504>)
 8006cda:	f240 4289 	movw	r2, #1161	; 0x489
 8006cde:	4963      	ldr	r1, [pc, #396]	; (8006e6c <tcp_slowtmr+0x508>)
 8006ce0:	4863      	ldr	r0, [pc, #396]	; (8006e70 <tcp_slowtmr+0x50c>)
 8006ce2:	f007 f843 	bl	800dd6c <iprintf>
        prev->next = pcb->next;
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce8:	68da      	ldr	r2, [r3, #12]
 8006cea:	6a3b      	ldr	r3, [r7, #32]
 8006cec:	60da      	str	r2, [r3, #12]
 8006cee:	e00f      	b.n	8006d10 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006cf0:	4b5c      	ldr	r3, [pc, #368]	; (8006e64 <tcp_slowtmr+0x500>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d006      	beq.n	8006d08 <tcp_slowtmr+0x3a4>
 8006cfa:	4b5b      	ldr	r3, [pc, #364]	; (8006e68 <tcp_slowtmr+0x504>)
 8006cfc:	f240 428d 	movw	r2, #1165	; 0x48d
 8006d00:	495c      	ldr	r1, [pc, #368]	; (8006e74 <tcp_slowtmr+0x510>)
 8006d02:	485b      	ldr	r0, [pc, #364]	; (8006e70 <tcp_slowtmr+0x50c>)
 8006d04:	f007 f832 	bl	800dd6c <iprintf>
        tcp_active_pcbs = pcb->next;
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	4a55      	ldr	r2, [pc, #340]	; (8006e64 <tcp_slowtmr+0x500>)
 8006d0e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8006d10:	7fbb      	ldrb	r3, [r7, #30]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d010      	beq.n	8006d38 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d18:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006d1e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	1d1d      	adds	r5, r3, #4
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	8adb      	ldrh	r3, [r3, #22]
 8006d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d2a:	8b12      	ldrh	r2, [r2, #24]
 8006d2c:	9201      	str	r2, [sp, #4]
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	462b      	mov	r3, r5
 8006d32:	4622      	mov	r2, r4
 8006d34:	f004 f8d4 	bl	800aee0 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8006d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	7d1b      	ldrb	r3, [r3, #20]
 8006d42:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8006d4e:	6839      	ldr	r1, [r7, #0]
 8006d50:	2001      	movs	r0, #1
 8006d52:	f7fe f985 	bl	8005060 <memp_free>

      tcp_active_pcbs_changed = 0;
 8006d56:	4b48      	ldr	r3, [pc, #288]	; (8006e78 <tcp_slowtmr+0x514>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d004      	beq.n	8006d6c <tcp_slowtmr+0x408>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f06f 010c 	mvn.w	r1, #12
 8006d68:	68b8      	ldr	r0, [r7, #8]
 8006d6a:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006d6c:	4b42      	ldr	r3, [pc, #264]	; (8006e78 <tcp_slowtmr+0x514>)
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d035      	beq.n	8006de0 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8006d74:	e606      	b.n	8006984 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d78:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8006d80:	6a3b      	ldr	r3, [r7, #32]
 8006d82:	7edb      	ldrb	r3, [r3, #27]
 8006d84:	3301      	adds	r3, #1
 8006d86:	b2da      	uxtb	r2, r3
 8006d88:	6a3b      	ldr	r3, [r7, #32]
 8006d8a:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8006d8c:	6a3b      	ldr	r3, [r7, #32]
 8006d8e:	7eda      	ldrb	r2, [r3, #27]
 8006d90:	6a3b      	ldr	r3, [r7, #32]
 8006d92:	7f1b      	ldrb	r3, [r3, #28]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d323      	bcc.n	8006de0 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8006d98:	6a3b      	ldr	r3, [r7, #32]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006d9e:	4b36      	ldr	r3, [pc, #216]	; (8006e78 <tcp_slowtmr+0x514>)
 8006da0:	2200      	movs	r2, #0
 8006da2:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00a      	beq.n	8006dc4 <tcp_slowtmr+0x460>
 8006dae:	6a3b      	ldr	r3, [r7, #32]
 8006db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db4:	6a3a      	ldr	r2, [r7, #32]
 8006db6:	6912      	ldr	r2, [r2, #16]
 8006db8:	6a39      	ldr	r1, [r7, #32]
 8006dba:	4610      	mov	r0, r2
 8006dbc:	4798      	blx	r3
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	777b      	strb	r3, [r7, #29]
 8006dc2:	e001      	b.n	8006dc8 <tcp_slowtmr+0x464>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8006dc8:	4b2b      	ldr	r3, [pc, #172]	; (8006e78 <tcp_slowtmr+0x514>)
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d000      	beq.n	8006dd2 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8006dd0:	e5d8      	b.n	8006984 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006dd2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d102      	bne.n	8006de0 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8006dda:	6a38      	ldr	r0, [r7, #32]
 8006ddc:	f003 fdfc 	bl	800a9d8 <tcp_output>
  while (pcb != NULL) {
 8006de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f47f add4 	bne.w	8006990 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006de8:	2300      	movs	r3, #0
 8006dea:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8006dec:	4b23      	ldr	r3, [pc, #140]	; (8006e7c <tcp_slowtmr+0x518>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8006df2:	e068      	b.n	8006ec6 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df6:	7d1b      	ldrb	r3, [r3, #20]
 8006df8:	2b0a      	cmp	r3, #10
 8006dfa:	d006      	beq.n	8006e0a <tcp_slowtmr+0x4a6>
 8006dfc:	4b1a      	ldr	r3, [pc, #104]	; (8006e68 <tcp_slowtmr+0x504>)
 8006dfe:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8006e02:	491f      	ldr	r1, [pc, #124]	; (8006e80 <tcp_slowtmr+0x51c>)
 8006e04:	481a      	ldr	r0, [pc, #104]	; (8006e70 <tcp_slowtmr+0x50c>)
 8006e06:	f006 ffb1 	bl	800dd6c <iprintf>
    pcb_remove = 0;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006e0e:	4b12      	ldr	r3, [pc, #72]	; (8006e58 <tcp_slowtmr+0x4f4>)
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	2bf0      	cmp	r3, #240	; 0xf0
 8006e1a:	d902      	bls.n	8006e22 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8006e1c:	7ffb      	ldrb	r3, [r7, #31]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006e22:	7ffb      	ldrb	r3, [r7, #31]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d049      	beq.n	8006ebc <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006e28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e2a:	f000 fb97 	bl	800755c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006e2e:	6a3b      	ldr	r3, [r7, #32]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d029      	beq.n	8006e88 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006e34:	4b11      	ldr	r3, [pc, #68]	; (8006e7c <tcp_slowtmr+0x518>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d106      	bne.n	8006e4c <tcp_slowtmr+0x4e8>
 8006e3e:	4b0a      	ldr	r3, [pc, #40]	; (8006e68 <tcp_slowtmr+0x504>)
 8006e40:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8006e44:	490f      	ldr	r1, [pc, #60]	; (8006e84 <tcp_slowtmr+0x520>)
 8006e46:	480a      	ldr	r0, [pc, #40]	; (8006e70 <tcp_slowtmr+0x50c>)
 8006e48:	f006 ff90 	bl	800dd6c <iprintf>
        prev->next = pcb->next;
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4e:	68da      	ldr	r2, [r3, #12]
 8006e50:	6a3b      	ldr	r3, [r7, #32]
 8006e52:	60da      	str	r2, [r3, #12]
 8006e54:	e028      	b.n	8006ea8 <tcp_slowtmr+0x544>
 8006e56:	bf00      	nop
 8006e58:	20006cc0 	.word	0x20006cc0
 8006e5c:	000124f8 	.word	0x000124f8
 8006e60:	10624dd3 	.word	0x10624dd3
 8006e64:	20006cbc 	.word	0x20006cbc
 8006e68:	0800f5c4 	.word	0x0800f5c4
 8006e6c:	0800f7fc 	.word	0x0800f7fc
 8006e70:	0800f600 	.word	0x0800f600
 8006e74:	0800f828 	.word	0x0800f828
 8006e78:	20006cb8 	.word	0x20006cb8
 8006e7c:	20006ccc 	.word	0x20006ccc
 8006e80:	0800f854 	.word	0x0800f854
 8006e84:	0800f884 	.word	0x0800f884
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006e88:	4b13      	ldr	r3, [pc, #76]	; (8006ed8 <tcp_slowtmr+0x574>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d006      	beq.n	8006ea0 <tcp_slowtmr+0x53c>
 8006e92:	4b12      	ldr	r3, [pc, #72]	; (8006edc <tcp_slowtmr+0x578>)
 8006e94:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8006e98:	4911      	ldr	r1, [pc, #68]	; (8006ee0 <tcp_slowtmr+0x57c>)
 8006e9a:	4812      	ldr	r0, [pc, #72]	; (8006ee4 <tcp_slowtmr+0x580>)
 8006e9c:	f006 ff66 	bl	800dd6c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	4a0c      	ldr	r2, [pc, #48]	; (8006ed8 <tcp_slowtmr+0x574>)
 8006ea6:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eaa:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8006eb2:	69b9      	ldr	r1, [r7, #24]
 8006eb4:	2001      	movs	r0, #1
 8006eb6:	f7fe f8d3 	bl	8005060 <memp_free>
 8006eba:	e004      	b.n	8006ec6 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebe:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d193      	bne.n	8006df4 <tcp_slowtmr+0x490>
    }
  }
}
 8006ecc:	bf00      	nop
 8006ece:	bf00      	nop
 8006ed0:	3728      	adds	r7, #40	; 0x28
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bdb0      	pop	{r4, r5, r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	20006ccc 	.word	0x20006ccc
 8006edc:	0800f5c4 	.word	0x0800f5c4
 8006ee0:	0800f8ac 	.word	0x0800f8ac
 8006ee4:	0800f600 	.word	0x0800f600

08006ee8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8006eee:	4b2d      	ldr	r3, [pc, #180]	; (8006fa4 <tcp_fasttmr+0xbc>)
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	4b2b      	ldr	r3, [pc, #172]	; (8006fa4 <tcp_fasttmr+0xbc>)
 8006ef8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006efa:	4b2b      	ldr	r3, [pc, #172]	; (8006fa8 <tcp_fasttmr+0xc0>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006f00:	e048      	b.n	8006f94 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	7f5a      	ldrb	r2, [r3, #29]
 8006f06:	4b27      	ldr	r3, [pc, #156]	; (8006fa4 <tcp_fasttmr+0xbc>)
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d03f      	beq.n	8006f8e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006f0e:	4b25      	ldr	r3, [pc, #148]	; (8006fa4 <tcp_fasttmr+0xbc>)
 8006f10:	781a      	ldrb	r2, [r3, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	7e9b      	ldrb	r3, [r3, #26]
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d010      	beq.n	8006f44 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	7e9b      	ldrb	r3, [r3, #26]
 8006f26:	f043 0302 	orr.w	r3, r3, #2
 8006f2a:	b2da      	uxtb	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f003 fd51 	bl	800a9d8 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	7e9b      	ldrb	r3, [r3, #26]
 8006f3a:	f023 0303 	bic.w	r3, r3, #3
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	7e9b      	ldrb	r3, [r3, #26]
 8006f48:	f003 0308 	and.w	r3, r3, #8
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d009      	beq.n	8006f64 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	7e9b      	ldrb	r3, [r3, #26]
 8006f54:	f023 0308 	bic.w	r3, r3, #8
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7ff f988 	bl	8006274 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00a      	beq.n	8006f88 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006f72:	4b0e      	ldr	r3, [pc, #56]	; (8006fac <tcp_fasttmr+0xc4>)
 8006f74:	2200      	movs	r2, #0
 8006f76:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 f819 	bl	8006fb0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006f7e:	4b0b      	ldr	r3, [pc, #44]	; (8006fac <tcp_fasttmr+0xc4>)
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d000      	beq.n	8006f88 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006f86:	e7b8      	b.n	8006efa <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	607b      	str	r3, [r7, #4]
 8006f8c:	e002      	b.n	8006f94 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1b3      	bne.n	8006f02 <tcp_fasttmr+0x1a>
    }
  }
}
 8006f9a:	bf00      	nop
 8006f9c:	bf00      	nop
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	200000ca 	.word	0x200000ca
 8006fa8:	20006cbc 	.word	0x20006cbc
 8006fac:	20006cb8 	.word	0x20006cb8

08006fb0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006fb0:	b590      	push	{r4, r7, lr}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fbc:	7b5b      	ldrb	r3, [r3, #13]
 8006fbe:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fc4:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00b      	beq.n	8006fee <tcp_process_refused_data+0x3e>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6918      	ldr	r0, [r3, #16]
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	6879      	ldr	r1, [r7, #4]
 8006fe6:	47a0      	blx	r4
 8006fe8:	4603      	mov	r3, r0
 8006fea:	73fb      	strb	r3, [r7, #15]
 8006fec:	e007      	b.n	8006ffe <tcp_process_refused_data+0x4e>
 8006fee:	2300      	movs	r3, #0
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	6879      	ldr	r1, [r7, #4]
 8006ff4:	2000      	movs	r0, #0
 8006ff6:	f000 f89b 	bl	8007130 <tcp_recv_null>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d12a      	bne.n	800705c <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8007006:	7bbb      	ldrb	r3, [r7, #14]
 8007008:	f003 0320 	and.w	r3, r3, #32
 800700c:	2b00      	cmp	r3, #0
 800700e:	d033      	beq.n	8007078 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007014:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007018:	d005      	beq.n	8007026 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800701e:	3301      	adds	r3, #1
 8007020:	b29a      	uxth	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00b      	beq.n	8007048 <tcp_process_refused_data+0x98>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6918      	ldr	r0, [r3, #16]
 800703a:	2300      	movs	r3, #0
 800703c:	2200      	movs	r2, #0
 800703e:	6879      	ldr	r1, [r7, #4]
 8007040:	47a0      	blx	r4
 8007042:	4603      	mov	r3, r0
 8007044:	73fb      	strb	r3, [r7, #15]
 8007046:	e001      	b.n	800704c <tcp_process_refused_data+0x9c>
 8007048:	2300      	movs	r3, #0
 800704a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800704c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007050:	f113 0f0d 	cmn.w	r3, #13
 8007054:	d110      	bne.n	8007078 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8007056:	f06f 030c 	mvn.w	r3, #12
 800705a:	e00e      	b.n	800707a <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800705c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007060:	f113 0f0d 	cmn.w	r3, #13
 8007064:	d102      	bne.n	800706c <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007066:	f06f 030c 	mvn.w	r3, #12
 800706a:	e006      	b.n	800707a <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68ba      	ldr	r2, [r7, #8]
 8007070:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8007072:	f06f 0304 	mvn.w	r3, #4
 8007076:	e000      	b.n	800707a <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	bd90      	pop	{r4, r7, pc}

08007082 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b084      	sub	sp, #16
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800708a:	e007      	b.n	800709c <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f80a 	bl	80070ac <tcp_seg_free>
    seg = next;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1f4      	bne.n	800708c <tcp_segs_free+0xa>
  }
}
 80070a2:	bf00      	nop
 80070a4:	bf00      	nop
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00c      	beq.n	80070d4 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d004      	beq.n	80070cc <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7fe fd02 	bl	8005ad0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80070cc:	6879      	ldr	r1, [r7, #4]
 80070ce:	2003      	movs	r0, #3
 80070d0:	f7fd ffc6 	bl	8005060 <memp_free>
  }
}
 80070d4:	bf00      	nop
 80070d6:	3708      	adds	r7, #8
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	460b      	mov	r3, r1
 80070e6:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	78fa      	ldrb	r2, [r7, #3]
 80070ec:	755a      	strb	r2, [r3, #21]
}
 80070ee:	bf00      	nop
 80070f0:	370c      	adds	r7, #12
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bc80      	pop	{r7}
 80070f6:	4770      	bx	lr

080070f8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007100:	2003      	movs	r0, #3
 8007102:	f7fd ff61 	bl	8004fc8 <memp_malloc>
 8007106:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <tcp_seg_copy+0x1a>
    return NULL;
 800710e:	2300      	movs	r3, #0
 8007110:	e00a      	b.n	8007128 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007112:	2210      	movs	r2, #16
 8007114:	6879      	ldr	r1, [r7, #4]
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f006 fe12 	bl	800dd40 <memcpy>
  pbuf_ref(cseg->p);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	4618      	mov	r0, r3
 8007122:	f7fe fd7f 	bl	8005c24 <pbuf_ref>
  return cseg;
 8007126:	68fb      	ldr	r3, [r7, #12]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
 800713c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d009      	beq.n	8007158 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	891b      	ldrh	r3, [r3, #8]
 8007148:	4619      	mov	r1, r3
 800714a:	68b8      	ldr	r0, [r7, #8]
 800714c:	f7ff fb6c 	bl	8006828 <tcp_recved>
    pbuf_free(p);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f7fe fcbd 	bl	8005ad0 <pbuf_free>
 8007156:	e008      	b.n	800716a <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8007158:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d104      	bne.n	800716a <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8007160:	68b8      	ldr	r0, [r7, #8]
 8007162:	f7ff f8f1 	bl	8006348 <tcp_close>
 8007166:	4603      	mov	r3, r0
 8007168:	e000      	b.n	800716c <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b086      	sub	sp, #24
 8007178:	af00      	add	r7, sp, #0
 800717a:	4603      	mov	r3, r0
 800717c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800717e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007182:	2b00      	cmp	r3, #0
 8007184:	db01      	blt.n	800718a <tcp_kill_prio+0x16>
 8007186:	79fb      	ldrb	r3, [r7, #7]
 8007188:	e000      	b.n	800718c <tcp_kill_prio+0x18>
 800718a:	237f      	movs	r3, #127	; 0x7f
 800718c:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800718e:	2300      	movs	r3, #0
 8007190:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007192:	2300      	movs	r3, #0
 8007194:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007196:	4b16      	ldr	r3, [pc, #88]	; (80071f0 <tcp_kill_prio+0x7c>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	617b      	str	r3, [r7, #20]
 800719c:	e01a      	b.n	80071d4 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	7d5b      	ldrb	r3, [r3, #21]
 80071a2:	7afa      	ldrb	r2, [r7, #11]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d312      	bcc.n	80071ce <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80071a8:	4b12      	ldr	r3, [pc, #72]	; (80071f4 <tcp_kill_prio+0x80>)
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	6a1b      	ldr	r3, [r3, #32]
 80071b0:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d80a      	bhi.n	80071ce <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 80071b8:	4b0e      	ldr	r3, [pc, #56]	; (80071f4 <tcp_kill_prio+0x80>)
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	6a1b      	ldr	r3, [r3, #32]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	7d5b      	ldrb	r3, [r3, #21]
 80071cc:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	617b      	str	r3, [r7, #20]
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1e1      	bne.n	800719e <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 80071e0:	6938      	ldr	r0, [r7, #16]
 80071e2:	f7ff f97b 	bl	80064dc <tcp_abort>
  }
}
 80071e6:	bf00      	nop
 80071e8:	3718      	adds	r7, #24
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	20006cbc 	.word	0x20006cbc
 80071f4:	20006cc0 	.word	0x20006cc0

080071f8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	4603      	mov	r3, r0
 8007200:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007202:	79fb      	ldrb	r3, [r7, #7]
 8007204:	2b08      	cmp	r3, #8
 8007206:	d009      	beq.n	800721c <tcp_kill_state+0x24>
 8007208:	79fb      	ldrb	r3, [r7, #7]
 800720a:	2b09      	cmp	r3, #9
 800720c:	d006      	beq.n	800721c <tcp_kill_state+0x24>
 800720e:	4b1a      	ldr	r3, [pc, #104]	; (8007278 <tcp_kill_state+0x80>)
 8007210:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007214:	4919      	ldr	r1, [pc, #100]	; (800727c <tcp_kill_state+0x84>)
 8007216:	481a      	ldr	r0, [pc, #104]	; (8007280 <tcp_kill_state+0x88>)
 8007218:	f006 fda8 	bl	800dd6c <iprintf>

  inactivity = 0;
 800721c:	2300      	movs	r3, #0
 800721e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007220:	2300      	movs	r3, #0
 8007222:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007224:	4b17      	ldr	r3, [pc, #92]	; (8007284 <tcp_kill_state+0x8c>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	617b      	str	r3, [r7, #20]
 800722a:	e017      	b.n	800725c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	7d1b      	ldrb	r3, [r3, #20]
 8007230:	79fa      	ldrb	r2, [r7, #7]
 8007232:	429a      	cmp	r2, r3
 8007234:	d10f      	bne.n	8007256 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007236:	4b14      	ldr	r3, [pc, #80]	; (8007288 <tcp_kill_state+0x90>)
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	429a      	cmp	r2, r3
 8007244:	d807      	bhi.n	8007256 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007246:	4b10      	ldr	r3, [pc, #64]	; (8007288 <tcp_kill_state+0x90>)
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	6a1b      	ldr	r3, [r3, #32]
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	617b      	str	r3, [r7, #20]
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1e4      	bne.n	800722c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d003      	beq.n	8007270 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007268:	2100      	movs	r1, #0
 800726a:	6938      	ldr	r0, [r7, #16]
 800726c:	f7ff f884 	bl	8006378 <tcp_abandon>
  }
}
 8007270:	bf00      	nop
 8007272:	3718      	adds	r7, #24
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	0800f5c4 	.word	0x0800f5c4
 800727c:	0800f8d4 	.word	0x0800f8d4
 8007280:	0800f600 	.word	0x0800f600
 8007284:	20006cbc 	.word	0x20006cbc
 8007288:	20006cc0 	.word	0x20006cc0

0800728c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007292:	2300      	movs	r3, #0
 8007294:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007296:	2300      	movs	r3, #0
 8007298:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800729a:	4b12      	ldr	r3, [pc, #72]	; (80072e4 <tcp_kill_timewait+0x58>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	60fb      	str	r3, [r7, #12]
 80072a0:	e012      	b.n	80072c8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80072a2:	4b11      	ldr	r3, [pc, #68]	; (80072e8 <tcp_kill_timewait+0x5c>)
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d807      	bhi.n	80072c2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80072b2:	4b0d      	ldr	r3, [pc, #52]	; (80072e8 <tcp_kill_timewait+0x5c>)
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6a1b      	ldr	r3, [r3, #32]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	60fb      	str	r3, [r7, #12]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1e9      	bne.n	80072a2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d002      	beq.n	80072da <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 80072d4:	68b8      	ldr	r0, [r7, #8]
 80072d6:	f7ff f901 	bl	80064dc <tcp_abort>
  }
}
 80072da:	bf00      	nop
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	20006ccc 	.word	0x20006ccc
 80072e8:	20006cc0 	.word	0x20006cc0

080072ec <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	4603      	mov	r3, r0
 80072f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80072f6:	2001      	movs	r0, #1
 80072f8:	f7fd fe66 	bl	8004fc8 <memp_malloc>
 80072fc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d124      	bne.n	800734e <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007304:	f7ff ffc2 	bl	800728c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007308:	2001      	movs	r0, #1
 800730a:	f7fd fe5d 	bl	8004fc8 <memp_malloc>
 800730e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d11b      	bne.n	800734e <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007316:	2009      	movs	r0, #9
 8007318:	f7ff ff6e 	bl	80071f8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800731c:	2001      	movs	r0, #1
 800731e:	f7fd fe53 	bl	8004fc8 <memp_malloc>
 8007322:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d111      	bne.n	800734e <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800732a:	2008      	movs	r0, #8
 800732c:	f7ff ff64 	bl	80071f8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007330:	2001      	movs	r0, #1
 8007332:	f7fd fe49 	bl	8004fc8 <memp_malloc>
 8007336:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d107      	bne.n	800734e <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800733e:	79fb      	ldrb	r3, [r7, #7]
 8007340:	4618      	mov	r0, r3
 8007342:	f7ff ff17 	bl	8007174 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007346:	2001      	movs	r0, #1
 8007348:	f7fd fe3e 	bl	8004fc8 <memp_malloc>
 800734c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d03f      	beq.n	80073d4 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007354:	2298      	movs	r2, #152	; 0x98
 8007356:	2100      	movs	r1, #0
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f006 fcff 	bl	800dd5c <memset>
    pcb->prio = prio;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	79fa      	ldrb	r2, [r7, #7]
 8007362:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800736a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007374:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	22ff      	movs	r2, #255	; 0xff
 8007382:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f44f 7206 	mov.w	r2, #536	; 0x218
 800738a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2206      	movs	r2, #6
 8007390:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2206      	movs	r2, #6
 8007398:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073a0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80073aa:	4b0d      	ldr	r3, [pc, #52]	; (80073e0 <tcp_alloc+0xf4>)
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80073b2:	4b0c      	ldr	r3, [pc, #48]	; (80073e4 <tcp_alloc+0xf8>)
 80073b4:	781a      	ldrb	r2, [r3, #0]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80073c0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	4a08      	ldr	r2, [pc, #32]	; (80073e8 <tcp_alloc+0xfc>)
 80073c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4a07      	ldr	r2, [pc, #28]	; (80073ec <tcp_alloc+0x100>)
 80073d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80073d4:	68fb      	ldr	r3, [r7, #12]
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	20006cc0 	.word	0x20006cc0
 80073e4:	200000ca 	.word	0x200000ca
 80073e8:	08007131 	.word	0x08007131
 80073ec:	006ddd00 	.word	0x006ddd00

080073f0 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 80073f4:	2040      	movs	r0, #64	; 0x40
 80073f6:	f7ff ff79 	bl	80072ec <tcp_alloc>
 80073fa:	4603      	mov	r3, r0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	bd80      	pop	{r7, pc}

08007400 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	683a      	ldr	r2, [r7, #0]
 8007414:	611a      	str	r2, [r3, #16]
  }
}
 8007416:	bf00      	nop
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	bc80      	pop	{r7}
 800741e:	4770      	bx	lr

08007420 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00e      	beq.n	800744e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	7d1b      	ldrb	r3, [r3, #20]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d106      	bne.n	8007446 <tcp_recv+0x26>
 8007438:	4b07      	ldr	r3, [pc, #28]	; (8007458 <tcp_recv+0x38>)
 800743a:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800743e:	4907      	ldr	r1, [pc, #28]	; (800745c <tcp_recv+0x3c>)
 8007440:	4807      	ldr	r0, [pc, #28]	; (8007460 <tcp_recv+0x40>)
 8007442:	f006 fc93 	bl	800dd6c <iprintf>
    pcb->recv = recv;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	683a      	ldr	r2, [r7, #0]
 800744a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800744e:	bf00      	nop
 8007450:	3708      	adds	r7, #8
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	0800f5c4 	.word	0x0800f5c4
 800745c:	0800f8e4 	.word	0x0800f8e4
 8007460:	0800f600 	.word	0x0800f600

08007464 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00d      	beq.n	8007490 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	7d1b      	ldrb	r3, [r3, #20]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d106      	bne.n	800748a <tcp_sent+0x26>
 800747c:	4b06      	ldr	r3, [pc, #24]	; (8007498 <tcp_sent+0x34>)
 800747e:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8007482:	4906      	ldr	r1, [pc, #24]	; (800749c <tcp_sent+0x38>)
 8007484:	4806      	ldr	r0, [pc, #24]	; (80074a0 <tcp_sent+0x3c>)
 8007486:	f006 fc71 	bl	800dd6c <iprintf>
    pcb->sent = sent;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	683a      	ldr	r2, [r7, #0]
 800748e:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 8007490:	bf00      	nop
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	0800f5c4 	.word	0x0800f5c4
 800749c:	0800f90c 	.word	0x0800f90c
 80074a0:	0800f600 	.word	0x0800f600

080074a4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00e      	beq.n	80074d2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	7d1b      	ldrb	r3, [r3, #20]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d106      	bne.n	80074ca <tcp_err+0x26>
 80074bc:	4b07      	ldr	r3, [pc, #28]	; (80074dc <tcp_err+0x38>)
 80074be:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80074c2:	4907      	ldr	r1, [pc, #28]	; (80074e0 <tcp_err+0x3c>)
 80074c4:	4807      	ldr	r0, [pc, #28]	; (80074e4 <tcp_err+0x40>)
 80074c6:	f006 fc51 	bl	800dd6c <iprintf>
    pcb->errf = err;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	683a      	ldr	r2, [r7, #0]
 80074ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 80074d2:	bf00      	nop
 80074d4:	3708      	adds	r7, #8
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	0800f5c4 	.word	0x0800f5c4
 80074e0:	0800f934 	.word	0x0800f934
 80074e4:	0800f600 	.word	0x0800f600

080074e8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d008      	beq.n	800750a <tcp_accept+0x22>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	7d1b      	ldrb	r3, [r3, #20]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d104      	bne.n	800750a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	683a      	ldr	r2, [r7, #0]
 8007508:	619a      	str	r2, [r3, #24]
  }
}
 800750a:	bf00      	nop
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	bc80      	pop	{r7}
 8007512:	4770      	bx	lr

08007514 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	4613      	mov	r3, r2
 8007520:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	7d1b      	ldrb	r3, [r3, #20]
 8007526:	2b01      	cmp	r3, #1
 8007528:	d106      	bne.n	8007538 <tcp_poll+0x24>
 800752a:	4b09      	ldr	r3, [pc, #36]	; (8007550 <tcp_poll+0x3c>)
 800752c:	f240 7203 	movw	r2, #1795	; 0x703
 8007530:	4908      	ldr	r1, [pc, #32]	; (8007554 <tcp_poll+0x40>)
 8007532:	4809      	ldr	r0, [pc, #36]	; (8007558 <tcp_poll+0x44>)
 8007534:	f006 fc1a 	bl	800dd6c <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	79fa      	ldrb	r2, [r7, #7]
 8007544:	771a      	strb	r2, [r3, #28]
}
 8007546:	bf00      	nop
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	0800f5c4 	.word	0x0800f5c4
 8007554:	0800f95c 	.word	0x0800f95c
 8007558:	0800f600 	.word	0x0800f600

0800755c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	7d1b      	ldrb	r3, [r3, #20]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d034      	beq.n	80075d6 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007570:	2b0a      	cmp	r3, #10
 8007572:	d030      	beq.n	80075d6 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8007578:	2b01      	cmp	r3, #1
 800757a:	d02c      	beq.n	80075d6 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007580:	2b00      	cmp	r3, #0
 8007582:	d007      	beq.n	8007594 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007588:	4618      	mov	r0, r3
 800758a:	f7fe faa1 	bl	8005ad0 <pbuf_free>
      pcb->refused_data = NULL;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007598:	4618      	mov	r0, r3
 800759a:	f7ff fd72 	bl	8007082 <tcp_segs_free>
    pcb->ooseq = NULL;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075aa:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7ff fd66 	bl	8007082 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7ff fd61 	bl	8007082 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	669a      	str	r2, [r3, #104]	; 0x68
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 80075d6:	bf00      	nop
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
	...

080075e0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d105      	bne.n	8007600 <tcp_pcb_remove+0x20>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68da      	ldr	r2, [r3, #12]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	601a      	str	r2, [r3, #0]
 80075fe:	e013      	b.n	8007628 <tcp_pcb_remove+0x48>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	60fb      	str	r3, [r7, #12]
 8007606:	e00c      	b.n	8007622 <tcp_pcb_remove+0x42>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	683a      	ldr	r2, [r7, #0]
 800760e:	429a      	cmp	r2, r3
 8007610:	d104      	bne.n	800761c <tcp_pcb_remove+0x3c>
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	68da      	ldr	r2, [r3, #12]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	60da      	str	r2, [r3, #12]
 800761a:	e005      	b.n	8007628 <tcp_pcb_remove+0x48>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	60fb      	str	r3, [r7, #12]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1ef      	bne.n	8007608 <tcp_pcb_remove+0x28>
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	2200      	movs	r2, #0
 800762c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800762e:	6838      	ldr	r0, [r7, #0]
 8007630:	f7ff ff94 	bl	800755c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	7d1b      	ldrb	r3, [r3, #20]
 8007638:	2b0a      	cmp	r3, #10
 800763a:	d013      	beq.n	8007664 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8007640:	2b01      	cmp	r3, #1
 8007642:	d00f      	beq.n	8007664 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	7e9b      	ldrb	r3, [r3, #26]
 8007648:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800764c:	2b00      	cmp	r3, #0
 800764e:	d009      	beq.n	8007664 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	7e9b      	ldrb	r3, [r3, #26]
 8007654:	f043 0302 	orr.w	r3, r3, #2
 8007658:	b2da      	uxtb	r2, r3
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800765e:	6838      	ldr	r0, [r7, #0]
 8007660:	f003 f9ba 	bl	800a9d8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	7d1b      	ldrb	r3, [r3, #20]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d020      	beq.n	80076ae <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007670:	2b00      	cmp	r3, #0
 8007672:	d006      	beq.n	8007682 <tcp_pcb_remove+0xa2>
 8007674:	4b13      	ldr	r3, [pc, #76]	; (80076c4 <tcp_pcb_remove+0xe4>)
 8007676:	f240 7253 	movw	r2, #1875	; 0x753
 800767a:	4913      	ldr	r1, [pc, #76]	; (80076c8 <tcp_pcb_remove+0xe8>)
 800767c:	4813      	ldr	r0, [pc, #76]	; (80076cc <tcp_pcb_remove+0xec>)
 800767e:	f006 fb75 	bl	800dd6c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007686:	2b00      	cmp	r3, #0
 8007688:	d006      	beq.n	8007698 <tcp_pcb_remove+0xb8>
 800768a:	4b0e      	ldr	r3, [pc, #56]	; (80076c4 <tcp_pcb_remove+0xe4>)
 800768c:	f240 7254 	movw	r2, #1876	; 0x754
 8007690:	490f      	ldr	r1, [pc, #60]	; (80076d0 <tcp_pcb_remove+0xf0>)
 8007692:	480e      	ldr	r0, [pc, #56]	; (80076cc <tcp_pcb_remove+0xec>)
 8007694:	f006 fb6a 	bl	800dd6c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800769c:	2b00      	cmp	r3, #0
 800769e:	d006      	beq.n	80076ae <tcp_pcb_remove+0xce>
 80076a0:	4b08      	ldr	r3, [pc, #32]	; (80076c4 <tcp_pcb_remove+0xe4>)
 80076a2:	f240 7256 	movw	r2, #1878	; 0x756
 80076a6:	490b      	ldr	r1, [pc, #44]	; (80076d4 <tcp_pcb_remove+0xf4>)
 80076a8:	4808      	ldr	r0, [pc, #32]	; (80076cc <tcp_pcb_remove+0xec>)
 80076aa:	f006 fb5f 	bl	800dd6c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2200      	movs	r2, #0
 80076b2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	2200      	movs	r2, #0
 80076b8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80076ba:	bf00      	nop
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	0800f5c4 	.word	0x0800f5c4
 80076c8:	0800f97c 	.word	0x0800f97c
 80076cc:	0800f600 	.word	0x0800f600
 80076d0:	0800f994 	.word	0x0800f994
 80076d4:	0800f9b0 	.word	0x0800f9b0

080076d8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80076e0:	4b06      	ldr	r3, [pc, #24]	; (80076fc <tcp_next_iss+0x24>)
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	4b06      	ldr	r3, [pc, #24]	; (8007700 <tcp_next_iss+0x28>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4413      	add	r3, r2
 80076ea:	4a04      	ldr	r2, [pc, #16]	; (80076fc <tcp_next_iss+0x24>)
 80076ec:	6013      	str	r3, [r2, #0]
  return iss;
 80076ee:	4b03      	ldr	r3, [pc, #12]	; (80076fc <tcp_next_iss+0x24>)
 80076f0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bc80      	pop	{r7}
 80076fa:	4770      	bx	lr
 80076fc:	2000000c 	.word	0x2000000c
 8007700:	20006cc0 	.word	0x20006cc0

08007704 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	4603      	mov	r3, r0
 800770c:	6039      	str	r1, [r7, #0]
 800770e:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 8007710:	6838      	ldr	r0, [r7, #0]
 8007712:	f005 f979 	bl	800ca08 <ip4_route>
 8007716:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800771e:	88fb      	ldrh	r3, [r7, #6]
 8007720:	e010      	b.n	8007744 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007726:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007728:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d008      	beq.n	8007742 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8007730:	897b      	ldrh	r3, [r7, #10]
 8007732:	3b28      	subs	r3, #40	; 0x28
 8007734:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007736:	893a      	ldrh	r2, [r7, #8]
 8007738:	88fb      	ldrh	r3, [r7, #6]
 800773a:	4293      	cmp	r3, r2
 800773c:	bf28      	it	cs
 800773e:	4613      	movcs	r3, r2
 8007740:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 8007742:	88fb      	ldrh	r3, [r7, #6]
}
 8007744:	4618      	mov	r0, r3
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800775a:	e011      	b.n	8007780 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	429a      	cmp	r2, r3
 8007766:	d108      	bne.n	800777a <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f7fe feb4 	bl	80064dc <tcp_abort>
      pcb = next;
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	60fb      	str	r3, [r7, #12]
 8007778:	e002      	b.n	8007780 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1ea      	bne.n	800775c <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8007786:	bf00      	nop
 8007788:	bf00      	nop
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d02c      	beq.n	80077fa <tcp_netif_ip_addr_changed+0x6a>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d028      	beq.n	80077fa <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80077a8:	4b16      	ldr	r3, [pc, #88]	; (8007804 <tcp_netif_ip_addr_changed+0x74>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4619      	mov	r1, r3
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f7ff ffcc 	bl	800774c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80077b4:	4b14      	ldr	r3, [pc, #80]	; (8007808 <tcp_netif_ip_addr_changed+0x78>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4619      	mov	r1, r3
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7ff ffc6 	bl	800774c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d019      	beq.n	80077fa <tcp_netif_ip_addr_changed+0x6a>
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d015      	beq.n	80077fa <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80077ce:	4b0f      	ldr	r3, [pc, #60]	; (800780c <tcp_netif_ip_addr_changed+0x7c>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	60fb      	str	r3, [r7, #12]
 80077d4:	e00e      	b.n	80077f4 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d103      	bne.n	80077f0 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	60fb      	str	r3, [r7, #12]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1ed      	bne.n	80077d6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80077fa:	bf00      	nop
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	20006cbc 	.word	0x20006cbc
 8007808:	20006cc8 	.word	0x20006cc8
 800780c:	20006cc4 	.word	0x20006cc4

08007810 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007810:	b590      	push	{r4, r7, lr}
 8007812:	b08b      	sub	sp, #44	; 0x2c
 8007814:	af02      	add	r7, sp, #8
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	4a82      	ldr	r2, [pc, #520]	; (8007a28 <tcp_input+0x218>)
 8007820:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	895b      	ldrh	r3, [r3, #10]
 8007826:	2b13      	cmp	r3, #19
 8007828:	f240 838a 	bls.w	8007f40 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800782c:	4b7f      	ldr	r3, [pc, #508]	; (8007a2c <tcp_input+0x21c>)
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	4a7e      	ldr	r2, [pc, #504]	; (8007a2c <tcp_input+0x21c>)
 8007832:	6812      	ldr	r2, [r2, #0]
 8007834:	4611      	mov	r1, r2
 8007836:	4618      	mov	r0, r3
 8007838:	f005 fb62 	bl	800cf00 <ip4_addr_isbroadcast_u32>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	f040 8380 	bne.w	8007f44 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007844:	4b79      	ldr	r3, [pc, #484]	; (8007a2c <tcp_input+0x21c>)
 8007846:	695b      	ldr	r3, [r3, #20]
 8007848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800784c:	2be0      	cmp	r3, #224	; 0xe0
 800784e:	f000 8379 	beq.w	8007f44 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8007852:	4b75      	ldr	r3, [pc, #468]	; (8007a28 <tcp_input+0x218>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	899b      	ldrh	r3, [r3, #12]
 8007858:	b29b      	uxth	r3, r3
 800785a:	4618      	mov	r0, r3
 800785c:	f7fd f80b 	bl	8004876 <lwip_htons>
 8007860:	4603      	mov	r3, r0
 8007862:	0b1b      	lsrs	r3, r3, #12
 8007864:	b29b      	uxth	r3, r3
 8007866:	b2db      	uxtb	r3, r3
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800786c:	7cbb      	ldrb	r3, [r7, #18]
 800786e:	2b13      	cmp	r3, #19
 8007870:	f240 836a 	bls.w	8007f48 <tcp_input+0x738>
 8007874:	7cbb      	ldrb	r3, [r7, #18]
 8007876:	b29a      	uxth	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	891b      	ldrh	r3, [r3, #8]
 800787c:	429a      	cmp	r2, r3
 800787e:	f200 8363 	bhi.w	8007f48 <tcp_input+0x738>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8007882:	7cbb      	ldrb	r3, [r7, #18]
 8007884:	b29b      	uxth	r3, r3
 8007886:	3b14      	subs	r3, #20
 8007888:	b29a      	uxth	r2, r3
 800788a:	4b69      	ldr	r3, [pc, #420]	; (8007a30 <tcp_input+0x220>)
 800788c:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800788e:	4b69      	ldr	r3, [pc, #420]	; (8007a34 <tcp_input+0x224>)
 8007890:	2200      	movs	r2, #0
 8007892:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	895a      	ldrh	r2, [r3, #10]
 8007898:	7cbb      	ldrb	r3, [r7, #18]
 800789a:	b29b      	uxth	r3, r3
 800789c:	429a      	cmp	r2, r3
 800789e:	d30d      	bcc.n	80078bc <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80078a0:	4b63      	ldr	r3, [pc, #396]	; (8007a30 <tcp_input+0x220>)
 80078a2:	881a      	ldrh	r2, [r3, #0]
 80078a4:	4b64      	ldr	r3, [pc, #400]	; (8007a38 <tcp_input+0x228>)
 80078a6:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 80078a8:	7cbb      	ldrb	r3, [r7, #18]
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	425b      	negs	r3, r3
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	b21b      	sxth	r3, r3
 80078b2:	4619      	mov	r1, r3
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f7fe f8e7 	bl	8005a88 <pbuf_header>
 80078ba:	e055      	b.n	8007968 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d105      	bne.n	80078d0 <tcp_input+0xc0>
 80078c4:	4b5d      	ldr	r3, [pc, #372]	; (8007a3c <tcp_input+0x22c>)
 80078c6:	22b2      	movs	r2, #178	; 0xb2
 80078c8:	495d      	ldr	r1, [pc, #372]	; (8007a40 <tcp_input+0x230>)
 80078ca:	485e      	ldr	r0, [pc, #376]	; (8007a44 <tcp_input+0x234>)
 80078cc:	f006 fa4e 	bl	800dd6c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 80078d0:	f06f 0113 	mvn.w	r1, #19
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f7fe f8d7 	bl	8005a88 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	895a      	ldrh	r2, [r3, #10]
 80078de:	4b56      	ldr	r3, [pc, #344]	; (8007a38 <tcp_input+0x228>)
 80078e0:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80078e2:	4b53      	ldr	r3, [pc, #332]	; (8007a30 <tcp_input+0x220>)
 80078e4:	881a      	ldrh	r2, [r3, #0]
 80078e6:	4b54      	ldr	r3, [pc, #336]	; (8007a38 <tcp_input+0x228>)
 80078e8:	881b      	ldrh	r3, [r3, #0]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 80078ee:	4b52      	ldr	r3, [pc, #328]	; (8007a38 <tcp_input+0x228>)
 80078f0:	881b      	ldrh	r3, [r3, #0]
 80078f2:	425b      	negs	r3, r3
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	b21b      	sxth	r3, r3
 80078f8:	4619      	mov	r1, r3
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7fe f8c4 	bl	8005a88 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	895b      	ldrh	r3, [r3, #10]
 8007906:	8a3a      	ldrh	r2, [r7, #16]
 8007908:	429a      	cmp	r2, r3
 800790a:	f200 831f 	bhi.w	8007f4c <tcp_input+0x73c>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	4a47      	ldr	r2, [pc, #284]	; (8007a34 <tcp_input+0x224>)
 8007916:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	8a3b      	ldrh	r3, [r7, #16]
 800791e:	425b      	negs	r3, r3
 8007920:	b29b      	uxth	r3, r3
 8007922:	b21b      	sxth	r3, r3
 8007924:	4619      	mov	r1, r3
 8007926:	4610      	mov	r0, r2
 8007928:	f7fe f8ae 	bl	8005a88 <pbuf_header>
    p->tot_len -= opt2len;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	891a      	ldrh	r2, [r3, #8]
 8007930:	8a3b      	ldrh	r3, [r7, #16]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	b29a      	uxth	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	895b      	ldrh	r3, [r3, #10]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d005      	beq.n	800794e <tcp_input+0x13e>
 8007942:	4b3e      	ldr	r3, [pc, #248]	; (8007a3c <tcp_input+0x22c>)
 8007944:	22cf      	movs	r2, #207	; 0xcf
 8007946:	4940      	ldr	r1, [pc, #256]	; (8007a48 <tcp_input+0x238>)
 8007948:	483e      	ldr	r0, [pc, #248]	; (8007a44 <tcp_input+0x234>)
 800794a:	f006 fa0f 	bl	800dd6c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	891a      	ldrh	r2, [r3, #8]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	891b      	ldrh	r3, [r3, #8]
 8007958:	429a      	cmp	r2, r3
 800795a:	d005      	beq.n	8007968 <tcp_input+0x158>
 800795c:	4b37      	ldr	r3, [pc, #220]	; (8007a3c <tcp_input+0x22c>)
 800795e:	22d0      	movs	r2, #208	; 0xd0
 8007960:	493a      	ldr	r1, [pc, #232]	; (8007a4c <tcp_input+0x23c>)
 8007962:	4838      	ldr	r0, [pc, #224]	; (8007a44 <tcp_input+0x234>)
 8007964:	f006 fa02 	bl	800dd6c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007968:	4b2f      	ldr	r3, [pc, #188]	; (8007a28 <tcp_input+0x218>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	881b      	ldrh	r3, [r3, #0]
 800796e:	b29b      	uxth	r3, r3
 8007970:	4a2d      	ldr	r2, [pc, #180]	; (8007a28 <tcp_input+0x218>)
 8007972:	6814      	ldr	r4, [r2, #0]
 8007974:	4618      	mov	r0, r3
 8007976:	f7fc ff7e 	bl	8004876 <lwip_htons>
 800797a:	4603      	mov	r3, r0
 800797c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800797e:	4b2a      	ldr	r3, [pc, #168]	; (8007a28 <tcp_input+0x218>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	885b      	ldrh	r3, [r3, #2]
 8007984:	b29b      	uxth	r3, r3
 8007986:	4a28      	ldr	r2, [pc, #160]	; (8007a28 <tcp_input+0x218>)
 8007988:	6814      	ldr	r4, [r2, #0]
 800798a:	4618      	mov	r0, r3
 800798c:	f7fc ff73 	bl	8004876 <lwip_htons>
 8007990:	4603      	mov	r3, r0
 8007992:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007994:	4b24      	ldr	r3, [pc, #144]	; (8007a28 <tcp_input+0x218>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	4a23      	ldr	r2, [pc, #140]	; (8007a28 <tcp_input+0x218>)
 800799c:	6814      	ldr	r4, [r2, #0]
 800799e:	4618      	mov	r0, r3
 80079a0:	f7fc ff76 	bl	8004890 <lwip_htonl>
 80079a4:	4603      	mov	r3, r0
 80079a6:	6063      	str	r3, [r4, #4]
 80079a8:	6863      	ldr	r3, [r4, #4]
 80079aa:	4a29      	ldr	r2, [pc, #164]	; (8007a50 <tcp_input+0x240>)
 80079ac:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80079ae:	4b1e      	ldr	r3, [pc, #120]	; (8007a28 <tcp_input+0x218>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	4a1c      	ldr	r2, [pc, #112]	; (8007a28 <tcp_input+0x218>)
 80079b6:	6814      	ldr	r4, [r2, #0]
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7fc ff69 	bl	8004890 <lwip_htonl>
 80079be:	4603      	mov	r3, r0
 80079c0:	60a3      	str	r3, [r4, #8]
 80079c2:	68a3      	ldr	r3, [r4, #8]
 80079c4:	4a23      	ldr	r2, [pc, #140]	; (8007a54 <tcp_input+0x244>)
 80079c6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80079c8:	4b17      	ldr	r3, [pc, #92]	; (8007a28 <tcp_input+0x218>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	89db      	ldrh	r3, [r3, #14]
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	4a15      	ldr	r2, [pc, #84]	; (8007a28 <tcp_input+0x218>)
 80079d2:	6814      	ldr	r4, [r2, #0]
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7fc ff4e 	bl	8004876 <lwip_htons>
 80079da:	4603      	mov	r3, r0
 80079dc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80079de:	4b12      	ldr	r3, [pc, #72]	; (8007a28 <tcp_input+0x218>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	899b      	ldrh	r3, [r3, #12]
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fc ff45 	bl	8004876 <lwip_htons>
 80079ec:	4603      	mov	r3, r0
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079f4:	b2da      	uxtb	r2, r3
 80079f6:	4b18      	ldr	r3, [pc, #96]	; (8007a58 <tcp_input+0x248>)
 80079f8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	891a      	ldrh	r2, [r3, #8]
 80079fe:	4b16      	ldr	r3, [pc, #88]	; (8007a58 <tcp_input+0x248>)
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	f003 0303 	and.w	r3, r3, #3
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	bf14      	ite	ne
 8007a0a:	2301      	movne	r3, #1
 8007a0c:	2300      	moveq	r3, #0
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	4413      	add	r3, r2
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	4b11      	ldr	r3, [pc, #68]	; (8007a5c <tcp_input+0x24c>)
 8007a18:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a1e:	4b10      	ldr	r3, [pc, #64]	; (8007a60 <tcp_input+0x250>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	61fb      	str	r3, [r7, #28]
 8007a24:	e082      	b.n	8007b2c <tcp_input+0x31c>
 8007a26:	bf00      	nop
 8007a28:	200000dc 	.word	0x200000dc
 8007a2c:	2000378c 	.word	0x2000378c
 8007a30:	200000e0 	.word	0x200000e0
 8007a34:	200000e4 	.word	0x200000e4
 8007a38:	200000e2 	.word	0x200000e2
 8007a3c:	0800f9c8 	.word	0x0800f9c8
 8007a40:	0800f9fc 	.word	0x0800f9fc
 8007a44:	0800fa0c 	.word	0x0800fa0c
 8007a48:	0800fa34 	.word	0x0800fa34
 8007a4c:	0800fa40 	.word	0x0800fa40
 8007a50:	200000ec 	.word	0x200000ec
 8007a54:	200000f0 	.word	0x200000f0
 8007a58:	200000f8 	.word	0x200000f8
 8007a5c:	200000f6 	.word	0x200000f6
 8007a60:	20006cbc 	.word	0x20006cbc
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	7d1b      	ldrb	r3, [r3, #20]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d105      	bne.n	8007a78 <tcp_input+0x268>
 8007a6c:	4b8f      	ldr	r3, [pc, #572]	; (8007cac <tcp_input+0x49c>)
 8007a6e:	22e2      	movs	r2, #226	; 0xe2
 8007a70:	498f      	ldr	r1, [pc, #572]	; (8007cb0 <tcp_input+0x4a0>)
 8007a72:	4890      	ldr	r0, [pc, #576]	; (8007cb4 <tcp_input+0x4a4>)
 8007a74:	f006 f97a 	bl	800dd6c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	7d1b      	ldrb	r3, [r3, #20]
 8007a7c:	2b0a      	cmp	r3, #10
 8007a7e:	d105      	bne.n	8007a8c <tcp_input+0x27c>
 8007a80:	4b8a      	ldr	r3, [pc, #552]	; (8007cac <tcp_input+0x49c>)
 8007a82:	22e3      	movs	r2, #227	; 0xe3
 8007a84:	498c      	ldr	r1, [pc, #560]	; (8007cb8 <tcp_input+0x4a8>)
 8007a86:	488b      	ldr	r0, [pc, #556]	; (8007cb4 <tcp_input+0x4a4>)
 8007a88:	f006 f970 	bl	800dd6c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	7d1b      	ldrb	r3, [r3, #20]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d105      	bne.n	8007aa0 <tcp_input+0x290>
 8007a94:	4b85      	ldr	r3, [pc, #532]	; (8007cac <tcp_input+0x49c>)
 8007a96:	22e4      	movs	r2, #228	; 0xe4
 8007a98:	4988      	ldr	r1, [pc, #544]	; (8007cbc <tcp_input+0x4ac>)
 8007a9a:	4886      	ldr	r0, [pc, #536]	; (8007cb4 <tcp_input+0x4a4>)
 8007a9c:	f006 f966 	bl	800dd6c <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	8b1a      	ldrh	r2, [r3, #24]
 8007aa4:	4b86      	ldr	r3, [pc, #536]	; (8007cc0 <tcp_input+0x4b0>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	881b      	ldrh	r3, [r3, #0]
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d138      	bne.n	8007b22 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	8ada      	ldrh	r2, [r3, #22]
 8007ab4:	4b82      	ldr	r3, [pc, #520]	; (8007cc0 <tcp_input+0x4b0>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	885b      	ldrh	r3, [r3, #2]
 8007aba:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d130      	bne.n	8007b22 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	685a      	ldr	r2, [r3, #4]
 8007ac4:	4b7f      	ldr	r3, [pc, #508]	; (8007cc4 <tcp_input+0x4b4>)
 8007ac6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d12a      	bne.n	8007b22 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	4b7c      	ldr	r3, [pc, #496]	; (8007cc4 <tcp_input+0x4b4>)
 8007ad2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d124      	bne.n	8007b22 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	69fa      	ldr	r2, [r7, #28]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d105      	bne.n	8007aee <tcp_input+0x2de>
 8007ae2:	4b72      	ldr	r3, [pc, #456]	; (8007cac <tcp_input+0x49c>)
 8007ae4:	22ec      	movs	r2, #236	; 0xec
 8007ae6:	4978      	ldr	r1, [pc, #480]	; (8007cc8 <tcp_input+0x4b8>)
 8007ae8:	4872      	ldr	r0, [pc, #456]	; (8007cb4 <tcp_input+0x4a4>)
 8007aea:	f006 f93f 	bl	800dd6c <iprintf>
      if (prev != NULL) {
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00a      	beq.n	8007b0a <tcp_input+0x2fa>
        prev->next = pcb->next;
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	68da      	ldr	r2, [r3, #12]
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007afc:	4b73      	ldr	r3, [pc, #460]	; (8007ccc <tcp_input+0x4bc>)
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007b04:	4a71      	ldr	r2, [pc, #452]	; (8007ccc <tcp_input+0x4bc>)
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	69fa      	ldr	r2, [r7, #28]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d10f      	bne.n	8007b34 <tcp_input+0x324>
 8007b14:	4b65      	ldr	r3, [pc, #404]	; (8007cac <tcp_input+0x49c>)
 8007b16:	22f4      	movs	r2, #244	; 0xf4
 8007b18:	496d      	ldr	r1, [pc, #436]	; (8007cd0 <tcp_input+0x4c0>)
 8007b1a:	4866      	ldr	r0, [pc, #408]	; (8007cb4 <tcp_input+0x4a4>)
 8007b1c:	f006 f926 	bl	800dd6c <iprintf>
      break;
 8007b20:	e008      	b.n	8007b34 <tcp_input+0x324>
    }
    prev = pcb;
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	61fb      	str	r3, [r7, #28]
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d198      	bne.n	8007a64 <tcp_input+0x254>
 8007b32:	e000      	b.n	8007b36 <tcp_input+0x326>
      break;
 8007b34:	bf00      	nop
  }

  if (pcb == NULL) {
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d173      	bne.n	8007c24 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b3c:	4b65      	ldr	r3, [pc, #404]	; (8007cd4 <tcp_input+0x4c4>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	61fb      	str	r3, [r7, #28]
 8007b42:	e02f      	b.n	8007ba4 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	7d1b      	ldrb	r3, [r3, #20]
 8007b48:	2b0a      	cmp	r3, #10
 8007b4a:	d005      	beq.n	8007b58 <tcp_input+0x348>
 8007b4c:	4b57      	ldr	r3, [pc, #348]	; (8007cac <tcp_input+0x49c>)
 8007b4e:	22fe      	movs	r2, #254	; 0xfe
 8007b50:	4961      	ldr	r1, [pc, #388]	; (8007cd8 <tcp_input+0x4c8>)
 8007b52:	4858      	ldr	r0, [pc, #352]	; (8007cb4 <tcp_input+0x4a4>)
 8007b54:	f006 f90a 	bl	800dd6c <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	8b1a      	ldrh	r2, [r3, #24]
 8007b5c:	4b58      	ldr	r3, [pc, #352]	; (8007cc0 <tcp_input+0x4b0>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	881b      	ldrh	r3, [r3, #0]
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d11a      	bne.n	8007b9e <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	8ada      	ldrh	r2, [r3, #22]
 8007b6c:	4b54      	ldr	r3, [pc, #336]	; (8007cc0 <tcp_input+0x4b0>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	885b      	ldrh	r3, [r3, #2]
 8007b72:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d112      	bne.n	8007b9e <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	685a      	ldr	r2, [r3, #4]
 8007b7c:	4b51      	ldr	r3, [pc, #324]	; (8007cc4 <tcp_input+0x4b4>)
 8007b7e:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d10c      	bne.n	8007b9e <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	4b4e      	ldr	r3, [pc, #312]	; (8007cc4 <tcp_input+0x4b4>)
 8007b8a:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d106      	bne.n	8007b9e <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8007b90:	69f8      	ldr	r0, [r7, #28]
 8007b92:	f000 fb15 	bl	80081c0 <tcp_timewait_input>
        pbuf_free(p);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f7fd ff9a 	bl	8005ad0 <pbuf_free>
        return;
 8007b9c:	e1dc      	b.n	8007f58 <tcp_input+0x748>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	61fb      	str	r3, [r7, #28]
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1cc      	bne.n	8007b44 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007baa:	2300      	movs	r3, #0
 8007bac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007bae:	4b4b      	ldr	r3, [pc, #300]	; (8007cdc <tcp_input+0x4cc>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	617b      	str	r3, [r7, #20]
 8007bb4:	e019      	b.n	8007bea <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	8ada      	ldrh	r2, [r3, #22]
 8007bba:	4b41      	ldr	r3, [pc, #260]	; (8007cc0 <tcp_input+0x4b0>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	885b      	ldrh	r3, [r3, #2]
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d10c      	bne.n	8007be0 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	4b3e      	ldr	r3, [pc, #248]	; (8007cc4 <tcp_input+0x4b4>)
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d00f      	beq.n	8007bf2 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00d      	beq.n	8007bf4 <tcp_input+0x3e4>
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d009      	beq.n	8007bf4 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	617b      	str	r3, [r7, #20]
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1e2      	bne.n	8007bb6 <tcp_input+0x3a6>
 8007bf0:	e000      	b.n	8007bf4 <tcp_input+0x3e4>
            break;
 8007bf2:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d014      	beq.n	8007c24 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00a      	beq.n	8007c16 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	68da      	ldr	r2, [r3, #12]
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007c08:	4b34      	ldr	r3, [pc, #208]	; (8007cdc <tcp_input+0x4cc>)
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007c10:	4a32      	ldr	r2, [pc, #200]	; (8007cdc <tcp_input+0x4cc>)
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8007c16:	6978      	ldr	r0, [r7, #20]
 8007c18:	f000 f9f2 	bl	8008000 <tcp_listen_input>
      pbuf_free(p);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f7fd ff57 	bl	8005ad0 <pbuf_free>
      return;
 8007c22:	e199      	b.n	8007f58 <tcp_input+0x748>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	f000 8164 	beq.w	8007ef4 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007c2c:	4b2c      	ldr	r3, [pc, #176]	; (8007ce0 <tcp_input+0x4d0>)
 8007c2e:	2200      	movs	r2, #0
 8007c30:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	891a      	ldrh	r2, [r3, #8]
 8007c36:	4b2a      	ldr	r3, [pc, #168]	; (8007ce0 <tcp_input+0x4d0>)
 8007c38:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8007c3a:	4a29      	ldr	r2, [pc, #164]	; (8007ce0 <tcp_input+0x4d0>)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007c40:	4b1f      	ldr	r3, [pc, #124]	; (8007cc0 <tcp_input+0x4b0>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a26      	ldr	r2, [pc, #152]	; (8007ce0 <tcp_input+0x4d0>)
 8007c46:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8007c48:	4b26      	ldr	r3, [pc, #152]	; (8007ce4 <tcp_input+0x4d4>)
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8007c4e:	4b26      	ldr	r3, [pc, #152]	; (8007ce8 <tcp_input+0x4d8>)
 8007c50:	2200      	movs	r2, #0
 8007c52:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007c54:	4b25      	ldr	r3, [pc, #148]	; (8007cec <tcp_input+0x4dc>)
 8007c56:	2200      	movs	r2, #0
 8007c58:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007c5a:	4b25      	ldr	r3, [pc, #148]	; (8007cf0 <tcp_input+0x4e0>)
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	f003 0308 	and.w	r3, r3, #8
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d006      	beq.n	8007c74 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	7b5b      	ldrb	r3, [r3, #13]
 8007c6a:	f043 0301 	orr.w	r3, r3, #1
 8007c6e:	b2da      	uxtb	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d03d      	beq.n	8007cf8 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007c7c:	69f8      	ldr	r0, [r7, #28]
 8007c7e:	f7ff f997 	bl	8006fb0 <tcp_process_refused_data>
 8007c82:	4603      	mov	r3, r0
 8007c84:	f113 0f0d 	cmn.w	r3, #13
 8007c88:	d007      	beq.n	8007c9a <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d032      	beq.n	8007cf8 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007c92:	4b18      	ldr	r3, [pc, #96]	; (8007cf4 <tcp_input+0x4e4>)
 8007c94:	881b      	ldrh	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d02e      	beq.n	8007cf8 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f040 8108 	bne.w	8007eb4 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007ca4:	69f8      	ldr	r0, [r7, #28]
 8007ca6:	f002 fe3b 	bl	800a920 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007caa:	e103      	b.n	8007eb4 <tcp_input+0x6a4>
 8007cac:	0800f9c8 	.word	0x0800f9c8
 8007cb0:	0800fa60 	.word	0x0800fa60
 8007cb4:	0800fa0c 	.word	0x0800fa0c
 8007cb8:	0800fa88 	.word	0x0800fa88
 8007cbc:	0800fab4 	.word	0x0800fab4
 8007cc0:	200000dc 	.word	0x200000dc
 8007cc4:	2000378c 	.word	0x2000378c
 8007cc8:	0800fadc 	.word	0x0800fadc
 8007ccc:	20006cbc 	.word	0x20006cbc
 8007cd0:	0800fb08 	.word	0x0800fb08
 8007cd4:	20006ccc 	.word	0x20006ccc
 8007cd8:	0800fb34 	.word	0x0800fb34
 8007cdc:	20006cc4 	.word	0x20006cc4
 8007ce0:	200000cc 	.word	0x200000cc
 8007ce4:	200000fc 	.word	0x200000fc
 8007ce8:	200000f9 	.word	0x200000f9
 8007cec:	200000f4 	.word	0x200000f4
 8007cf0:	200000f8 	.word	0x200000f8
 8007cf4:	200000f6 	.word	0x200000f6
      }
    }
    tcp_input_pcb = pcb;
 8007cf8:	4a99      	ldr	r2, [pc, #612]	; (8007f60 <tcp_input+0x750>)
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007cfe:	69f8      	ldr	r0, [r7, #28]
 8007d00:	f000 fac6 	bl	8008290 <tcp_process>
 8007d04:	4603      	mov	r3, r0
 8007d06:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007d08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007d0c:	f113 0f0d 	cmn.w	r3, #13
 8007d10:	f000 80d2 	beq.w	8007eb8 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 8007d14:	4b93      	ldr	r3, [pc, #588]	; (8007f64 <tcp_input+0x754>)
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	f003 0308 	and.w	r3, r3, #8
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d016      	beq.n	8007d4e <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d008      	beq.n	8007d3c <tcp_input+0x52c>
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d30:	69fa      	ldr	r2, [r7, #28]
 8007d32:	6912      	ldr	r2, [r2, #16]
 8007d34:	f06f 010d 	mvn.w	r1, #13
 8007d38:	4610      	mov	r0, r2
 8007d3a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007d3c:	69f9      	ldr	r1, [r7, #28]
 8007d3e:	488a      	ldr	r0, [pc, #552]	; (8007f68 <tcp_input+0x758>)
 8007d40:	f7ff fc4e 	bl	80075e0 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8007d44:	69f9      	ldr	r1, [r7, #28]
 8007d46:	2001      	movs	r0, #1
 8007d48:	f7fd f98a 	bl	8005060 <memp_free>
 8007d4c:	e0bf      	b.n	8007ece <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007d52:	4b86      	ldr	r3, [pc, #536]	; (8007f6c <tcp_input+0x75c>)
 8007d54:	881b      	ldrh	r3, [r3, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d01b      	beq.n	8007d92 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007d5a:	4b84      	ldr	r3, [pc, #528]	; (8007f6c <tcp_input+0x75c>)
 8007d5c:	881b      	ldrh	r3, [r3, #0]
 8007d5e:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d009      	beq.n	8007d7c <tcp_input+0x56c>
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d6c:	69fa      	ldr	r2, [r7, #28]
 8007d6e:	6910      	ldr	r0, [r2, #16]
 8007d70:	89fa      	ldrh	r2, [r7, #14]
 8007d72:	69f9      	ldr	r1, [r7, #28]
 8007d74:	4798      	blx	r3
 8007d76:	4603      	mov	r3, r0
 8007d78:	74fb      	strb	r3, [r7, #19]
 8007d7a:	e001      	b.n	8007d80 <tcp_input+0x570>
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007d80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007d84:	f113 0f0d 	cmn.w	r3, #13
 8007d88:	f000 8098 	beq.w	8007ebc <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007d8c:	4b77      	ldr	r3, [pc, #476]	; (8007f6c <tcp_input+0x75c>)
 8007d8e:	2200      	movs	r2, #0
 8007d90:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007d92:	69f8      	ldr	r0, [r7, #28]
 8007d94:	f000 f902 	bl	8007f9c <tcp_input_delayed_close>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f040 8090 	bne.w	8007ec0 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007da0:	4b73      	ldr	r3, [pc, #460]	; (8007f70 <tcp_input+0x760>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d041      	beq.n	8007e2c <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d006      	beq.n	8007dbe <tcp_input+0x5ae>
 8007db0:	4b70      	ldr	r3, [pc, #448]	; (8007f74 <tcp_input+0x764>)
 8007db2:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8007db6:	4970      	ldr	r1, [pc, #448]	; (8007f78 <tcp_input+0x768>)
 8007db8:	4870      	ldr	r0, [pc, #448]	; (8007f7c <tcp_input+0x76c>)
 8007dba:	f005 ffd7 	bl	800dd6c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	7e9b      	ldrb	r3, [r3, #26]
 8007dc2:	f003 0310 	and.w	r3, r3, #16
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d008      	beq.n	8007ddc <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007dca:	4b69      	ldr	r3, [pc, #420]	; (8007f70 <tcp_input+0x760>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fd fe7e 	bl	8005ad0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007dd4:	69f8      	ldr	r0, [r7, #28]
 8007dd6:	f7fe fb81 	bl	80064dc <tcp_abort>
            goto aborted;
 8007dda:	e078      	b.n	8007ece <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00c      	beq.n	8007e00 <tcp_input+0x5f0>
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	6918      	ldr	r0, [r3, #16]
 8007df0:	4b5f      	ldr	r3, [pc, #380]	; (8007f70 <tcp_input+0x760>)
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	2300      	movs	r3, #0
 8007df6:	69f9      	ldr	r1, [r7, #28]
 8007df8:	47a0      	blx	r4
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	74fb      	strb	r3, [r7, #19]
 8007dfe:	e008      	b.n	8007e12 <tcp_input+0x602>
 8007e00:	4b5b      	ldr	r3, [pc, #364]	; (8007f70 <tcp_input+0x760>)
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	2300      	movs	r3, #0
 8007e06:	69f9      	ldr	r1, [r7, #28]
 8007e08:	2000      	movs	r0, #0
 8007e0a:	f7ff f991 	bl	8007130 <tcp_recv_null>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007e12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007e16:	f113 0f0d 	cmn.w	r3, #13
 8007e1a:	d053      	beq.n	8007ec4 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007e1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d003      	beq.n	8007e2c <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007e24:	4b52      	ldr	r3, [pc, #328]	; (8007f70 <tcp_input+0x760>)
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007e2c:	4b4d      	ldr	r3, [pc, #308]	; (8007f64 <tcp_input+0x754>)
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	f003 0320 	and.w	r3, r3, #32
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d030      	beq.n	8007e9a <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d009      	beq.n	8007e54 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e44:	7b5a      	ldrb	r2, [r3, #13]
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e4a:	f042 0220 	orr.w	r2, r2, #32
 8007e4e:	b2d2      	uxtb	r2, r2
 8007e50:	735a      	strb	r2, [r3, #13]
 8007e52:	e022      	b.n	8007e9a <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e58:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007e5c:	d005      	beq.n	8007e6a <tcp_input+0x65a>
              pcb->rcv_wnd++;
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e62:	3301      	adds	r3, #1
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00b      	beq.n	8007e8c <tcp_input+0x67c>
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	6918      	ldr	r0, [r3, #16]
 8007e7e:	2300      	movs	r3, #0
 8007e80:	2200      	movs	r2, #0
 8007e82:	69f9      	ldr	r1, [r7, #28]
 8007e84:	47a0      	blx	r4
 8007e86:	4603      	mov	r3, r0
 8007e88:	74fb      	strb	r3, [r7, #19]
 8007e8a:	e001      	b.n	8007e90 <tcp_input+0x680>
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007e90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007e94:	f113 0f0d 	cmn.w	r3, #13
 8007e98:	d016      	beq.n	8007ec8 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007e9a:	4b31      	ldr	r3, [pc, #196]	; (8007f60 <tcp_input+0x750>)
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007ea0:	69f8      	ldr	r0, [r7, #28]
 8007ea2:	f000 f87b 	bl	8007f9c <tcp_input_delayed_close>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10f      	bne.n	8007ecc <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007eac:	69f8      	ldr	r0, [r7, #28]
 8007eae:	f002 fd93 	bl	800a9d8 <tcp_output>
 8007eb2:	e00c      	b.n	8007ece <tcp_input+0x6be>
        goto aborted;
 8007eb4:	bf00      	nop
 8007eb6:	e00a      	b.n	8007ece <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007eb8:	bf00      	nop
 8007eba:	e008      	b.n	8007ece <tcp_input+0x6be>
              goto aborted;
 8007ebc:	bf00      	nop
 8007ebe:	e006      	b.n	8007ece <tcp_input+0x6be>
          goto aborted;
 8007ec0:	bf00      	nop
 8007ec2:	e004      	b.n	8007ece <tcp_input+0x6be>
            goto aborted;
 8007ec4:	bf00      	nop
 8007ec6:	e002      	b.n	8007ece <tcp_input+0x6be>
              goto aborted;
 8007ec8:	bf00      	nop
 8007eca:	e000      	b.n	8007ece <tcp_input+0x6be>
          goto aborted;
 8007ecc:	bf00      	nop
    tcp_input_pcb = NULL;
 8007ece:	4b24      	ldr	r3, [pc, #144]	; (8007f60 <tcp_input+0x750>)
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007ed4:	4b26      	ldr	r3, [pc, #152]	; (8007f70 <tcp_input+0x760>)
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8007eda:	4b29      	ldr	r3, [pc, #164]	; (8007f80 <tcp_input+0x770>)
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d039      	beq.n	8007f56 <tcp_input+0x746>
    {
      pbuf_free(inseg.p);
 8007ee2:	4b27      	ldr	r3, [pc, #156]	; (8007f80 <tcp_input+0x770>)
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fd fdf2 	bl	8005ad0 <pbuf_free>
      inseg.p = NULL;
 8007eec:	4b24      	ldr	r3, [pc, #144]	; (8007f80 <tcp_input+0x770>)
 8007eee:	2200      	movs	r2, #0
 8007ef0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007ef2:	e030      	b.n	8007f56 <tcp_input+0x746>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007ef4:	4b23      	ldr	r3, [pc, #140]	; (8007f84 <tcp_input+0x774>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	899b      	ldrh	r3, [r3, #12]
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7fc fcba 	bl	8004876 <lwip_htons>
 8007f02:	4603      	mov	r3, r0
 8007f04:	f003 0304 	and.w	r3, r3, #4
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d115      	bne.n	8007f38 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f0c:	4b1e      	ldr	r3, [pc, #120]	; (8007f88 <tcp_input+0x778>)
 8007f0e:	6818      	ldr	r0, [r3, #0]
 8007f10:	4b1e      	ldr	r3, [pc, #120]	; (8007f8c <tcp_input+0x77c>)
 8007f12:	881b      	ldrh	r3, [r3, #0]
 8007f14:	461a      	mov	r2, r3
 8007f16:	4b1e      	ldr	r3, [pc, #120]	; (8007f90 <tcp_input+0x780>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007f1c:	4b19      	ldr	r3, [pc, #100]	; (8007f84 <tcp_input+0x774>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f20:	885b      	ldrh	r3, [r3, #2]
 8007f22:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007f24:	4a17      	ldr	r2, [pc, #92]	; (8007f84 <tcp_input+0x774>)
 8007f26:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f28:	8812      	ldrh	r2, [r2, #0]
 8007f2a:	b292      	uxth	r2, r2
 8007f2c:	9201      	str	r2, [sp, #4]
 8007f2e:	9300      	str	r3, [sp, #0]
 8007f30:	4b18      	ldr	r3, [pc, #96]	; (8007f94 <tcp_input+0x784>)
 8007f32:	4a19      	ldr	r2, [pc, #100]	; (8007f98 <tcp_input+0x788>)
 8007f34:	f002 ffd4 	bl	800aee0 <tcp_rst>
    pbuf_free(p);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f7fd fdc9 	bl	8005ad0 <pbuf_free>
  return;
 8007f3e:	e00a      	b.n	8007f56 <tcp_input+0x746>
    goto dropped;
 8007f40:	bf00      	nop
 8007f42:	e004      	b.n	8007f4e <tcp_input+0x73e>
    goto dropped;
 8007f44:	bf00      	nop
 8007f46:	e002      	b.n	8007f4e <tcp_input+0x73e>
    goto dropped;
 8007f48:	bf00      	nop
 8007f4a:	e000      	b.n	8007f4e <tcp_input+0x73e>
      goto dropped;
 8007f4c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7fd fdbe 	bl	8005ad0 <pbuf_free>
 8007f54:	e000      	b.n	8007f58 <tcp_input+0x748>
  return;
 8007f56:	bf00      	nop
}
 8007f58:	3724      	adds	r7, #36	; 0x24
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd90      	pop	{r4, r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	20006cd0 	.word	0x20006cd0
 8007f64:	200000f9 	.word	0x200000f9
 8007f68:	20006cbc 	.word	0x20006cbc
 8007f6c:	200000f4 	.word	0x200000f4
 8007f70:	200000fc 	.word	0x200000fc
 8007f74:	0800f9c8 	.word	0x0800f9c8
 8007f78:	0800fb64 	.word	0x0800fb64
 8007f7c:	0800fa0c 	.word	0x0800fa0c
 8007f80:	200000cc 	.word	0x200000cc
 8007f84:	200000dc 	.word	0x200000dc
 8007f88:	200000f0 	.word	0x200000f0
 8007f8c:	200000f6 	.word	0x200000f6
 8007f90:	200000ec 	.word	0x200000ec
 8007f94:	2000379c 	.word	0x2000379c
 8007f98:	200037a0 	.word	0x200037a0

08007f9c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8007fa4:	4b14      	ldr	r3, [pc, #80]	; (8007ff8 <tcp_input_delayed_close+0x5c>)
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	f003 0310 	and.w	r3, r3, #16
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d01d      	beq.n	8007fec <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	7e9b      	ldrb	r3, [r3, #26]
 8007fb4:	f003 0310 	and.w	r3, r3, #16
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d10d      	bne.n	8007fd8 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d008      	beq.n	8007fd8 <tcp_input_delayed_close+0x3c>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	6912      	ldr	r2, [r2, #16]
 8007fd0:	f06f 010e 	mvn.w	r1, #14
 8007fd4:	4610      	mov	r0, r2
 8007fd6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007fd8:	6879      	ldr	r1, [r7, #4]
 8007fda:	4808      	ldr	r0, [pc, #32]	; (8007ffc <tcp_input_delayed_close+0x60>)
 8007fdc:	f7ff fb00 	bl	80075e0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8007fe0:	6879      	ldr	r1, [r7, #4]
 8007fe2:	2001      	movs	r0, #1
 8007fe4:	f7fd f83c 	bl	8005060 <memp_free>
    return 1;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e000      	b.n	8007fee <tcp_input_delayed_close+0x52>
  }
  return 0;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	200000f9 	.word	0x200000f9
 8007ffc:	20006cbc 	.word	0x20006cbc

08008000 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b088      	sub	sp, #32
 8008004:	af02      	add	r7, sp, #8
 8008006:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008008:	4b63      	ldr	r3, [pc, #396]	; (8008198 <tcp_listen_input+0x198>)
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	f003 0304 	and.w	r3, r3, #4
 8008010:	2b00      	cmp	r3, #0
 8008012:	f040 80bb 	bne.w	800818c <tcp_listen_input+0x18c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008016:	4b60      	ldr	r3, [pc, #384]	; (8008198 <tcp_listen_input+0x198>)
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	f003 0310 	and.w	r3, r3, #16
 800801e:	2b00      	cmp	r3, #0
 8008020:	d016      	beq.n	8008050 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008022:	4b5e      	ldr	r3, [pc, #376]	; (800819c <tcp_listen_input+0x19c>)
 8008024:	6818      	ldr	r0, [r3, #0]
 8008026:	4b5e      	ldr	r3, [pc, #376]	; (80081a0 <tcp_listen_input+0x1a0>)
 8008028:	881b      	ldrh	r3, [r3, #0]
 800802a:	461a      	mov	r2, r3
 800802c:	4b5d      	ldr	r3, [pc, #372]	; (80081a4 <tcp_listen_input+0x1a4>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008032:	4b5d      	ldr	r3, [pc, #372]	; (80081a8 <tcp_listen_input+0x1a8>)
 8008034:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008036:	885b      	ldrh	r3, [r3, #2]
 8008038:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800803a:	4a5b      	ldr	r2, [pc, #364]	; (80081a8 <tcp_listen_input+0x1a8>)
 800803c:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800803e:	8812      	ldrh	r2, [r2, #0]
 8008040:	b292      	uxth	r2, r2
 8008042:	9201      	str	r2, [sp, #4]
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	4b59      	ldr	r3, [pc, #356]	; (80081ac <tcp_listen_input+0x1ac>)
 8008048:	4a59      	ldr	r2, [pc, #356]	; (80081b0 <tcp_listen_input+0x1b0>)
 800804a:	f002 ff49 	bl	800aee0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800804e:	e09f      	b.n	8008190 <tcp_listen_input+0x190>
  } else if (flags & TCP_SYN) {
 8008050:	4b51      	ldr	r3, [pc, #324]	; (8008198 <tcp_listen_input+0x198>)
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	f003 0302 	and.w	r3, r3, #2
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 8099 	beq.w	8008190 <tcp_listen_input+0x190>
    npcb = tcp_alloc(pcb->prio);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	7d5b      	ldrb	r3, [r3, #21]
 8008062:	4618      	mov	r0, r3
 8008064:	f7ff f942 	bl	80072ec <tcp_alloc>
 8008068:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d111      	bne.n	8008094 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	699b      	ldr	r3, [r3, #24]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00a      	beq.n	800808e <tcp_listen_input+0x8e>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	6910      	ldr	r0, [r2, #16]
 8008080:	f04f 32ff 	mov.w	r2, #4294967295
 8008084:	2100      	movs	r1, #0
 8008086:	4798      	blx	r3
 8008088:	4603      	mov	r3, r0
 800808a:	73bb      	strb	r3, [r7, #14]
      return;
 800808c:	e081      	b.n	8008192 <tcp_listen_input+0x192>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800808e:	23f0      	movs	r3, #240	; 0xf0
 8008090:	73bb      	strb	r3, [r7, #14]
      return;
 8008092:	e07e      	b.n	8008192 <tcp_listen_input+0x192>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008094:	4b47      	ldr	r3, [pc, #284]	; (80081b4 <tcp_listen_input+0x1b4>)
 8008096:	695a      	ldr	r2, [r3, #20]
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800809c:	4b45      	ldr	r3, [pc, #276]	; (80081b4 <tcp_listen_input+0x1b4>)
 800809e:	691a      	ldr	r2, [r3, #16]
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	8ada      	ldrh	r2, [r3, #22]
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80080ac:	4b3e      	ldr	r3, [pc, #248]	; (80081a8 <tcp_listen_input+0x1a8>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	881b      	ldrh	r3, [r3, #0]
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	2203      	movs	r2, #3
 80080bc:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80080be:	4b39      	ldr	r3, [pc, #228]	; (80081a4 <tcp_listen_input+0x1a4>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	1c5a      	adds	r2, r3, #1
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80080d0:	6978      	ldr	r0, [r7, #20]
 80080d2:	f7ff fb01 	bl	80076d8 <tcp_next_iss>
 80080d6:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	693a      	ldr	r2, [r7, #16]
 80080dc:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	693a      	ldr	r2, [r7, #16]
 80080e2:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	693a      	ldr	r2, [r7, #16]
 80080e8:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	693a      	ldr	r2, [r7, #16]
 80080ee:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80080f0:	4b2c      	ldr	r3, [pc, #176]	; (80081a4 <tcp_listen_input+0x1a4>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	1e5a      	subs	r2, r3, #1
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	691a      	ldr	r2, [r3, #16]
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	7a1b      	ldrb	r3, [r3, #8]
 800810c:	f003 030c 	and.w	r3, r3, #12
 8008110:	b2da      	uxtb	r2, r3
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008116:	4b28      	ldr	r3, [pc, #160]	; (80081b8 <tcp_listen_input+0x1b8>)
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	60da      	str	r2, [r3, #12]
 800811e:	4a26      	ldr	r2, [pc, #152]	; (80081b8 <tcp_listen_input+0x1b8>)
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	6013      	str	r3, [r2, #0]
 8008124:	f003 f924 	bl	800b370 <tcp_timer_needed>
 8008128:	4b24      	ldr	r3, [pc, #144]	; (80081bc <tcp_listen_input+0x1bc>)
 800812a:	2201      	movs	r2, #1
 800812c:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800812e:	6978      	ldr	r0, [r7, #20]
 8008130:	f001 fd10 	bl	8009b54 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008134:	4b1c      	ldr	r3, [pc, #112]	; (80081a8 <tcp_listen_input+0x1a8>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	89db      	ldrh	r3, [r3, #14]
 800813a:	b29a      	uxth	r2, r3
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	3304      	adds	r3, #4
 8008156:	4619      	mov	r1, r3
 8008158:	4610      	mov	r0, r2
 800815a:	f7ff fad3 	bl	8007704 <tcp_eff_send_mss_impl>
 800815e:	4603      	mov	r3, r0
 8008160:	461a      	mov	r2, r3
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008166:	2112      	movs	r1, #18
 8008168:	6978      	ldr	r0, [r7, #20]
 800816a:	f002 fadd 	bl	800a728 <tcp_enqueue_flags>
 800816e:	4603      	mov	r3, r0
 8008170:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d004      	beq.n	8008184 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800817a:	2100      	movs	r1, #0
 800817c:	6978      	ldr	r0, [r7, #20]
 800817e:	f7fe f8fb 	bl	8006378 <tcp_abandon>
      return;
 8008182:	e006      	b.n	8008192 <tcp_listen_input+0x192>
    tcp_output(npcb);
 8008184:	6978      	ldr	r0, [r7, #20]
 8008186:	f002 fc27 	bl	800a9d8 <tcp_output>
  return;
 800818a:	e001      	b.n	8008190 <tcp_listen_input+0x190>
    return;
 800818c:	bf00      	nop
 800818e:	e000      	b.n	8008192 <tcp_listen_input+0x192>
  return;
 8008190:	bf00      	nop
}
 8008192:	3718      	adds	r7, #24
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	200000f8 	.word	0x200000f8
 800819c:	200000f0 	.word	0x200000f0
 80081a0:	200000f6 	.word	0x200000f6
 80081a4:	200000ec 	.word	0x200000ec
 80081a8:	200000dc 	.word	0x200000dc
 80081ac:	2000379c 	.word	0x2000379c
 80081b0:	200037a0 	.word	0x200037a0
 80081b4:	2000378c 	.word	0x2000378c
 80081b8:	20006cbc 	.word	0x20006cbc
 80081bc:	20006cb8 	.word	0x20006cb8

080081c0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af02      	add	r7, sp, #8
 80081c6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80081c8:	4b29      	ldr	r3, [pc, #164]	; (8008270 <tcp_timewait_input+0xb0>)
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	f003 0304 	and.w	r3, r3, #4
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d146      	bne.n	8008262 <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80081d4:	4b26      	ldr	r3, [pc, #152]	; (8008270 <tcp_timewait_input+0xb0>)
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	f003 0302 	and.w	r3, r3, #2
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d027      	beq.n	8008230 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80081e0:	4b24      	ldr	r3, [pc, #144]	; (8008274 <tcp_timewait_input+0xb4>)
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e8:	1ad3      	subs	r3, r2, r3
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	db2a      	blt.n	8008244 <tcp_timewait_input+0x84>
 80081ee:	4b21      	ldr	r3, [pc, #132]	; (8008274 <tcp_timewait_input+0xb4>)
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f6:	6879      	ldr	r1, [r7, #4]
 80081f8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80081fa:	440b      	add	r3, r1
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	dc20      	bgt.n	8008244 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008202:	4b1d      	ldr	r3, [pc, #116]	; (8008278 <tcp_timewait_input+0xb8>)
 8008204:	6818      	ldr	r0, [r3, #0]
 8008206:	4b1d      	ldr	r3, [pc, #116]	; (800827c <tcp_timewait_input+0xbc>)
 8008208:	881b      	ldrh	r3, [r3, #0]
 800820a:	461a      	mov	r2, r3
 800820c:	4b19      	ldr	r3, [pc, #100]	; (8008274 <tcp_timewait_input+0xb4>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008212:	4b1b      	ldr	r3, [pc, #108]	; (8008280 <tcp_timewait_input+0xc0>)
 8008214:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008216:	885b      	ldrh	r3, [r3, #2]
 8008218:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800821a:	4a19      	ldr	r2, [pc, #100]	; (8008280 <tcp_timewait_input+0xc0>)
 800821c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800821e:	8812      	ldrh	r2, [r2, #0]
 8008220:	b292      	uxth	r2, r2
 8008222:	9201      	str	r2, [sp, #4]
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	4b17      	ldr	r3, [pc, #92]	; (8008284 <tcp_timewait_input+0xc4>)
 8008228:	4a17      	ldr	r2, [pc, #92]	; (8008288 <tcp_timewait_input+0xc8>)
 800822a:	f002 fe59 	bl	800aee0 <tcp_rst>
      return;
 800822e:	e01b      	b.n	8008268 <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 8008230:	4b0f      	ldr	r3, [pc, #60]	; (8008270 <tcp_timewait_input+0xb0>)
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	f003 0301 	and.w	r3, r3, #1
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800823c:	4b13      	ldr	r3, [pc, #76]	; (800828c <tcp_timewait_input+0xcc>)
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008244:	4b0d      	ldr	r3, [pc, #52]	; (800827c <tcp_timewait_input+0xbc>)
 8008246:	881b      	ldrh	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00c      	beq.n	8008266 <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	7e9b      	ldrb	r3, [r3, #26]
 8008250:	f043 0302 	orr.w	r3, r3, #2
 8008254:	b2da      	uxtb	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f002 fbbc 	bl	800a9d8 <tcp_output>
  }
  return;
 8008260:	e001      	b.n	8008266 <tcp_timewait_input+0xa6>
    return;
 8008262:	bf00      	nop
 8008264:	e000      	b.n	8008268 <tcp_timewait_input+0xa8>
  return;
 8008266:	bf00      	nop
}
 8008268:	3708      	adds	r7, #8
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	200000f8 	.word	0x200000f8
 8008274:	200000ec 	.word	0x200000ec
 8008278:	200000f0 	.word	0x200000f0
 800827c:	200000f6 	.word	0x200000f6
 8008280:	200000dc 	.word	0x200000dc
 8008284:	2000379c 	.word	0x2000379c
 8008288:	200037a0 	.word	0x200037a0
 800828c:	20006cc0 	.word	0x20006cc0

08008290 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b08a      	sub	sp, #40	; 0x28
 8008294:	af02      	add	r7, sp, #8
 8008296:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008298:	2300      	movs	r3, #0
 800829a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800829c:	2300      	movs	r3, #0
 800829e:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80082a0:	4ba4      	ldr	r3, [pc, #656]	; (8008534 <tcp_process+0x2a4>)
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	f003 0304 	and.w	r3, r3, #4
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d04e      	beq.n	800834a <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	7d1b      	ldrb	r3, [r3, #20]
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d108      	bne.n	80082c6 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082b8:	4b9f      	ldr	r3, [pc, #636]	; (8008538 <tcp_process+0x2a8>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d123      	bne.n	8008308 <tcp_process+0x78>
        acceptable = 1;
 80082c0:	2301      	movs	r3, #1
 80082c2:	76fb      	strb	r3, [r7, #27]
 80082c4:	e020      	b.n	8008308 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082ca:	4b9c      	ldr	r3, [pc, #624]	; (800853c <tcp_process+0x2ac>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d102      	bne.n	80082d8 <tcp_process+0x48>
        acceptable = 1;
 80082d2:	2301      	movs	r3, #1
 80082d4:	76fb      	strb	r3, [r7, #27]
 80082d6:	e017      	b.n	8008308 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80082d8:	4b98      	ldr	r3, [pc, #608]	; (800853c <tcp_process+0x2ac>)
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e0:	1ad3      	subs	r3, r2, r3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	db10      	blt.n	8008308 <tcp_process+0x78>
 80082e6:	4b95      	ldr	r3, [pc, #596]	; (800853c <tcp_process+0x2ac>)
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ee:	6879      	ldr	r1, [r7, #4]
 80082f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80082f2:	440b      	add	r3, r1
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	dc06      	bgt.n	8008308 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	7e9b      	ldrb	r3, [r3, #26]
 80082fe:	f043 0302 	orr.w	r3, r3, #2
 8008302:	b2da      	uxtb	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008308:	7efb      	ldrb	r3, [r7, #27]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d01b      	beq.n	8008346 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	7d1b      	ldrb	r3, [r3, #20]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d106      	bne.n	8008324 <tcp_process+0x94>
 8008316:	4b8a      	ldr	r3, [pc, #552]	; (8008540 <tcp_process+0x2b0>)
 8008318:	f240 22e7 	movw	r2, #743	; 0x2e7
 800831c:	4989      	ldr	r1, [pc, #548]	; (8008544 <tcp_process+0x2b4>)
 800831e:	488a      	ldr	r0, [pc, #552]	; (8008548 <tcp_process+0x2b8>)
 8008320:	f005 fd24 	bl	800dd6c <iprintf>
      recv_flags |= TF_RESET;
 8008324:	4b89      	ldr	r3, [pc, #548]	; (800854c <tcp_process+0x2bc>)
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	f043 0308 	orr.w	r3, r3, #8
 800832c:	b2da      	uxtb	r2, r3
 800832e:	4b87      	ldr	r3, [pc, #540]	; (800854c <tcp_process+0x2bc>)
 8008330:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	7e9b      	ldrb	r3, [r3, #26]
 8008336:	f023 0301 	bic.w	r3, r3, #1
 800833a:	b2da      	uxtb	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 8008340:	f06f 030d 	mvn.w	r3, #13
 8008344:	e34d      	b.n	80089e2 <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008346:	2300      	movs	r3, #0
 8008348:	e34b      	b.n	80089e2 <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800834a:	4b7a      	ldr	r3, [pc, #488]	; (8008534 <tcp_process+0x2a4>)
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	f003 0302 	and.w	r3, r3, #2
 8008352:	2b00      	cmp	r3, #0
 8008354:	d010      	beq.n	8008378 <tcp_process+0xe8>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	7d1b      	ldrb	r3, [r3, #20]
 800835a:	2b02      	cmp	r3, #2
 800835c:	d00c      	beq.n	8008378 <tcp_process+0xe8>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	7d1b      	ldrb	r3, [r3, #20]
 8008362:	2b03      	cmp	r3, #3
 8008364:	d008      	beq.n	8008378 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	7e9b      	ldrb	r3, [r3, #26]
 800836a:	f043 0302 	orr.w	r3, r3, #2
 800836e:	b2da      	uxtb	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8008374:	2300      	movs	r3, #0
 8008376:	e334      	b.n	80089e2 <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	7e9b      	ldrb	r3, [r3, #26]
 800837c:	f003 0310 	and.w	r3, r3, #16
 8008380:	2b00      	cmp	r3, #0
 8008382:	d103      	bne.n	800838c <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008384:	4b72      	ldr	r3, [pc, #456]	; (8008550 <tcp_process+0x2c0>)
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f001 fbdd 	bl	8009b54 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	7d1b      	ldrb	r3, [r3, #20]
 800839e:	3b02      	subs	r3, #2
 80083a0:	2b07      	cmp	r3, #7
 80083a2:	f200 830e 	bhi.w	80089c2 <tcp_process+0x732>
 80083a6:	a201      	add	r2, pc, #4	; (adr r2, 80083ac <tcp_process+0x11c>)
 80083a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ac:	080083cd 	.word	0x080083cd
 80083b0:	080085c5 	.word	0x080085c5
 80083b4:	0800871d 	.word	0x0800871d
 80083b8:	08008747 	.word	0x08008747
 80083bc:	08008871 	.word	0x08008871
 80083c0:	0800871d 	.word	0x0800871d
 80083c4:	080088fd 	.word	0x080088fd
 80083c8:	0800898d 	.word	0x0800898d
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80083cc:	4b59      	ldr	r3, [pc, #356]	; (8008534 <tcp_process+0x2a4>)
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	f003 0310 	and.w	r3, r3, #16
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f000 80cb 	beq.w	8008570 <tcp_process+0x2e0>
 80083da:	4b56      	ldr	r3, [pc, #344]	; (8008534 <tcp_process+0x2a4>)
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	f003 0302 	and.w	r3, r3, #2
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f000 80c4 	beq.w	8008570 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ec:	1c5a      	adds	r2, r3, #1
 80083ee:	4b52      	ldr	r3, [pc, #328]	; (8008538 <tcp_process+0x2a8>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	f040 80bc 	bne.w	8008570 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 80083f8:	4b50      	ldr	r3, [pc, #320]	; (800853c <tcp_process+0x2ac>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	1c5a      	adds	r2, r3, #1
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800840a:	4b4b      	ldr	r3, [pc, #300]	; (8008538 <tcp_process+0x2a8>)
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 8008412:	4b50      	ldr	r3, [pc, #320]	; (8008554 <tcp_process+0x2c4>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	89db      	ldrh	r3, [r3, #14]
 8008418:	b29a      	uxth	r2, r3
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800842c:	4b43      	ldr	r3, [pc, #268]	; (800853c <tcp_process+0x2ac>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	1e5a      	subs	r2, r3, #1
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2204      	movs	r2, #4
 800843a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	3304      	adds	r3, #4
 8008444:	4619      	mov	r1, r3
 8008446:	4610      	mov	r0, r2
 8008448:	f7ff f95c 	bl	8007704 <tcp_eff_send_mss_impl>
 800844c:	4603      	mov	r3, r0
 800844e:	461a      	mov	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008458:	005b      	lsls	r3, r3, #1
 800845a:	f241 121c 	movw	r2, #4380	; 0x111c
 800845e:	429a      	cmp	r2, r3
 8008460:	bf38      	it	cc
 8008462:	461a      	movcc	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4293      	cmp	r3, r2
 800846c:	bf28      	it	cs
 800846e:	4613      	movcs	r3, r2
 8008470:	b29a      	uxth	r2, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800847e:	2b00      	cmp	r3, #0
 8008480:	d106      	bne.n	8008490 <tcp_process+0x200>
 8008482:	4b2f      	ldr	r3, [pc, #188]	; (8008540 <tcp_process+0x2b0>)
 8008484:	f240 321a 	movw	r2, #794	; 0x31a
 8008488:	4933      	ldr	r1, [pc, #204]	; (8008558 <tcp_process+0x2c8>)
 800848a:	482f      	ldr	r0, [pc, #188]	; (8008548 <tcp_process+0x2b8>)
 800848c:	f005 fc6e 	bl	800dd6c <iprintf>
      --pcb->snd_queuelen;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008496:	3b01      	subs	r3, #1
 8008498:	b29a      	uxth	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084a4:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d111      	bne.n	80084d0 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084b0:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d106      	bne.n	80084c6 <tcp_process+0x236>
 80084b8:	4b21      	ldr	r3, [pc, #132]	; (8008540 <tcp_process+0x2b0>)
 80084ba:	f240 3222 	movw	r2, #802	; 0x322
 80084be:	4927      	ldr	r1, [pc, #156]	; (800855c <tcp_process+0x2cc>)
 80084c0:	4821      	ldr	r0, [pc, #132]	; (8008548 <tcp_process+0x2b8>)
 80084c2:	f005 fc53 	bl	800dd6c <iprintf>
        pcb->unsent = rseg->next;
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	669a      	str	r2, [r3, #104]	; 0x68
 80084ce:	e003      	b.n	80084d8 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 80084d8:	69f8      	ldr	r0, [r7, #28]
 80084da:	f7fe fde7 	bl	80070ac <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d104      	bne.n	80084f0 <tcp_process+0x260>
        pcb->rtime = -1;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084ec:	861a      	strh	r2, [r3, #48]	; 0x30
 80084ee:	e006      	b.n	80084fe <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00a      	beq.n	800851e <tcp_process+0x28e>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	6910      	ldr	r0, [r2, #16]
 8008512:	2200      	movs	r2, #0
 8008514:	6879      	ldr	r1, [r7, #4]
 8008516:	4798      	blx	r3
 8008518:	4603      	mov	r3, r0
 800851a:	76bb      	strb	r3, [r7, #26]
 800851c:	e001      	b.n	8008522 <tcp_process+0x292>
 800851e:	2300      	movs	r3, #0
 8008520:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 8008522:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008526:	f113 0f0d 	cmn.w	r3, #13
 800852a:	d119      	bne.n	8008560 <tcp_process+0x2d0>
        return ERR_ABRT;
 800852c:	f06f 030c 	mvn.w	r3, #12
 8008530:	e257      	b.n	80089e2 <tcp_process+0x752>
 8008532:	bf00      	nop
 8008534:	200000f8 	.word	0x200000f8
 8008538:	200000f0 	.word	0x200000f0
 800853c:	200000ec 	.word	0x200000ec
 8008540:	0800f9c8 	.word	0x0800f9c8
 8008544:	0800fb80 	.word	0x0800fb80
 8008548:	0800fa0c 	.word	0x0800fa0c
 800854c:	200000f9 	.word	0x200000f9
 8008550:	20006cc0 	.word	0x20006cc0
 8008554:	200000dc 	.word	0x200000dc
 8008558:	0800fba0 	.word	0x0800fba0
 800855c:	0800fbb8 	.word	0x0800fbb8
      }
      tcp_ack_now(pcb);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	7e9b      	ldrb	r3, [r3, #26]
 8008564:	f043 0302 	orr.w	r3, r3, #2
 8008568:	b2da      	uxtb	r2, r3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800856e:	e22a      	b.n	80089c6 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 8008570:	4b9f      	ldr	r3, [pc, #636]	; (80087f0 <tcp_process+0x560>)
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	f003 0310 	and.w	r3, r3, #16
 8008578:	2b00      	cmp	r3, #0
 800857a:	f000 8224 	beq.w	80089c6 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800857e:	4b9d      	ldr	r3, [pc, #628]	; (80087f4 <tcp_process+0x564>)
 8008580:	6818      	ldr	r0, [r3, #0]
 8008582:	4b9d      	ldr	r3, [pc, #628]	; (80087f8 <tcp_process+0x568>)
 8008584:	881b      	ldrh	r3, [r3, #0]
 8008586:	461a      	mov	r2, r3
 8008588:	4b9c      	ldr	r3, [pc, #624]	; (80087fc <tcp_process+0x56c>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800858e:	4b9c      	ldr	r3, [pc, #624]	; (8008800 <tcp_process+0x570>)
 8008590:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008592:	885b      	ldrh	r3, [r3, #2]
 8008594:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008596:	4a9a      	ldr	r2, [pc, #616]	; (8008800 <tcp_process+0x570>)
 8008598:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800859a:	8812      	ldrh	r2, [r2, #0]
 800859c:	b292      	uxth	r2, r2
 800859e:	9201      	str	r2, [sp, #4]
 80085a0:	9300      	str	r3, [sp, #0]
 80085a2:	4b98      	ldr	r3, [pc, #608]	; (8008804 <tcp_process+0x574>)
 80085a4:	4a98      	ldr	r2, [pc, #608]	; (8008808 <tcp_process+0x578>)
 80085a6:	f002 fc9b 	bl	800aee0 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80085b0:	2b05      	cmp	r3, #5
 80085b2:	f200 8208 	bhi.w	80089c6 <tcp_process+0x736>
        pcb->rtime = 0;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f002 fd05 	bl	800afcc <tcp_rexmit_rto>
    break;
 80085c2:	e200      	b.n	80089c6 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 80085c4:	4b8a      	ldr	r3, [pc, #552]	; (80087f0 <tcp_process+0x560>)
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	f003 0310 	and.w	r3, r3, #16
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f000 8091 	beq.w	80086f4 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80085d2:	4b88      	ldr	r3, [pc, #544]	; (80087f4 <tcp_process+0x564>)
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	3b01      	subs	r3, #1
 80085de:	2b00      	cmp	r3, #0
 80085e0:	db71      	blt.n	80086c6 <tcp_process+0x436>
 80085e2:	4b84      	ldr	r3, [pc, #528]	; (80087f4 <tcp_process+0x564>)
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	dc6a      	bgt.n	80086c6 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2204      	movs	r2, #4
 80085f4:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00b      	beq.n	8008616 <tcp_process+0x386>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d106      	bne.n	8008616 <tcp_process+0x386>
 8008608:	4b80      	ldr	r3, [pc, #512]	; (800880c <tcp_process+0x57c>)
 800860a:	f44f 7254 	mov.w	r2, #848	; 0x350
 800860e:	4980      	ldr	r1, [pc, #512]	; (8008810 <tcp_process+0x580>)
 8008610:	4880      	ldr	r0, [pc, #512]	; (8008814 <tcp_process+0x584>)
 8008612:	f005 fbab 	bl	800dd6c <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800861a:	2b00      	cmp	r3, #0
 800861c:	d102      	bne.n	8008624 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800861e:	23fa      	movs	r3, #250	; 0xfa
 8008620:	76bb      	strb	r3, [r7, #26]
 8008622:	e011      	b.n	8008648 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00a      	beq.n	8008644 <tcp_process+0x3b4>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	6910      	ldr	r0, [r2, #16]
 8008638:	2200      	movs	r2, #0
 800863a:	6879      	ldr	r1, [r7, #4]
 800863c:	4798      	blx	r3
 800863e:	4603      	mov	r3, r0
 8008640:	76bb      	strb	r3, [r7, #26]
 8008642:	e001      	b.n	8008648 <tcp_process+0x3b8>
 8008644:	23f0      	movs	r3, #240	; 0xf0
 8008646:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8008648:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00a      	beq.n	8008666 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 8008650:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008654:	f113 0f0d 	cmn.w	r3, #13
 8008658:	d002      	beq.n	8008660 <tcp_process+0x3d0>
            tcp_abort(pcb);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f7fd ff3e 	bl	80064dc <tcp_abort>
          }
          return ERR_ABRT;
 8008660:	f06f 030c 	mvn.w	r3, #12
 8008664:	e1bd      	b.n	80089e2 <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 fa42 	bl	8008af0 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800866c:	4b6a      	ldr	r3, [pc, #424]	; (8008818 <tcp_process+0x588>)
 800866e:	881b      	ldrh	r3, [r3, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d005      	beq.n	8008680 <tcp_process+0x3f0>
          recv_acked--;
 8008674:	4b68      	ldr	r3, [pc, #416]	; (8008818 <tcp_process+0x588>)
 8008676:	881b      	ldrh	r3, [r3, #0]
 8008678:	3b01      	subs	r3, #1
 800867a:	b29a      	uxth	r2, r3
 800867c:	4b66      	ldr	r3, [pc, #408]	; (8008818 <tcp_process+0x588>)
 800867e:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008684:	005b      	lsls	r3, r3, #1
 8008686:	f241 121c 	movw	r2, #4380	; 0x111c
 800868a:	429a      	cmp	r2, r3
 800868c:	bf38      	it	cc
 800868e:	461a      	movcc	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	4293      	cmp	r3, r2
 8008698:	bf28      	it	cs
 800869a:	4613      	movcs	r3, r2
 800869c:	b29a      	uxth	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 80086a4:	4b5d      	ldr	r3, [pc, #372]	; (800881c <tcp_process+0x58c>)
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	f003 0320 	and.w	r3, r3, #32
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d034      	beq.n	800871a <tcp_process+0x48a>
          tcp_ack_now(pcb);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	7e9b      	ldrb	r3, [r3, #26]
 80086b4:	f043 0302 	orr.w	r3, r3, #2
 80086b8:	b2da      	uxtb	r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2207      	movs	r2, #7
 80086c2:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 80086c4:	e029      	b.n	800871a <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80086c6:	4b4b      	ldr	r3, [pc, #300]	; (80087f4 <tcp_process+0x564>)
 80086c8:	6818      	ldr	r0, [r3, #0]
 80086ca:	4b4b      	ldr	r3, [pc, #300]	; (80087f8 <tcp_process+0x568>)
 80086cc:	881b      	ldrh	r3, [r3, #0]
 80086ce:	461a      	mov	r2, r3
 80086d0:	4b4a      	ldr	r3, [pc, #296]	; (80087fc <tcp_process+0x56c>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80086d6:	4b4a      	ldr	r3, [pc, #296]	; (8008800 <tcp_process+0x570>)
 80086d8:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80086da:	885b      	ldrh	r3, [r3, #2]
 80086dc:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80086de:	4a48      	ldr	r2, [pc, #288]	; (8008800 <tcp_process+0x570>)
 80086e0:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80086e2:	8812      	ldrh	r2, [r2, #0]
 80086e4:	b292      	uxth	r2, r2
 80086e6:	9201      	str	r2, [sp, #4]
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	4b46      	ldr	r3, [pc, #280]	; (8008804 <tcp_process+0x574>)
 80086ec:	4a46      	ldr	r2, [pc, #280]	; (8008808 <tcp_process+0x578>)
 80086ee:	f002 fbf7 	bl	800aee0 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 80086f2:	e16a      	b.n	80089ca <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80086f4:	4b3e      	ldr	r3, [pc, #248]	; (80087f0 <tcp_process+0x560>)
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	f003 0302 	and.w	r3, r3, #2
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f000 8164 	beq.w	80089ca <tcp_process+0x73a>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008706:	1e5a      	subs	r2, r3, #1
 8008708:	4b3c      	ldr	r3, [pc, #240]	; (80087fc <tcp_process+0x56c>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	429a      	cmp	r2, r3
 800870e:	f040 815c 	bne.w	80089ca <tcp_process+0x73a>
      tcp_rexmit(pcb);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f002 fc90 	bl	800b038 <tcp_rexmit>
    break;
 8008718:	e157      	b.n	80089ca <tcp_process+0x73a>
 800871a:	e156      	b.n	80089ca <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 f9e7 	bl	8008af0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008722:	4b3e      	ldr	r3, [pc, #248]	; (800881c <tcp_process+0x58c>)
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	f003 0320 	and.w	r3, r3, #32
 800872a:	2b00      	cmp	r3, #0
 800872c:	f000 814f 	beq.w	80089ce <tcp_process+0x73e>
      tcp_ack_now(pcb);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	7e9b      	ldrb	r3, [r3, #26]
 8008734:	f043 0302 	orr.w	r3, r3, #2
 8008738:	b2da      	uxtb	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2207      	movs	r2, #7
 8008742:	751a      	strb	r2, [r3, #20]
    }
    break;
 8008744:	e143      	b.n	80089ce <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f9d2 	bl	8008af0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800874c:	4b33      	ldr	r3, [pc, #204]	; (800881c <tcp_process+0x58c>)
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	f003 0320 	and.w	r3, r3, #32
 8008754:	2b00      	cmp	r3, #0
 8008756:	d074      	beq.n	8008842 <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008758:	4b25      	ldr	r3, [pc, #148]	; (80087f0 <tcp_process+0x560>)
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	f003 0310 	and.w	r3, r3, #16
 8008760:	2b00      	cmp	r3, #0
 8008762:	d063      	beq.n	800882c <tcp_process+0x59c>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008768:	4b22      	ldr	r3, [pc, #136]	; (80087f4 <tcp_process+0x564>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	429a      	cmp	r2, r3
 800876e:	d15d      	bne.n	800882c <tcp_process+0x59c>
          pcb->unsent == NULL) {
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008774:	2b00      	cmp	r3, #0
 8008776:	d159      	bne.n	800882c <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	7e9b      	ldrb	r3, [r3, #26]
 800877c:	f043 0302 	orr.w	r3, r3, #2
 8008780:	b2da      	uxtb	r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f7fe fee8 	bl	800755c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800878c:	4b24      	ldr	r3, [pc, #144]	; (8008820 <tcp_process+0x590>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	429a      	cmp	r2, r3
 8008794:	d105      	bne.n	80087a2 <tcp_process+0x512>
 8008796:	4b22      	ldr	r3, [pc, #136]	; (8008820 <tcp_process+0x590>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	4a20      	ldr	r2, [pc, #128]	; (8008820 <tcp_process+0x590>)
 800879e:	6013      	str	r3, [r2, #0]
 80087a0:	e013      	b.n	80087ca <tcp_process+0x53a>
 80087a2:	4b1f      	ldr	r3, [pc, #124]	; (8008820 <tcp_process+0x590>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	617b      	str	r3, [r7, #20]
 80087a8:	e00c      	b.n	80087c4 <tcp_process+0x534>
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d104      	bne.n	80087be <tcp_process+0x52e>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	68da      	ldr	r2, [r3, #12]
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	60da      	str	r2, [r3, #12]
 80087bc:	e005      	b.n	80087ca <tcp_process+0x53a>
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	617b      	str	r3, [r7, #20]
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d1ef      	bne.n	80087aa <tcp_process+0x51a>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	60da      	str	r2, [r3, #12]
 80087d0:	4b14      	ldr	r3, [pc, #80]	; (8008824 <tcp_process+0x594>)
 80087d2:	2201      	movs	r2, #1
 80087d4:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	220a      	movs	r2, #10
 80087da:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80087dc:	4b12      	ldr	r3, [pc, #72]	; (8008828 <tcp_process+0x598>)
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	60da      	str	r2, [r3, #12]
 80087e4:	4a10      	ldr	r2, [pc, #64]	; (8008828 <tcp_process+0x598>)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6013      	str	r3, [r2, #0]
 80087ea:	f002 fdc1 	bl	800b370 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 80087ee:	e0f0      	b.n	80089d2 <tcp_process+0x742>
 80087f0:	200000f8 	.word	0x200000f8
 80087f4:	200000f0 	.word	0x200000f0
 80087f8:	200000f6 	.word	0x200000f6
 80087fc:	200000ec 	.word	0x200000ec
 8008800:	200000dc 	.word	0x200000dc
 8008804:	2000379c 	.word	0x2000379c
 8008808:	200037a0 	.word	0x200037a0
 800880c:	0800f9c8 	.word	0x0800f9c8
 8008810:	0800fbcc 	.word	0x0800fbcc
 8008814:	0800fa0c 	.word	0x0800fa0c
 8008818:	200000f4 	.word	0x200000f4
 800881c:	200000f9 	.word	0x200000f9
 8008820:	20006cbc 	.word	0x20006cbc
 8008824:	20006cb8 	.word	0x20006cb8
 8008828:	20006ccc 	.word	0x20006ccc
        tcp_ack_now(pcb);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	7e9b      	ldrb	r3, [r3, #26]
 8008830:	f043 0302 	orr.w	r3, r3, #2
 8008834:	b2da      	uxtb	r2, r3
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2208      	movs	r2, #8
 800883e:	751a      	strb	r2, [r3, #20]
    break;
 8008840:	e0c7      	b.n	80089d2 <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008842:	4b6a      	ldr	r3, [pc, #424]	; (80089ec <tcp_process+0x75c>)
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	f003 0310 	and.w	r3, r3, #16
 800884a:	2b00      	cmp	r3, #0
 800884c:	f000 80c1 	beq.w	80089d2 <tcp_process+0x742>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008854:	4b66      	ldr	r3, [pc, #408]	; (80089f0 <tcp_process+0x760>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	429a      	cmp	r2, r3
 800885a:	f040 80ba 	bne.w	80089d2 <tcp_process+0x742>
               pcb->unsent == NULL) {
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008862:	2b00      	cmp	r3, #0
 8008864:	f040 80b5 	bne.w	80089d2 <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2206      	movs	r2, #6
 800886c:	751a      	strb	r2, [r3, #20]
    break;
 800886e:	e0b0      	b.n	80089d2 <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f93d 	bl	8008af0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8008876:	4b5f      	ldr	r3, [pc, #380]	; (80089f4 <tcp_process+0x764>)
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	f003 0320 	and.w	r3, r3, #32
 800887e:	2b00      	cmp	r3, #0
 8008880:	f000 80a9 	beq.w	80089d6 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	7e9b      	ldrb	r3, [r3, #26]
 8008888:	f043 0302 	orr.w	r3, r3, #2
 800888c:	b2da      	uxtb	r2, r3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f7fe fe62 	bl	800755c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008898:	4b57      	ldr	r3, [pc, #348]	; (80089f8 <tcp_process+0x768>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d105      	bne.n	80088ae <tcp_process+0x61e>
 80088a2:	4b55      	ldr	r3, [pc, #340]	; (80089f8 <tcp_process+0x768>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	4a53      	ldr	r2, [pc, #332]	; (80089f8 <tcp_process+0x768>)
 80088aa:	6013      	str	r3, [r2, #0]
 80088ac:	e013      	b.n	80088d6 <tcp_process+0x646>
 80088ae:	4b52      	ldr	r3, [pc, #328]	; (80089f8 <tcp_process+0x768>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	613b      	str	r3, [r7, #16]
 80088b4:	e00c      	b.n	80088d0 <tcp_process+0x640>
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d104      	bne.n	80088ca <tcp_process+0x63a>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	68da      	ldr	r2, [r3, #12]
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	60da      	str	r2, [r3, #12]
 80088c8:	e005      	b.n	80088d6 <tcp_process+0x646>
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	613b      	str	r3, [r7, #16]
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d1ef      	bne.n	80088b6 <tcp_process+0x626>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	60da      	str	r2, [r3, #12]
 80088dc:	4b47      	ldr	r3, [pc, #284]	; (80089fc <tcp_process+0x76c>)
 80088de:	2201      	movs	r2, #1
 80088e0:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	220a      	movs	r2, #10
 80088e6:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80088e8:	4b45      	ldr	r3, [pc, #276]	; (8008a00 <tcp_process+0x770>)
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	60da      	str	r2, [r3, #12]
 80088f0:	4a43      	ldr	r2, [pc, #268]	; (8008a00 <tcp_process+0x770>)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6013      	str	r3, [r2, #0]
 80088f6:	f002 fd3b 	bl	800b370 <tcp_timer_needed>
    }
    break;
 80088fa:	e06c      	b.n	80089d6 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 f8f7 	bl	8008af0 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008902:	4b3a      	ldr	r3, [pc, #232]	; (80089ec <tcp_process+0x75c>)
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	f003 0310 	and.w	r3, r3, #16
 800890a:	2b00      	cmp	r3, #0
 800890c:	d065      	beq.n	80089da <tcp_process+0x74a>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008912:	4b37      	ldr	r3, [pc, #220]	; (80089f0 <tcp_process+0x760>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	429a      	cmp	r2, r3
 8008918:	d15f      	bne.n	80089da <tcp_process+0x74a>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800891e:	2b00      	cmp	r3, #0
 8008920:	d15b      	bne.n	80089da <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f7fe fe1a 	bl	800755c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008928:	4b33      	ldr	r3, [pc, #204]	; (80089f8 <tcp_process+0x768>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	429a      	cmp	r2, r3
 8008930:	d105      	bne.n	800893e <tcp_process+0x6ae>
 8008932:	4b31      	ldr	r3, [pc, #196]	; (80089f8 <tcp_process+0x768>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	4a2f      	ldr	r2, [pc, #188]	; (80089f8 <tcp_process+0x768>)
 800893a:	6013      	str	r3, [r2, #0]
 800893c:	e013      	b.n	8008966 <tcp_process+0x6d6>
 800893e:	4b2e      	ldr	r3, [pc, #184]	; (80089f8 <tcp_process+0x768>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	60fb      	str	r3, [r7, #12]
 8008944:	e00c      	b.n	8008960 <tcp_process+0x6d0>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	429a      	cmp	r2, r3
 800894e:	d104      	bne.n	800895a <tcp_process+0x6ca>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	68da      	ldr	r2, [r3, #12]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	60da      	str	r2, [r3, #12]
 8008958:	e005      	b.n	8008966 <tcp_process+0x6d6>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	60fb      	str	r3, [r7, #12]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1ef      	bne.n	8008946 <tcp_process+0x6b6>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	60da      	str	r2, [r3, #12]
 800896c:	4b23      	ldr	r3, [pc, #140]	; (80089fc <tcp_process+0x76c>)
 800896e:	2201      	movs	r2, #1
 8008970:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	220a      	movs	r2, #10
 8008976:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8008978:	4b21      	ldr	r3, [pc, #132]	; (8008a00 <tcp_process+0x770>)
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	60da      	str	r2, [r3, #12]
 8008980:	4a1f      	ldr	r2, [pc, #124]	; (8008a00 <tcp_process+0x770>)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6013      	str	r3, [r2, #0]
 8008986:	f002 fcf3 	bl	800b370 <tcp_timer_needed>
    }
    break;
 800898a:	e026      	b.n	80089da <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 f8af 	bl	8008af0 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008992:	4b16      	ldr	r3, [pc, #88]	; (80089ec <tcp_process+0x75c>)
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	f003 0310 	and.w	r3, r3, #16
 800899a:	2b00      	cmp	r3, #0
 800899c:	d01f      	beq.n	80089de <tcp_process+0x74e>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089a2:	4b13      	ldr	r3, [pc, #76]	; (80089f0 <tcp_process+0x760>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d119      	bne.n	80089de <tcp_process+0x74e>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d115      	bne.n	80089de <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 80089b2:	4b10      	ldr	r3, [pc, #64]	; (80089f4 <tcp_process+0x764>)
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	f043 0310 	orr.w	r3, r3, #16
 80089ba:	b2da      	uxtb	r2, r3
 80089bc:	4b0d      	ldr	r3, [pc, #52]	; (80089f4 <tcp_process+0x764>)
 80089be:	701a      	strb	r2, [r3, #0]
    }
    break;
 80089c0:	e00d      	b.n	80089de <tcp_process+0x74e>
  default:
    break;
 80089c2:	bf00      	nop
 80089c4:	e00c      	b.n	80089e0 <tcp_process+0x750>
    break;
 80089c6:	bf00      	nop
 80089c8:	e00a      	b.n	80089e0 <tcp_process+0x750>
    break;
 80089ca:	bf00      	nop
 80089cc:	e008      	b.n	80089e0 <tcp_process+0x750>
    break;
 80089ce:	bf00      	nop
 80089d0:	e006      	b.n	80089e0 <tcp_process+0x750>
    break;
 80089d2:	bf00      	nop
 80089d4:	e004      	b.n	80089e0 <tcp_process+0x750>
    break;
 80089d6:	bf00      	nop
 80089d8:	e002      	b.n	80089e0 <tcp_process+0x750>
    break;
 80089da:	bf00      	nop
 80089dc:	e000      	b.n	80089e0 <tcp_process+0x750>
    break;
 80089de:	bf00      	nop
  }
  return ERR_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3720      	adds	r7, #32
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	200000f8 	.word	0x200000f8
 80089f0:	200000f0 	.word	0x200000f0
 80089f4:	200000f9 	.word	0x200000f9
 80089f8:	20006cbc 	.word	0x20006cbc
 80089fc:	20006cb8 	.word	0x20006cb8
 8008a00:	20006ccc 	.word	0x20006ccc

08008a04 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008a04:	b590      	push	{r4, r7, lr}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	899b      	ldrh	r3, [r3, #12]
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7fb ff2d 	bl	8004876 <lwip_htons>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	f003 0301 	and.w	r3, r3, #1
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d027      	beq.n	8008a76 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008a26:	6838      	ldr	r0, [r7, #0]
 8008a28:	f7fe fb2b 	bl	8007082 <tcp_segs_free>
    next = NULL;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	603b      	str	r3, [r7, #0]
 8008a30:	e055      	b.n	8008ade <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	899b      	ldrh	r3, [r3, #12]
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7fb ff1b 	bl	8004876 <lwip_htons>
 8008a40:	4603      	mov	r3, r0
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00d      	beq.n	8008a66 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	899b      	ldrh	r3, [r3, #12]
 8008a50:	b29c      	uxth	r4, r3
 8008a52:	2001      	movs	r0, #1
 8008a54:	f7fb ff0f 	bl	8004876 <lwip_htons>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	4322      	orrs	r2, r4
 8008a62:	b292      	uxth	r2, r2
 8008a64:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f7fe fb1b 	bl	80070ac <tcp_seg_free>
    while (next &&
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d00e      	beq.n	8008a9a <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	891b      	ldrh	r3, [r3, #8]
 8008a80:	461a      	mov	r2, r3
 8008a82:	4b1a      	ldr	r3, [pc, #104]	; (8008aec <tcp_oos_insert_segment+0xe8>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	441a      	add	r2, r3
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	6839      	ldr	r1, [r7, #0]
 8008a90:	8909      	ldrh	r1, [r1, #8]
 8008a92:	440b      	add	r3, r1
 8008a94:	1ad3      	subs	r3, r2, r3
    while (next &&
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	dacb      	bge.n	8008a32 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d01e      	beq.n	8008ade <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	891b      	ldrh	r3, [r3, #8]
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	4b11      	ldr	r3, [pc, #68]	; (8008aec <tcp_oos_insert_segment+0xe8>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	441a      	add	r2, r3
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	dd12      	ble.n	8008ade <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	b29a      	uxth	r2, r3
 8008ac0:	4b0a      	ldr	r3, [pc, #40]	; (8008aec <tcp_oos_insert_segment+0xe8>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	1ad3      	subs	r3, r2, r3
 8008ac8:	b29a      	uxth	r2, r3
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	685a      	ldr	r2, [r3, #4]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	891b      	ldrh	r3, [r3, #8]
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	4610      	mov	r0, r2
 8008ada:	f7fc fe85 	bl	80057e8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	683a      	ldr	r2, [r7, #0]
 8008ae2:	601a      	str	r2, [r3, #0]
}
 8008ae4:	bf00      	nop
 8008ae6:	3714      	adds	r7, #20
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd90      	pop	{r4, r7, pc}
 8008aec:	200000ec 	.word	0x200000ec

08008af0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008af2:	b08d      	sub	sp, #52	; 0x34
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8008af8:	2300      	movs	r3, #0
 8008afa:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	7d1b      	ldrb	r3, [r3, #20]
 8008b00:	2b03      	cmp	r3, #3
 8008b02:	d806      	bhi.n	8008b12 <tcp_receive+0x22>
 8008b04:	4ba6      	ldr	r3, [pc, #664]	; (8008da0 <tcp_receive+0x2b0>)
 8008b06:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8008b0a:	49a6      	ldr	r1, [pc, #664]	; (8008da4 <tcp_receive+0x2b4>)
 8008b0c:	48a6      	ldr	r0, [pc, #664]	; (8008da8 <tcp_receive+0x2b8>)
 8008b0e:	f005 f92d 	bl	800dd6c <iprintf>

  if (flags & TCP_ACK) {
 8008b12:	4ba6      	ldr	r3, [pc, #664]	; (8008dac <tcp_receive+0x2bc>)
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	f003 0310 	and.w	r3, r3, #16
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	f000 82bf 	beq.w	800909e <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b26:	461a      	mov	r2, r3
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b2c:	4413      	add	r3, r2
 8008b2e:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b34:	4b9e      	ldr	r3, [pc, #632]	; (8008db0 <tcp_receive+0x2c0>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	1ad3      	subs	r3, r2, r3
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	db1b      	blt.n	8008b76 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b42:	4b9b      	ldr	r3, [pc, #620]	; (8008db0 <tcp_receive+0x2c0>)
 8008b44:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d106      	bne.n	8008b58 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b4e:	4b99      	ldr	r3, [pc, #612]	; (8008db4 <tcp_receive+0x2c4>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	1ad3      	subs	r3, r2, r3
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	db0e      	blt.n	8008b76 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b5c:	4b95      	ldr	r3, [pc, #596]	; (8008db4 <tcp_receive+0x2c4>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d141      	bne.n	8008be8 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008b64:	4b94      	ldr	r3, [pc, #592]	; (8008db8 <tcp_receive+0x2c8>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	89db      	ldrh	r3, [r3, #14]
 8008b6a:	b29a      	uxth	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d938      	bls.n	8008be8 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008b76:	4b90      	ldr	r3, [pc, #576]	; (8008db8 <tcp_receive+0x2c8>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	89db      	ldrh	r3, [r3, #14]
 8008b7c:	b29a      	uxth	r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d205      	bcs.n	8008ba0 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 8008ba0:	4b83      	ldr	r3, [pc, #524]	; (8008db0 <tcp_receive+0x2c0>)
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8008ba8:	4b82      	ldr	r3, [pc, #520]	; (8008db4 <tcp_receive+0x2c4>)
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d10d      	bne.n	8008bd6 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d111      	bne.n	8008be8 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8008bd4:	e008      	b.n	8008be8 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d003      	beq.n	8008be8 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008be8:	4b72      	ldr	r3, [pc, #456]	; (8008db4 <tcp_receive+0x2c4>)
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bf0:	1ad3      	subs	r3, r2, r3
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	dc53      	bgt.n	8008c9e <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8008bf6:	4b71      	ldr	r3, [pc, #452]	; (8008dbc <tcp_receive+0x2cc>)
 8008bf8:	881b      	ldrh	r3, [r3, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d146      	bne.n	8008c8c <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8008c08:	4413      	add	r3, r2
 8008c0a:	697a      	ldr	r2, [r7, #20]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d13d      	bne.n	8008c8c <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	db38      	blt.n	8008c8c <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c1e:	4b65      	ldr	r3, [pc, #404]	; (8008db4 <tcp_receive+0x2c4>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d132      	bne.n	8008c8c <tcp_receive+0x19c>
              found_dupack = 1;
 8008c26:	2301      	movs	r3, #1
 8008c28:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008c30:	2bff      	cmp	r3, #255	; 0xff
 8008c32:	d007      	beq.n	8008c44 <tcp_receive+0x154>
                ++pcb->dupacks;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	b2da      	uxtb	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008c4a:	2b03      	cmp	r3, #3
 8008c4c:	d916      	bls.n	8008c7c <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c58:	4413      	add	r3, r2
 8008c5a:	b29a      	uxth	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d912      	bls.n	8008c8c <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c70:	4413      	add	r3, r2
 8008c72:	b29a      	uxth	r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008c7a:	e007      	b.n	8008c8c <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008c82:	2b03      	cmp	r3, #3
 8008c84:	d102      	bne.n	8008c8c <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f002 fa26 	bl	800b0d8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	f040 8169 	bne.w	8008f66 <tcp_receive+0x476>
        pcb->dupacks = 0;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c9c:	e163      	b.n	8008f66 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8008c9e:	4b45      	ldr	r3, [pc, #276]	; (8008db4 <tcp_receive+0x2c4>)
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ca6:	1ad3      	subs	r3, r2, r3
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f2c0 8107 	blt.w	8008ebe <tcp_receive+0x3ce>
 8008cb0:	4b40      	ldr	r3, [pc, #256]	; (8008db4 <tcp_receive+0x2c4>)
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	f300 80ff 	bgt.w	8008ebe <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	7e9b      	ldrb	r3, [r3, #26]
 8008cc4:	f003 0304 	and.w	r3, r3, #4
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00c      	beq.n	8008ce6 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	7e9b      	ldrb	r3, [r3, #26]
 8008cd0:	f023 0304 	bic.w	r3, r3, #4
 8008cd4:	b2da      	uxtb	r2, r3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008cf4:	10db      	asrs	r3, r3, #3
 8008cf6:	b21b      	sxth	r3, r3
 8008cf8:	b29a      	uxth	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	4413      	add	r3, r2
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	b21a      	sxth	r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008d16:	4b27      	ldr	r3, [pc, #156]	; (8008db4 <tcp_receive+0x2c4>)
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	7d1b      	ldrb	r3, [r3, #20]
 8008d22:	2b03      	cmp	r3, #3
 8008d24:	f240 8094 	bls.w	8008e50 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d216      	bcs.n	8008d66 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d42:	4413      	add	r3, r2
 8008d44:	b29a      	uxth	r2, r3
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d97f      	bls.n	8008e50 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d5a:	4413      	add	r3, r2
 8008d5c:	b29a      	uxth	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008d64:	e074      	b.n	8008e50 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d70:	4619      	mov	r1, r3
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d76:	fb03 f301 	mul.w	r3, r3, r1
 8008d7a:	6879      	ldr	r1, [r7, #4]
 8008d7c:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 8008d80:	fb93 f3f1 	sdiv	r3, r3, r1
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	4413      	add	r3, r2
 8008d88:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008d90:	8a7a      	ldrh	r2, [r7, #18]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d95c      	bls.n	8008e50 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	8a7a      	ldrh	r2, [r7, #18]
 8008d9a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8008d9e:	e057      	b.n	8008e50 <tcp_receive+0x360>
 8008da0:	0800f9c8 	.word	0x0800f9c8
 8008da4:	0800fbec 	.word	0x0800fbec
 8008da8:	0800fa0c 	.word	0x0800fa0c
 8008dac:	200000f8 	.word	0x200000f8
 8008db0:	200000ec 	.word	0x200000ec
 8008db4:	200000f0 	.word	0x200000f0
 8008db8:	200000dc 	.word	0x200000dc
 8008dbc:	200000f6 	.word	0x200000f6
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8008dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7fc ff0c 	bl	8005bf8 <pbuf_clen>
 8008de0:	4603      	mov	r3, r0
 8008de2:	429c      	cmp	r4, r3
 8008de4:	d206      	bcs.n	8008df4 <tcp_receive+0x304>
 8008de6:	4b70      	ldr	r3, [pc, #448]	; (8008fa8 <tcp_receive+0x4b8>)
 8008de8:	f240 429e 	movw	r2, #1182	; 0x49e
 8008dec:	496f      	ldr	r1, [pc, #444]	; (8008fac <tcp_receive+0x4bc>)
 8008dee:	4870      	ldr	r0, [pc, #448]	; (8008fb0 <tcp_receive+0x4c0>)
 8008df0:	f004 ffbc 	bl	800dd6c <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8008df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7fc fefd 	bl	8005bf8 <pbuf_clen>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	461a      	mov	r2, r3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e08:	1a9b      	subs	r3, r3, r2
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8008e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e14:	891a      	ldrh	r2, [r3, #8]
 8008e16:	4b67      	ldr	r3, [pc, #412]	; (8008fb4 <tcp_receive+0x4c4>)
 8008e18:	881b      	ldrh	r3, [r3, #0]
 8008e1a:	4413      	add	r3, r2
 8008e1c:	b29a      	uxth	r2, r3
 8008e1e:	4b65      	ldr	r3, [pc, #404]	; (8008fb4 <tcp_receive+0x4c4>)
 8008e20:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8008e22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e24:	f7fe f942 	bl	80070ac <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00e      	beq.n	8008e50 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d10a      	bne.n	8008e50 <tcp_receive+0x360>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d106      	bne.n	8008e50 <tcp_receive+0x360>
 8008e42:	4b59      	ldr	r3, [pc, #356]	; (8008fa8 <tcp_receive+0x4b8>)
 8008e44:	f240 42a6 	movw	r2, #1190	; 0x4a6
 8008e48:	495b      	ldr	r1, [pc, #364]	; (8008fb8 <tcp_receive+0x4c8>)
 8008e4a:	4859      	ldr	r0, [pc, #356]	; (8008fb0 <tcp_receive+0x4c0>)
 8008e4c:	f004 ff8e 	bl	800dd6c <iprintf>
      while (pcb->unacked != NULL &&
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d022      	beq.n	8008e9e <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7fb fd15 	bl	8004890 <lwip_htonl>
 8008e66:	4604      	mov	r4, r0
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e6c:	891b      	ldrh	r3, [r3, #8]
 8008e6e:	461d      	mov	r5, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	899b      	ldrh	r3, [r3, #12]
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7fb fcfb 	bl	8004876 <lwip_htons>
 8008e80:	4603      	mov	r3, r0
 8008e82:	f003 0303 	and.w	r3, r3, #3
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d001      	beq.n	8008e8e <tcp_receive+0x39e>
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e000      	b.n	8008e90 <tcp_receive+0x3a0>
 8008e8e:	2300      	movs	r3, #0
 8008e90:	442b      	add	r3, r5
 8008e92:	18e2      	adds	r2, r4, r3
 8008e94:	4b49      	ldr	r3, [pc, #292]	; (8008fbc <tcp_receive+0x4cc>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	dd90      	ble.n	8008dc0 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d104      	bne.n	8008eb0 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008eac:	861a      	strh	r2, [r3, #48]	; 0x30
 8008eae:	e002      	b.n	8008eb6 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	76da      	strb	r2, [r3, #27]
 8008ebc:	e002      	b.n	8008ec4 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f001 fd2e 	bl	800a920 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8008ec4:	e04f      	b.n	8008f66 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008eca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d103      	bne.n	8008ee6 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8008eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7fc fe81 	bl	8005bf8 <pbuf_clen>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	429c      	cmp	r4, r3
 8008efa:	d206      	bcs.n	8008f0a <tcp_receive+0x41a>
 8008efc:	4b2a      	ldr	r3, [pc, #168]	; (8008fa8 <tcp_receive+0x4b8>)
 8008efe:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8008f02:	492a      	ldr	r1, [pc, #168]	; (8008fac <tcp_receive+0x4bc>)
 8008f04:	482a      	ldr	r0, [pc, #168]	; (8008fb0 <tcp_receive+0x4c0>)
 8008f06:	f004 ff31 	bl	800dd6c <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8008f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7fc fe72 	bl	8005bf8 <pbuf_clen>
 8008f14:	4603      	mov	r3, r0
 8008f16:	461a      	mov	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008f1e:	1a9b      	subs	r3, r3, r2
 8008f20:	b29a      	uxth	r2, r3
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8008f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2a:	891a      	ldrh	r2, [r3, #8]
 8008f2c:	4b21      	ldr	r3, [pc, #132]	; (8008fb4 <tcp_receive+0x4c4>)
 8008f2e:	881b      	ldrh	r3, [r3, #0]
 8008f30:	4413      	add	r3, r2
 8008f32:	b29a      	uxth	r2, r3
 8008f34:	4b1f      	ldr	r3, [pc, #124]	; (8008fb4 <tcp_receive+0x4c4>)
 8008f36:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8008f38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f3a:	f7fe f8b7 	bl	80070ac <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d00e      	beq.n	8008f66 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d10a      	bne.n	8008f66 <tcp_receive+0x476>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d106      	bne.n	8008f66 <tcp_receive+0x476>
 8008f58:	4b13      	ldr	r3, [pc, #76]	; (8008fa8 <tcp_receive+0x4b8>)
 8008f5a:	f240 42dc 	movw	r2, #1244	; 0x4dc
 8008f5e:	4916      	ldr	r1, [pc, #88]	; (8008fb8 <tcp_receive+0x4c8>)
 8008f60:	4813      	ldr	r0, [pc, #76]	; (8008fb0 <tcp_receive+0x4c0>)
 8008f62:	f004 ff03 	bl	800dd6c <iprintf>
    while (pcb->unsent != NULL &&
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d036      	beq.n	8008fdc <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8008f6e:	4b13      	ldr	r3, [pc, #76]	; (8008fbc <tcp_receive+0x4cc>)
 8008f70:	681c      	ldr	r4, [r3, #0]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7fb fc88 	bl	8004890 <lwip_htonl>
 8008f80:	4605      	mov	r5, r0
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f86:	891b      	ldrh	r3, [r3, #8]
 8008f88:	461e      	mov	r6, r3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	899b      	ldrh	r3, [r3, #12]
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7fb fc6e 	bl	8004876 <lwip_htons>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	f003 0303 	and.w	r3, r3, #3
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00d      	beq.n	8008fc0 <tcp_receive+0x4d0>
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	e00c      	b.n	8008fc2 <tcp_receive+0x4d2>
 8008fa8:	0800f9c8 	.word	0x0800f9c8
 8008fac:	0800fc08 	.word	0x0800fc08
 8008fb0:	0800fa0c 	.word	0x0800fa0c
 8008fb4:	200000f4 	.word	0x200000f4
 8008fb8:	0800fc30 	.word	0x0800fc30
 8008fbc:	200000f0 	.word	0x200000f0
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	4433      	add	r3, r6
 8008fc4:	442b      	add	r3, r5
 8008fc6:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	db07      	blt.n	8008fdc <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8008fcc:	4b8d      	ldr	r3, [pc, #564]	; (8009204 <tcp_receive+0x714>)
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f77f af75 	ble.w	8008ec6 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008fe2:	4b89      	ldr	r3, [pc, #548]	; (8009208 <tcp_receive+0x718>)
 8008fe4:	881b      	ldrh	r3, [r3, #0]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	b29a      	uxth	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d052      	beq.n	800909e <tcp_receive+0x5ae>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ffc:	4b81      	ldr	r3, [pc, #516]	; (8009204 <tcp_receive+0x714>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	da4b      	bge.n	800909e <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009006:	4b81      	ldr	r3, [pc, #516]	; (800920c <tcp_receive+0x71c>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	b29a      	uxth	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009010:	b29b      	uxth	r3, r3
 8009012:	1ad3      	subs	r3, r2, r3
 8009014:	b29b      	uxth	r3, r3
 8009016:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8009018:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009020:	10db      	asrs	r3, r3, #3
 8009022:	b21b      	sxth	r3, r3
 8009024:	b29b      	uxth	r3, r3
 8009026:	1ad3      	subs	r3, r2, r3
 8009028:	b29b      	uxth	r3, r3
 800902a:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009032:	b29a      	uxth	r2, r3
 8009034:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009036:	4413      	add	r3, r2
 8009038:	b29b      	uxth	r3, r3
 800903a:	b21a      	sxth	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009040:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8009044:	2b00      	cmp	r3, #0
 8009046:	da03      	bge.n	8009050 <tcp_receive+0x560>
        m = -m;
 8009048:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800904a:	425b      	negs	r3, r3
 800904c:	b29b      	uxth	r3, r3
 800904e:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8009050:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009058:	109b      	asrs	r3, r3, #2
 800905a:	b21b      	sxth	r3, r3
 800905c:	b29b      	uxth	r3, r3
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	b29b      	uxth	r3, r3
 8009062:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800906a:	b29a      	uxth	r2, r3
 800906c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800906e:	4413      	add	r3, r2
 8009070:	b29b      	uxth	r3, r3
 8009072:	b21a      	sxth	r2, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800907e:	10db      	asrs	r3, r3, #3
 8009080:	b21b      	sxth	r3, r3
 8009082:	b29a      	uxth	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800908a:	b29b      	uxth	r3, r3
 800908c:	4413      	add	r3, r2
 800908e:	b29b      	uxth	r3, r3
 8009090:	b21a      	sxth	r2, r3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800909e:	4b5c      	ldr	r3, [pc, #368]	; (8009210 <tcp_receive+0x720>)
 80090a0:	881b      	ldrh	r3, [r3, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	f000 84f1 	beq.w	8009a8a <tcp_receive+0xf9a>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	7d1b      	ldrb	r3, [r3, #20]
 80090ac:	2b06      	cmp	r3, #6
 80090ae:	f200 84ec 	bhi.w	8009a8a <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090b6:	4b57      	ldr	r3, [pc, #348]	; (8009214 <tcp_receive+0x724>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	1ad3      	subs	r3, r2, r3
 80090bc:	3b01      	subs	r3, #1
 80090be:	2b00      	cmp	r3, #0
 80090c0:	f2c0 80b8 	blt.w	8009234 <tcp_receive+0x744>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090c8:	4b51      	ldr	r3, [pc, #324]	; (8009210 <tcp_receive+0x720>)
 80090ca:	881b      	ldrh	r3, [r3, #0]
 80090cc:	4619      	mov	r1, r3
 80090ce:	4b51      	ldr	r3, [pc, #324]	; (8009214 <tcp_receive+0x724>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	440b      	add	r3, r1
 80090d4:	1ad3      	subs	r3, r2, r3
 80090d6:	3301      	adds	r3, #1
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f300 80ab 	bgt.w	8009234 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80090de:	4b4e      	ldr	r3, [pc, #312]	; (8009218 <tcp_receive+0x728>)
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090e8:	4b4a      	ldr	r3, [pc, #296]	; (8009214 <tcp_receive+0x724>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	1ad3      	subs	r3, r2, r3
 80090ee:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80090f0:	4b49      	ldr	r3, [pc, #292]	; (8009218 <tcp_receive+0x728>)
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d106      	bne.n	8009106 <tcp_receive+0x616>
 80090f8:	4b48      	ldr	r3, [pc, #288]	; (800921c <tcp_receive+0x72c>)
 80090fa:	f240 523c 	movw	r2, #1340	; 0x53c
 80090fe:	4948      	ldr	r1, [pc, #288]	; (8009220 <tcp_receive+0x730>)
 8009100:	4848      	ldr	r0, [pc, #288]	; (8009224 <tcp_receive+0x734>)
 8009102:	f004 fe33 	bl	800dd6c <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8009106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009108:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800910c:	4293      	cmp	r3, r2
 800910e:	dd06      	ble.n	800911e <tcp_receive+0x62e>
 8009110:	4b42      	ldr	r3, [pc, #264]	; (800921c <tcp_receive+0x72c>)
 8009112:	f240 523d 	movw	r2, #1341	; 0x53d
 8009116:	4944      	ldr	r1, [pc, #272]	; (8009228 <tcp_receive+0x738>)
 8009118:	4842      	ldr	r0, [pc, #264]	; (8009224 <tcp_receive+0x734>)
 800911a:	f004 fe27 	bl	800dd6c <iprintf>
      if (inseg.p->len < off) {
 800911e:	4b3e      	ldr	r3, [pc, #248]	; (8009218 <tcp_receive+0x728>)
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	895b      	ldrh	r3, [r3, #10]
 8009124:	461a      	mov	r2, r3
 8009126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009128:	4293      	cmp	r3, r2
 800912a:	dd3e      	ble.n	80091aa <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800912c:	4b3a      	ldr	r3, [pc, #232]	; (8009218 <tcp_receive+0x728>)
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	891b      	ldrh	r3, [r3, #8]
 8009132:	461a      	mov	r2, r3
 8009134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009136:	4293      	cmp	r3, r2
 8009138:	dd06      	ble.n	8009148 <tcp_receive+0x658>
 800913a:	4b38      	ldr	r3, [pc, #224]	; (800921c <tcp_receive+0x72c>)
 800913c:	f240 523f 	movw	r2, #1343	; 0x53f
 8009140:	493a      	ldr	r1, [pc, #232]	; (800922c <tcp_receive+0x73c>)
 8009142:	4838      	ldr	r0, [pc, #224]	; (8009224 <tcp_receive+0x734>)
 8009144:	f004 fe12 	bl	800dd6c <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009148:	4b33      	ldr	r3, [pc, #204]	; (8009218 <tcp_receive+0x728>)
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	891a      	ldrh	r2, [r3, #8]
 800914e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009150:	b29b      	uxth	r3, r3
 8009152:	1ad3      	subs	r3, r2, r3
 8009154:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8009156:	e00e      	b.n	8009176 <tcp_receive+0x686>
          off -= p->len;
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	895b      	ldrh	r3, [r3, #10]
 800915c:	461a      	mov	r2, r3
 800915e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009160:	1a9b      	subs	r3, r3, r2
 8009162:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	8a3a      	ldrh	r2, [r7, #16]
 8009168:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	2200      	movs	r2, #0
 800916e:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	895b      	ldrh	r3, [r3, #10]
 800917a:	461a      	mov	r2, r3
 800917c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917e:	4293      	cmp	r3, r2
 8009180:	dcea      	bgt.n	8009158 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8009182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009184:	b29b      	uxth	r3, r3
 8009186:	425b      	negs	r3, r3
 8009188:	b29b      	uxth	r3, r3
 800918a:	b21b      	sxth	r3, r3
 800918c:	4619      	mov	r1, r3
 800918e:	69b8      	ldr	r0, [r7, #24]
 8009190:	f7fc fc7a 	bl	8005a88 <pbuf_header>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d01c      	beq.n	80091d4 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800919a:	4b20      	ldr	r3, [pc, #128]	; (800921c <tcp_receive+0x72c>)
 800919c:	f240 524c 	movw	r2, #1356	; 0x54c
 80091a0:	4923      	ldr	r1, [pc, #140]	; (8009230 <tcp_receive+0x740>)
 80091a2:	4820      	ldr	r0, [pc, #128]	; (8009224 <tcp_receive+0x734>)
 80091a4:	f004 fde2 	bl	800dd6c <iprintf>
 80091a8:	e014      	b.n	80091d4 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 80091aa:	4b1b      	ldr	r3, [pc, #108]	; (8009218 <tcp_receive+0x728>)
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091b0:	b292      	uxth	r2, r2
 80091b2:	4252      	negs	r2, r2
 80091b4:	b292      	uxth	r2, r2
 80091b6:	b212      	sxth	r2, r2
 80091b8:	4611      	mov	r1, r2
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7fc fc64 	bl	8005a88 <pbuf_header>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d006      	beq.n	80091d4 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80091c6:	4b15      	ldr	r3, [pc, #84]	; (800921c <tcp_receive+0x72c>)
 80091c8:	f240 5251 	movw	r2, #1361	; 0x551
 80091cc:	4918      	ldr	r1, [pc, #96]	; (8009230 <tcp_receive+0x740>)
 80091ce:	4815      	ldr	r0, [pc, #84]	; (8009224 <tcp_receive+0x734>)
 80091d0:	f004 fdcc 	bl	800dd6c <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80091d4:	4b10      	ldr	r3, [pc, #64]	; (8009218 <tcp_receive+0x728>)
 80091d6:	891a      	ldrh	r2, [r3, #8]
 80091d8:	4b0e      	ldr	r3, [pc, #56]	; (8009214 <tcp_receive+0x724>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	b299      	uxth	r1, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	1acb      	subs	r3, r1, r3
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	4413      	add	r3, r2
 80091ea:	b29a      	uxth	r2, r3
 80091ec:	4b0a      	ldr	r3, [pc, #40]	; (8009218 <tcp_receive+0x728>)
 80091ee:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f4:	4a07      	ldr	r2, [pc, #28]	; (8009214 <tcp_receive+0x724>)
 80091f6:	6013      	str	r3, [r2, #0]
 80091f8:	4b07      	ldr	r3, [pc, #28]	; (8009218 <tcp_receive+0x728>)
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	4a05      	ldr	r2, [pc, #20]	; (8009214 <tcp_receive+0x724>)
 80091fe:	6812      	ldr	r2, [r2, #0]
 8009200:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009202:	e025      	b.n	8009250 <tcp_receive+0x760>
 8009204:	200000f0 	.word	0x200000f0
 8009208:	200000f4 	.word	0x200000f4
 800920c:	20006cc0 	.word	0x20006cc0
 8009210:	200000f6 	.word	0x200000f6
 8009214:	200000ec 	.word	0x200000ec
 8009218:	200000cc 	.word	0x200000cc
 800921c:	0800f9c8 	.word	0x0800f9c8
 8009220:	0800fc50 	.word	0x0800fc50
 8009224:	0800fa0c 	.word	0x0800fa0c
 8009228:	0800fc60 	.word	0x0800fc60
 800922c:	0800fc70 	.word	0x0800fc70
 8009230:	0800fc80 	.word	0x0800fc80
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009234:	4b87      	ldr	r3, [pc, #540]	; (8009454 <tcp_receive+0x964>)
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	2b00      	cmp	r3, #0
 8009240:	da06      	bge.n	8009250 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	7e9b      	ldrb	r3, [r3, #26]
 8009246:	f043 0302 	orr.w	r3, r3, #2
 800924a:	b2da      	uxtb	r2, r3
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009250:	4b80      	ldr	r3, [pc, #512]	; (8009454 <tcp_receive+0x964>)
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	2b00      	cmp	r3, #0
 800925c:	f2c0 8410 	blt.w	8009a80 <tcp_receive+0xf90>
 8009260:	4b7c      	ldr	r3, [pc, #496]	; (8009454 <tcp_receive+0x964>)
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009268:	6879      	ldr	r1, [r7, #4]
 800926a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800926c:	440b      	add	r3, r1
 800926e:	1ad3      	subs	r3, r2, r3
 8009270:	3301      	adds	r3, #1
 8009272:	2b00      	cmp	r3, #0
 8009274:	f300 8404 	bgt.w	8009a80 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800927c:	4b75      	ldr	r3, [pc, #468]	; (8009454 <tcp_receive+0x964>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	429a      	cmp	r2, r3
 8009282:	f040 8287 	bne.w	8009794 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009286:	4b74      	ldr	r3, [pc, #464]	; (8009458 <tcp_receive+0x968>)
 8009288:	891c      	ldrh	r4, [r3, #8]
 800928a:	4b73      	ldr	r3, [pc, #460]	; (8009458 <tcp_receive+0x968>)
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	899b      	ldrh	r3, [r3, #12]
 8009290:	b29b      	uxth	r3, r3
 8009292:	4618      	mov	r0, r3
 8009294:	f7fb faef 	bl	8004876 <lwip_htons>
 8009298:	4603      	mov	r3, r0
 800929a:	f003 0303 	and.w	r3, r3, #3
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d001      	beq.n	80092a6 <tcp_receive+0x7b6>
 80092a2:	2301      	movs	r3, #1
 80092a4:	e000      	b.n	80092a8 <tcp_receive+0x7b8>
 80092a6:	2300      	movs	r3, #0
 80092a8:	4423      	add	r3, r4
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	4b6b      	ldr	r3, [pc, #428]	; (800945c <tcp_receive+0x96c>)
 80092ae:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80092b4:	4b69      	ldr	r3, [pc, #420]	; (800945c <tcp_receive+0x96c>)
 80092b6:	881b      	ldrh	r3, [r3, #0]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d26e      	bcs.n	800939a <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80092bc:	4b66      	ldr	r3, [pc, #408]	; (8009458 <tcp_receive+0x968>)
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	899b      	ldrh	r3, [r3, #12]
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7fb fad6 	bl	8004876 <lwip_htons>
 80092ca:	4603      	mov	r3, r0
 80092cc:	f003 0301 	and.w	r3, r3, #1
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d01b      	beq.n	800930c <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80092d4:	4b60      	ldr	r3, [pc, #384]	; (8009458 <tcp_receive+0x968>)
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	899b      	ldrh	r3, [r3, #12]
 80092da:	b29b      	uxth	r3, r3
 80092dc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80092e0:	b29c      	uxth	r4, r3
 80092e2:	4b5d      	ldr	r3, [pc, #372]	; (8009458 <tcp_receive+0x968>)
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	899b      	ldrh	r3, [r3, #12]
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7fb fac3 	bl	8004876 <lwip_htons>
 80092f0:	4603      	mov	r3, r0
 80092f2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7fb fabc 	bl	8004876 <lwip_htons>
 80092fe:	4603      	mov	r3, r0
 8009300:	461a      	mov	r2, r3
 8009302:	4b55      	ldr	r3, [pc, #340]	; (8009458 <tcp_receive+0x968>)
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	4322      	orrs	r2, r4
 8009308:	b292      	uxth	r2, r2
 800930a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009310:	4b51      	ldr	r3, [pc, #324]	; (8009458 <tcp_receive+0x968>)
 8009312:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009314:	4b50      	ldr	r3, [pc, #320]	; (8009458 <tcp_receive+0x968>)
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	899b      	ldrh	r3, [r3, #12]
 800931a:	b29b      	uxth	r3, r3
 800931c:	4618      	mov	r0, r3
 800931e:	f7fb faaa 	bl	8004876 <lwip_htons>
 8009322:	4603      	mov	r3, r0
 8009324:	f003 0302 	and.w	r3, r3, #2
 8009328:	2b00      	cmp	r3, #0
 800932a:	d005      	beq.n	8009338 <tcp_receive+0x848>
            inseg.len -= 1;
 800932c:	4b4a      	ldr	r3, [pc, #296]	; (8009458 <tcp_receive+0x968>)
 800932e:	891b      	ldrh	r3, [r3, #8]
 8009330:	3b01      	subs	r3, #1
 8009332:	b29a      	uxth	r2, r3
 8009334:	4b48      	ldr	r3, [pc, #288]	; (8009458 <tcp_receive+0x968>)
 8009336:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009338:	4b47      	ldr	r3, [pc, #284]	; (8009458 <tcp_receive+0x968>)
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	4a46      	ldr	r2, [pc, #280]	; (8009458 <tcp_receive+0x968>)
 800933e:	8912      	ldrh	r2, [r2, #8]
 8009340:	4611      	mov	r1, r2
 8009342:	4618      	mov	r0, r3
 8009344:	f7fc fa50 	bl	80057e8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009348:	4b43      	ldr	r3, [pc, #268]	; (8009458 <tcp_receive+0x968>)
 800934a:	891c      	ldrh	r4, [r3, #8]
 800934c:	4b42      	ldr	r3, [pc, #264]	; (8009458 <tcp_receive+0x968>)
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	899b      	ldrh	r3, [r3, #12]
 8009352:	b29b      	uxth	r3, r3
 8009354:	4618      	mov	r0, r3
 8009356:	f7fb fa8e 	bl	8004876 <lwip_htons>
 800935a:	4603      	mov	r3, r0
 800935c:	f003 0303 	and.w	r3, r3, #3
 8009360:	2b00      	cmp	r3, #0
 8009362:	d001      	beq.n	8009368 <tcp_receive+0x878>
 8009364:	2301      	movs	r3, #1
 8009366:	e000      	b.n	800936a <tcp_receive+0x87a>
 8009368:	2300      	movs	r3, #0
 800936a:	4423      	add	r3, r4
 800936c:	b29a      	uxth	r2, r3
 800936e:	4b3b      	ldr	r3, [pc, #236]	; (800945c <tcp_receive+0x96c>)
 8009370:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009372:	4b3a      	ldr	r3, [pc, #232]	; (800945c <tcp_receive+0x96c>)
 8009374:	881b      	ldrh	r3, [r3, #0]
 8009376:	461a      	mov	r2, r3
 8009378:	4b36      	ldr	r3, [pc, #216]	; (8009454 <tcp_receive+0x964>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	441a      	add	r2, r3
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009382:	6879      	ldr	r1, [r7, #4]
 8009384:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009386:	440b      	add	r3, r1
 8009388:	429a      	cmp	r2, r3
 800938a:	d006      	beq.n	800939a <tcp_receive+0x8aa>
 800938c:	4b34      	ldr	r3, [pc, #208]	; (8009460 <tcp_receive+0x970>)
 800938e:	f240 527e 	movw	r2, #1406	; 0x57e
 8009392:	4934      	ldr	r1, [pc, #208]	; (8009464 <tcp_receive+0x974>)
 8009394:	4834      	ldr	r0, [pc, #208]	; (8009468 <tcp_receive+0x978>)
 8009396:	f004 fce9 	bl	800dd6c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800939e:	2b00      	cmp	r3, #0
 80093a0:	f000 80e1 	beq.w	8009566 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80093a4:	4b2c      	ldr	r3, [pc, #176]	; (8009458 <tcp_receive+0x968>)
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	899b      	ldrh	r3, [r3, #12]
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7fb fa62 	bl	8004876 <lwip_htons>
 80093b2:	4603      	mov	r3, r0
 80093b4:	f003 0301 	and.w	r3, r3, #1
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d010      	beq.n	80093de <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80093bc:	e00a      	b.n	80093d4 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093c2:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 80093ce:	68b8      	ldr	r0, [r7, #8]
 80093d0:	f7fd fe6c 	bl	80070ac <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1f0      	bne.n	80093be <tcp_receive+0x8ce>
 80093dc:	e0c3      	b.n	8009566 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093e2:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80093e4:	e04f      	b.n	8009486 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80093e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	899b      	ldrh	r3, [r3, #12]
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7fb fa41 	bl	8004876 <lwip_htons>
 80093f4:	4603      	mov	r3, r0
 80093f6:	f003 0301 	and.w	r3, r3, #1
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d03b      	beq.n	8009476 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80093fe:	4b16      	ldr	r3, [pc, #88]	; (8009458 <tcp_receive+0x968>)
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	899b      	ldrh	r3, [r3, #12]
 8009404:	b29b      	uxth	r3, r3
 8009406:	4618      	mov	r0, r3
 8009408:	f7fb fa35 	bl	8004876 <lwip_htons>
 800940c:	4603      	mov	r3, r0
 800940e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009412:	2b00      	cmp	r3, #0
 8009414:	d12f      	bne.n	8009476 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009416:	4b10      	ldr	r3, [pc, #64]	; (8009458 <tcp_receive+0x968>)
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	899b      	ldrh	r3, [r3, #12]
 800941c:	b29c      	uxth	r4, r3
 800941e:	2001      	movs	r0, #1
 8009420:	f7fb fa29 	bl	8004876 <lwip_htons>
 8009424:	4603      	mov	r3, r0
 8009426:	461a      	mov	r2, r3
 8009428:	4b0b      	ldr	r3, [pc, #44]	; (8009458 <tcp_receive+0x968>)
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	4322      	orrs	r2, r4
 800942e:	b292      	uxth	r2, r2
 8009430:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009432:	4b09      	ldr	r3, [pc, #36]	; (8009458 <tcp_receive+0x968>)
 8009434:	891c      	ldrh	r4, [r3, #8]
 8009436:	4b08      	ldr	r3, [pc, #32]	; (8009458 <tcp_receive+0x968>)
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	899b      	ldrh	r3, [r3, #12]
 800943c:	b29b      	uxth	r3, r3
 800943e:	4618      	mov	r0, r3
 8009440:	f7fb fa19 	bl	8004876 <lwip_htons>
 8009444:	4603      	mov	r3, r0
 8009446:	f003 0303 	and.w	r3, r3, #3
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00e      	beq.n	800946c <tcp_receive+0x97c>
 800944e:	2301      	movs	r3, #1
 8009450:	e00d      	b.n	800946e <tcp_receive+0x97e>
 8009452:	bf00      	nop
 8009454:	200000ec 	.word	0x200000ec
 8009458:	200000cc 	.word	0x200000cc
 800945c:	200000f6 	.word	0x200000f6
 8009460:	0800f9c8 	.word	0x0800f9c8
 8009464:	0800fc94 	.word	0x0800fc94
 8009468:	0800fa0c 	.word	0x0800fa0c
 800946c:	2300      	movs	r3, #0
 800946e:	4423      	add	r3, r4
 8009470:	b29a      	uxth	r2, r3
 8009472:	4b95      	ldr	r3, [pc, #596]	; (80096c8 <tcp_receive+0xbd8>)
 8009474:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8009476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009478:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800947a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8009480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009482:	f7fd fe13 	bl	80070ac <tcp_seg_free>
            while (next &&
 8009486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009488:	2b00      	cmp	r3, #0
 800948a:	d00e      	beq.n	80094aa <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800948c:	4b8e      	ldr	r3, [pc, #568]	; (80096c8 <tcp_receive+0xbd8>)
 800948e:	881b      	ldrh	r3, [r3, #0]
 8009490:	461a      	mov	r2, r3
 8009492:	4b8e      	ldr	r3, [pc, #568]	; (80096cc <tcp_receive+0xbdc>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	441a      	add	r2, r3
 8009498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094a0:	8909      	ldrh	r1, [r1, #8]
 80094a2:	440b      	add	r3, r1
 80094a4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	da9d      	bge.n	80093e6 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80094aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d057      	beq.n	8009560 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 80094b0:	4b85      	ldr	r3, [pc, #532]	; (80096c8 <tcp_receive+0xbd8>)
 80094b2:	881b      	ldrh	r3, [r3, #0]
 80094b4:	461a      	mov	r2, r3
 80094b6:	4b85      	ldr	r3, [pc, #532]	; (80096cc <tcp_receive+0xbdc>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	441a      	add	r2, r3
 80094bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	dd4b      	ble.n	8009560 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80094c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	4b7e      	ldr	r3, [pc, #504]	; (80096cc <tcp_receive+0xbdc>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	1ad3      	subs	r3, r2, r3
 80094d8:	b29a      	uxth	r2, r3
 80094da:	4b7d      	ldr	r3, [pc, #500]	; (80096d0 <tcp_receive+0xbe0>)
 80094dc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80094de:	4b7c      	ldr	r3, [pc, #496]	; (80096d0 <tcp_receive+0xbe0>)
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	899b      	ldrh	r3, [r3, #12]
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7fb f9c5 	bl	8004876 <lwip_htons>
 80094ec:	4603      	mov	r3, r0
 80094ee:	f003 0302 	and.w	r3, r3, #2
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d005      	beq.n	8009502 <tcp_receive+0xa12>
                inseg.len -= 1;
 80094f6:	4b76      	ldr	r3, [pc, #472]	; (80096d0 <tcp_receive+0xbe0>)
 80094f8:	891b      	ldrh	r3, [r3, #8]
 80094fa:	3b01      	subs	r3, #1
 80094fc:	b29a      	uxth	r2, r3
 80094fe:	4b74      	ldr	r3, [pc, #464]	; (80096d0 <tcp_receive+0xbe0>)
 8009500:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009502:	4b73      	ldr	r3, [pc, #460]	; (80096d0 <tcp_receive+0xbe0>)
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	4a72      	ldr	r2, [pc, #456]	; (80096d0 <tcp_receive+0xbe0>)
 8009508:	8912      	ldrh	r2, [r2, #8]
 800950a:	4611      	mov	r1, r2
 800950c:	4618      	mov	r0, r3
 800950e:	f7fc f96b 	bl	80057e8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009512:	4b6f      	ldr	r3, [pc, #444]	; (80096d0 <tcp_receive+0xbe0>)
 8009514:	891c      	ldrh	r4, [r3, #8]
 8009516:	4b6e      	ldr	r3, [pc, #440]	; (80096d0 <tcp_receive+0xbe0>)
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	899b      	ldrh	r3, [r3, #12]
 800951c:	b29b      	uxth	r3, r3
 800951e:	4618      	mov	r0, r3
 8009520:	f7fb f9a9 	bl	8004876 <lwip_htons>
 8009524:	4603      	mov	r3, r0
 8009526:	f003 0303 	and.w	r3, r3, #3
 800952a:	2b00      	cmp	r3, #0
 800952c:	d001      	beq.n	8009532 <tcp_receive+0xa42>
 800952e:	2301      	movs	r3, #1
 8009530:	e000      	b.n	8009534 <tcp_receive+0xa44>
 8009532:	2300      	movs	r3, #0
 8009534:	4423      	add	r3, r4
 8009536:	b29a      	uxth	r2, r3
 8009538:	4b63      	ldr	r3, [pc, #396]	; (80096c8 <tcp_receive+0xbd8>)
 800953a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800953c:	4b62      	ldr	r3, [pc, #392]	; (80096c8 <tcp_receive+0xbd8>)
 800953e:	881b      	ldrh	r3, [r3, #0]
 8009540:	461a      	mov	r2, r3
 8009542:	4b62      	ldr	r3, [pc, #392]	; (80096cc <tcp_receive+0xbdc>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	441a      	add	r2, r3
 8009548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	429a      	cmp	r2, r3
 8009550:	d006      	beq.n	8009560 <tcp_receive+0xa70>
 8009552:	4b60      	ldr	r3, [pc, #384]	; (80096d4 <tcp_receive+0xbe4>)
 8009554:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8009558:	495f      	ldr	r1, [pc, #380]	; (80096d8 <tcp_receive+0xbe8>)
 800955a:	4860      	ldr	r0, [pc, #384]	; (80096dc <tcp_receive+0xbec>)
 800955c:	f004 fc06 	bl	800dd6c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009564:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009566:	4b58      	ldr	r3, [pc, #352]	; (80096c8 <tcp_receive+0xbd8>)
 8009568:	881b      	ldrh	r3, [r3, #0]
 800956a:	461a      	mov	r2, r3
 800956c:	4b57      	ldr	r3, [pc, #348]	; (80096cc <tcp_receive+0xbdc>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	441a      	add	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800957a:	4b53      	ldr	r3, [pc, #332]	; (80096c8 <tcp_receive+0xbd8>)
 800957c:	881b      	ldrh	r3, [r3, #0]
 800957e:	429a      	cmp	r2, r3
 8009580:	d206      	bcs.n	8009590 <tcp_receive+0xaa0>
 8009582:	4b54      	ldr	r3, [pc, #336]	; (80096d4 <tcp_receive+0xbe4>)
 8009584:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8009588:	4955      	ldr	r1, [pc, #340]	; (80096e0 <tcp_receive+0xbf0>)
 800958a:	4854      	ldr	r0, [pc, #336]	; (80096dc <tcp_receive+0xbec>)
 800958c:	f004 fbee 	bl	800dd6c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009594:	4b4c      	ldr	r3, [pc, #304]	; (80096c8 <tcp_receive+0xbd8>)
 8009596:	881b      	ldrh	r3, [r3, #0]
 8009598:	1ad3      	subs	r3, r2, r3
 800959a:	b29a      	uxth	r2, r3
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f7fd f8f3 	bl	800678c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80095a6:	4b4a      	ldr	r3, [pc, #296]	; (80096d0 <tcp_receive+0xbe0>)
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	891b      	ldrh	r3, [r3, #8]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d006      	beq.n	80095be <tcp_receive+0xace>
          recv_data = inseg.p;
 80095b0:	4b47      	ldr	r3, [pc, #284]	; (80096d0 <tcp_receive+0xbe0>)
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	4a4b      	ldr	r2, [pc, #300]	; (80096e4 <tcp_receive+0xbf4>)
 80095b6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80095b8:	4b45      	ldr	r3, [pc, #276]	; (80096d0 <tcp_receive+0xbe0>)
 80095ba:	2200      	movs	r2, #0
 80095bc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80095be:	4b44      	ldr	r3, [pc, #272]	; (80096d0 <tcp_receive+0xbe0>)
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	899b      	ldrh	r3, [r3, #12]
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7fb f955 	bl	8004876 <lwip_htons>
 80095cc:	4603      	mov	r3, r0
 80095ce:	f003 0301 	and.w	r3, r3, #1
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	f000 80b4 	beq.w	8009740 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80095d8:	4b43      	ldr	r3, [pc, #268]	; (80096e8 <tcp_receive+0xbf8>)
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	f043 0320 	orr.w	r3, r3, #32
 80095e0:	b2da      	uxtb	r2, r3
 80095e2:	4b41      	ldr	r3, [pc, #260]	; (80096e8 <tcp_receive+0xbf8>)
 80095e4:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80095e6:	e0ab      	b.n	8009740 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ec:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	4a35      	ldr	r2, [pc, #212]	; (80096cc <tcp_receive+0xbdc>)
 80095f8:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	891b      	ldrh	r3, [r3, #8]
 80095fe:	461c      	mov	r4, r3
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	899b      	ldrh	r3, [r3, #12]
 8009606:	b29b      	uxth	r3, r3
 8009608:	4618      	mov	r0, r3
 800960a:	f7fb f934 	bl	8004876 <lwip_htons>
 800960e:	4603      	mov	r3, r0
 8009610:	f003 0303 	and.w	r3, r3, #3
 8009614:	2b00      	cmp	r3, #0
 8009616:	d001      	beq.n	800961c <tcp_receive+0xb2c>
 8009618:	2301      	movs	r3, #1
 800961a:	e000      	b.n	800961e <tcp_receive+0xb2e>
 800961c:	2300      	movs	r3, #0
 800961e:	191a      	adds	r2, r3, r4
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009624:	441a      	add	r2, r3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800962e:	461c      	mov	r4, r3
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	891b      	ldrh	r3, [r3, #8]
 8009634:	461d      	mov	r5, r3
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	899b      	ldrh	r3, [r3, #12]
 800963c:	b29b      	uxth	r3, r3
 800963e:	4618      	mov	r0, r3
 8009640:	f7fb f919 	bl	8004876 <lwip_htons>
 8009644:	4603      	mov	r3, r0
 8009646:	f003 0303 	and.w	r3, r3, #3
 800964a:	2b00      	cmp	r3, #0
 800964c:	d001      	beq.n	8009652 <tcp_receive+0xb62>
 800964e:	2301      	movs	r3, #1
 8009650:	e000      	b.n	8009654 <tcp_receive+0xb64>
 8009652:	2300      	movs	r3, #0
 8009654:	442b      	add	r3, r5
 8009656:	429c      	cmp	r4, r3
 8009658:	d206      	bcs.n	8009668 <tcp_receive+0xb78>
 800965a:	4b1e      	ldr	r3, [pc, #120]	; (80096d4 <tcp_receive+0xbe4>)
 800965c:	f240 52dd 	movw	r2, #1501	; 0x5dd
 8009660:	4922      	ldr	r1, [pc, #136]	; (80096ec <tcp_receive+0xbfc>)
 8009662:	481e      	ldr	r0, [pc, #120]	; (80096dc <tcp_receive+0xbec>)
 8009664:	f004 fb82 	bl	800dd6c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	891b      	ldrh	r3, [r3, #8]
 800966c:	461c      	mov	r4, r3
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	899b      	ldrh	r3, [r3, #12]
 8009674:	b29b      	uxth	r3, r3
 8009676:	4618      	mov	r0, r3
 8009678:	f7fb f8fd 	bl	8004876 <lwip_htons>
 800967c:	4603      	mov	r3, r0
 800967e:	f003 0303 	and.w	r3, r3, #3
 8009682:	2b00      	cmp	r3, #0
 8009684:	d001      	beq.n	800968a <tcp_receive+0xb9a>
 8009686:	2301      	movs	r3, #1
 8009688:	e000      	b.n	800968c <tcp_receive+0xb9c>
 800968a:	2300      	movs	r3, #0
 800968c:	1919      	adds	r1, r3, r4
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009692:	b28b      	uxth	r3, r1
 8009694:	1ad3      	subs	r3, r2, r3
 8009696:	b29a      	uxth	r2, r3
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f7fd f875 	bl	800678c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	891b      	ldrh	r3, [r3, #8]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d028      	beq.n	80096fe <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80096ac:	4b0d      	ldr	r3, [pc, #52]	; (80096e4 <tcp_receive+0xbf4>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d01d      	beq.n	80096f0 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 80096b4:	4b0b      	ldr	r3, [pc, #44]	; (80096e4 <tcp_receive+0xbf4>)
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	4619      	mov	r1, r3
 80096be:	4610      	mov	r0, r2
 80096c0:	f7fc fad2 	bl	8005c68 <pbuf_cat>
 80096c4:	e018      	b.n	80096f8 <tcp_receive+0xc08>
 80096c6:	bf00      	nop
 80096c8:	200000f6 	.word	0x200000f6
 80096cc:	200000ec 	.word	0x200000ec
 80096d0:	200000cc 	.word	0x200000cc
 80096d4:	0800f9c8 	.word	0x0800f9c8
 80096d8:	0800fccc 	.word	0x0800fccc
 80096dc:	0800fa0c 	.word	0x0800fa0c
 80096e0:	0800fd08 	.word	0x0800fd08
 80096e4:	200000fc 	.word	0x200000fc
 80096e8:	200000f9 	.word	0x200000f9
 80096ec:	0800fd28 	.word	0x0800fd28
            } else {
              recv_data = cseg->p;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	4a71      	ldr	r2, [pc, #452]	; (80098bc <tcp_receive+0xdcc>)
 80096f6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2200      	movs	r2, #0
 80096fc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	899b      	ldrh	r3, [r3, #12]
 8009704:	b29b      	uxth	r3, r3
 8009706:	4618      	mov	r0, r3
 8009708:	f7fb f8b5 	bl	8004876 <lwip_htons>
 800970c:	4603      	mov	r3, r0
 800970e:	f003 0301 	and.w	r3, r3, #1
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00d      	beq.n	8009732 <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009716:	4b6a      	ldr	r3, [pc, #424]	; (80098c0 <tcp_receive+0xdd0>)
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	f043 0320 	orr.w	r3, r3, #32
 800971e:	b2da      	uxtb	r2, r3
 8009720:	4b67      	ldr	r3, [pc, #412]	; (80098c0 <tcp_receive+0xdd0>)
 8009722:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	7d1b      	ldrb	r3, [r3, #20]
 8009728:	2b04      	cmp	r3, #4
 800972a:	d102      	bne.n	8009732 <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2207      	movs	r2, #7
 8009730:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	f7fd fcb6 	bl	80070ac <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009744:	2b00      	cmp	r3, #0
 8009746:	d008      	beq.n	800975a <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	685a      	ldr	r2, [r3, #4]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009754:	429a      	cmp	r2, r3
 8009756:	f43f af47 	beq.w	80095e8 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	7e9b      	ldrb	r3, [r3, #26]
 800975e:	f003 0301 	and.w	r3, r3, #1
 8009762:	2b00      	cmp	r3, #0
 8009764:	d00e      	beq.n	8009784 <tcp_receive+0xc94>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	7e9b      	ldrb	r3, [r3, #26]
 800976a:	f023 0301 	bic.w	r3, r3, #1
 800976e:	b2da      	uxtb	r2, r3
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	769a      	strb	r2, [r3, #26]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	7e9b      	ldrb	r3, [r3, #26]
 8009778:	f043 0302 	orr.w	r3, r3, #2
 800977c:	b2da      	uxtb	r2, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009782:	e181      	b.n	8009a88 <tcp_receive+0xf98>
        tcp_ack(pcb);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	7e9b      	ldrb	r3, [r3, #26]
 8009788:	f043 0301 	orr.w	r3, r3, #1
 800978c:	b2da      	uxtb	r2, r3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009792:	e179      	b.n	8009a88 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f001 f8c3 	bl	800a920 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d106      	bne.n	80097b0 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80097a2:	4848      	ldr	r0, [pc, #288]	; (80098c4 <tcp_receive+0xdd4>)
 80097a4:	f7fd fca8 	bl	80070f8 <tcp_seg_copy>
 80097a8:	4602      	mov	r2, r0
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 80097ae:	e16b      	b.n	8009a88 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 80097b0:	2300      	movs	r3, #0
 80097b2:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097ba:	e150      	b.n	8009a5e <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 80097bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	685a      	ldr	r2, [r3, #4]
 80097c2:	4b41      	ldr	r3, [pc, #260]	; (80098c8 <tcp_receive+0xdd8>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d11d      	bne.n	8009806 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80097ca:	4b3e      	ldr	r3, [pc, #248]	; (80098c4 <tcp_receive+0xdd4>)
 80097cc:	891a      	ldrh	r2, [r3, #8]
 80097ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d0:	891b      	ldrh	r3, [r3, #8]
 80097d2:	429a      	cmp	r2, r3
 80097d4:	f240 8148 	bls.w	8009a68 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 80097d8:	483a      	ldr	r0, [pc, #232]	; (80098c4 <tcp_receive+0xdd4>)
 80097da:	f7fd fc8d 	bl	80070f8 <tcp_seg_copy>
 80097de:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	f000 8142 	beq.w	8009a6c <tcp_receive+0xf7c>
                  if (prev != NULL) {
 80097e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d003      	beq.n	80097f6 <tcp_receive+0xd06>
                    prev->next = cseg;
 80097ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	601a      	str	r2, [r3, #0]
 80097f4:	e002      	b.n	80097fc <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 80097fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f7ff f900 	bl	8008a04 <tcp_oos_insert_segment>
                }
                break;
 8009804:	e132      	b.n	8009a6c <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8009806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009808:	2b00      	cmp	r3, #0
 800980a:	d117      	bne.n	800983c <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800980c:	4b2e      	ldr	r3, [pc, #184]	; (80098c8 <tcp_receive+0xdd8>)
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	1ad3      	subs	r3, r2, r3
 8009818:	2b00      	cmp	r3, #0
 800981a:	da57      	bge.n	80098cc <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800981c:	4829      	ldr	r0, [pc, #164]	; (80098c4 <tcp_receive+0xdd4>)
 800981e:	f7fd fc6b 	bl	80070f8 <tcp_seg_copy>
 8009822:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2b00      	cmp	r3, #0
 8009828:	f000 8122 	beq.w	8009a70 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	68fa      	ldr	r2, [r7, #12]
 8009830:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 8009832:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f7ff f8e5 	bl	8008a04 <tcp_oos_insert_segment>
                  }
                  break;
 800983a:	e119      	b.n	8009a70 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800983c:	4b22      	ldr	r3, [pc, #136]	; (80098c8 <tcp_receive+0xdd8>)
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	1ad3      	subs	r3, r2, r3
 8009848:	3b01      	subs	r3, #1
 800984a:	2b00      	cmp	r3, #0
 800984c:	db3e      	blt.n	80098cc <tcp_receive+0xddc>
 800984e:	4b1e      	ldr	r3, [pc, #120]	; (80098c8 <tcp_receive+0xdd8>)
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	1ad3      	subs	r3, r2, r3
 800985a:	3301      	adds	r3, #1
 800985c:	2b00      	cmp	r3, #0
 800985e:	dc35      	bgt.n	80098cc <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8009860:	4818      	ldr	r0, [pc, #96]	; (80098c4 <tcp_receive+0xdd4>)
 8009862:	f7fd fc49 	bl	80070f8 <tcp_seg_copy>
 8009866:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2b00      	cmp	r3, #0
 800986c:	f000 8102 	beq.w	8009a74 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009878:	8912      	ldrh	r2, [r2, #8]
 800987a:	441a      	add	r2, r3
 800987c:	4b12      	ldr	r3, [pc, #72]	; (80098c8 <tcp_receive+0xdd8>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	1ad3      	subs	r3, r2, r3
 8009882:	2b00      	cmp	r3, #0
 8009884:	dd12      	ble.n	80098ac <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009886:	4b10      	ldr	r3, [pc, #64]	; (80098c8 <tcp_receive+0xdd8>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	b29a      	uxth	r2, r3
 800988c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	b29b      	uxth	r3, r3
 8009894:	1ad3      	subs	r3, r2, r3
 8009896:	b29a      	uxth	r2, r3
 8009898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800989c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989e:	685a      	ldr	r2, [r3, #4]
 80098a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a2:	891b      	ldrh	r3, [r3, #8]
 80098a4:	4619      	mov	r1, r3
 80098a6:	4610      	mov	r0, r2
 80098a8:	f7fb ff9e 	bl	80057e8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80098ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ae:	68fa      	ldr	r2, [r7, #12]
 80098b0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80098b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098b4:	68f8      	ldr	r0, [r7, #12]
 80098b6:	f7ff f8a5 	bl	8008a04 <tcp_oos_insert_segment>
                  }
                  break;
 80098ba:	e0db      	b.n	8009a74 <tcp_receive+0xf84>
 80098bc:	200000fc 	.word	0x200000fc
 80098c0:	200000f9 	.word	0x200000f9
 80098c4:	200000cc 	.word	0x200000cc
 80098c8:	200000ec 	.word	0x200000ec
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80098cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f040 80bf 	bne.w	8009a54 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80098d6:	4b7c      	ldr	r3, [pc, #496]	; (8009ac8 <tcp_receive+0xfd8>)
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098dc:	68db      	ldr	r3, [r3, #12]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	f340 80b6 	ble.w	8009a54 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80098e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	899b      	ldrh	r3, [r3, #12]
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7fa ffc0 	bl	8004876 <lwip_htons>
 80098f6:	4603      	mov	r3, r0
 80098f8:	f003 0301 	and.w	r3, r3, #1
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	f040 80bb 	bne.w	8009a78 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009902:	4872      	ldr	r0, [pc, #456]	; (8009acc <tcp_receive+0xfdc>)
 8009904:	f7fd fbf8 	bl	80070f8 <tcp_seg_copy>
 8009908:	4602      	mov	r2, r0
 800990a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990c:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800990e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	f000 80b2 	beq.w	8009a7c <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009920:	8912      	ldrh	r2, [r2, #8]
 8009922:	441a      	add	r2, r3
 8009924:	4b68      	ldr	r3, [pc, #416]	; (8009ac8 <tcp_receive+0xfd8>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	1ad3      	subs	r3, r2, r3
 800992a:	2b00      	cmp	r3, #0
 800992c:	dd12      	ble.n	8009954 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800992e:	4b66      	ldr	r3, [pc, #408]	; (8009ac8 <tcp_receive+0xfd8>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	b29a      	uxth	r2, r3
 8009934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	b29b      	uxth	r3, r3
 800993c:	1ad3      	subs	r3, r2, r3
 800993e:	b29a      	uxth	r2, r3
 8009940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009942:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009946:	685a      	ldr	r2, [r3, #4]
 8009948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994a:	891b      	ldrh	r3, [r3, #8]
 800994c:	4619      	mov	r1, r3
 800994e:	4610      	mov	r0, r2
 8009950:	f7fb ff4a 	bl	80057e8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009954:	4b5e      	ldr	r3, [pc, #376]	; (8009ad0 <tcp_receive+0xfe0>)
 8009956:	881b      	ldrh	r3, [r3, #0]
 8009958:	461a      	mov	r2, r3
 800995a:	4b5b      	ldr	r3, [pc, #364]	; (8009ac8 <tcp_receive+0xfd8>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	441a      	add	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009964:	6879      	ldr	r1, [r7, #4]
 8009966:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009968:	440b      	add	r3, r1
 800996a:	1ad3      	subs	r3, r2, r3
 800996c:	2b00      	cmp	r3, #0
 800996e:	f340 8085 	ble.w	8009a7c <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	899b      	ldrh	r3, [r3, #12]
 800997a:	b29b      	uxth	r3, r3
 800997c:	4618      	mov	r0, r3
 800997e:	f7fa ff7a 	bl	8004876 <lwip_htons>
 8009982:	4603      	mov	r3, r0
 8009984:	f003 0301 	and.w	r3, r3, #1
 8009988:	2b00      	cmp	r3, #0
 800998a:	d01e      	beq.n	80099ca <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800998c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	899b      	ldrh	r3, [r3, #12]
 8009994:	b29b      	uxth	r3, r3
 8009996:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800999a:	b29c      	uxth	r4, r3
 800999c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	899b      	ldrh	r3, [r3, #12]
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7fa ff65 	bl	8004876 <lwip_htons>
 80099ac:	4603      	mov	r3, r0
 80099ae:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7fa ff5e 	bl	8004876 <lwip_htons>
 80099ba:	4603      	mov	r3, r0
 80099bc:	461a      	mov	r2, r3
 80099be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68db      	ldr	r3, [r3, #12]
 80099c4:	4322      	orrs	r2, r4
 80099c6:	b292      	uxth	r2, r2
 80099c8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099d4:	4413      	add	r3, r2
 80099d6:	b299      	uxth	r1, r3
 80099d8:	4b3b      	ldr	r3, [pc, #236]	; (8009ac8 <tcp_receive+0xfd8>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	b29a      	uxth	r2, r3
 80099de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	1a8a      	subs	r2, r1, r2
 80099e4:	b292      	uxth	r2, r2
 80099e6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80099e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	685a      	ldr	r2, [r3, #4]
 80099ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	891b      	ldrh	r3, [r3, #8]
 80099f4:	4619      	mov	r1, r3
 80099f6:	4610      	mov	r0, r2
 80099f8:	f7fb fef6 	bl	80057e8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80099fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	891c      	ldrh	r4, [r3, #8]
 8009a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	899b      	ldrh	r3, [r3, #12]
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7fa ff32 	bl	8004876 <lwip_htons>
 8009a12:	4603      	mov	r3, r0
 8009a14:	f003 0303 	and.w	r3, r3, #3
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d001      	beq.n	8009a20 <tcp_receive+0xf30>
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	e000      	b.n	8009a22 <tcp_receive+0xf32>
 8009a20:	2300      	movs	r3, #0
 8009a22:	4423      	add	r3, r4
 8009a24:	b29a      	uxth	r2, r3
 8009a26:	4b2a      	ldr	r3, [pc, #168]	; (8009ad0 <tcp_receive+0xfe0>)
 8009a28:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009a2a:	4b29      	ldr	r3, [pc, #164]	; (8009ad0 <tcp_receive+0xfe0>)
 8009a2c:	881b      	ldrh	r3, [r3, #0]
 8009a2e:	461a      	mov	r2, r3
 8009a30:	4b25      	ldr	r3, [pc, #148]	; (8009ac8 <tcp_receive+0xfd8>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	441a      	add	r2, r3
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3a:	6879      	ldr	r1, [r7, #4]
 8009a3c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009a3e:	440b      	add	r3, r1
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d01b      	beq.n	8009a7c <tcp_receive+0xf8c>
 8009a44:	4b23      	ldr	r3, [pc, #140]	; (8009ad4 <tcp_receive+0xfe4>)
 8009a46:	f240 627a 	movw	r2, #1658	; 0x67a
 8009a4a:	4923      	ldr	r1, [pc, #140]	; (8009ad8 <tcp_receive+0xfe8>)
 8009a4c:	4823      	ldr	r0, [pc, #140]	; (8009adc <tcp_receive+0xfec>)
 8009a4e:	f004 f98d 	bl	800dd6c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009a52:	e013      	b.n	8009a7c <tcp_receive+0xf8c>
              }
            }
            prev = next;
 8009a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a56:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f47f aeab 	bne.w	80097bc <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 8009a66:	e00f      	b.n	8009a88 <tcp_receive+0xf98>
                break;
 8009a68:	bf00      	nop
 8009a6a:	e00d      	b.n	8009a88 <tcp_receive+0xf98>
                break;
 8009a6c:	bf00      	nop
 8009a6e:	e00b      	b.n	8009a88 <tcp_receive+0xf98>
                  break;
 8009a70:	bf00      	nop
 8009a72:	e009      	b.n	8009a88 <tcp_receive+0xf98>
                  break;
 8009a74:	bf00      	nop
 8009a76:	e007      	b.n	8009a88 <tcp_receive+0xf98>
                  break;
 8009a78:	bf00      	nop
 8009a7a:	e005      	b.n	8009a88 <tcp_receive+0xf98>
                break;
 8009a7c:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8009a7e:	e003      	b.n	8009a88 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 ff4d 	bl	800a920 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009a86:	e01a      	b.n	8009abe <tcp_receive+0xfce>
 8009a88:	e019      	b.n	8009abe <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009a8a:	4b0f      	ldr	r3, [pc, #60]	; (8009ac8 <tcp_receive+0xfd8>)
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a92:	1ad3      	subs	r3, r2, r3
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	db0a      	blt.n	8009aae <tcp_receive+0xfbe>
 8009a98:	4b0b      	ldr	r3, [pc, #44]	; (8009ac8 <tcp_receive+0xfd8>)
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa0:	6879      	ldr	r1, [r7, #4]
 8009aa2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009aa4:	440b      	add	r3, r1
 8009aa6:	1ad3      	subs	r3, r2, r3
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	dd07      	ble.n	8009abe <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	7e9b      	ldrb	r3, [r3, #26]
 8009ab2:	f043 0302 	orr.w	r3, r3, #2
 8009ab6:	b2da      	uxtb	r2, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8009abc:	e7ff      	b.n	8009abe <tcp_receive+0xfce>
 8009abe:	bf00      	nop
 8009ac0:	3734      	adds	r7, #52	; 0x34
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	200000ec 	.word	0x200000ec
 8009acc:	200000cc 	.word	0x200000cc
 8009ad0:	200000f6 	.word	0x200000f6
 8009ad4:	0800f9c8 	.word	0x0800f9c8
 8009ad8:	0800fc94 	.word	0x0800fc94
 8009adc:	0800fa0c 	.word	0x0800fa0c

08009ae0 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8009ae6:	4b17      	ldr	r3, [pc, #92]	; (8009b44 <tcp_getoptbyte+0x64>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d005      	beq.n	8009afa <tcp_getoptbyte+0x1a>
 8009aee:	4b16      	ldr	r3, [pc, #88]	; (8009b48 <tcp_getoptbyte+0x68>)
 8009af0:	881a      	ldrh	r2, [r3, #0]
 8009af2:	4b16      	ldr	r3, [pc, #88]	; (8009b4c <tcp_getoptbyte+0x6c>)
 8009af4:	881b      	ldrh	r3, [r3, #0]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d20e      	bcs.n	8009b18 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8009afa:	4b15      	ldr	r3, [pc, #84]	; (8009b50 <tcp_getoptbyte+0x70>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	3314      	adds	r3, #20
 8009b00:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8009b02:	4b11      	ldr	r3, [pc, #68]	; (8009b48 <tcp_getoptbyte+0x68>)
 8009b04:	881b      	ldrh	r3, [r3, #0]
 8009b06:	1c5a      	adds	r2, r3, #1
 8009b08:	b291      	uxth	r1, r2
 8009b0a:	4a0f      	ldr	r2, [pc, #60]	; (8009b48 <tcp_getoptbyte+0x68>)
 8009b0c:	8011      	strh	r1, [r2, #0]
 8009b0e:	461a      	mov	r2, r3
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	4413      	add	r3, r2
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	e010      	b.n	8009b3a <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8009b18:	4b0b      	ldr	r3, [pc, #44]	; (8009b48 <tcp_getoptbyte+0x68>)
 8009b1a:	881b      	ldrh	r3, [r3, #0]
 8009b1c:	1c5a      	adds	r2, r3, #1
 8009b1e:	b291      	uxth	r1, r2
 8009b20:	4a09      	ldr	r2, [pc, #36]	; (8009b48 <tcp_getoptbyte+0x68>)
 8009b22:	8011      	strh	r1, [r2, #0]
 8009b24:	b2da      	uxtb	r2, r3
 8009b26:	4b09      	ldr	r3, [pc, #36]	; (8009b4c <tcp_getoptbyte+0x6c>)
 8009b28:	881b      	ldrh	r3, [r3, #0]
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	1ad3      	subs	r3, r2, r3
 8009b2e:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8009b30:	4b04      	ldr	r3, [pc, #16]	; (8009b44 <tcp_getoptbyte+0x64>)
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	79fb      	ldrb	r3, [r7, #7]
 8009b36:	4413      	add	r3, r2
 8009b38:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	370c      	adds	r7, #12
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bc80      	pop	{r7}
 8009b42:	4770      	bx	lr
 8009b44:	200000e4 	.word	0x200000e4
 8009b48:	200000e8 	.word	0x200000e8
 8009b4c:	200000e2 	.word	0x200000e2
 8009b50:	200000dc 	.word	0x200000dc

08009b54 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009b5c:	4b2e      	ldr	r3, [pc, #184]	; (8009c18 <tcp_parseopt+0xc4>)
 8009b5e:	881b      	ldrh	r3, [r3, #0]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d055      	beq.n	8009c10 <tcp_parseopt+0xbc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009b64:	4b2d      	ldr	r3, [pc, #180]	; (8009c1c <tcp_parseopt+0xc8>)
 8009b66:	2200      	movs	r2, #0
 8009b68:	801a      	strh	r2, [r3, #0]
 8009b6a:	e045      	b.n	8009bf8 <tcp_parseopt+0xa4>
      u8_t opt = tcp_getoptbyte();
 8009b6c:	f7ff ffb8 	bl	8009ae0 <tcp_getoptbyte>
 8009b70:	4603      	mov	r3, r0
 8009b72:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009b74:	7bfb      	ldrb	r3, [r7, #15]
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	d006      	beq.n	8009b88 <tcp_parseopt+0x34>
 8009b7a:	2b02      	cmp	r3, #2
 8009b7c:	dc2b      	bgt.n	8009bd6 <tcp_parseopt+0x82>
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d041      	beq.n	8009c06 <tcp_parseopt+0xb2>
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d127      	bne.n	8009bd6 <tcp_parseopt+0x82>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case LWIP_TCP_OPT_NOP:
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
 8009b86:	e037      	b.n	8009bf8 <tcp_parseopt+0xa4>
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009b88:	f7ff ffaa 	bl	8009ae0 <tcp_getoptbyte>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b04      	cmp	r3, #4
 8009b90:	d13b      	bne.n	8009c0a <tcp_parseopt+0xb6>
 8009b92:	4b22      	ldr	r3, [pc, #136]	; (8009c1c <tcp_parseopt+0xc8>)
 8009b94:	881b      	ldrh	r3, [r3, #0]
 8009b96:	3301      	adds	r3, #1
 8009b98:	4a1f      	ldr	r2, [pc, #124]	; (8009c18 <tcp_parseopt+0xc4>)
 8009b9a:	8812      	ldrh	r2, [r2, #0]
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	da34      	bge.n	8009c0a <tcp_parseopt+0xb6>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8009ba0:	f7ff ff9e 	bl	8009ae0 <tcp_getoptbyte>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	021b      	lsls	r3, r3, #8
 8009baa:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8009bac:	f7ff ff98 	bl	8009ae0 <tcp_getoptbyte>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	b29a      	uxth	r2, r3
 8009bb4:	89bb      	ldrh	r3, [r7, #12]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009bba:	89bb      	ldrh	r3, [r7, #12]
 8009bbc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009bc0:	d804      	bhi.n	8009bcc <tcp_parseopt+0x78>
 8009bc2:	89bb      	ldrh	r3, [r7, #12]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d001      	beq.n	8009bcc <tcp_parseopt+0x78>
 8009bc8:	89ba      	ldrh	r2, [r7, #12]
 8009bca:	e001      	b.n	8009bd0 <tcp_parseopt+0x7c>
 8009bcc:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8009bd4:	e010      	b.n	8009bf8 <tcp_parseopt+0xa4>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8009bd6:	f7ff ff83 	bl	8009ae0 <tcp_getoptbyte>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8009bde:	7afb      	ldrb	r3, [r7, #11]
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d914      	bls.n	8009c0e <tcp_parseopt+0xba>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8009be4:	7afb      	ldrb	r3, [r7, #11]
 8009be6:	b29a      	uxth	r2, r3
 8009be8:	4b0c      	ldr	r3, [pc, #48]	; (8009c1c <tcp_parseopt+0xc8>)
 8009bea:	881b      	ldrh	r3, [r3, #0]
 8009bec:	4413      	add	r3, r2
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	3b02      	subs	r3, #2
 8009bf2:	b29a      	uxth	r2, r3
 8009bf4:	4b09      	ldr	r3, [pc, #36]	; (8009c1c <tcp_parseopt+0xc8>)
 8009bf6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009bf8:	4b08      	ldr	r3, [pc, #32]	; (8009c1c <tcp_parseopt+0xc8>)
 8009bfa:	881a      	ldrh	r2, [r3, #0]
 8009bfc:	4b06      	ldr	r3, [pc, #24]	; (8009c18 <tcp_parseopt+0xc4>)
 8009bfe:	881b      	ldrh	r3, [r3, #0]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d3b3      	bcc.n	8009b6c <tcp_parseopt+0x18>
 8009c04:	e004      	b.n	8009c10 <tcp_parseopt+0xbc>
        return;
 8009c06:	bf00      	nop
 8009c08:	e002      	b.n	8009c10 <tcp_parseopt+0xbc>
          return;
 8009c0a:	bf00      	nop
 8009c0c:	e000      	b.n	8009c10 <tcp_parseopt+0xbc>
          return;
 8009c0e:	bf00      	nop
      }
    }
  }
}
 8009c10:	3710      	adds	r7, #16
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	200000e0 	.word	0x200000e0
 8009c1c:	200000e8 	.word	0x200000e8

08009c20 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009c20:	b480      	push	{r7}
 8009c22:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009c24:	4b05      	ldr	r3, [pc, #20]	; (8009c3c <tcp_trigger_input_pcb_close+0x1c>)
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	f043 0310 	orr.w	r3, r3, #16
 8009c2c:	b2da      	uxtb	r2, r3
 8009c2e:	4b03      	ldr	r3, [pc, #12]	; (8009c3c <tcp_trigger_input_pcb_close+0x1c>)
 8009c30:	701a      	strb	r2, [r3, #0]
}
 8009c32:	bf00      	nop
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bc80      	pop	{r7}
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop
 8009c3c:	200000f9 	.word	0x200000f9

08009c40 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b086      	sub	sp, #24
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	607b      	str	r3, [r7, #4]
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	817b      	strh	r3, [r7, #10]
 8009c4e:	4613      	mov	r3, r2
 8009c50:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009c52:	897a      	ldrh	r2, [r7, #10]
 8009c54:	893b      	ldrh	r3, [r7, #8]
 8009c56:	4413      	add	r3, r2
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	3314      	adds	r3, #20
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	2200      	movs	r2, #0
 8009c60:	4619      	mov	r1, r3
 8009c62:	2001      	movs	r0, #1
 8009c64:	f7fb fbc2 	bl	80053ec <pbuf_alloc>
 8009c68:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d056      	beq.n	8009d1e <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009c70:	897b      	ldrh	r3, [r7, #10]
 8009c72:	3313      	adds	r3, #19
 8009c74:	697a      	ldr	r2, [r7, #20]
 8009c76:	8952      	ldrh	r2, [r2, #10]
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	db05      	blt.n	8009c88 <tcp_output_alloc_header+0x48>
 8009c7c:	4b2a      	ldr	r3, [pc, #168]	; (8009d28 <tcp_output_alloc_header+0xe8>)
 8009c7e:	2272      	movs	r2, #114	; 0x72
 8009c80:	492a      	ldr	r1, [pc, #168]	; (8009d2c <tcp_output_alloc_header+0xec>)
 8009c82:	482b      	ldr	r0, [pc, #172]	; (8009d30 <tcp_output_alloc_header+0xf0>)
 8009c84:	f004 f872 	bl	800dd6c <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	8adb      	ldrh	r3, [r3, #22]
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7fa fdef 	bl	8004876 <lwip_htons>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	8b1b      	ldrh	r3, [r3, #24]
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f7fa fde6 	bl	8004876 <lwip_htons>
 8009caa:	4603      	mov	r3, r0
 8009cac:	461a      	mov	r2, r3
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f7fa fde7 	bl	8004890 <lwip_htonl>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8009cc8:	897b      	ldrh	r3, [r7, #10]
 8009cca:	089b      	lsrs	r3, r3, #2
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	3305      	adds	r3, #5
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	031b      	lsls	r3, r3, #12
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	f043 0310 	orr.w	r3, r3, #16
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7fa fdca 	bl	8004876 <lwip_htons>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7fa fdc1 	bl	8004876 <lwip_htons>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	741a      	strb	r2, [r3, #16]
 8009d02:	2200      	movs	r2, #0
 8009d04:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	749a      	strb	r2, [r3, #18]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d14:	68fa      	ldr	r2, [r7, #12]
 8009d16:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8009d18:	441a      	add	r2, r3
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8009d1e:	697b      	ldr	r3, [r7, #20]
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3718      	adds	r7, #24
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	0800fd50 	.word	0x0800fd50
 8009d2c:	0800fd84 	.word	0x0800fd84
 8009d30:	0800fdb4 	.word	0x0800fdb4

08009d34 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009d34:	b590      	push	{r4, r7, lr}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d02d      	beq.n	8009da0 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d48:	60fb      	str	r3, [r7, #12]
 8009d4a:	e002      	b.n	8009d52 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d1f8      	bne.n	8009d4c <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	899b      	ldrh	r3, [r3, #12]
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7fa fd87 	bl	8004876 <lwip_htons>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	f003 0307 	and.w	r3, r3, #7
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d116      	bne.n	8009da0 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	899b      	ldrh	r3, [r3, #12]
 8009d78:	b29c      	uxth	r4, r3
 8009d7a:	2001      	movs	r0, #1
 8009d7c:	f7fa fd7b 	bl	8004876 <lwip_htons>
 8009d80:	4603      	mov	r3, r0
 8009d82:	461a      	mov	r2, r3
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	4322      	orrs	r2, r4
 8009d8a:	b292      	uxth	r2, r2
 8009d8c:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	7e9b      	ldrb	r3, [r3, #26]
 8009d92:	f043 0320 	orr.w	r3, r3, #32
 8009d96:	b2da      	uxtb	r2, r3
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	e004      	b.n	8009daa <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009da0:	2101      	movs	r1, #1
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 fcc0 	bl	800a728 <tcp_enqueue_flags>
 8009da8:	4603      	mov	r3, r0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3714      	adds	r7, #20
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd90      	pop	{r4, r7, pc}
	...

08009db4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8009db4:	b590      	push	{r4, r7, lr}
 8009db6:	b087      	sub	sp, #28
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	603b      	str	r3, [r7, #0]
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009dc4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	f003 0304 	and.w	r3, r3, #4
 8009dd0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009dd2:	2003      	movs	r0, #3
 8009dd4:	f7fb f8f8 	bl	8004fc8 <memp_malloc>
 8009dd8:	6138      	str	r0, [r7, #16]
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d104      	bne.n	8009dea <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009de0:	68b8      	ldr	r0, [r7, #8]
 8009de2:	f7fb fe75 	bl	8005ad0 <pbuf_free>
    return NULL;
 8009de6:	2300      	movs	r3, #0
 8009de8:	e061      	b.n	8009eae <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009df0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	2200      	movs	r2, #0
 8009df6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	68ba      	ldr	r2, [r7, #8]
 8009dfc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	891a      	ldrh	r2, [r3, #8]
 8009e02:	7dfb      	ldrb	r3, [r7, #23]
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d205      	bcs.n	8009e16 <tcp_create_segment+0x62>
 8009e0a:	4b2b      	ldr	r3, [pc, #172]	; (8009eb8 <tcp_create_segment+0x104>)
 8009e0c:	22ba      	movs	r2, #186	; 0xba
 8009e0e:	492b      	ldr	r1, [pc, #172]	; (8009ebc <tcp_create_segment+0x108>)
 8009e10:	482b      	ldr	r0, [pc, #172]	; (8009ec0 <tcp_create_segment+0x10c>)
 8009e12:	f003 ffab 	bl	800dd6c <iprintf>
  seg->len = p->tot_len - optlen;
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	891a      	ldrh	r2, [r3, #8]
 8009e1a:	7dfb      	ldrb	r3, [r7, #23]
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	1ad3      	subs	r3, r2, r3
 8009e20:	b29a      	uxth	r2, r3
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8009e26:	2114      	movs	r1, #20
 8009e28:	68b8      	ldr	r0, [r7, #8]
 8009e2a:	f7fb fe2d 	bl	8005a88 <pbuf_header>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d004      	beq.n	8009e3e <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009e34:	6938      	ldr	r0, [r7, #16]
 8009e36:	f7fd f939 	bl	80070ac <tcp_seg_free>
    return NULL;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	e037      	b.n	8009eae <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	685a      	ldr	r2, [r3, #4]
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	8ada      	ldrh	r2, [r3, #22]
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	68dc      	ldr	r4, [r3, #12]
 8009e50:	4610      	mov	r0, r2
 8009e52:	f7fa fd10 	bl	8004876 <lwip_htons>
 8009e56:	4603      	mov	r3, r0
 8009e58:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	8b1a      	ldrh	r2, [r3, #24]
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	68dc      	ldr	r4, [r3, #12]
 8009e62:	4610      	mov	r0, r2
 8009e64:	f7fa fd07 	bl	8004876 <lwip_htons>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	68dc      	ldr	r4, [r3, #12]
 8009e70:	6838      	ldr	r0, [r7, #0]
 8009e72:	f7fa fd0d 	bl	8004890 <lwip_htonl>
 8009e76:	4603      	mov	r3, r0
 8009e78:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8009e7a:	7dfb      	ldrb	r3, [r7, #23]
 8009e7c:	089b      	lsrs	r3, r3, #2
 8009e7e:	b2db      	uxtb	r3, r3
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	3305      	adds	r3, #5
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	031b      	lsls	r3, r3, #12
 8009e88:	b29a      	uxth	r2, r3
 8009e8a:	79fb      	ldrb	r3, [r7, #7]
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	b29a      	uxth	r2, r3
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	68dc      	ldr	r4, [r3, #12]
 8009e96:	4610      	mov	r0, r2
 8009e98:	f7fa fced 	bl	8004876 <lwip_htons>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	749a      	strb	r2, [r3, #18]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	74da      	strb	r2, [r3, #19]
  return seg;
 8009eac:	693b      	ldr	r3, [r7, #16]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	371c      	adds	r7, #28
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd90      	pop	{r4, r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	0800fd50 	.word	0x0800fd50
 8009ebc:	0800fddc 	.word	0x0800fddc
 8009ec0:	0800fdb4 	.word	0x0800fdb4

08009ec4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b086      	sub	sp, #24
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	607b      	str	r3, [r7, #4]
 8009ecc:	4603      	mov	r3, r0
 8009ece:	73fb      	strb	r3, [r7, #15]
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	81bb      	strh	r3, [r7, #12]
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8009ed8:	89bb      	ldrh	r3, [r7, #12]
 8009eda:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8009edc:	89ba      	ldrh	r2, [r7, #12]
 8009ede:	897b      	ldrh	r3, [r7, #10]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d221      	bcs.n	8009f28 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009ee4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009ee8:	f003 0302 	and.w	r3, r3, #2
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d111      	bne.n	8009f14 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8009ef0:	6a3b      	ldr	r3, [r7, #32]
 8009ef2:	7e9b      	ldrb	r3, [r3, #26]
 8009ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d115      	bne.n	8009f28 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 8009efc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d007      	beq.n	8009f14 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8009f04:	6a3b      	ldr	r3, [r7, #32]
 8009f06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d103      	bne.n	8009f14 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 8009f0c:	6a3b      	ldr	r3, [r7, #32]
 8009f0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d009      	beq.n	8009f28 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8009f14:	89bb      	ldrh	r3, [r7, #12]
 8009f16:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8009f1a:	f023 0203 	bic.w	r2, r3, #3
 8009f1e:	897b      	ldrh	r3, [r7, #10]
 8009f20:	4293      	cmp	r3, r2
 8009f22:	bf28      	it	cs
 8009f24:	4613      	movcs	r3, r2
 8009f26:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8009f28:	8af9      	ldrh	r1, [r7, #22]
 8009f2a:	7bfb      	ldrb	r3, [r7, #15]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7fb fa5c 	bl	80053ec <pbuf_alloc>
 8009f34:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d101      	bne.n	8009f40 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	e019      	b.n	8009f74 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d006      	beq.n	8009f56 <tcp_pbuf_prealloc+0x92>
 8009f48:	4b0c      	ldr	r3, [pc, #48]	; (8009f7c <tcp_pbuf_prealloc+0xb8>)
 8009f4a:	f44f 7288 	mov.w	r2, #272	; 0x110
 8009f4e:	490c      	ldr	r1, [pc, #48]	; (8009f80 <tcp_pbuf_prealloc+0xbc>)
 8009f50:	480c      	ldr	r0, [pc, #48]	; (8009f84 <tcp_pbuf_prealloc+0xc0>)
 8009f52:	f003 ff0b 	bl	800dd6c <iprintf>
  *oversize = p->len - length;
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	895a      	ldrh	r2, [r3, #10]
 8009f5a:	89bb      	ldrh	r3, [r7, #12]
 8009f5c:	1ad3      	subs	r3, r2, r3
 8009f5e:	b29a      	uxth	r2, r3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	89ba      	ldrh	r2, [r7, #12]
 8009f68:	811a      	strh	r2, [r3, #8]
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	891a      	ldrh	r2, [r3, #8]
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	815a      	strh	r2, [r3, #10]
  return p;
 8009f72:	693b      	ldr	r3, [r7, #16]
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3718      	adds	r7, #24
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	0800fd50 	.word	0x0800fd50
 8009f80:	0800fdf4 	.word	0x0800fdf4
 8009f84:	0800fdb4 	.word	0x0800fdb4

08009f88 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	460b      	mov	r3, r1
 8009f92:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	7d1b      	ldrb	r3, [r3, #20]
 8009f98:	2b04      	cmp	r3, #4
 8009f9a:	d00e      	beq.n	8009fba <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8009fa0:	2b07      	cmp	r3, #7
 8009fa2:	d00a      	beq.n	8009fba <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8009fa8:	2b02      	cmp	r3, #2
 8009faa:	d006      	beq.n	8009fba <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8009fb0:	2b03      	cmp	r3, #3
 8009fb2:	d002      	beq.n	8009fba <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8009fb4:	f06f 030a 	mvn.w	r3, #10
 8009fb8:	e04f      	b.n	800a05a <tcp_write_checks+0xd2>
  } else if (len == 0) {
 8009fba:	887b      	ldrh	r3, [r7, #2]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d101      	bne.n	8009fc4 <tcp_write_checks+0x3c>
    return ERR_OK;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	e04a      	b.n	800a05a <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009fca:	887a      	ldrh	r2, [r7, #2]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d909      	bls.n	8009fe4 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	7e9b      	ldrb	r3, [r3, #26]
 8009fd4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009fd8:	b2da      	uxtb	r2, r3
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8009fde:	f04f 33ff 	mov.w	r3, #4294967295
 8009fe2:	e03a      	b.n	800a05a <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009fea:	2b08      	cmp	r3, #8
 8009fec:	d806      	bhi.n	8009ffc <tcp_write_checks+0x74>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009ff4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d909      	bls.n	800a010 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	7e9b      	ldrb	r3, [r3, #26]
 800a000:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a004:	b2da      	uxtb	r2, r3
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800a00a:	f04f 33ff 	mov.w	r3, #4294967295
 800a00e:	e024      	b.n	800a05a <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a016:	2b00      	cmp	r3, #0
 800a018:	d00f      	beq.n	800a03a <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d11a      	bne.n	800a058 <tcp_write_checks+0xd0>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a026:	2b00      	cmp	r3, #0
 800a028:	d116      	bne.n	800a058 <tcp_write_checks+0xd0>
 800a02a:	4b0e      	ldr	r3, [pc, #56]	; (800a064 <tcp_write_checks+0xdc>)
 800a02c:	f240 1255 	movw	r2, #341	; 0x155
 800a030:	490d      	ldr	r1, [pc, #52]	; (800a068 <tcp_write_checks+0xe0>)
 800a032:	480e      	ldr	r0, [pc, #56]	; (800a06c <tcp_write_checks+0xe4>)
 800a034:	f003 fe9a 	bl	800dd6c <iprintf>
 800a038:	e00e      	b.n	800a058 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d103      	bne.n	800a04a <tcp_write_checks+0xc2>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a046:	2b00      	cmp	r3, #0
 800a048:	d006      	beq.n	800a058 <tcp_write_checks+0xd0>
 800a04a:	4b06      	ldr	r3, [pc, #24]	; (800a064 <tcp_write_checks+0xdc>)
 800a04c:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800a050:	4907      	ldr	r1, [pc, #28]	; (800a070 <tcp_write_checks+0xe8>)
 800a052:	4806      	ldr	r0, [pc, #24]	; (800a06c <tcp_write_checks+0xe4>)
 800a054:	f003 fe8a 	bl	800dd6c <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3708      	adds	r7, #8
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	0800fd50 	.word	0x0800fd50
 800a068:	0800fe08 	.word	0x0800fe08
 800a06c:	0800fdb4 	.word	0x0800fdb4
 800a070:	0800fe44 	.word	0x0800fe44

0800a074 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800a074:	b590      	push	{r4, r7, lr}
 800a076:	b09b      	sub	sp, #108	; 0x6c
 800a078:	af04      	add	r7, sp, #16
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	4611      	mov	r1, r2
 800a080:	461a      	mov	r2, r3
 800a082:	460b      	mov	r3, r1
 800a084:	80fb      	strh	r3, [r7, #6]
 800a086:	4613      	mov	r3, r2
 800a088:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800a08a:	2300      	movs	r3, #0
 800a08c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800a08e:	2300      	movs	r3, #0
 800a090:	653b      	str	r3, [r7, #80]	; 0x50
 800a092:	2300      	movs	r3, #0
 800a094:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a096:	2300      	movs	r3, #0
 800a098:	64bb      	str	r3, [r7, #72]	; 0x48
 800a09a:	2300      	movs	r3, #0
 800a09c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800a09e:	2300      	movs	r3, #0
 800a0a0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a0c2:	085b      	lsrs	r3, r3, #1
 800a0c4:	b29a      	uxth	r2, r3
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	bf28      	it	cs
 800a0ce:	4613      	movcs	r3, r2
 800a0d0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800a0d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d102      	bne.n	800a0de <tcp_write+0x6a>
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a0dc:	e000      	b.n	800a0e0 <tcp_write+0x6c>
 800a0de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0e0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d109      	bne.n	800a0fc <tcp_write+0x88>
 800a0e8:	4b92      	ldr	r3, [pc, #584]	; (800a334 <tcp_write+0x2c0>)
 800a0ea:	f240 1291 	movw	r2, #401	; 0x191
 800a0ee:	4992      	ldr	r1, [pc, #584]	; (800a338 <tcp_write+0x2c4>)
 800a0f0:	4892      	ldr	r0, [pc, #584]	; (800a33c <tcp_write+0x2c8>)
 800a0f2:	f003 fe3b 	bl	800dd6c <iprintf>
 800a0f6:	f06f 030f 	mvn.w	r3, #15
 800a0fa:	e30a      	b.n	800a712 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800a0fc:	88fb      	ldrh	r3, [r7, #6]
 800a0fe:	4619      	mov	r1, r3
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f7ff ff41 	bl	8009f88 <tcp_write_checks>
 800a106:	4603      	mov	r3, r0
 800a108:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800a10c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800a110:	2b00      	cmp	r3, #0
 800a112:	d002      	beq.n	800a11a <tcp_write+0xa6>
    return err;
 800a114:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800a118:	e2fb      	b.n	800a712 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a120:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f000 80f4 	beq.w	800a316 <tcp_write+0x2a2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a132:	653b      	str	r3, [r7, #80]	; 0x50
 800a134:	e002      	b.n	800a13c <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 800a136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a13c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d1f8      	bne.n	800a136 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800a144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a146:	7a9b      	ldrb	r3, [r3, #10]
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	f003 0304 	and.w	r3, r3, #4
 800a150:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800a152:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a156:	891b      	ldrh	r3, [r3, #8]
 800a158:	4619      	mov	r1, r3
 800a15a:	8c3b      	ldrh	r3, [r7, #32]
 800a15c:	440b      	add	r3, r1
 800a15e:	429a      	cmp	r2, r3
 800a160:	da06      	bge.n	800a170 <tcp_write+0xfc>
 800a162:	4b74      	ldr	r3, [pc, #464]	; (800a334 <tcp_write+0x2c0>)
 800a164:	f240 12c7 	movw	r2, #455	; 0x1c7
 800a168:	4975      	ldr	r1, [pc, #468]	; (800a340 <tcp_write+0x2cc>)
 800a16a:	4874      	ldr	r0, [pc, #464]	; (800a33c <tcp_write+0x2c8>)
 800a16c:	f003 fdfe 	bl	800dd6c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800a170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a172:	891a      	ldrh	r2, [r3, #8]
 800a174:	8c3b      	ldrh	r3, [r7, #32]
 800a176:	4413      	add	r3, r2
 800a178:	b29b      	uxth	r3, r3
 800a17a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a17c:	1ad3      	subs	r3, r2, r3
 800a17e:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a186:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800a188:	8a7b      	ldrh	r3, [r7, #18]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d026      	beq.n	800a1dc <tcp_write+0x168>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800a18e:	8a7b      	ldrh	r3, [r7, #18]
 800a190:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a192:	429a      	cmp	r2, r3
 800a194:	d206      	bcs.n	800a1a4 <tcp_write+0x130>
 800a196:	4b67      	ldr	r3, [pc, #412]	; (800a334 <tcp_write+0x2c0>)
 800a198:	f240 12d9 	movw	r2, #473	; 0x1d9
 800a19c:	4969      	ldr	r1, [pc, #420]	; (800a344 <tcp_write+0x2d0>)
 800a19e:	4867      	ldr	r0, [pc, #412]	; (800a33c <tcp_write+0x2c8>)
 800a1a0:	f003 fde4 	bl	800dd6c <iprintf>
      seg = last_unsent;
 800a1a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800a1a8:	8a7b      	ldrh	r3, [r7, #18]
 800a1aa:	88fa      	ldrh	r2, [r7, #6]
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	bf28      	it	cs
 800a1b0:	4613      	movcs	r3, r2
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	bf28      	it	cs
 800a1ba:	4613      	movcs	r3, r2
 800a1bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800a1be:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a1c2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a1c4:	4413      	add	r3, r2
 800a1c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800a1ca:	8a7a      	ldrh	r2, [r7, #18]
 800a1cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a1ce:	1ad3      	subs	r3, r2, r3
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800a1d4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a1d6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a1d8:	1ad3      	subs	r3, r2, r3
 800a1da:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800a1dc:	8a7b      	ldrh	r3, [r7, #18]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d00b      	beq.n	800a1fa <tcp_write+0x186>
 800a1e2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a1e6:	88fb      	ldrh	r3, [r7, #6]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d006      	beq.n	800a1fa <tcp_write+0x186>
 800a1ec:	4b51      	ldr	r3, [pc, #324]	; (800a334 <tcp_write+0x2c0>)
 800a1ee:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a1f2:	4955      	ldr	r1, [pc, #340]	; (800a348 <tcp_write+0x2d4>)
 800a1f4:	4851      	ldr	r0, [pc, #324]	; (800a33c <tcp_write+0x2c8>)
 800a1f6:	f003 fdb9 	bl	800dd6c <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800a1fa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a1fe:	88fb      	ldrh	r3, [r7, #6]
 800a200:	429a      	cmp	r2, r3
 800a202:	f080 8169 	bcs.w	800a4d8 <tcp_write+0x464>
 800a206:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a208:	2b00      	cmp	r3, #0
 800a20a:	f000 8165 	beq.w	800a4d8 <tcp_write+0x464>
 800a20e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a210:	891b      	ldrh	r3, [r3, #8]
 800a212:	2b00      	cmp	r3, #0
 800a214:	f000 8160 	beq.w	800a4d8 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800a218:	88fa      	ldrh	r2, [r7, #6]
 800a21a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a21e:	1ad2      	subs	r2, r2, r3
 800a220:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a222:	4293      	cmp	r3, r2
 800a224:	bfa8      	it	ge
 800a226:	4613      	movge	r3, r2
 800a228:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800a22a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a22c:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a22e:	797b      	ldrb	r3, [r7, #5]
 800a230:	f003 0301 	and.w	r3, r3, #1
 800a234:	2b00      	cmp	r3, #0
 800a236:	d027      	beq.n	800a288 <tcp_write+0x214>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800a238:	f107 0012 	add.w	r0, r7, #18
 800a23c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a23e:	8bf9      	ldrh	r1, [r7, #30]
 800a240:	2301      	movs	r3, #1
 800a242:	9302      	str	r3, [sp, #8]
 800a244:	797b      	ldrb	r3, [r7, #5]
 800a246:	9301      	str	r3, [sp, #4]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	9300      	str	r3, [sp, #0]
 800a24c:	4603      	mov	r3, r0
 800a24e:	2004      	movs	r0, #4
 800a250:	f7ff fe38 	bl	8009ec4 <tcp_pbuf_prealloc>
 800a254:	6578      	str	r0, [r7, #84]	; 0x54
 800a256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f000 8228 	beq.w	800a6ae <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800a25e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a260:	6858      	ldr	r0, [r3, #4]
 800a262:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a266:	68ba      	ldr	r2, [r7, #8]
 800a268:	4413      	add	r3, r2
 800a26a:	8bfa      	ldrh	r2, [r7, #30]
 800a26c:	4619      	mov	r1, r3
 800a26e:	f003 fd67 	bl	800dd40 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800a272:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a274:	f7fb fcc0 	bl	8005bf8 <pbuf_clen>
 800a278:	4603      	mov	r3, r0
 800a27a:	461a      	mov	r2, r3
 800a27c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a280:	4413      	add	r3, r2
 800a282:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a286:	e03f      	b.n	800a308 <tcp_write+0x294>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800a288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a28a:	685b      	ldr	r3, [r3, #4]
 800a28c:	637b      	str	r3, [r7, #52]	; 0x34
 800a28e:	e002      	b.n	800a296 <tcp_write+0x222>
 800a290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	637b      	str	r3, [r7, #52]	; 0x34
 800a296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d1f8      	bne.n	800a290 <tcp_write+0x21c>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800a29e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2a0:	7b1b      	ldrb	r3, [r3, #12]
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d115      	bne.n	800a2d2 <tcp_write+0x25e>
 800a2a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2ac:	8952      	ldrh	r2, [r2, #10]
 800a2ae:	4413      	add	r3, r2
 800a2b0:	68ba      	ldr	r2, [r7, #8]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d10d      	bne.n	800a2d2 <tcp_write+0x25e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800a2b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d006      	beq.n	800a2cc <tcp_write+0x258>
 800a2be:	4b1d      	ldr	r3, [pc, #116]	; (800a334 <tcp_write+0x2c0>)
 800a2c0:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800a2c4:	4921      	ldr	r1, [pc, #132]	; (800a34c <tcp_write+0x2d8>)
 800a2c6:	481d      	ldr	r0, [pc, #116]	; (800a33c <tcp_write+0x2c8>)
 800a2c8:	f003 fd50 	bl	800dd6c <iprintf>
          extendlen = seglen;
 800a2cc:	8bfb      	ldrh	r3, [r7, #30]
 800a2ce:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a2d0:	e01a      	b.n	800a308 <tcp_write+0x294>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800a2d2:	8bfb      	ldrh	r3, [r7, #30]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	2004      	movs	r0, #4
 800a2da:	f7fb f887 	bl	80053ec <pbuf_alloc>
 800a2de:	6578      	str	r0, [r7, #84]	; 0x54
 800a2e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	f000 81e5 	beq.w	800a6b2 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800a2e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a2ec:	68ba      	ldr	r2, [r7, #8]
 800a2ee:	441a      	add	r2, r3
 800a2f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2f2:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800a2f4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a2f6:	f7fb fc7f 	bl	8005bf8 <pbuf_clen>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a302:	4413      	add	r3, r2
 800a304:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800a308:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a30c:	8bfb      	ldrh	r3, [r7, #30]
 800a30e:	4413      	add	r3, r2
 800a310:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a314:	e0e0      	b.n	800a4d8 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	f000 80db 	beq.w	800a4d8 <tcp_write+0x464>
 800a322:	4b04      	ldr	r3, [pc, #16]	; (800a334 <tcp_write+0x2c0>)
 800a324:	f44f 7209 	mov.w	r2, #548	; 0x224
 800a328:	4909      	ldr	r1, [pc, #36]	; (800a350 <tcp_write+0x2dc>)
 800a32a:	4804      	ldr	r0, [pc, #16]	; (800a33c <tcp_write+0x2c8>)
 800a32c:	f003 fd1e 	bl	800dd6c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800a330:	e0d2      	b.n	800a4d8 <tcp_write+0x464>
 800a332:	bf00      	nop
 800a334:	0800fd50 	.word	0x0800fd50
 800a338:	0800fe78 	.word	0x0800fe78
 800a33c:	0800fdb4 	.word	0x0800fdb4
 800a340:	0800feac 	.word	0x0800feac
 800a344:	0800fec4 	.word	0x0800fec4
 800a348:	0800fee4 	.word	0x0800fee4
 800a34c:	0800ff04 	.word	0x0800ff04
 800a350:	0800ff30 	.word	0x0800ff30
    struct pbuf *p;
    u16_t left = len - pos;
 800a354:	88fa      	ldrh	r2, [r7, #6]
 800a356:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a35a:	1ad3      	subs	r3, r2, r3
 800a35c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800a35e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a362:	b29b      	uxth	r3, r3
 800a364:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a366:	1ad3      	subs	r3, r2, r3
 800a368:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800a36a:	8b7a      	ldrh	r2, [r7, #26]
 800a36c:	8bbb      	ldrh	r3, [r7, #28]
 800a36e:	4293      	cmp	r3, r2
 800a370:	bf28      	it	cs
 800a372:	4613      	movcs	r3, r2
 800a374:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a376:	797b      	ldrb	r3, [r7, #5]
 800a378:	f003 0301 	and.w	r3, r3, #1
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d036      	beq.n	800a3ee <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800a380:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a384:	b29a      	uxth	r2, r3
 800a386:	8b3b      	ldrh	r3, [r7, #24]
 800a388:	4413      	add	r3, r2
 800a38a:	b299      	uxth	r1, r3
 800a38c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a38e:	2b00      	cmp	r3, #0
 800a390:	bf0c      	ite	eq
 800a392:	2301      	moveq	r3, #1
 800a394:	2300      	movne	r3, #0
 800a396:	b2db      	uxtb	r3, r3
 800a398:	f107 0012 	add.w	r0, r7, #18
 800a39c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a39e:	9302      	str	r3, [sp, #8]
 800a3a0:	797b      	ldrb	r3, [r7, #5]
 800a3a2:	9301      	str	r3, [sp, #4]
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	9300      	str	r3, [sp, #0]
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2000      	movs	r0, #0
 800a3ac:	f7ff fd8a 	bl	8009ec4 <tcp_pbuf_prealloc>
 800a3b0:	6338      	str	r0, [r7, #48]	; 0x30
 800a3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	f000 817e 	beq.w	800a6b6 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800a3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3bc:	895b      	ldrh	r3, [r3, #10]
 800a3be:	8b3a      	ldrh	r2, [r7, #24]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d906      	bls.n	800a3d2 <tcp_write+0x35e>
 800a3c4:	4b8f      	ldr	r3, [pc, #572]	; (800a604 <tcp_write+0x590>)
 800a3c6:	f44f 7210 	mov.w	r2, #576	; 0x240
 800a3ca:	498f      	ldr	r1, [pc, #572]	; (800a608 <tcp_write+0x594>)
 800a3cc:	488f      	ldr	r0, [pc, #572]	; (800a60c <tcp_write+0x598>)
 800a3ce:	f003 fccd 	bl	800dd6c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800a3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d4:	685a      	ldr	r2, [r3, #4]
 800a3d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3da:	18d0      	adds	r0, r2, r3
 800a3dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a3e0:	68ba      	ldr	r2, [r7, #8]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	8b3a      	ldrh	r2, [r7, #24]
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	f003 fcaa 	bl	800dd40 <memcpy>
 800a3ec:	e02e      	b.n	800a44c <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800a3ee:	8a7b      	ldrh	r3, [r7, #18]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d006      	beq.n	800a402 <tcp_write+0x38e>
 800a3f4:	4b83      	ldr	r3, [pc, #524]	; (800a604 <tcp_write+0x590>)
 800a3f6:	f240 224b 	movw	r2, #587	; 0x24b
 800a3fa:	4985      	ldr	r1, [pc, #532]	; (800a610 <tcp_write+0x59c>)
 800a3fc:	4883      	ldr	r0, [pc, #524]	; (800a60c <tcp_write+0x598>)
 800a3fe:	f003 fcb5 	bl	800dd6c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800a402:	8b3b      	ldrh	r3, [r7, #24]
 800a404:	2201      	movs	r2, #1
 800a406:	4619      	mov	r1, r3
 800a408:	2000      	movs	r0, #0
 800a40a:	f7fa ffef 	bl	80053ec <pbuf_alloc>
 800a40e:	6178      	str	r0, [r7, #20]
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	2b00      	cmp	r3, #0
 800a414:	f000 8151 	beq.w	800a6ba <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800a418:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a41c:	68ba      	ldr	r2, [r7, #8]
 800a41e:	441a      	add	r2, r3
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a428:	b29b      	uxth	r3, r3
 800a42a:	2200      	movs	r2, #0
 800a42c:	4619      	mov	r1, r3
 800a42e:	2000      	movs	r0, #0
 800a430:	f7fa ffdc 	bl	80053ec <pbuf_alloc>
 800a434:	6338      	str	r0, [r7, #48]	; 0x30
 800a436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d103      	bne.n	800a444 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800a43c:	6978      	ldr	r0, [r7, #20]
 800a43e:	f7fb fb47 	bl	8005ad0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800a442:	e13d      	b.n	800a6c0 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800a444:	6979      	ldr	r1, [r7, #20]
 800a446:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a448:	f7fb fc0e 	bl	8005c68 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800a44c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a44e:	f7fb fbd3 	bl	8005bf8 <pbuf_clen>
 800a452:	4603      	mov	r3, r0
 800a454:	461a      	mov	r2, r3
 800a456:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a45a:	4413      	add	r3, r2
 800a45c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800a460:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a464:	2b09      	cmp	r3, #9
 800a466:	d805      	bhi.n	800a474 <tcp_write+0x400>
 800a468:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a46c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800a470:	4293      	cmp	r3, r2
 800a472:	d903      	bls.n	800a47c <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800a474:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a476:	f7fb fb2b 	bl	8005ad0 <pbuf_free>
      goto memerr;
 800a47a:	e121      	b.n	800a6c0 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a480:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a484:	441a      	add	r2, r3
 800a486:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	4613      	mov	r3, r2
 800a48e:	2200      	movs	r2, #0
 800a490:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a492:	68f8      	ldr	r0, [r7, #12]
 800a494:	f7ff fc8e 	bl	8009db4 <tcp_create_segment>
 800a498:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a49a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	f000 810e 	beq.w	800a6be <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800a4a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d102      	bne.n	800a4ae <tcp_write+0x43a>
      queue = seg;
 800a4a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4aa:	647b      	str	r3, [r7, #68]	; 0x44
 800a4ac:	e00c      	b.n	800a4c8 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800a4ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d106      	bne.n	800a4c2 <tcp_write+0x44e>
 800a4b4:	4b53      	ldr	r3, [pc, #332]	; (800a604 <tcp_write+0x590>)
 800a4b6:	f240 2285 	movw	r2, #645	; 0x285
 800a4ba:	4956      	ldr	r1, [pc, #344]	; (800a614 <tcp_write+0x5a0>)
 800a4bc:	4853      	ldr	r0, [pc, #332]	; (800a60c <tcp_write+0x598>)
 800a4be:	f003 fc55 	bl	800dd6c <iprintf>
      prev_seg->next = seg;
 800a4c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a4c6:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800a4c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4ca:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800a4cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a4d0:	8b3b      	ldrh	r3, [r7, #24]
 800a4d2:	4413      	add	r3, r2
 800a4d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800a4d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a4dc:	88fb      	ldrh	r3, [r7, #6]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	f4ff af38 	bcc.w	800a354 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800a4e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d02c      	beq.n	800a544 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800a4ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4f0:	e01e      	b.n	800a530 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 800a4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f4:	891a      	ldrh	r2, [r3, #8]
 800a4f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a4f8:	4413      	add	r3, r2
 800a4fa:	b29a      	uxth	r2, r3
 800a4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fe:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800a500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d110      	bne.n	800a52a <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800a508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a50e:	8952      	ldrh	r2, [r2, #10]
 800a510:	4413      	add	r3, r2
 800a512:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800a514:	68b9      	ldr	r1, [r7, #8]
 800a516:	4618      	mov	r0, r3
 800a518:	f003 fc12 	bl	800dd40 <memcpy>
        p->len += oversize_used;
 800a51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a51e:	895a      	ldrh	r2, [r3, #10]
 800a520:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a522:	4413      	add	r3, r2
 800a524:	b29a      	uxth	r2, r3
 800a526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a528:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800a52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a532:	2b00      	cmp	r3, #0
 800a534:	d1dd      	bne.n	800a4f2 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 800a536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a538:	891a      	ldrh	r2, [r3, #8]
 800a53a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a53c:	4413      	add	r3, r2
 800a53e:	b29a      	uxth	r2, r3
 800a540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a542:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800a544:	8a7a      	ldrh	r2, [r7, #18]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800a54c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d018      	beq.n	800a584 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800a552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a554:	2b00      	cmp	r3, #0
 800a556:	d106      	bne.n	800a566 <tcp_write+0x4f2>
 800a558:	4b2a      	ldr	r3, [pc, #168]	; (800a604 <tcp_write+0x590>)
 800a55a:	f240 22ba 	movw	r2, #698	; 0x2ba
 800a55e:	492e      	ldr	r1, [pc, #184]	; (800a618 <tcp_write+0x5a4>)
 800a560:	482a      	ldr	r0, [pc, #168]	; (800a60c <tcp_write+0x598>)
 800a562:	f003 fc03 	bl	800dd6c <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800a566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7fb fb7b 	bl	8005c68 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800a572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a574:	891a      	ldrh	r2, [r3, #8]
 800a576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a578:	891b      	ldrh	r3, [r3, #8]
 800a57a:	4413      	add	r3, r2
 800a57c:	b29a      	uxth	r2, r3
 800a57e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a580:	811a      	strh	r2, [r3, #8]
 800a582:	e037      	b.n	800a5f4 <tcp_write+0x580>
  } else if (extendlen > 0) {
 800a584:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a586:	2b00      	cmp	r3, #0
 800a588:	d034      	beq.n	800a5f4 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800a58a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d003      	beq.n	800a598 <tcp_write+0x524>
 800a590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d106      	bne.n	800a5a6 <tcp_write+0x532>
 800a598:	4b1a      	ldr	r3, [pc, #104]	; (800a604 <tcp_write+0x590>)
 800a59a:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 800a59e:	491f      	ldr	r1, [pc, #124]	; (800a61c <tcp_write+0x5a8>)
 800a5a0:	481a      	ldr	r0, [pc, #104]	; (800a60c <tcp_write+0x598>)
 800a5a2:	f003 fbe3 	bl	800dd6c <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a5a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5ac:	e009      	b.n	800a5c2 <tcp_write+0x54e>
      p->tot_len += extendlen;
 800a5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b0:	891a      	ldrh	r2, [r3, #8]
 800a5b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a5b4:	4413      	add	r3, r2
 800a5b6:	b29a      	uxth	r2, r3
 800a5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ba:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d1f1      	bne.n	800a5ae <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 800a5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5cc:	891a      	ldrh	r2, [r3, #8]
 800a5ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a5d0:	4413      	add	r3, r2
 800a5d2:	b29a      	uxth	r2, r3
 800a5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d6:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800a5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5da:	895a      	ldrh	r2, [r3, #10]
 800a5dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a5de:	4413      	add	r3, r2
 800a5e0:	b29a      	uxth	r2, r3
 800a5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e4:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800a5e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5e8:	891a      	ldrh	r2, [r3, #8]
 800a5ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a5ec:	4413      	add	r3, r2
 800a5ee:	b29a      	uxth	r2, r3
 800a5f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5f2:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800a5f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d112      	bne.n	800a620 <tcp_write+0x5ac>
    pcb->unsent = queue;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a5fe:	669a      	str	r2, [r3, #104]	; 0x68
 800a600:	e011      	b.n	800a626 <tcp_write+0x5b2>
 800a602:	bf00      	nop
 800a604:	0800fd50 	.word	0x0800fd50
 800a608:	0800ff60 	.word	0x0800ff60
 800a60c:	0800fdb4 	.word	0x0800fdb4
 800a610:	0800ffa0 	.word	0x0800ffa0
 800a614:	0800ffb0 	.word	0x0800ffb0
 800a618:	0800ffc4 	.word	0x0800ffc4
 800a61c:	0800fffc 	.word	0x0800fffc
  } else {
    last_unsent->next = queue;
 800a620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a622:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a624:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a62a:	88fb      	ldrh	r3, [r7, #6]
 800a62c:	441a      	add	r2, r3
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a638:	88fb      	ldrh	r3, [r7, #6]
 800a63a:	1ad3      	subs	r3, r2, r3
 800a63c:	b29a      	uxth	r2, r3
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a64a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a654:	2b00      	cmp	r3, #0
 800a656:	d00e      	beq.n	800a676 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d10a      	bne.n	800a676 <tcp_write+0x602>
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a664:	2b00      	cmp	r3, #0
 800a666:	d106      	bne.n	800a676 <tcp_write+0x602>
 800a668:	4b2c      	ldr	r3, [pc, #176]	; (800a71c <tcp_write+0x6a8>)
 800a66a:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800a66e:	492c      	ldr	r1, [pc, #176]	; (800a720 <tcp_write+0x6ac>)
 800a670:	482c      	ldr	r0, [pc, #176]	; (800a724 <tcp_write+0x6b0>)
 800a672:	f003 fb7b 	bl	800dd6c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800a676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d016      	beq.n	800a6aa <tcp_write+0x636>
 800a67c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d012      	beq.n	800a6aa <tcp_write+0x636>
 800a684:	797b      	ldrb	r3, [r7, #5]
 800a686:	f003 0302 	and.w	r3, r3, #2
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d10d      	bne.n	800a6aa <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800a68e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	899b      	ldrh	r3, [r3, #12]
 800a694:	b29c      	uxth	r4, r3
 800a696:	2008      	movs	r0, #8
 800a698:	f7fa f8ed 	bl	8004876 <lwip_htons>
 800a69c:	4603      	mov	r3, r0
 800a69e:	461a      	mov	r2, r3
 800a6a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	4322      	orrs	r2, r4
 800a6a6:	b292      	uxth	r2, r2
 800a6a8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	e031      	b.n	800a712 <tcp_write+0x69e>
          goto memerr;
 800a6ae:	bf00      	nop
 800a6b0:	e006      	b.n	800a6c0 <tcp_write+0x64c>
            goto memerr;
 800a6b2:	bf00      	nop
 800a6b4:	e004      	b.n	800a6c0 <tcp_write+0x64c>
        goto memerr;
 800a6b6:	bf00      	nop
 800a6b8:	e002      	b.n	800a6c0 <tcp_write+0x64c>
        goto memerr;
 800a6ba:	bf00      	nop
 800a6bc:	e000      	b.n	800a6c0 <tcp_write+0x64c>
      goto memerr;
 800a6be:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	7e9b      	ldrb	r3, [r3, #26]
 800a6c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a6c8:	b2da      	uxtb	r2, r3
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800a6ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d002      	beq.n	800a6da <tcp_write+0x666>
    pbuf_free(concat_p);
 800a6d4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a6d6:	f7fb f9fb 	bl	8005ad0 <pbuf_free>
  }
  if (queue != NULL) {
 800a6da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d002      	beq.n	800a6e6 <tcp_write+0x672>
    tcp_segs_free(queue);
 800a6e0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a6e2:	f7fc fcce 	bl	8007082 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d00e      	beq.n	800a70e <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d10a      	bne.n	800a70e <tcp_write+0x69a>
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d106      	bne.n	800a70e <tcp_write+0x69a>
 800a700:	4b06      	ldr	r3, [pc, #24]	; (800a71c <tcp_write+0x6a8>)
 800a702:	f240 3201 	movw	r2, #769	; 0x301
 800a706:	4906      	ldr	r1, [pc, #24]	; (800a720 <tcp_write+0x6ac>)
 800a708:	4806      	ldr	r0, [pc, #24]	; (800a724 <tcp_write+0x6b0>)
 800a70a:	f003 fb2f 	bl	800dd6c <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800a70e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a712:	4618      	mov	r0, r3
 800a714:	375c      	adds	r7, #92	; 0x5c
 800a716:	46bd      	mov	sp, r7
 800a718:	bd90      	pop	{r4, r7, pc}
 800a71a:	bf00      	nop
 800a71c:	0800fd50 	.word	0x0800fd50
 800a720:	08010034 	.word	0x08010034
 800a724:	0800fdb4 	.word	0x0800fdb4

0800a728 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b08a      	sub	sp, #40	; 0x28
 800a72c:	af02      	add	r7, sp, #8
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	460b      	mov	r3, r1
 800a732:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a734:	2300      	movs	r3, #0
 800a736:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a738:	2300      	movs	r3, #0
 800a73a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a73c:	78fb      	ldrb	r3, [r7, #3]
 800a73e:	f003 0303 	and.w	r3, r3, #3
 800a742:	2b00      	cmp	r3, #0
 800a744:	d106      	bne.n	800a754 <tcp_enqueue_flags+0x2c>
 800a746:	4b6f      	ldr	r3, [pc, #444]	; (800a904 <tcp_enqueue_flags+0x1dc>)
 800a748:	f240 321a 	movw	r2, #794	; 0x31a
 800a74c:	496e      	ldr	r1, [pc, #440]	; (800a908 <tcp_enqueue_flags+0x1e0>)
 800a74e:	486f      	ldr	r0, [pc, #444]	; (800a90c <tcp_enqueue_flags+0x1e4>)
 800a750:	f003 fb0c 	bl	800dd6c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a75a:	2b08      	cmp	r3, #8
 800a75c:	d806      	bhi.n	800a76c <tcp_enqueue_flags+0x44>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a764:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800a768:	4293      	cmp	r3, r2
 800a76a:	d90e      	bls.n	800a78a <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800a76c:	78fb      	ldrb	r3, [r7, #3]
 800a76e:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800a772:	2b00      	cmp	r3, #0
 800a774:	d109      	bne.n	800a78a <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	7e9b      	ldrb	r3, [r3, #26]
 800a77a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a77e:	b2da      	uxtb	r2, r3
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800a784:	f04f 33ff 	mov.w	r3, #4294967295
 800a788:	e0b7      	b.n	800a8fa <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800a78a:	78fb      	ldrb	r3, [r7, #3]
 800a78c:	f003 0302 	and.w	r3, r3, #2
 800a790:	2b00      	cmp	r3, #0
 800a792:	d001      	beq.n	800a798 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800a794:	2301      	movs	r3, #1
 800a796:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a798:	7ffb      	ldrb	r3, [r7, #31]
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	f003 0304 	and.w	r3, r3, #4
 800a7a2:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a7a4:	7dfb      	ldrb	r3, [r7, #23]
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	2000      	movs	r0, #0
 800a7ae:	f7fa fe1d 	bl	80053ec <pbuf_alloc>
 800a7b2:	6138      	str	r0, [r7, #16]
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d109      	bne.n	800a7ce <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	7e9b      	ldrb	r3, [r3, #26]
 800a7be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a7c2:	b2da      	uxtb	r2, r3
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a7c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a7cc:	e095      	b.n	800a8fa <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	895a      	ldrh	r2, [r3, #10]
 800a7d2:	7dfb      	ldrb	r3, [r7, #23]
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d206      	bcs.n	800a7e8 <tcp_enqueue_flags+0xc0>
 800a7da:	4b4a      	ldr	r3, [pc, #296]	; (800a904 <tcp_enqueue_flags+0x1dc>)
 800a7dc:	f44f 7250 	mov.w	r2, #832	; 0x340
 800a7e0:	494b      	ldr	r1, [pc, #300]	; (800a910 <tcp_enqueue_flags+0x1e8>)
 800a7e2:	484a      	ldr	r0, [pc, #296]	; (800a90c <tcp_enqueue_flags+0x1e4>)
 800a7e4:	f003 fac2 	bl	800dd6c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800a7ec:	78fa      	ldrb	r2, [r7, #3]
 800a7ee:	7ffb      	ldrb	r3, [r7, #31]
 800a7f0:	9300      	str	r3, [sp, #0]
 800a7f2:	460b      	mov	r3, r1
 800a7f4:	6939      	ldr	r1, [r7, #16]
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f7ff fadc 	bl	8009db4 <tcp_create_segment>
 800a7fc:	60f8      	str	r0, [r7, #12]
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d109      	bne.n	800a818 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	7e9b      	ldrb	r3, [r3, #26]
 800a808:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a80c:	b2da      	uxtb	r2, r3
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a812:	f04f 33ff 	mov.w	r3, #4294967295
 800a816:	e070      	b.n	800a8fa <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	f003 0303 	and.w	r3, r3, #3
 800a820:	2b00      	cmp	r3, #0
 800a822:	d006      	beq.n	800a832 <tcp_enqueue_flags+0x10a>
 800a824:	4b37      	ldr	r3, [pc, #220]	; (800a904 <tcp_enqueue_flags+0x1dc>)
 800a826:	f240 3249 	movw	r2, #841	; 0x349
 800a82a:	493a      	ldr	r1, [pc, #232]	; (800a914 <tcp_enqueue_flags+0x1ec>)
 800a82c:	4837      	ldr	r0, [pc, #220]	; (800a90c <tcp_enqueue_flags+0x1e4>)
 800a82e:	f003 fa9d 	bl	800dd6c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	891b      	ldrh	r3, [r3, #8]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d006      	beq.n	800a848 <tcp_enqueue_flags+0x120>
 800a83a:	4b32      	ldr	r3, [pc, #200]	; (800a904 <tcp_enqueue_flags+0x1dc>)
 800a83c:	f240 324a 	movw	r2, #842	; 0x34a
 800a840:	4935      	ldr	r1, [pc, #212]	; (800a918 <tcp_enqueue_flags+0x1f0>)
 800a842:	4832      	ldr	r0, [pc, #200]	; (800a90c <tcp_enqueue_flags+0x1e4>)
 800a844:	f003 fa92 	bl	800dd6c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d103      	bne.n	800a858 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	68fa      	ldr	r2, [r7, #12]
 800a854:	669a      	str	r2, [r3, #104]	; 0x68
 800a856:	e00d      	b.n	800a874 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a85c:	61bb      	str	r3, [r7, #24]
 800a85e:	e002      	b.n	800a866 <tcp_enqueue_flags+0x13e>
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	61bb      	str	r3, [r7, #24]
 800a866:	69bb      	ldr	r3, [r7, #24]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d1f8      	bne.n	800a860 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800a86e:	69bb      	ldr	r3, [r7, #24]
 800a870:	68fa      	ldr	r2, [r7, #12]
 800a872:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2200      	movs	r2, #0
 800a878:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a87c:	78fb      	ldrb	r3, [r7, #3]
 800a87e:	f003 0302 	and.w	r3, r3, #2
 800a882:	2b00      	cmp	r3, #0
 800a884:	d104      	bne.n	800a890 <tcp_enqueue_flags+0x168>
 800a886:	78fb      	ldrb	r3, [r7, #3]
 800a888:	f003 0301 	and.w	r3, r3, #1
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d004      	beq.n	800a89a <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a894:	1c5a      	adds	r2, r3, #1
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a89a:	78fb      	ldrb	r3, [r7, #3]
 800a89c:	f003 0301 	and.w	r3, r3, #1
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d006      	beq.n	800a8b2 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	7e9b      	ldrb	r3, [r3, #26]
 800a8a8:	f043 0320 	orr.w	r3, r3, #32
 800a8ac:	b2da      	uxtb	r2, r3
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7fb f99e 	bl	8005bf8 <pbuf_clen>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	461a      	mov	r2, r3
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a8c6:	4413      	add	r3, r2
 800a8c8:	b29a      	uxth	r2, r3
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00e      	beq.n	800a8f8 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d10a      	bne.n	800a8f8 <tcp_enqueue_flags+0x1d0>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d106      	bne.n	800a8f8 <tcp_enqueue_flags+0x1d0>
 800a8ea:	4b06      	ldr	r3, [pc, #24]	; (800a904 <tcp_enqueue_flags+0x1dc>)
 800a8ec:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800a8f0:	490a      	ldr	r1, [pc, #40]	; (800a91c <tcp_enqueue_flags+0x1f4>)
 800a8f2:	4806      	ldr	r0, [pc, #24]	; (800a90c <tcp_enqueue_flags+0x1e4>)
 800a8f4:	f003 fa3a 	bl	800dd6c <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3720      	adds	r7, #32
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	0800fd50 	.word	0x0800fd50
 800a908:	08010054 	.word	0x08010054
 800a90c:	0800fdb4 	.word	0x0800fdb4
 800a910:	080100ac 	.word	0x080100ac
 800a914:	080100e8 	.word	0x080100e8
 800a918:	08010100 	.word	0x08010100
 800a91c:	0801012c 	.word	0x0801012c

0800a920 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a920:	b590      	push	{r4, r7, lr}
 800a922:	b08b      	sub	sp, #44	; 0x2c
 800a924:	af04      	add	r7, sp, #16
 800a926:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800a928:	2300      	movs	r3, #0
 800a92a:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a92c:	7dbb      	ldrb	r3, [r7, #22]
 800a92e:	b29c      	uxth	r4, r3
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a934:	4618      	mov	r0, r3
 800a936:	f7f9 ffab 	bl	8004890 <lwip_htonl>
 800a93a:	4603      	mov	r3, r0
 800a93c:	2200      	movs	r2, #0
 800a93e:	4621      	mov	r1, r4
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f7ff f97d 	bl	8009c40 <tcp_output_alloc_header>
 800a946:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d109      	bne.n	800a962 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	7e9b      	ldrb	r3, [r3, #26]
 800a952:	f043 0303 	orr.w	r3, r3, #3
 800a956:	b2da      	uxtb	r2, r3
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800a95c:	f06f 0301 	mvn.w	r3, #1
 800a960:	e036      	b.n	800a9d0 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	3304      	adds	r3, #4
 800a966:	4618      	mov	r0, r3
 800a968:	f002 f84e 	bl	800ca08 <ip4_route>
 800a96c:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d102      	bne.n	800a97a <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800a974:	23fc      	movs	r3, #252	; 0xfc
 800a976:	75fb      	strb	r3, [r7, #23]
 800a978:	e012      	b.n	800a9a0 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800a97a:	6879      	ldr	r1, [r7, #4]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	1d18      	adds	r0, r3, #4
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	7a9c      	ldrb	r4, [r3, #10]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	7a5b      	ldrb	r3, [r3, #9]
 800a988:	68fa      	ldr	r2, [r7, #12]
 800a98a:	9202      	str	r2, [sp, #8]
 800a98c:	2206      	movs	r2, #6
 800a98e:	9201      	str	r2, [sp, #4]
 800a990:	9300      	str	r3, [sp, #0]
 800a992:	4623      	mov	r3, r4
 800a994:	4602      	mov	r2, r0
 800a996:	6938      	ldr	r0, [r7, #16]
 800a998:	f002 f9e0 	bl	800cd5c <ip4_output_if>
 800a99c:	4603      	mov	r3, r0
 800a99e:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800a9a0:	6938      	ldr	r0, [r7, #16]
 800a9a2:	f7fb f895 	bl	8005ad0 <pbuf_free>

  if (err != ERR_OK) {
 800a9a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d007      	beq.n	800a9be <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	7e9b      	ldrb	r3, [r3, #26]
 800a9b2:	f043 0303 	orr.w	r3, r3, #3
 800a9b6:	b2da      	uxtb	r2, r3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	769a      	strb	r2, [r3, #26]
 800a9bc:	e006      	b.n	800a9cc <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	7e9b      	ldrb	r3, [r3, #26]
 800a9c2:	f023 0303 	bic.w	r3, r3, #3
 800a9c6:	b2da      	uxtb	r2, r3
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800a9cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	371c      	adds	r7, #28
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd90      	pop	{r4, r7, pc}

0800a9d8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a9d8:	b5b0      	push	{r4, r5, r7, lr}
 800a9da:	b08a      	sub	sp, #40	; 0x28
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	7d1b      	ldrb	r3, [r3, #20]
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d106      	bne.n	800a9f6 <tcp_output+0x1e>
 800a9e8:	4ba8      	ldr	r3, [pc, #672]	; (800ac8c <tcp_output+0x2b4>)
 800a9ea:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800a9ee:	49a8      	ldr	r1, [pc, #672]	; (800ac90 <tcp_output+0x2b8>)
 800a9f0:	48a8      	ldr	r0, [pc, #672]	; (800ac94 <tcp_output+0x2bc>)
 800a9f2:	f003 f9bb 	bl	800dd6c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a9f6:	4ba8      	ldr	r3, [pc, #672]	; (800ac98 <tcp_output+0x2c0>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d101      	bne.n	800aa04 <tcp_output+0x2c>
    return ERR_OK;
 800aa00:	2300      	movs	r3, #0
 800aa02:	e1cb      	b.n	800ad9c <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aa10:	4293      	cmp	r3, r2
 800aa12:	bf28      	it	cs
 800aa14:	4613      	movcs	r3, r2
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa1e:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	7e9b      	ldrb	r3, [r3, #26]
 800aa24:	f003 0302 	and.w	r3, r3, #2
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d017      	beq.n	800aa5c <tcp_output+0x84>
 800aa2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d00f      	beq.n	800aa52 <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800aa32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f7f9 ff29 	bl	8004890 <lwip_htonl>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa44:	1ad3      	subs	r3, r2, r3
 800aa46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa48:	8912      	ldrh	r2, [r2, #8]
 800aa4a:	4413      	add	r3, r2
     (seg == NULL ||
 800aa4c:	69ba      	ldr	r2, [r7, #24]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d204      	bcs.n	800aa5c <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f7ff ff64 	bl	800a920 <tcp_send_empty_ack>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	e19f      	b.n	800ad9c <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa60:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800aa62:	6a3b      	ldr	r3, [r7, #32]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d007      	beq.n	800aa78 <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 800aa68:	e002      	b.n	800aa70 <tcp_output+0x98>
 800aa6a:	6a3b      	ldr	r3, [r7, #32]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	623b      	str	r3, [r7, #32]
 800aa70:	6a3b      	ldr	r3, [r7, #32]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d1f8      	bne.n	800aa6a <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	3304      	adds	r3, #4
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f001 ffc3 	bl	800ca08 <ip4_route>
 800aa82:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d102      	bne.n	800aa90 <tcp_output+0xb8>
    return ERR_RTE;
 800aa8a:	f06f 0303 	mvn.w	r3, #3
 800aa8e:	e185      	b.n	800ad9c <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d003      	beq.n	800aa9e <tcp_output+0xc6>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d111      	bne.n	800aac2 <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d002      	beq.n	800aaaa <tcp_output+0xd2>
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	3304      	adds	r3, #4
 800aaa8:	e000      	b.n	800aaac <tcp_output+0xd4>
 800aaaa:	2300      	movs	r3, #0
 800aaac:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d102      	bne.n	800aaba <tcp_output+0xe2>
      return ERR_RTE;
 800aab4:	f06f 0303 	mvn.w	r3, #3
 800aab8:	e170      	b.n	800ad9c <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	681a      	ldr	r2, [r3, #0]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800aac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	f000 813f 	beq.w	800ad48 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800aaca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aacc:	68db      	ldr	r3, [r3, #12]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	4618      	mov	r0, r3
 800aad2:	f7f9 fedd 	bl	8004890 <lwip_htonl>
 800aad6:	4602      	mov	r2, r0
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aadc:	1ad3      	subs	r3, r2, r3
 800aade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aae0:	8912      	ldrh	r2, [r2, #8]
 800aae2:	4413      	add	r3, r2
  if (seg != NULL &&
 800aae4:	69ba      	ldr	r2, [r7, #24]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	f080 812e 	bcs.w	800ad48 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800aaec:	69bb      	ldr	r3, [r7, #24]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	f000 812a 	beq.w	800ad48 <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aafa:	461a      	mov	r2, r3
 800aafc:	69bb      	ldr	r3, [r7, #24]
 800aafe:	4293      	cmp	r3, r2
 800ab00:	f040 8122 	bne.w	800ad48 <tcp_output+0x370>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	f040 811d 	bne.w	800ad48 <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	f040 812c 	bne.w	800ad72 <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2201      	movs	r2, #1
 800ab26:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800ab2a:	e122      	b.n	800ad72 <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ab2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2e:	68db      	ldr	r3, [r3, #12]
 800ab30:	899b      	ldrh	r3, [r3, #12]
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7f9 fe9e 	bl	8004876 <lwip_htons>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	f003 0304 	and.w	r3, r3, #4
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d006      	beq.n	800ab52 <tcp_output+0x17a>
 800ab44:	4b51      	ldr	r3, [pc, #324]	; (800ac8c <tcp_output+0x2b4>)
 800ab46:	f240 4245 	movw	r2, #1093	; 0x445
 800ab4a:	4954      	ldr	r1, [pc, #336]	; (800ac9c <tcp_output+0x2c4>)
 800ab4c:	4851      	ldr	r0, [pc, #324]	; (800ac94 <tcp_output+0x2bc>)
 800ab4e:	f003 f90d 	bl	800dd6c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d01f      	beq.n	800ab9a <tcp_output+0x1c2>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	7e9b      	ldrb	r3, [r3, #26]
 800ab5e:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d119      	bne.n	800ab9a <tcp_output+0x1c2>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d00b      	beq.n	800ab86 <tcp_output+0x1ae>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d110      	bne.n	800ab9a <tcp_output+0x1c2>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab7c:	891a      	ldrh	r2, [r3, #8]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d209      	bcs.n	800ab9a <tcp_output+0x1c2>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d004      	beq.n	800ab9a <tcp_output+0x1c2>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab96:	2b08      	cmp	r3, #8
 800ab98:	d901      	bls.n	800ab9e <tcp_output+0x1c6>
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	e000      	b.n	800aba0 <tcp_output+0x1c8>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d106      	bne.n	800abb2 <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	7e9b      	ldrb	r3, [r3, #26]
 800aba8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800abac:	2b00      	cmp	r3, #0
 800abae:	f000 80e2 	beq.w	800ad76 <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	7d1b      	ldrb	r3, [r3, #20]
 800abb6:	2b02      	cmp	r3, #2
 800abb8:	d00d      	beq.n	800abd6 <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800abba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	899b      	ldrh	r3, [r3, #12]
 800abc0:	b29c      	uxth	r4, r3
 800abc2:	2010      	movs	r0, #16
 800abc4:	f7f9 fe57 	bl	8004876 <lwip_htons>
 800abc8:	4603      	mov	r3, r0
 800abca:	461a      	mov	r2, r3
 800abcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	4322      	orrs	r2, r4
 800abd2:	b292      	uxth	r2, r2
 800abd4:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800abd6:	697a      	ldr	r2, [r7, #20]
 800abd8:	6879      	ldr	r1, [r7, #4]
 800abda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800abdc:	f000 f8e2 	bl	800ada4 <tcp_output_segment>
 800abe0:	4603      	mov	r3, r0
 800abe2:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800abe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d009      	beq.n	800ac00 <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	7e9b      	ldrb	r3, [r3, #26]
 800abf0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800abf4:	b2da      	uxtb	r2, r3
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	769a      	strb	r2, [r3, #26]
      return err;
 800abfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abfe:	e0cd      	b.n	800ad9c <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 800ac00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	7d1b      	ldrb	r3, [r3, #20]
 800ac0c:	2b02      	cmp	r3, #2
 800ac0e:	d006      	beq.n	800ac1e <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	7e9b      	ldrb	r3, [r3, #26]
 800ac14:	f023 0303 	bic.w	r3, r3, #3
 800ac18:	b2da      	uxtb	r2, r3
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ac1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac20:	68db      	ldr	r3, [r3, #12]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	4618      	mov	r0, r3
 800ac26:	f7f9 fe33 	bl	8004890 <lwip_htonl>
 800ac2a:	4604      	mov	r4, r0
 800ac2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2e:	891b      	ldrh	r3, [r3, #8]
 800ac30:	461d      	mov	r5, r3
 800ac32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac34:	68db      	ldr	r3, [r3, #12]
 800ac36:	899b      	ldrh	r3, [r3, #12]
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7f9 fe1b 	bl	8004876 <lwip_htons>
 800ac40:	4603      	mov	r3, r0
 800ac42:	f003 0303 	and.w	r3, r3, #3
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d001      	beq.n	800ac4e <tcp_output+0x276>
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e000      	b.n	800ac50 <tcp_output+0x278>
 800ac4e:	2300      	movs	r3, #0
 800ac50:	442b      	add	r3, r5
 800ac52:	4423      	add	r3, r4
 800ac54:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	1ad3      	subs	r3, r2, r3
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	da02      	bge.n	800ac68 <tcp_output+0x290>
      pcb->snd_nxt = snd_nxt;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	68ba      	ldr	r2, [r7, #8]
 800ac66:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ac68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6a:	891b      	ldrh	r3, [r3, #8]
 800ac6c:	461c      	mov	r4, r3
 800ac6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	899b      	ldrh	r3, [r3, #12]
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	4618      	mov	r0, r3
 800ac78:	f7f9 fdfd 	bl	8004876 <lwip_htons>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	f003 0303 	and.w	r3, r3, #3
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d00c      	beq.n	800aca0 <tcp_output+0x2c8>
 800ac86:	2301      	movs	r3, #1
 800ac88:	e00b      	b.n	800aca2 <tcp_output+0x2ca>
 800ac8a:	bf00      	nop
 800ac8c:	0800fd50 	.word	0x0800fd50
 800ac90:	08010154 	.word	0x08010154
 800ac94:	0800fdb4 	.word	0x0800fdb4
 800ac98:	20006cd0 	.word	0x20006cd0
 800ac9c:	0801017c 	.word	0x0801017c
 800aca0:	2300      	movs	r3, #0
 800aca2:	4423      	add	r3, r4
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d049      	beq.n	800ad3c <tcp_output+0x364>
      seg->next = NULL;
 800aca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acaa:	2200      	movs	r2, #0
 800acac:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d105      	bne.n	800acc2 <tcp_output+0x2ea>
        pcb->unacked = seg;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acba:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800acbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acbe:	623b      	str	r3, [r7, #32]
 800acc0:	e03f      	b.n	800ad42 <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800acc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc4:	68db      	ldr	r3, [r3, #12]
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	4618      	mov	r0, r3
 800acca:	f7f9 fde1 	bl	8004890 <lwip_htonl>
 800acce:	4604      	mov	r4, r0
 800acd0:	6a3b      	ldr	r3, [r7, #32]
 800acd2:	68db      	ldr	r3, [r3, #12]
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7f9 fdda 	bl	8004890 <lwip_htonl>
 800acdc:	4603      	mov	r3, r0
 800acde:	1ae3      	subs	r3, r4, r3
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	da24      	bge.n	800ad2e <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	336c      	adds	r3, #108	; 0x6c
 800ace8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800acea:	e002      	b.n	800acf2 <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800acec:	69fb      	ldr	r3, [r7, #28]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800acf2:	69fb      	ldr	r3, [r7, #28]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d011      	beq.n	800ad1e <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800acfa:	69fb      	ldr	r3, [r7, #28]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7f9 fdc4 	bl	8004890 <lwip_htonl>
 800ad08:	4604      	mov	r4, r0
 800ad0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0c:	68db      	ldr	r3, [r3, #12]
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	4618      	mov	r0, r3
 800ad12:	f7f9 fdbd 	bl	8004890 <lwip_htonl>
 800ad16:	4603      	mov	r3, r0
 800ad18:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	dbe6      	blt.n	800acec <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad24:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800ad26:	69fb      	ldr	r3, [r7, #28]
 800ad28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad2a:	601a      	str	r2, [r3, #0]
 800ad2c:	e009      	b.n	800ad42 <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ad2e:	6a3b      	ldr	r3, [r7, #32]
 800ad30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad32:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800ad34:	6a3b      	ldr	r3, [r7, #32]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	623b      	str	r3, [r7, #32]
 800ad3a:	e002      	b.n	800ad42 <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800ad3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad3e:	f7fc f9b5 	bl	80070ac <tcp_seg_free>
    }
    seg = pcb->unsent;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad46:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800ad48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d015      	beq.n	800ad7a <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ad4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad50:	68db      	ldr	r3, [r3, #12]
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7f9 fd9b 	bl	8004890 <lwip_htonl>
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad60:	1ad3      	subs	r3, r2, r3
 800ad62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad64:	8912      	ldrh	r2, [r2, #8]
 800ad66:	4413      	add	r3, r2
  while (seg != NULL &&
 800ad68:	69ba      	ldr	r2, [r7, #24]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	f4bf aede 	bcs.w	800ab2c <tcp_output+0x154>
  }
output_done:
 800ad70:	e003      	b.n	800ad7a <tcp_output+0x3a2>
    goto output_done;
 800ad72:	bf00      	nop
 800ad74:	e002      	b.n	800ad7c <tcp_output+0x3a4>
      break;
 800ad76:	bf00      	nop
 800ad78:	e000      	b.n	800ad7c <tcp_output+0x3a4>
output_done:
 800ad7a:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d103      	bne.n	800ad8c <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2200      	movs	r2, #0
 800ad88:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	7e9b      	ldrb	r3, [r3, #26]
 800ad90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad94:	b2da      	uxtb	r2, r3
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800ad9a:	2300      	movs	r3, #0
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3728      	adds	r7, #40	; 0x28
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bdb0      	pop	{r4, r5, r7, pc}

0800ada4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800ada4:	b5b0      	push	{r4, r5, r7, lr}
 800ada6:	b08c      	sub	sp, #48	; 0x30
 800ada8:	af04      	add	r7, sp, #16
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	60b9      	str	r1, [r7, #8]
 800adae:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	89db      	ldrh	r3, [r3, #14]
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	d001      	beq.n	800adbe <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800adba:	2300      	movs	r3, #0
 800adbc:	e08a      	b.n	800aed4 <tcp_output_segment+0x130>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	68dc      	ldr	r4, [r3, #12]
 800adc6:	4610      	mov	r0, r2
 800adc8:	f7f9 fd62 	bl	8004890 <lwip_htonl>
 800adcc:	4603      	mov	r3, r0
 800adce:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	68dc      	ldr	r4, [r3, #12]
 800add8:	4610      	mov	r0, r2
 800adda:	f7f9 fd4c 	bl	8004876 <lwip_htons>
 800adde:	4603      	mov	r3, r0
 800ade0:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade6:	68ba      	ldr	r2, [r7, #8]
 800ade8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800adea:	441a      	add	r2, r3
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	3314      	adds	r3, #20
 800adf6:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	7a9b      	ldrb	r3, [r3, #10]
 800adfc:	f003 0301 	and.w	r3, r3, #1
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d014      	beq.n	800ae2e <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	3304      	adds	r3, #4
 800ae08:	4619      	mov	r1, r3
 800ae0a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800ae0e:	f7fc fc79 	bl	8007704 <tcp_eff_send_mss_impl>
 800ae12:	4603      	mov	r3, r0
 800ae14:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ae16:	8b7b      	ldrh	r3, [r7, #26]
 800ae18:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7f9 fd37 	bl	8004890 <lwip_htonl>
 800ae22:	4602      	mov	r2, r0
 800ae24:	69fb      	ldr	r3, [r7, #28]
 800ae26:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	3304      	adds	r3, #4
 800ae2c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	da02      	bge.n	800ae3e <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d10c      	bne.n	800ae60 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800ae46:	4b25      	ldr	r3, [pc, #148]	; (800aedc <tcp_output_segment+0x138>)
 800ae48:	681a      	ldr	r2, [r3, #0]
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	68db      	ldr	r3, [r3, #12]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7f9 fd1b 	bl	8004890 <lwip_htonl>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	68da      	ldr	r2, [r3, #12]
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	1ad3      	subs	r3, r2, r3
 800ae6c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	8959      	ldrh	r1, [r3, #10]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	8b3a      	ldrh	r2, [r7, #24]
 800ae7a:	1a8a      	subs	r2, r1, r2
 800ae7c:	b292      	uxth	r2, r2
 800ae7e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	8919      	ldrh	r1, [r3, #8]
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	8b3a      	ldrh	r2, [r7, #24]
 800ae8c:	1a8a      	subs	r2, r1, r2
 800ae8e:	b292      	uxth	r2, r2
 800ae90:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	68fa      	ldr	r2, [r7, #12]
 800ae98:	68d2      	ldr	r2, [r2, #12]
 800ae9a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	2200      	movs	r2, #0
 800aea2:	741a      	strb	r2, [r3, #16]
 800aea4:	2200      	movs	r2, #0
 800aea6:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	6858      	ldr	r0, [r3, #4]
 800aeac:	68b9      	ldr	r1, [r7, #8]
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	1d1c      	adds	r4, r3, #4
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	7a9d      	ldrb	r5, [r3, #10]
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	7a5b      	ldrb	r3, [r3, #9]
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	9202      	str	r2, [sp, #8]
 800aebe:	2206      	movs	r2, #6
 800aec0:	9201      	str	r2, [sp, #4]
 800aec2:	9300      	str	r3, [sp, #0]
 800aec4:	462b      	mov	r3, r5
 800aec6:	4622      	mov	r2, r4
 800aec8:	f001 ff48 	bl	800cd5c <ip4_output_if>
 800aecc:	4603      	mov	r3, r0
 800aece:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800aed0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3720      	adds	r7, #32
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bdb0      	pop	{r4, r5, r7, pc}
 800aedc:	20006cc0 	.word	0x20006cc0

0800aee0 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b08c      	sub	sp, #48	; 0x30
 800aee4:	af04      	add	r7, sp, #16
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	60b9      	str	r1, [r7, #8]
 800aeea:	607a      	str	r2, [r7, #4]
 800aeec:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800aeee:	2200      	movs	r2, #0
 800aef0:	2114      	movs	r1, #20
 800aef2:	2001      	movs	r0, #1
 800aef4:	f7fa fa7a 	bl	80053ec <pbuf_alloc>
 800aef8:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800aefa:	69fb      	ldr	r3, [r7, #28]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d05b      	beq.n	800afb8 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800af00:	69fb      	ldr	r3, [r7, #28]
 800af02:	895b      	ldrh	r3, [r3, #10]
 800af04:	2b13      	cmp	r3, #19
 800af06:	d806      	bhi.n	800af16 <tcp_rst+0x36>
 800af08:	4b2d      	ldr	r3, [pc, #180]	; (800afc0 <tcp_rst+0xe0>)
 800af0a:	f240 524c 	movw	r2, #1356	; 0x54c
 800af0e:	492d      	ldr	r1, [pc, #180]	; (800afc4 <tcp_rst+0xe4>)
 800af10:	482d      	ldr	r0, [pc, #180]	; (800afc8 <tcp_rst+0xe8>)
 800af12:	f002 ff2b 	bl	800dd6c <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800af1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800af1e:	4618      	mov	r0, r3
 800af20:	f7f9 fca9 	bl	8004876 <lwip_htons>
 800af24:	4603      	mov	r3, r0
 800af26:	461a      	mov	r2, r3
 800af28:	69bb      	ldr	r3, [r7, #24]
 800af2a:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800af2c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800af2e:	4618      	mov	r0, r3
 800af30:	f7f9 fca1 	bl	8004876 <lwip_htons>
 800af34:	4603      	mov	r3, r0
 800af36:	461a      	mov	r2, r3
 800af38:	69bb      	ldr	r3, [r7, #24]
 800af3a:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800af3c:	68f8      	ldr	r0, [r7, #12]
 800af3e:	f7f9 fca7 	bl	8004890 <lwip_htonl>
 800af42:	4602      	mov	r2, r0
 800af44:	69bb      	ldr	r3, [r7, #24]
 800af46:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800af48:	68b8      	ldr	r0, [r7, #8]
 800af4a:	f7f9 fca1 	bl	8004890 <lwip_htonl>
 800af4e:	4602      	mov	r2, r0
 800af50:	69bb      	ldr	r3, [r7, #24]
 800af52:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800af54:	f245 0014 	movw	r0, #20500	; 0x5014
 800af58:	f7f9 fc8d 	bl	8004876 <lwip_htons>
 800af5c:	4603      	mov	r3, r0
 800af5e:	461a      	mov	r2, r3
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800af64:	69bb      	ldr	r3, [r7, #24]
 800af66:	2200      	movs	r2, #0
 800af68:	f042 0208 	orr.w	r2, r2, #8
 800af6c:	739a      	strb	r2, [r3, #14]
 800af6e:	2200      	movs	r2, #0
 800af70:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800af74:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	2200      	movs	r2, #0
 800af7a:	741a      	strb	r2, [r3, #16]
 800af7c:	2200      	movs	r2, #0
 800af7e:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800af80:	69bb      	ldr	r3, [r7, #24]
 800af82:	2200      	movs	r2, #0
 800af84:	749a      	strb	r2, [r3, #18]
 800af86:	2200      	movs	r2, #0
 800af88:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800af8a:	6838      	ldr	r0, [r7, #0]
 800af8c:	f001 fd3c 	bl	800ca08 <ip4_route>
 800af90:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d00b      	beq.n	800afb0 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	9302      	str	r3, [sp, #8]
 800af9c:	2306      	movs	r3, #6
 800af9e:	9301      	str	r3, [sp, #4]
 800afa0:	2300      	movs	r3, #0
 800afa2:	9300      	str	r3, [sp, #0]
 800afa4:	23ff      	movs	r3, #255	; 0xff
 800afa6:	683a      	ldr	r2, [r7, #0]
 800afa8:	6879      	ldr	r1, [r7, #4]
 800afaa:	69f8      	ldr	r0, [r7, #28]
 800afac:	f001 fed6 	bl	800cd5c <ip4_output_if>
  }
  pbuf_free(p);
 800afb0:	69f8      	ldr	r0, [r7, #28]
 800afb2:	f7fa fd8d 	bl	8005ad0 <pbuf_free>
 800afb6:	e000      	b.n	800afba <tcp_rst+0xda>
    return;
 800afb8:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800afba:	3720      	adds	r7, #32
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}
 800afc0:	0800fd50 	.word	0x0800fd50
 800afc4:	0800fd84 	.word	0x0800fd84
 800afc8:	0800fdb4 	.word	0x0800fdb4

0800afcc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d029      	beq.n	800b030 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afe0:	60fb      	str	r3, [r7, #12]
 800afe2:	e002      	b.n	800afea <tcp_rexmit_rto+0x1e>
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	60fb      	str	r3, [r7, #12]
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d1f8      	bne.n	800afe4 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2200      	movs	r2, #0
 800b006:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b00e:	2bff      	cmp	r3, #255	; 0xff
 800b010:	d007      	beq.n	800b022 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b018:	3301      	adds	r3, #1
 800b01a:	b2da      	uxtb	r2, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2200      	movs	r2, #0
 800b026:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f7ff fcd5 	bl	800a9d8 <tcp_output>
 800b02e:	e000      	b.n	800b032 <tcp_rexmit_rto+0x66>
    return;
 800b030:	bf00      	nop
}
 800b032:	3710      	adds	r7, #16
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b038:	b590      	push	{r4, r7, lr}
 800b03a:	b085      	sub	sp, #20
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b044:	2b00      	cmp	r3, #0
 800b046:	d043      	beq.n	800b0d0 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b04c:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	3368      	adds	r3, #104	; 0x68
 800b05a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b05c:	e002      	b.n	800b064 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d011      	beq.n	800b090 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	68db      	ldr	r3, [r3, #12]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	4618      	mov	r0, r3
 800b076:	f7f9 fc0b 	bl	8004890 <lwip_htonl>
 800b07a:	4604      	mov	r4, r0
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	68db      	ldr	r3, [r3, #12]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	4618      	mov	r0, r3
 800b084:	f7f9 fc04 	bl	8004890 <lwip_htonl>
 800b088:	4603      	mov	r3, r0
 800b08a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	dbe6      	blt.n	800b05e <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	68ba      	ldr	r2, [r7, #8]
 800b09c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d103      	bne.n	800b0ae <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b0b4:	2bff      	cmp	r3, #255	; 0xff
 800b0b6:	d007      	beq.n	800b0c8 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b0be:	3301      	adds	r3, #1
 800b0c0:	b2da      	uxtb	r2, r3
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	635a      	str	r2, [r3, #52]	; 0x34
 800b0ce:	e000      	b.n	800b0d2 <tcp_rexmit+0x9a>
    return;
 800b0d0:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800b0d2:	3714      	adds	r7, #20
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd90      	pop	{r4, r7, pc}

0800b0d8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d041      	beq.n	800b16c <tcp_rexmit_fast+0x94>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	7e9b      	ldrb	r3, [r3, #26]
 800b0ec:	f003 0304 	and.w	r3, r3, #4
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d13b      	bne.n	800b16c <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f7ff ff9f 	bl	800b038 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b106:	4293      	cmp	r3, r2
 800b108:	bf28      	it	cs
 800b10a:	4613      	movcs	r3, r2
 800b10c:	b29b      	uxth	r3, r3
 800b10e:	0fda      	lsrs	r2, r3, #31
 800b110:	4413      	add	r3, r2
 800b112:	105b      	asrs	r3, r3, #1
 800b114:	b29a      	uxth	r2, r3
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b122:	461a      	mov	r2, r3
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b128:	005b      	lsls	r3, r3, #1
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d206      	bcs.n	800b13c <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b132:	005b      	lsls	r3, r3, #1
 800b134:	b29a      	uxth	r2, r3
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b146:	4619      	mov	r1, r3
 800b148:	0049      	lsls	r1, r1, #1
 800b14a:	440b      	add	r3, r1
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	4413      	add	r3, r2
 800b150:	b29a      	uxth	r2, r3
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	7e9b      	ldrb	r3, [r3, #26]
 800b15c:	f043 0304 	orr.w	r3, r3, #4
 800b160:	b2da      	uxtb	r2, r3
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2200      	movs	r2, #0
 800b16a:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800b16c:	bf00      	nop
 800b16e:	3708      	adds	r7, #8
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b08a      	sub	sp, #40	; 0x28
 800b178:	af04      	add	r7, sp, #16
 800b17a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b180:	3b01      	subs	r3, #1
 800b182:	4618      	mov	r0, r3
 800b184:	f7f9 fb84 	bl	8004890 <lwip_htonl>
 800b188:	4603      	mov	r3, r0
 800b18a:	2200      	movs	r2, #0
 800b18c:	2100      	movs	r1, #0
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f7fe fd56 	bl	8009c40 <tcp_output_alloc_header>
 800b194:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d102      	bne.n	800b1a2 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b19c:	f04f 33ff 	mov.w	r3, #4294967295
 800b1a0:	e021      	b.n	800b1e6 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	3304      	adds	r3, #4
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f001 fc2e 	bl	800ca08 <ip4_route>
 800b1ac:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d102      	bne.n	800b1ba <tcp_keepalive+0x46>
    err = ERR_RTE;
 800b1b4:	23fc      	movs	r3, #252	; 0xfc
 800b1b6:	75fb      	strb	r3, [r7, #23]
 800b1b8:	e010      	b.n	800b1dc <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800b1ba:	6879      	ldr	r1, [r7, #4]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	1d1a      	adds	r2, r3, #4
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	7a98      	ldrb	r0, [r3, #10]
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	9302      	str	r3, [sp, #8]
 800b1c8:	2306      	movs	r3, #6
 800b1ca:	9301      	str	r3, [sp, #4]
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	9300      	str	r3, [sp, #0]
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	6938      	ldr	r0, [r7, #16]
 800b1d4:	f001 fdc2 	bl	800cd5c <ip4_output_if>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800b1dc:	6938      	ldr	r0, [r7, #16]
 800b1de:	f7fa fc77 	bl	8005ad0 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b1e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3718      	adds	r7, #24
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}

0800b1ee <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b1ee:	b590      	push	{r4, r7, lr}
 800b1f0:	b08f      	sub	sp, #60	; 0x3c
 800b1f2:	af04      	add	r7, sp, #16
 800b1f4:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1fa:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800b1fc:	6a3b      	ldr	r3, [r7, #32]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d102      	bne.n	800b208 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b206:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800b208:	6a3b      	ldr	r3, [r7, #32]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d101      	bne.n	800b212 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800b20e:	2300      	movs	r3, #0
 800b210:	e085      	b.n	800b31e <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b212:	6a3b      	ldr	r3, [r7, #32]
 800b214:	68db      	ldr	r3, [r3, #12]
 800b216:	899b      	ldrh	r3, [r3, #12]
 800b218:	b29b      	uxth	r3, r3
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7f9 fb2b 	bl	8004876 <lwip_htons>
 800b220:	4603      	mov	r3, r0
 800b222:	f003 0301 	and.w	r3, r3, #1
 800b226:	2b00      	cmp	r3, #0
 800b228:	d005      	beq.n	800b236 <tcp_zero_window_probe+0x48>
 800b22a:	6a3b      	ldr	r3, [r7, #32]
 800b22c:	891b      	ldrh	r3, [r3, #8]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d101      	bne.n	800b236 <tcp_zero_window_probe+0x48>
 800b232:	2301      	movs	r3, #1
 800b234:	e000      	b.n	800b238 <tcp_zero_window_probe+0x4a>
 800b236:	2300      	movs	r3, #0
 800b238:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b23a:	7ffb      	ldrb	r3, [r7, #31]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	bf0c      	ite	eq
 800b240:	2301      	moveq	r3, #1
 800b242:	2300      	movne	r3, #0
 800b244:	b2db      	uxtb	r3, r3
 800b246:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800b248:	6a3b      	ldr	r3, [r7, #32]
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	8bba      	ldrh	r2, [r7, #28]
 800b250:	2100      	movs	r1, #0
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f7fe fcf4 	bl	8009c40 <tcp_output_alloc_header>
 800b258:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800b25a:	69bb      	ldr	r3, [r7, #24]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d102      	bne.n	800b266 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800b260:	f04f 33ff 	mov.w	r3, #4294967295
 800b264:	e05b      	b.n	800b31e <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b266:	69bb      	ldr	r3, [r7, #24]
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800b26c:	7ffb      	ldrb	r3, [r7, #31]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00e      	beq.n	800b290 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	899b      	ldrh	r3, [r3, #12]
 800b276:	b29b      	uxth	r3, r3
 800b278:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b27c:	b29c      	uxth	r4, r3
 800b27e:	2011      	movs	r0, #17
 800b280:	f7f9 faf9 	bl	8004876 <lwip_htons>
 800b284:	4603      	mov	r3, r0
 800b286:	4323      	orrs	r3, r4
 800b288:	b29a      	uxth	r2, r3
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	819a      	strh	r2, [r3, #12]
 800b28e:	e010      	b.n	800b2b2 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b290:	69bb      	ldr	r3, [r7, #24]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	3314      	adds	r3, #20
 800b296:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b298:	6a3b      	ldr	r3, [r7, #32]
 800b29a:	6858      	ldr	r0, [r3, #4]
 800b29c:	6a3b      	ldr	r3, [r7, #32]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	891a      	ldrh	r2, [r3, #8]
 800b2a2:	6a3b      	ldr	r3, [r7, #32]
 800b2a4:	891b      	ldrh	r3, [r3, #8]
 800b2a6:	1ad3      	subs	r3, r2, r3
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	6939      	ldr	r1, [r7, #16]
 800b2ae:	f7fa fe0d 	bl	8005ecc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b2b2:	6a3b      	ldr	r3, [r7, #32]
 800b2b4:	68db      	ldr	r3, [r3, #12]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f7f9 fae9 	bl	8004890 <lwip_htonl>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	1ad3      	subs	r3, r2, r3
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	da02      	bge.n	800b2d6 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	3304      	adds	r3, #4
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f001 fb94 	bl	800ca08 <ip4_route>
 800b2e0:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d103      	bne.n	800b2f0 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800b2e8:	23fc      	movs	r3, #252	; 0xfc
 800b2ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b2ee:	e011      	b.n	800b314 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b2f0:	6879      	ldr	r1, [r7, #4]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	1d1a      	adds	r2, r3, #4
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	7a98      	ldrb	r0, [r3, #10]
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	9302      	str	r3, [sp, #8]
 800b2fe:	2306      	movs	r3, #6
 800b300:	9301      	str	r3, [sp, #4]
 800b302:	2300      	movs	r3, #0
 800b304:	9300      	str	r3, [sp, #0]
 800b306:	4603      	mov	r3, r0
 800b308:	69b8      	ldr	r0, [r7, #24]
 800b30a:	f001 fd27 	bl	800cd5c <ip4_output_if>
 800b30e:	4603      	mov	r3, r0
 800b310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800b314:	69b8      	ldr	r0, [r7, #24]
 800b316:	f7fa fbdb 	bl	8005ad0 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b31a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b31e:	4618      	mov	r0, r3
 800b320:	372c      	adds	r7, #44	; 0x2c
 800b322:	46bd      	mov	sp, r7
 800b324:	bd90      	pop	{r4, r7, pc}
	...

0800b328 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b330:	f7fa fe4c 	bl	8005fcc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b334:	4b0a      	ldr	r3, [pc, #40]	; (800b360 <tcpip_tcp_timer+0x38>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d103      	bne.n	800b344 <tcpip_tcp_timer+0x1c>
 800b33c:	4b09      	ldr	r3, [pc, #36]	; (800b364 <tcpip_tcp_timer+0x3c>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d005      	beq.n	800b350 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b344:	2200      	movs	r2, #0
 800b346:	4908      	ldr	r1, [pc, #32]	; (800b368 <tcpip_tcp_timer+0x40>)
 800b348:	20fa      	movs	r0, #250	; 0xfa
 800b34a:	f000 f86f 	bl	800b42c <sys_timeout>
 800b34e:	e003      	b.n	800b358 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b350:	4b06      	ldr	r3, [pc, #24]	; (800b36c <tcpip_tcp_timer+0x44>)
 800b352:	2200      	movs	r2, #0
 800b354:	601a      	str	r2, [r3, #0]
  }
}
 800b356:	bf00      	nop
 800b358:	bf00      	nop
 800b35a:	3708      	adds	r7, #8
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}
 800b360:	20006cbc 	.word	0x20006cbc
 800b364:	20006ccc 	.word	0x20006ccc
 800b368:	0800b329 	.word	0x0800b329
 800b36c:	20000108 	.word	0x20000108

0800b370 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b374:	4b0a      	ldr	r3, [pc, #40]	; (800b3a0 <tcp_timer_needed+0x30>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d10f      	bne.n	800b39c <tcp_timer_needed+0x2c>
 800b37c:	4b09      	ldr	r3, [pc, #36]	; (800b3a4 <tcp_timer_needed+0x34>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d103      	bne.n	800b38c <tcp_timer_needed+0x1c>
 800b384:	4b08      	ldr	r3, [pc, #32]	; (800b3a8 <tcp_timer_needed+0x38>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d007      	beq.n	800b39c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b38c:	4b04      	ldr	r3, [pc, #16]	; (800b3a0 <tcp_timer_needed+0x30>)
 800b38e:	2201      	movs	r2, #1
 800b390:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b392:	2200      	movs	r2, #0
 800b394:	4905      	ldr	r1, [pc, #20]	; (800b3ac <tcp_timer_needed+0x3c>)
 800b396:	20fa      	movs	r0, #250	; 0xfa
 800b398:	f000 f848 	bl	800b42c <sys_timeout>
  }
}
 800b39c:	bf00      	nop
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	20000108 	.word	0x20000108
 800b3a4:	20006cbc 	.word	0x20006cbc
 800b3a8:	20006ccc 	.word	0x20006ccc
 800b3ac:	0800b329 	.word	0x0800b329

0800b3b0 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	4903      	ldr	r1, [pc, #12]	; (800b3d8 <cyclic_timer+0x28>)
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f000 f82e 	bl	800b42c <sys_timeout>
}
 800b3d0:	bf00      	nop
 800b3d2:	3710      	adds	r7, #16
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	0800b3b1 	.word	0x0800b3b1

0800b3dc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b082      	sub	sp, #8
 800b3e0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	607b      	str	r3, [r7, #4]
 800b3e6:	e00e      	b.n	800b406 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800b3e8:	4a0d      	ldr	r2, [pc, #52]	; (800b420 <sys_timeouts_init+0x44>)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	00db      	lsls	r3, r3, #3
 800b3f4:	4a0a      	ldr	r2, [pc, #40]	; (800b420 <sys_timeouts_init+0x44>)
 800b3f6:	4413      	add	r3, r2
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	490a      	ldr	r1, [pc, #40]	; (800b424 <sys_timeouts_init+0x48>)
 800b3fc:	f000 f816 	bl	800b42c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	3301      	adds	r3, #1
 800b404:	607b      	str	r3, [r7, #4]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2b02      	cmp	r3, #2
 800b40a:	d9ed      	bls.n	800b3e8 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800b40c:	f7f9 f9a6 	bl	800475c <sys_now>
 800b410:	4603      	mov	r3, r0
 800b412:	4a05      	ldr	r2, [pc, #20]	; (800b428 <sys_timeouts_init+0x4c>)
 800b414:	6013      	str	r3, [r2, #0]
}
 800b416:	bf00      	nop
 800b418:	3708      	adds	r7, #8
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	08010a18 	.word	0x08010a18
 800b424:	0800b3b1 	.word	0x0800b3b1
 800b428:	20000104 	.word	0x20000104

0800b42c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b088      	sub	sp, #32
 800b430:	af00      	add	r7, sp, #0
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	60b9      	str	r1, [r7, #8]
 800b436:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b438:	2006      	movs	r0, #6
 800b43a:	f7f9 fdc5 	bl	8004fc8 <memp_malloc>
 800b43e:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d10a      	bne.n	800b45c <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	f040 8084 	bne.w	800b556 <sys_timeout+0x12a>
 800b44e:	4b44      	ldr	r3, [pc, #272]	; (800b560 <sys_timeout+0x134>)
 800b450:	22d4      	movs	r2, #212	; 0xd4
 800b452:	4944      	ldr	r1, [pc, #272]	; (800b564 <sys_timeout+0x138>)
 800b454:	4844      	ldr	r0, [pc, #272]	; (800b568 <sys_timeout+0x13c>)
 800b456:	f002 fc89 	bl	800dd6c <iprintf>
    return;
 800b45a:	e07c      	b.n	800b556 <sys_timeout+0x12a>
  }

  now = sys_now();
 800b45c:	f7f9 f97e 	bl	800475c <sys_now>
 800b460:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800b462:	4b42      	ldr	r3, [pc, #264]	; (800b56c <sys_timeout+0x140>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d105      	bne.n	800b476 <sys_timeout+0x4a>
    diff = 0;
 800b46a:	2300      	movs	r3, #0
 800b46c:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800b46e:	4a40      	ldr	r2, [pc, #256]	; (800b570 <sys_timeout+0x144>)
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	6013      	str	r3, [r2, #0]
 800b474:	e004      	b.n	800b480 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800b476:	4b3e      	ldr	r3, [pc, #248]	; (800b570 <sys_timeout+0x144>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	693a      	ldr	r2, [r7, #16]
 800b47c:	1ad3      	subs	r3, r2, r3
 800b47e:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	2200      	movs	r2, #0
 800b484:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	68ba      	ldr	r2, [r7, #8]
 800b48a:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800b492:	68fa      	ldr	r2, [r7, #12]
 800b494:	69bb      	ldr	r3, [r7, #24]
 800b496:	441a      	add	r2, r3
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b49c:	4b33      	ldr	r3, [pc, #204]	; (800b56c <sys_timeout+0x140>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d103      	bne.n	800b4ac <sys_timeout+0x80>
    next_timeout = timeout;
 800b4a4:	4a31      	ldr	r2, [pc, #196]	; (800b56c <sys_timeout+0x140>)
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	6013      	str	r3, [r2, #0]
    return;
 800b4aa:	e055      	b.n	800b558 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800b4ac:	4b2f      	ldr	r3, [pc, #188]	; (800b56c <sys_timeout+0x140>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	68fa      	ldr	r2, [r7, #12]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d20f      	bcs.n	800b4d8 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800b4b8:	4b2c      	ldr	r3, [pc, #176]	; (800b56c <sys_timeout+0x140>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	6859      	ldr	r1, [r3, #4]
 800b4be:	4b2b      	ldr	r3, [pc, #172]	; (800b56c <sys_timeout+0x140>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	68fa      	ldr	r2, [r7, #12]
 800b4c4:	1a8a      	subs	r2, r1, r2
 800b4c6:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800b4c8:	4b28      	ldr	r3, [pc, #160]	; (800b56c <sys_timeout+0x140>)
 800b4ca:	681a      	ldr	r2, [r3, #0]
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b4d0:	4a26      	ldr	r2, [pc, #152]	; (800b56c <sys_timeout+0x140>)
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	6013      	str	r3, [r2, #0]
 800b4d6:	e03f      	b.n	800b558 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b4d8:	4b24      	ldr	r3, [pc, #144]	; (800b56c <sys_timeout+0x140>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	61fb      	str	r3, [r7, #28]
 800b4de:	e036      	b.n	800b54e <sys_timeout+0x122>
      timeout->time -= t->time;
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	685a      	ldr	r2, [r3, #4]
 800b4e4:	69fb      	ldr	r3, [r7, #28]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	1ad2      	subs	r2, r2, r3
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800b4ee:	69fb      	ldr	r3, [r7, #28]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d006      	beq.n	800b504 <sys_timeout+0xd8>
 800b4f6:	69fb      	ldr	r3, [r7, #28]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	685a      	ldr	r2, [r3, #4]
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	429a      	cmp	r2, r3
 800b502:	d921      	bls.n	800b548 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800b504:	69fb      	ldr	r3, [r7, #28]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d009      	beq.n	800b520 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800b50c:	69fb      	ldr	r3, [r7, #28]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	6859      	ldr	r1, [r3, #4]
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	685a      	ldr	r2, [r3, #4]
 800b516:	69fb      	ldr	r3, [r7, #28]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	1a8a      	subs	r2, r1, r2
 800b51c:	605a      	str	r2, [r3, #4]
 800b51e:	e00b      	b.n	800b538 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	68fa      	ldr	r2, [r7, #12]
 800b526:	429a      	cmp	r2, r3
 800b528:	d206      	bcs.n	800b538 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800b52a:	4b10      	ldr	r3, [pc, #64]	; (800b56c <sys_timeout+0x140>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	685a      	ldr	r2, [r3, #4]
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	441a      	add	r2, r3
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800b538:	69fb      	ldr	r3, [r7, #28]
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b540:	69fb      	ldr	r3, [r7, #28]
 800b542:	697a      	ldr	r2, [r7, #20]
 800b544:	601a      	str	r2, [r3, #0]
        break;
 800b546:	e007      	b.n	800b558 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b548:	69fb      	ldr	r3, [r7, #28]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	61fb      	str	r3, [r7, #28]
 800b54e:	69fb      	ldr	r3, [r7, #28]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d1c5      	bne.n	800b4e0 <sys_timeout+0xb4>
 800b554:	e000      	b.n	800b558 <sys_timeout+0x12c>
    return;
 800b556:	bf00      	nop
      }
    }
  }
}
 800b558:	3720      	adds	r7, #32
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}
 800b55e:	bf00      	nop
 800b560:	08010194 	.word	0x08010194
 800b564:	080101c8 	.word	0x080101c8
 800b568:	08010208 	.word	0x08010208
 800b56c:	20000100 	.word	0x20000100
 800b570:	20000104 	.word	0x20000104

0800b574 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b086      	sub	sp, #24
 800b578:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800b57a:	4b24      	ldr	r3, [pc, #144]	; (800b60c <sys_check_timeouts+0x98>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d040      	beq.n	800b604 <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800b582:	f7f9 f8eb 	bl	800475c <sys_now>
 800b586:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800b588:	4b21      	ldr	r3, [pc, #132]	; (800b610 <sys_check_timeouts+0x9c>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	68fa      	ldr	r2, [r7, #12]
 800b58e:	1ad3      	subs	r3, r2, r3
 800b590:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800b592:	4b20      	ldr	r3, [pc, #128]	; (800b614 <sys_check_timeouts+0xa0>)
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	b2db      	uxtb	r3, r3
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d001      	beq.n	800b5a0 <sys_check_timeouts+0x2c>
 800b59c:	f7f9 fef6 	bl	800538c <pbuf_free_ooseq>
      had_one = 0;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800b5a4:	4b19      	ldr	r3, [pc, #100]	; (800b60c <sys_check_timeouts+0x98>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d026      	beq.n	800b5fe <sys_check_timeouts+0x8a>
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	697a      	ldr	r2, [r7, #20]
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d321      	bcc.n	800b5fe <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	685a      	ldr	r2, [r3, #4]
 800b5c2:	4b13      	ldr	r3, [pc, #76]	; (800b610 <sys_check_timeouts+0x9c>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4413      	add	r3, r2
 800b5c8:	4a11      	ldr	r2, [pc, #68]	; (800b610 <sys_check_timeouts+0x9c>)
 800b5ca:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	697a      	ldr	r2, [r7, #20]
 800b5d2:	1ad3      	subs	r3, r2, r3
 800b5d4:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4a0c      	ldr	r2, [pc, #48]	; (800b60c <sys_check_timeouts+0x98>)
 800b5dc:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	689b      	ldr	r3, [r3, #8]
 800b5e2:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	68db      	ldr	r3, [r3, #12]
 800b5e8:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b5ea:	68b9      	ldr	r1, [r7, #8]
 800b5ec:	2006      	movs	r0, #6
 800b5ee:	f7f9 fd37 	bl	8005060 <memp_free>
        if (handler != NULL) {
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d002      	beq.n	800b5fe <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6838      	ldr	r0, [r7, #0]
 800b5fc:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800b5fe:	7cfb      	ldrb	r3, [r7, #19]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d1c6      	bne.n	800b592 <sys_check_timeouts+0x1e>
  }
}
 800b604:	bf00      	nop
 800b606:	3718      	adds	r7, #24
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	20000100 	.word	0x20000100
 800b610:	20000104 	.word	0x20000104
 800b614:	20006cb4 	.word	0x20006cb4

0800b618 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b618:	b480      	push	{r7}
 800b61a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800b61c:	bf00      	nop
 800b61e:	46bd      	mov	sp, r7
 800b620:	bc80      	pop	{r7}
 800b622:	4770      	bx	lr

0800b624 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b624:	b480      	push	{r7}
 800b626:	b085      	sub	sp, #20
 800b628:	af00      	add	r7, sp, #0
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	4613      	mov	r3, r2
 800b630:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b632:	79fb      	ldrb	r3, [r7, #7]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d018      	beq.n	800b66a <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d013      	beq.n	800b666 <udp_input_local_match+0x42>
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d00f      	beq.n	800b666 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b646:	4b13      	ldr	r3, [pc, #76]	; (800b694 <udp_input_local_match+0x70>)
 800b648:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b64a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b64e:	d00a      	beq.n	800b666 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	681a      	ldr	r2, [r3, #0]
 800b654:	4b0f      	ldr	r3, [pc, #60]	; (800b694 <udp_input_local_match+0x70>)
 800b656:	695b      	ldr	r3, [r3, #20]
 800b658:	405a      	eors	r2, r3
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	3308      	adds	r3, #8
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b662:	2b00      	cmp	r3, #0
 800b664:	d110      	bne.n	800b688 <udp_input_local_match+0x64>
          return 1;
 800b666:	2301      	movs	r3, #1
 800b668:	e00f      	b.n	800b68a <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d009      	beq.n	800b684 <udp_input_local_match+0x60>
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d005      	beq.n	800b684 <udp_input_local_match+0x60>
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	4b05      	ldr	r3, [pc, #20]	; (800b694 <udp_input_local_match+0x70>)
 800b67e:	695b      	ldr	r3, [r3, #20]
 800b680:	429a      	cmp	r2, r3
 800b682:	d101      	bne.n	800b688 <udp_input_local_match+0x64>
      return 1;
 800b684:	2301      	movs	r3, #1
 800b686:	e000      	b.n	800b68a <udp_input_local_match+0x66>
    }
  }

  return 0;
 800b688:	2300      	movs	r3, #0
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3714      	adds	r7, #20
 800b68e:	46bd      	mov	sp, r7
 800b690:	bc80      	pop	{r7}
 800b692:	4770      	bx	lr
 800b694:	2000378c 	.word	0x2000378c

0800b698 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b698:	b590      	push	{r4, r7, lr}
 800b69a:	b08d      	sub	sp, #52	; 0x34
 800b69c:	af02      	add	r7, sp, #8
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	895b      	ldrh	r3, [r3, #10]
 800b6aa:	2b07      	cmp	r3, #7
 800b6ac:	d803      	bhi.n	800b6b6 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f7fa fa0e 	bl	8005ad0 <pbuf_free>
    goto end;
 800b6b4:	e0c6      	b.n	800b844 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b6bc:	4b63      	ldr	r3, [pc, #396]	; (800b84c <udp_input+0x1b4>)
 800b6be:	695b      	ldr	r3, [r3, #20]
 800b6c0:	4a62      	ldr	r2, [pc, #392]	; (800b84c <udp_input+0x1b4>)
 800b6c2:	6812      	ldr	r2, [r2, #0]
 800b6c4:	4611      	mov	r1, r2
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f001 fc1a 	bl	800cf00 <ip4_addr_isbroadcast_u32>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	881b      	ldrh	r3, [r3, #0]
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7f9 f8cd 	bl	8004876 <lwip_htons>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	885b      	ldrh	r3, [r3, #2]
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f7f9 f8c5 	bl	8004876 <lwip_htons>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b6fc:	4b54      	ldr	r3, [pc, #336]	; (800b850 <udp_input+0x1b8>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	627b      	str	r3, [r7, #36]	; 0x24
 800b702:	e03b      	b.n	800b77c <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b706:	8a5b      	ldrh	r3, [r3, #18]
 800b708:	89fa      	ldrh	r2, [r7, #14]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d131      	bne.n	800b772 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b70e:	7cfb      	ldrb	r3, [r7, #19]
 800b710:	461a      	mov	r2, r3
 800b712:	6839      	ldr	r1, [r7, #0]
 800b714:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b716:	f7ff ff85 	bl	800b624 <udp_input_local_match>
 800b71a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d028      	beq.n	800b772 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800b720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b722:	7c1b      	ldrb	r3, [r3, #16]
 800b724:	f003 0304 	and.w	r3, r3, #4
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d104      	bne.n	800b736 <udp_input+0x9e>
 800b72c:	69fb      	ldr	r3, [r7, #28]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d101      	bne.n	800b736 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800b732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b734:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b738:	8a9b      	ldrh	r3, [r3, #20]
 800b73a:	8a3a      	ldrh	r2, [r7, #16]
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d118      	bne.n	800b772 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b742:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b744:	2b00      	cmp	r3, #0
 800b746:	d005      	beq.n	800b754 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74a:	685a      	ldr	r2, [r3, #4]
 800b74c:	4b3f      	ldr	r3, [pc, #252]	; (800b84c <udp_input+0x1b4>)
 800b74e:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b750:	429a      	cmp	r2, r3
 800b752:	d10e      	bne.n	800b772 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b754:	6a3b      	ldr	r3, [r7, #32]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d014      	beq.n	800b784 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b75c:	68da      	ldr	r2, [r3, #12]
 800b75e:	6a3b      	ldr	r3, [r7, #32]
 800b760:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b762:	4b3b      	ldr	r3, [pc, #236]	; (800b850 <udp_input+0x1b8>)
 800b764:	681a      	ldr	r2, [r3, #0]
 800b766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b768:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b76a:	4a39      	ldr	r2, [pc, #228]	; (800b850 <udp_input+0x1b8>)
 800b76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b76e:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b770:	e008      	b.n	800b784 <udp_input+0xec>
      }
    }

    prev = pcb;
 800b772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b774:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	627b      	str	r3, [r7, #36]	; 0x24
 800b77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d1c0      	bne.n	800b704 <udp_input+0x6c>
 800b782:	e000      	b.n	800b786 <udp_input+0xee>
        break;
 800b784:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d101      	bne.n	800b790 <udp_input+0xf8>
    pcb = uncon_pcb;
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b792:	2b00      	cmp	r3, #0
 800b794:	d002      	beq.n	800b79c <udp_input+0x104>
    for_us = 1;
 800b796:	2301      	movs	r3, #1
 800b798:	76fb      	strb	r3, [r7, #27]
 800b79a:	e00a      	b.n	800b7b2 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	3304      	adds	r3, #4
 800b7a0:	681a      	ldr	r2, [r3, #0]
 800b7a2:	4b2a      	ldr	r3, [pc, #168]	; (800b84c <udp_input+0x1b4>)
 800b7a4:	695b      	ldr	r3, [r3, #20]
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	bf0c      	ite	eq
 800b7aa:	2301      	moveq	r3, #1
 800b7ac:	2300      	movne	r3, #0
 800b7ae:	b2db      	uxtb	r3, r3
 800b7b0:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b7b2:	7efb      	ldrb	r3, [r7, #27]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d042      	beq.n	800b83e <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800b7b8:	f06f 0107 	mvn.w	r1, #7
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f7fa f963 	bl	8005a88 <pbuf_header>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d00a      	beq.n	800b7de <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800b7c8:	4b22      	ldr	r3, [pc, #136]	; (800b854 <udp_input+0x1bc>)
 800b7ca:	f240 1255 	movw	r2, #341	; 0x155
 800b7ce:	4922      	ldr	r1, [pc, #136]	; (800b858 <udp_input+0x1c0>)
 800b7d0:	4822      	ldr	r0, [pc, #136]	; (800b85c <udp_input+0x1c4>)
 800b7d2:	f002 facb 	bl	800dd6c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f7fa f97a 	bl	8005ad0 <pbuf_free>
      goto end;
 800b7dc:	e032      	b.n	800b844 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800b7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d012      	beq.n	800b80a <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e6:	699b      	ldr	r3, [r3, #24]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d00a      	beq.n	800b802 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ee:	699c      	ldr	r4, [r3, #24]
 800b7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f2:	69d8      	ldr	r0, [r3, #28]
 800b7f4:	8a3b      	ldrh	r3, [r7, #16]
 800b7f6:	9300      	str	r3, [sp, #0]
 800b7f8:	4b19      	ldr	r3, [pc, #100]	; (800b860 <udp_input+0x1c8>)
 800b7fa:	687a      	ldr	r2, [r7, #4]
 800b7fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b7fe:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b800:	e021      	b.n	800b846 <udp_input+0x1ae>
        pbuf_free(p);
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f7fa f964 	bl	8005ad0 <pbuf_free>
        goto end;
 800b808:	e01c      	b.n	800b844 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b80a:	7cfb      	ldrb	r3, [r7, #19]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d112      	bne.n	800b836 <udp_input+0x19e>
 800b810:	4b0e      	ldr	r3, [pc, #56]	; (800b84c <udp_input+0x1b4>)
 800b812:	695b      	ldr	r3, [r3, #20]
 800b814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b818:	2be0      	cmp	r3, #224	; 0xe0
 800b81a:	d00c      	beq.n	800b836 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b81c:	4b0b      	ldr	r3, [pc, #44]	; (800b84c <udp_input+0x1b4>)
 800b81e:	899b      	ldrh	r3, [r3, #12]
 800b820:	3308      	adds	r3, #8
 800b822:	b29b      	uxth	r3, r3
 800b824:	b21b      	sxth	r3, r3
 800b826:	4619      	mov	r1, r3
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f7fa f93f 	bl	8005aac <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b82e:	2103      	movs	r1, #3
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f001 f861 	bl	800c8f8 <icmp_dest_unreach>
      pbuf_free(p);
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f7fa f94a 	bl	8005ad0 <pbuf_free>
  return;
 800b83c:	e003      	b.n	800b846 <udp_input+0x1ae>
    pbuf_free(p);
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f7fa f946 	bl	8005ad0 <pbuf_free>
  return;
 800b844:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b846:	372c      	adds	r7, #44	; 0x2c
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd90      	pop	{r4, r7, pc}
 800b84c:	2000378c 	.word	0x2000378c
 800b850:	20006cd4 	.word	0x20006cd4
 800b854:	08010230 	.word	0x08010230
 800b858:	08010260 	.word	0x08010260
 800b85c:	08010274 	.word	0x08010274
 800b860:	2000379c 	.word	0x2000379c

0800b864 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800b864:	b480      	push	{r7}
 800b866:	b085      	sub	sp, #20
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d01e      	beq.n	800b8b2 <udp_netif_ip_addr_changed+0x4e>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d01a      	beq.n	800b8b2 <udp_netif_ip_addr_changed+0x4e>
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d017      	beq.n	800b8b2 <udp_netif_ip_addr_changed+0x4e>
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d013      	beq.n	800b8b2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b88a:	4b0c      	ldr	r3, [pc, #48]	; (800b8bc <udp_netif_ip_addr_changed+0x58>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	60fb      	str	r3, [r7, #12]
 800b890:	e00c      	b.n	800b8ac <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681a      	ldr	r2, [r3, #0]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d103      	bne.n	800b8a6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	681a      	ldr	r2, [r3, #0]
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	68db      	ldr	r3, [r3, #12]
 800b8aa:	60fb      	str	r3, [r7, #12]
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d1ef      	bne.n	800b892 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800b8b2:	bf00      	nop
 800b8b4:	3714      	adds	r7, #20
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bc80      	pop	{r7}
 800b8ba:	4770      	bx	lr
 800b8bc:	20006cd4 	.word	0x20006cd4

0800b8c0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b082      	sub	sp, #8
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800b8c8:	4915      	ldr	r1, [pc, #84]	; (800b920 <etharp_free_entry+0x60>)
 800b8ca:	687a      	ldr	r2, [r7, #4]
 800b8cc:	4613      	mov	r3, r2
 800b8ce:	005b      	lsls	r3, r3, #1
 800b8d0:	4413      	add	r3, r2
 800b8d2:	00db      	lsls	r3, r3, #3
 800b8d4:	440b      	add	r3, r1
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d013      	beq.n	800b904 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800b8dc:	4910      	ldr	r1, [pc, #64]	; (800b920 <etharp_free_entry+0x60>)
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	4613      	mov	r3, r2
 800b8e2:	005b      	lsls	r3, r3, #1
 800b8e4:	4413      	add	r3, r2
 800b8e6:	00db      	lsls	r3, r3, #3
 800b8e8:	440b      	add	r3, r1
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f7fa f8ef 	bl	8005ad0 <pbuf_free>
    arp_table[i].q = NULL;
 800b8f2:	490b      	ldr	r1, [pc, #44]	; (800b920 <etharp_free_entry+0x60>)
 800b8f4:	687a      	ldr	r2, [r7, #4]
 800b8f6:	4613      	mov	r3, r2
 800b8f8:	005b      	lsls	r3, r3, #1
 800b8fa:	4413      	add	r3, r2
 800b8fc:	00db      	lsls	r3, r3, #3
 800b8fe:	440b      	add	r3, r1
 800b900:	2200      	movs	r2, #0
 800b902:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800b904:	4906      	ldr	r1, [pc, #24]	; (800b920 <etharp_free_entry+0x60>)
 800b906:	687a      	ldr	r2, [r7, #4]
 800b908:	4613      	mov	r3, r2
 800b90a:	005b      	lsls	r3, r3, #1
 800b90c:	4413      	add	r3, r2
 800b90e:	00db      	lsls	r3, r3, #3
 800b910:	440b      	add	r3, r1
 800b912:	3314      	adds	r3, #20
 800b914:	2200      	movs	r2, #0
 800b916:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800b918:	bf00      	nop
 800b91a:	3708      	adds	r7, #8
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	2000010c 	.word	0x2000010c

0800b924 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b082      	sub	sp, #8
 800b928:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b92a:	2300      	movs	r3, #0
 800b92c:	71fb      	strb	r3, [r7, #7]
 800b92e:	e096      	b.n	800ba5e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800b930:	79fa      	ldrb	r2, [r7, #7]
 800b932:	494f      	ldr	r1, [pc, #316]	; (800ba70 <etharp_tmr+0x14c>)
 800b934:	4613      	mov	r3, r2
 800b936:	005b      	lsls	r3, r3, #1
 800b938:	4413      	add	r3, r2
 800b93a:	00db      	lsls	r3, r3, #3
 800b93c:	440b      	add	r3, r1
 800b93e:	3314      	adds	r3, #20
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800b944:	79bb      	ldrb	r3, [r7, #6]
 800b946:	2b00      	cmp	r3, #0
 800b948:	f000 8086 	beq.w	800ba58 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800b94c:	79fa      	ldrb	r2, [r7, #7]
 800b94e:	4948      	ldr	r1, [pc, #288]	; (800ba70 <etharp_tmr+0x14c>)
 800b950:	4613      	mov	r3, r2
 800b952:	005b      	lsls	r3, r3, #1
 800b954:	4413      	add	r3, r2
 800b956:	00db      	lsls	r3, r3, #3
 800b958:	440b      	add	r3, r1
 800b95a:	3312      	adds	r3, #18
 800b95c:	881b      	ldrh	r3, [r3, #0]
 800b95e:	3301      	adds	r3, #1
 800b960:	b298      	uxth	r0, r3
 800b962:	4943      	ldr	r1, [pc, #268]	; (800ba70 <etharp_tmr+0x14c>)
 800b964:	4613      	mov	r3, r2
 800b966:	005b      	lsls	r3, r3, #1
 800b968:	4413      	add	r3, r2
 800b96a:	00db      	lsls	r3, r3, #3
 800b96c:	440b      	add	r3, r1
 800b96e:	3312      	adds	r3, #18
 800b970:	4602      	mov	r2, r0
 800b972:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b974:	79fa      	ldrb	r2, [r7, #7]
 800b976:	493e      	ldr	r1, [pc, #248]	; (800ba70 <etharp_tmr+0x14c>)
 800b978:	4613      	mov	r3, r2
 800b97a:	005b      	lsls	r3, r3, #1
 800b97c:	4413      	add	r3, r2
 800b97e:	00db      	lsls	r3, r3, #3
 800b980:	440b      	add	r3, r1
 800b982:	3312      	adds	r3, #18
 800b984:	881b      	ldrh	r3, [r3, #0]
 800b986:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800b98a:	d215      	bcs.n	800b9b8 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b98c:	79fa      	ldrb	r2, [r7, #7]
 800b98e:	4938      	ldr	r1, [pc, #224]	; (800ba70 <etharp_tmr+0x14c>)
 800b990:	4613      	mov	r3, r2
 800b992:	005b      	lsls	r3, r3, #1
 800b994:	4413      	add	r3, r2
 800b996:	00db      	lsls	r3, r3, #3
 800b998:	440b      	add	r3, r1
 800b99a:	3314      	adds	r3, #20
 800b99c:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d10f      	bne.n	800b9c2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800b9a2:	79fa      	ldrb	r2, [r7, #7]
 800b9a4:	4932      	ldr	r1, [pc, #200]	; (800ba70 <etharp_tmr+0x14c>)
 800b9a6:	4613      	mov	r3, r2
 800b9a8:	005b      	lsls	r3, r3, #1
 800b9aa:	4413      	add	r3, r2
 800b9ac:	00db      	lsls	r3, r3, #3
 800b9ae:	440b      	add	r3, r1
 800b9b0:	3312      	adds	r3, #18
 800b9b2:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b9b4:	2b04      	cmp	r3, #4
 800b9b6:	d904      	bls.n	800b9c2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800b9b8:	79fb      	ldrb	r3, [r7, #7]
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7ff ff80 	bl	800b8c0 <etharp_free_entry>
 800b9c0:	e04a      	b.n	800ba58 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800b9c2:	79fa      	ldrb	r2, [r7, #7]
 800b9c4:	492a      	ldr	r1, [pc, #168]	; (800ba70 <etharp_tmr+0x14c>)
 800b9c6:	4613      	mov	r3, r2
 800b9c8:	005b      	lsls	r3, r3, #1
 800b9ca:	4413      	add	r3, r2
 800b9cc:	00db      	lsls	r3, r3, #3
 800b9ce:	440b      	add	r3, r1
 800b9d0:	3314      	adds	r3, #20
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	2b03      	cmp	r3, #3
 800b9d6:	d10a      	bne.n	800b9ee <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800b9d8:	79fa      	ldrb	r2, [r7, #7]
 800b9da:	4925      	ldr	r1, [pc, #148]	; (800ba70 <etharp_tmr+0x14c>)
 800b9dc:	4613      	mov	r3, r2
 800b9de:	005b      	lsls	r3, r3, #1
 800b9e0:	4413      	add	r3, r2
 800b9e2:	00db      	lsls	r3, r3, #3
 800b9e4:	440b      	add	r3, r1
 800b9e6:	3314      	adds	r3, #20
 800b9e8:	2204      	movs	r2, #4
 800b9ea:	701a      	strb	r2, [r3, #0]
 800b9ec:	e034      	b.n	800ba58 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800b9ee:	79fa      	ldrb	r2, [r7, #7]
 800b9f0:	491f      	ldr	r1, [pc, #124]	; (800ba70 <etharp_tmr+0x14c>)
 800b9f2:	4613      	mov	r3, r2
 800b9f4:	005b      	lsls	r3, r3, #1
 800b9f6:	4413      	add	r3, r2
 800b9f8:	00db      	lsls	r3, r3, #3
 800b9fa:	440b      	add	r3, r1
 800b9fc:	3314      	adds	r3, #20
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	2b04      	cmp	r3, #4
 800ba02:	d10a      	bne.n	800ba1a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ba04:	79fa      	ldrb	r2, [r7, #7]
 800ba06:	491a      	ldr	r1, [pc, #104]	; (800ba70 <etharp_tmr+0x14c>)
 800ba08:	4613      	mov	r3, r2
 800ba0a:	005b      	lsls	r3, r3, #1
 800ba0c:	4413      	add	r3, r2
 800ba0e:	00db      	lsls	r3, r3, #3
 800ba10:	440b      	add	r3, r1
 800ba12:	3314      	adds	r3, #20
 800ba14:	2202      	movs	r2, #2
 800ba16:	701a      	strb	r2, [r3, #0]
 800ba18:	e01e      	b.n	800ba58 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ba1a:	79fa      	ldrb	r2, [r7, #7]
 800ba1c:	4914      	ldr	r1, [pc, #80]	; (800ba70 <etharp_tmr+0x14c>)
 800ba1e:	4613      	mov	r3, r2
 800ba20:	005b      	lsls	r3, r3, #1
 800ba22:	4413      	add	r3, r2
 800ba24:	00db      	lsls	r3, r3, #3
 800ba26:	440b      	add	r3, r1
 800ba28:	3314      	adds	r3, #20
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d113      	bne.n	800ba58 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ba30:	79fa      	ldrb	r2, [r7, #7]
 800ba32:	490f      	ldr	r1, [pc, #60]	; (800ba70 <etharp_tmr+0x14c>)
 800ba34:	4613      	mov	r3, r2
 800ba36:	005b      	lsls	r3, r3, #1
 800ba38:	4413      	add	r3, r2
 800ba3a:	00db      	lsls	r3, r3, #3
 800ba3c:	440b      	add	r3, r1
 800ba3e:	3308      	adds	r3, #8
 800ba40:	6818      	ldr	r0, [r3, #0]
 800ba42:	79fa      	ldrb	r2, [r7, #7]
 800ba44:	4613      	mov	r3, r2
 800ba46:	005b      	lsls	r3, r3, #1
 800ba48:	4413      	add	r3, r2
 800ba4a:	00db      	lsls	r3, r3, #3
 800ba4c:	4a08      	ldr	r2, [pc, #32]	; (800ba70 <etharp_tmr+0x14c>)
 800ba4e:	4413      	add	r3, r2
 800ba50:	3304      	adds	r3, #4
 800ba52:	4619      	mov	r1, r3
 800ba54:	f000 fe38 	bl	800c6c8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ba58:	79fb      	ldrb	r3, [r7, #7]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	71fb      	strb	r3, [r7, #7]
 800ba5e:	79fb      	ldrb	r3, [r7, #7]
 800ba60:	2b09      	cmp	r3, #9
 800ba62:	f67f af65 	bls.w	800b930 <etharp_tmr+0xc>
      }
    }
  }
}
 800ba66:	bf00      	nop
 800ba68:	bf00      	nop
 800ba6a:	3708      	adds	r7, #8
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}
 800ba70:	2000010c 	.word	0x2000010c

0800ba74 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b088      	sub	sp, #32
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	60f8      	str	r0, [r7, #12]
 800ba7c:	460b      	mov	r3, r1
 800ba7e:	607a      	str	r2, [r7, #4]
 800ba80:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ba82:	230a      	movs	r3, #10
 800ba84:	77fb      	strb	r3, [r7, #31]
 800ba86:	230a      	movs	r3, #10
 800ba88:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800ba8a:	230a      	movs	r3, #10
 800ba8c:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800ba92:	230a      	movs	r3, #10
 800ba94:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ba96:	2300      	movs	r3, #0
 800ba98:	833b      	strh	r3, [r7, #24]
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	82fb      	strh	r3, [r7, #22]
 800ba9e:	2300      	movs	r3, #0
 800baa0:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800baa2:	2300      	movs	r3, #0
 800baa4:	773b      	strb	r3, [r7, #28]
 800baa6:	e093      	b.n	800bbd0 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800baa8:	7f3a      	ldrb	r2, [r7, #28]
 800baaa:	4990      	ldr	r1, [pc, #576]	; (800bcec <etharp_find_entry+0x278>)
 800baac:	4613      	mov	r3, r2
 800baae:	005b      	lsls	r3, r3, #1
 800bab0:	4413      	add	r3, r2
 800bab2:	00db      	lsls	r3, r3, #3
 800bab4:	440b      	add	r3, r1
 800bab6:	3314      	adds	r3, #20
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800babc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800bac0:	2b0a      	cmp	r3, #10
 800bac2:	d105      	bne.n	800bad0 <etharp_find_entry+0x5c>
 800bac4:	7cfb      	ldrb	r3, [r7, #19]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d102      	bne.n	800bad0 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800baca:	7f3b      	ldrb	r3, [r7, #28]
 800bacc:	777b      	strb	r3, [r7, #29]
 800bace:	e07c      	b.n	800bbca <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800bad0:	7cfb      	ldrb	r3, [r7, #19]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d079      	beq.n	800bbca <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800bad6:	7cfb      	ldrb	r3, [r7, #19]
 800bad8:	2b01      	cmp	r3, #1
 800bada:	d009      	beq.n	800baf0 <etharp_find_entry+0x7c>
 800badc:	7cfb      	ldrb	r3, [r7, #19]
 800bade:	2b01      	cmp	r3, #1
 800bae0:	d806      	bhi.n	800baf0 <etharp_find_entry+0x7c>
 800bae2:	4b83      	ldr	r3, [pc, #524]	; (800bcf0 <etharp_find_entry+0x27c>)
 800bae4:	f240 1225 	movw	r2, #293	; 0x125
 800bae8:	4982      	ldr	r1, [pc, #520]	; (800bcf4 <etharp_find_entry+0x280>)
 800baea:	4883      	ldr	r0, [pc, #524]	; (800bcf8 <etharp_find_entry+0x284>)
 800baec:	f002 f93e 	bl	800dd6c <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d00f      	beq.n	800bb16 <etharp_find_entry+0xa2>
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	6819      	ldr	r1, [r3, #0]
 800bafa:	7f3a      	ldrb	r2, [r7, #28]
 800bafc:	487b      	ldr	r0, [pc, #492]	; (800bcec <etharp_find_entry+0x278>)
 800bafe:	4613      	mov	r3, r2
 800bb00:	005b      	lsls	r3, r3, #1
 800bb02:	4413      	add	r3, r2
 800bb04:	00db      	lsls	r3, r3, #3
 800bb06:	4403      	add	r3, r0
 800bb08:	3304      	adds	r3, #4
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4299      	cmp	r1, r3
 800bb0e:	d102      	bne.n	800bb16 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800bb10:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800bb14:	e0e5      	b.n	800bce2 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800bb16:	7cfb      	ldrb	r3, [r7, #19]
 800bb18:	2b01      	cmp	r3, #1
 800bb1a:	d13b      	bne.n	800bb94 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800bb1c:	7f3a      	ldrb	r2, [r7, #28]
 800bb1e:	4973      	ldr	r1, [pc, #460]	; (800bcec <etharp_find_entry+0x278>)
 800bb20:	4613      	mov	r3, r2
 800bb22:	005b      	lsls	r3, r3, #1
 800bb24:	4413      	add	r3, r2
 800bb26:	00db      	lsls	r3, r3, #3
 800bb28:	440b      	add	r3, r1
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d018      	beq.n	800bb62 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800bb30:	7f3a      	ldrb	r2, [r7, #28]
 800bb32:	496e      	ldr	r1, [pc, #440]	; (800bcec <etharp_find_entry+0x278>)
 800bb34:	4613      	mov	r3, r2
 800bb36:	005b      	lsls	r3, r3, #1
 800bb38:	4413      	add	r3, r2
 800bb3a:	00db      	lsls	r3, r3, #3
 800bb3c:	440b      	add	r3, r1
 800bb3e:	3312      	adds	r3, #18
 800bb40:	881b      	ldrh	r3, [r3, #0]
 800bb42:	8b3a      	ldrh	r2, [r7, #24]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d840      	bhi.n	800bbca <etharp_find_entry+0x156>
            old_queue = i;
 800bb48:	7f3b      	ldrb	r3, [r7, #28]
 800bb4a:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800bb4c:	7f3a      	ldrb	r2, [r7, #28]
 800bb4e:	4967      	ldr	r1, [pc, #412]	; (800bcec <etharp_find_entry+0x278>)
 800bb50:	4613      	mov	r3, r2
 800bb52:	005b      	lsls	r3, r3, #1
 800bb54:	4413      	add	r3, r2
 800bb56:	00db      	lsls	r3, r3, #3
 800bb58:	440b      	add	r3, r1
 800bb5a:	3312      	adds	r3, #18
 800bb5c:	881b      	ldrh	r3, [r3, #0]
 800bb5e:	833b      	strh	r3, [r7, #24]
 800bb60:	e033      	b.n	800bbca <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800bb62:	7f3a      	ldrb	r2, [r7, #28]
 800bb64:	4961      	ldr	r1, [pc, #388]	; (800bcec <etharp_find_entry+0x278>)
 800bb66:	4613      	mov	r3, r2
 800bb68:	005b      	lsls	r3, r3, #1
 800bb6a:	4413      	add	r3, r2
 800bb6c:	00db      	lsls	r3, r3, #3
 800bb6e:	440b      	add	r3, r1
 800bb70:	3312      	adds	r3, #18
 800bb72:	881b      	ldrh	r3, [r3, #0]
 800bb74:	8afa      	ldrh	r2, [r7, #22]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d827      	bhi.n	800bbca <etharp_find_entry+0x156>
            old_pending = i;
 800bb7a:	7f3b      	ldrb	r3, [r7, #28]
 800bb7c:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800bb7e:	7f3a      	ldrb	r2, [r7, #28]
 800bb80:	495a      	ldr	r1, [pc, #360]	; (800bcec <etharp_find_entry+0x278>)
 800bb82:	4613      	mov	r3, r2
 800bb84:	005b      	lsls	r3, r3, #1
 800bb86:	4413      	add	r3, r2
 800bb88:	00db      	lsls	r3, r3, #3
 800bb8a:	440b      	add	r3, r1
 800bb8c:	3312      	adds	r3, #18
 800bb8e:	881b      	ldrh	r3, [r3, #0]
 800bb90:	82fb      	strh	r3, [r7, #22]
 800bb92:	e01a      	b.n	800bbca <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800bb94:	7cfb      	ldrb	r3, [r7, #19]
 800bb96:	2b01      	cmp	r3, #1
 800bb98:	d917      	bls.n	800bbca <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800bb9a:	7f3a      	ldrb	r2, [r7, #28]
 800bb9c:	4953      	ldr	r1, [pc, #332]	; (800bcec <etharp_find_entry+0x278>)
 800bb9e:	4613      	mov	r3, r2
 800bba0:	005b      	lsls	r3, r3, #1
 800bba2:	4413      	add	r3, r2
 800bba4:	00db      	lsls	r3, r3, #3
 800bba6:	440b      	add	r3, r1
 800bba8:	3312      	adds	r3, #18
 800bbaa:	881b      	ldrh	r3, [r3, #0]
 800bbac:	8aba      	ldrh	r2, [r7, #20]
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	d80b      	bhi.n	800bbca <etharp_find_entry+0x156>
            old_stable = i;
 800bbb2:	7f3b      	ldrb	r3, [r7, #28]
 800bbb4:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800bbb6:	7f3a      	ldrb	r2, [r7, #28]
 800bbb8:	494c      	ldr	r1, [pc, #304]	; (800bcec <etharp_find_entry+0x278>)
 800bbba:	4613      	mov	r3, r2
 800bbbc:	005b      	lsls	r3, r3, #1
 800bbbe:	4413      	add	r3, r2
 800bbc0:	00db      	lsls	r3, r3, #3
 800bbc2:	440b      	add	r3, r1
 800bbc4:	3312      	adds	r3, #18
 800bbc6:	881b      	ldrh	r3, [r3, #0]
 800bbc8:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bbca:	7f3b      	ldrb	r3, [r7, #28]
 800bbcc:	3301      	adds	r3, #1
 800bbce:	773b      	strb	r3, [r7, #28]
 800bbd0:	7f3b      	ldrb	r3, [r7, #28]
 800bbd2:	2b09      	cmp	r3, #9
 800bbd4:	f67f af68 	bls.w	800baa8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800bbd8:	7afb      	ldrb	r3, [r7, #11]
 800bbda:	f003 0302 	and.w	r3, r3, #2
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d108      	bne.n	800bbf4 <etharp_find_entry+0x180>
 800bbe2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800bbe6:	2b0a      	cmp	r3, #10
 800bbe8:	d107      	bne.n	800bbfa <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800bbea:	7afb      	ldrb	r3, [r7, #11]
 800bbec:	f003 0301 	and.w	r3, r3, #1
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d102      	bne.n	800bbfa <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800bbf4:	f04f 33ff 	mov.w	r3, #4294967295
 800bbf8:	e073      	b.n	800bce2 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800bbfa:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800bbfe:	2b09      	cmp	r3, #9
 800bc00:	dc02      	bgt.n	800bc08 <etharp_find_entry+0x194>
    i = empty;
 800bc02:	7f7b      	ldrb	r3, [r7, #29]
 800bc04:	773b      	strb	r3, [r7, #28]
 800bc06:	e036      	b.n	800bc76 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800bc08:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800bc0c:	2b09      	cmp	r3, #9
 800bc0e:	dc13      	bgt.n	800bc38 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800bc10:	7fbb      	ldrb	r3, [r7, #30]
 800bc12:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800bc14:	7f3a      	ldrb	r2, [r7, #28]
 800bc16:	4935      	ldr	r1, [pc, #212]	; (800bcec <etharp_find_entry+0x278>)
 800bc18:	4613      	mov	r3, r2
 800bc1a:	005b      	lsls	r3, r3, #1
 800bc1c:	4413      	add	r3, r2
 800bc1e:	00db      	lsls	r3, r3, #3
 800bc20:	440b      	add	r3, r1
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d018      	beq.n	800bc5a <etharp_find_entry+0x1e6>
 800bc28:	4b31      	ldr	r3, [pc, #196]	; (800bcf0 <etharp_find_entry+0x27c>)
 800bc2a:	f240 126f 	movw	r2, #367	; 0x16f
 800bc2e:	4933      	ldr	r1, [pc, #204]	; (800bcfc <etharp_find_entry+0x288>)
 800bc30:	4831      	ldr	r0, [pc, #196]	; (800bcf8 <etharp_find_entry+0x284>)
 800bc32:	f002 f89b 	bl	800dd6c <iprintf>
 800bc36:	e010      	b.n	800bc5a <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800bc38:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bc3c:	2b09      	cmp	r3, #9
 800bc3e:	dc02      	bgt.n	800bc46 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800bc40:	7ffb      	ldrb	r3, [r7, #31]
 800bc42:	773b      	strb	r3, [r7, #28]
 800bc44:	e009      	b.n	800bc5a <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800bc46:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bc4a:	2b09      	cmp	r3, #9
 800bc4c:	dc02      	bgt.n	800bc54 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800bc4e:	7efb      	ldrb	r3, [r7, #27]
 800bc50:	773b      	strb	r3, [r7, #28]
 800bc52:	e002      	b.n	800bc5a <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800bc54:	f04f 33ff 	mov.w	r3, #4294967295
 800bc58:	e043      	b.n	800bce2 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800bc5a:	7f3b      	ldrb	r3, [r7, #28]
 800bc5c:	2b09      	cmp	r3, #9
 800bc5e:	d906      	bls.n	800bc6e <etharp_find_entry+0x1fa>
 800bc60:	4b23      	ldr	r3, [pc, #140]	; (800bcf0 <etharp_find_entry+0x27c>)
 800bc62:	f240 1281 	movw	r2, #385	; 0x181
 800bc66:	4926      	ldr	r1, [pc, #152]	; (800bd00 <etharp_find_entry+0x28c>)
 800bc68:	4823      	ldr	r0, [pc, #140]	; (800bcf8 <etharp_find_entry+0x284>)
 800bc6a:	f002 f87f 	bl	800dd6c <iprintf>
    etharp_free_entry(i);
 800bc6e:	7f3b      	ldrb	r3, [r7, #28]
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7ff fe25 	bl	800b8c0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800bc76:	7f3b      	ldrb	r3, [r7, #28]
 800bc78:	2b09      	cmp	r3, #9
 800bc7a:	d906      	bls.n	800bc8a <etharp_find_entry+0x216>
 800bc7c:	4b1c      	ldr	r3, [pc, #112]	; (800bcf0 <etharp_find_entry+0x27c>)
 800bc7e:	f240 1285 	movw	r2, #389	; 0x185
 800bc82:	491f      	ldr	r1, [pc, #124]	; (800bd00 <etharp_find_entry+0x28c>)
 800bc84:	481c      	ldr	r0, [pc, #112]	; (800bcf8 <etharp_find_entry+0x284>)
 800bc86:	f002 f871 	bl	800dd6c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800bc8a:	7f3a      	ldrb	r2, [r7, #28]
 800bc8c:	4917      	ldr	r1, [pc, #92]	; (800bcec <etharp_find_entry+0x278>)
 800bc8e:	4613      	mov	r3, r2
 800bc90:	005b      	lsls	r3, r3, #1
 800bc92:	4413      	add	r3, r2
 800bc94:	00db      	lsls	r3, r3, #3
 800bc96:	440b      	add	r3, r1
 800bc98:	3314      	adds	r3, #20
 800bc9a:	781b      	ldrb	r3, [r3, #0]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d006      	beq.n	800bcae <etharp_find_entry+0x23a>
 800bca0:	4b13      	ldr	r3, [pc, #76]	; (800bcf0 <etharp_find_entry+0x27c>)
 800bca2:	f44f 72c3 	mov.w	r2, #390	; 0x186
 800bca6:	4917      	ldr	r1, [pc, #92]	; (800bd04 <etharp_find_entry+0x290>)
 800bca8:	4813      	ldr	r0, [pc, #76]	; (800bcf8 <etharp_find_entry+0x284>)
 800bcaa:	f002 f85f 	bl	800dd6c <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d00a      	beq.n	800bcca <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800bcb4:	7f3a      	ldrb	r2, [r7, #28]
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	6819      	ldr	r1, [r3, #0]
 800bcba:	480c      	ldr	r0, [pc, #48]	; (800bcec <etharp_find_entry+0x278>)
 800bcbc:	4613      	mov	r3, r2
 800bcbe:	005b      	lsls	r3, r3, #1
 800bcc0:	4413      	add	r3, r2
 800bcc2:	00db      	lsls	r3, r3, #3
 800bcc4:	4403      	add	r3, r0
 800bcc6:	3304      	adds	r3, #4
 800bcc8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800bcca:	7f3a      	ldrb	r2, [r7, #28]
 800bccc:	4907      	ldr	r1, [pc, #28]	; (800bcec <etharp_find_entry+0x278>)
 800bcce:	4613      	mov	r3, r2
 800bcd0:	005b      	lsls	r3, r3, #1
 800bcd2:	4413      	add	r3, r2
 800bcd4:	00db      	lsls	r3, r3, #3
 800bcd6:	440b      	add	r3, r1
 800bcd8:	3312      	adds	r3, #18
 800bcda:	2200      	movs	r2, #0
 800bcdc:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800bcde:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3720      	adds	r7, #32
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	2000010c 	.word	0x2000010c
 800bcf0:	080102cc 	.word	0x080102cc
 800bcf4:	08010304 	.word	0x08010304
 800bcf8:	08010344 	.word	0x08010344
 800bcfc:	0801036c 	.word	0x0801036c
 800bd00:	08010384 	.word	0x08010384
 800bd04:	08010398 	.word	0x08010398

0800bd08 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b088      	sub	sp, #32
 800bd0c:	af02      	add	r7, sp, #8
 800bd0e:	60f8      	str	r0, [r7, #12]
 800bd10:	60b9      	str	r1, [r7, #8]
 800bd12:	607a      	str	r2, [r7, #4]
 800bd14:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd1c:	2b06      	cmp	r3, #6
 800bd1e:	d006      	beq.n	800bd2e <etharp_update_arp_entry+0x26>
 800bd20:	4b48      	ldr	r3, [pc, #288]	; (800be44 <etharp_update_arp_entry+0x13c>)
 800bd22:	f240 12ab 	movw	r2, #427	; 0x1ab
 800bd26:	4948      	ldr	r1, [pc, #288]	; (800be48 <etharp_update_arp_entry+0x140>)
 800bd28:	4848      	ldr	r0, [pc, #288]	; (800be4c <etharp_update_arp_entry+0x144>)
 800bd2a:	f002 f81f 	bl	800dd6c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d012      	beq.n	800bd5a <etharp_update_arp_entry+0x52>
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d00e      	beq.n	800bd5a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	68f9      	ldr	r1, [r7, #12]
 800bd42:	4618      	mov	r0, r3
 800bd44:	f001 f8dc 	bl	800cf00 <ip4_addr_isbroadcast_u32>
 800bd48:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d105      	bne.n	800bd5a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800bd56:	2be0      	cmp	r3, #224	; 0xe0
 800bd58:	d102      	bne.n	800bd60 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800bd5a:	f06f 030f 	mvn.w	r3, #15
 800bd5e:	e06c      	b.n	800be3a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800bd60:	78fb      	ldrb	r3, [r7, #3]
 800bd62:	68fa      	ldr	r2, [r7, #12]
 800bd64:	4619      	mov	r1, r3
 800bd66:	68b8      	ldr	r0, [r7, #8]
 800bd68:	f7ff fe84 	bl	800ba74 <etharp_find_entry>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800bd70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	da02      	bge.n	800bd7e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800bd78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd7c:	e05d      	b.n	800be3a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800bd7e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bd82:	4933      	ldr	r1, [pc, #204]	; (800be50 <etharp_update_arp_entry+0x148>)
 800bd84:	4613      	mov	r3, r2
 800bd86:	005b      	lsls	r3, r3, #1
 800bd88:	4413      	add	r3, r2
 800bd8a:	00db      	lsls	r3, r3, #3
 800bd8c:	440b      	add	r3, r1
 800bd8e:	3314      	adds	r3, #20
 800bd90:	2202      	movs	r2, #2
 800bd92:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800bd94:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bd98:	492d      	ldr	r1, [pc, #180]	; (800be50 <etharp_update_arp_entry+0x148>)
 800bd9a:	4613      	mov	r3, r2
 800bd9c:	005b      	lsls	r3, r3, #1
 800bd9e:	4413      	add	r3, r2
 800bda0:	00db      	lsls	r3, r3, #3
 800bda2:	440b      	add	r3, r1
 800bda4:	3308      	adds	r3, #8
 800bda6:	68fa      	ldr	r2, [r7, #12]
 800bda8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800bdaa:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bdae:	4613      	mov	r3, r2
 800bdb0:	005b      	lsls	r3, r3, #1
 800bdb2:	4413      	add	r3, r2
 800bdb4:	00db      	lsls	r3, r3, #3
 800bdb6:	3308      	adds	r3, #8
 800bdb8:	4a25      	ldr	r2, [pc, #148]	; (800be50 <etharp_update_arp_entry+0x148>)
 800bdba:	4413      	add	r3, r2
 800bdbc:	3304      	adds	r3, #4
 800bdbe:	2206      	movs	r2, #6
 800bdc0:	6879      	ldr	r1, [r7, #4]
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f001 ffbc 	bl	800dd40 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800bdc8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bdcc:	4920      	ldr	r1, [pc, #128]	; (800be50 <etharp_update_arp_entry+0x148>)
 800bdce:	4613      	mov	r3, r2
 800bdd0:	005b      	lsls	r3, r3, #1
 800bdd2:	4413      	add	r3, r2
 800bdd4:	00db      	lsls	r3, r3, #3
 800bdd6:	440b      	add	r3, r1
 800bdd8:	3312      	adds	r3, #18
 800bdda:	2200      	movs	r2, #0
 800bddc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800bdde:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bde2:	491b      	ldr	r1, [pc, #108]	; (800be50 <etharp_update_arp_entry+0x148>)
 800bde4:	4613      	mov	r3, r2
 800bde6:	005b      	lsls	r3, r3, #1
 800bde8:	4413      	add	r3, r2
 800bdea:	00db      	lsls	r3, r3, #3
 800bdec:	440b      	add	r3, r1
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d021      	beq.n	800be38 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800bdf4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bdf8:	4915      	ldr	r1, [pc, #84]	; (800be50 <etharp_update_arp_entry+0x148>)
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	005b      	lsls	r3, r3, #1
 800bdfe:	4413      	add	r3, r2
 800be00:	00db      	lsls	r3, r3, #3
 800be02:	440b      	add	r3, r1
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800be08:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800be0c:	4910      	ldr	r1, [pc, #64]	; (800be50 <etharp_update_arp_entry+0x148>)
 800be0e:	4613      	mov	r3, r2
 800be10:	005b      	lsls	r3, r3, #1
 800be12:	4413      	add	r3, r2
 800be14:	00db      	lsls	r3, r3, #3
 800be16:	440b      	add	r3, r1
 800be18:	2200      	movs	r2, #0
 800be1a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800be22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800be26:	9300      	str	r3, [sp, #0]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6939      	ldr	r1, [r7, #16]
 800be2c:	68f8      	ldr	r0, [r7, #12]
 800be2e:	f001 ff0d 	bl	800dc4c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800be32:	6938      	ldr	r0, [r7, #16]
 800be34:	f7f9 fe4c 	bl	8005ad0 <pbuf_free>
  }
  return ERR_OK;
 800be38:	2300      	movs	r3, #0
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3718      	adds	r7, #24
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	080102cc 	.word	0x080102cc
 800be48:	080103c4 	.word	0x080103c4
 800be4c:	08010344 	.word	0x08010344
 800be50:	2000010c 	.word	0x2000010c

0800be54 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b084      	sub	sp, #16
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800be5c:	2300      	movs	r3, #0
 800be5e:	73fb      	strb	r3, [r7, #15]
 800be60:	e01f      	b.n	800bea2 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800be62:	7bfa      	ldrb	r2, [r7, #15]
 800be64:	4913      	ldr	r1, [pc, #76]	; (800beb4 <etharp_cleanup_netif+0x60>)
 800be66:	4613      	mov	r3, r2
 800be68:	005b      	lsls	r3, r3, #1
 800be6a:	4413      	add	r3, r2
 800be6c:	00db      	lsls	r3, r3, #3
 800be6e:	440b      	add	r3, r1
 800be70:	3314      	adds	r3, #20
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800be76:	7bbb      	ldrb	r3, [r7, #14]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d00f      	beq.n	800be9c <etharp_cleanup_netif+0x48>
 800be7c:	7bfa      	ldrb	r2, [r7, #15]
 800be7e:	490d      	ldr	r1, [pc, #52]	; (800beb4 <etharp_cleanup_netif+0x60>)
 800be80:	4613      	mov	r3, r2
 800be82:	005b      	lsls	r3, r3, #1
 800be84:	4413      	add	r3, r2
 800be86:	00db      	lsls	r3, r3, #3
 800be88:	440b      	add	r3, r1
 800be8a:	3308      	adds	r3, #8
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	687a      	ldr	r2, [r7, #4]
 800be90:	429a      	cmp	r2, r3
 800be92:	d103      	bne.n	800be9c <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800be94:	7bfb      	ldrb	r3, [r7, #15]
 800be96:	4618      	mov	r0, r3
 800be98:	f7ff fd12 	bl	800b8c0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800be9c:	7bfb      	ldrb	r3, [r7, #15]
 800be9e:	3301      	adds	r3, #1
 800bea0:	73fb      	strb	r3, [r7, #15]
 800bea2:	7bfb      	ldrb	r3, [r7, #15]
 800bea4:	2b09      	cmp	r3, #9
 800bea6:	d9dc      	bls.n	800be62 <etharp_cleanup_netif+0xe>
    }
  }
}
 800bea8:	bf00      	nop
 800beaa:	bf00      	nop
 800beac:	3710      	adds	r7, #16
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}
 800beb2:	bf00      	nop
 800beb4:	2000010c 	.word	0x2000010c

0800beb8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800beb8:	b5b0      	push	{r4, r5, r7, lr}
 800beba:	b08a      	sub	sp, #40	; 0x28
 800bebc:	af04      	add	r7, sp, #16
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d107      	bne.n	800bed8 <etharp_input+0x20>
 800bec8:	4b3d      	ldr	r3, [pc, #244]	; (800bfc0 <etharp_input+0x108>)
 800beca:	f44f 7222 	mov.w	r2, #648	; 0x288
 800bece:	493d      	ldr	r1, [pc, #244]	; (800bfc4 <etharp_input+0x10c>)
 800bed0:	483d      	ldr	r0, [pc, #244]	; (800bfc8 <etharp_input+0x110>)
 800bed2:	f001 ff4b 	bl	800dd6c <iprintf>
 800bed6:	e06f      	b.n	800bfb8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	881b      	ldrh	r3, [r3, #0]
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bee8:	d10c      	bne.n	800bf04 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800beee:	2b06      	cmp	r3, #6
 800bef0:	d108      	bne.n	800bf04 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800bef6:	2b04      	cmp	r3, #4
 800bef8:	d104      	bne.n	800bf04 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	885b      	ldrh	r3, [r3, #2]
 800befe:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800bf00:	2b08      	cmp	r3, #8
 800bf02:	d003      	beq.n	800bf0c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f7f9 fde3 	bl	8005ad0 <pbuf_free>
    return;
 800bf0a:	e055      	b.n	800bfb8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	330e      	adds	r3, #14
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	3318      	adds	r3, #24
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	3304      	adds	r3, #4
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d102      	bne.n	800bf2c <etharp_input+0x74>
    for_us = 0;
 800bf26:	2300      	movs	r3, #0
 800bf28:	75fb      	strb	r3, [r7, #23]
 800bf2a:	e009      	b.n	800bf40 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800bf2c:	68ba      	ldr	r2, [r7, #8]
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	3304      	adds	r3, #4
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	bf0c      	ite	eq
 800bf38:	2301      	moveq	r3, #1
 800bf3a:	2300      	movne	r3, #0
 800bf3c:	b2db      	uxtb	r3, r3
 800bf3e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	f103 0208 	add.w	r2, r3, #8
 800bf46:	7dfb      	ldrb	r3, [r7, #23]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d001      	beq.n	800bf50 <etharp_input+0x98>
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	e000      	b.n	800bf52 <etharp_input+0x9a>
 800bf50:	2302      	movs	r3, #2
 800bf52:	f107 010c 	add.w	r1, r7, #12
 800bf56:	6838      	ldr	r0, [r7, #0]
 800bf58:	f7ff fed6 	bl	800bd08 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	88db      	ldrh	r3, [r3, #6]
 800bf60:	b29b      	uxth	r3, r3
 800bf62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf66:	d003      	beq.n	800bf70 <etharp_input+0xb8>
 800bf68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf6c:	d01e      	beq.n	800bfac <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800bf6e:	e020      	b.n	800bfb2 <etharp_input+0xfa>
    if (for_us) {
 800bf70:	7dfb      	ldrb	r3, [r7, #23]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d01c      	beq.n	800bfb0 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	f103 0529 	add.w	r5, r3, #41	; 0x29
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800bf8c:	693a      	ldr	r2, [r7, #16]
 800bf8e:	3208      	adds	r2, #8
      etharp_raw(netif,
 800bf90:	2102      	movs	r1, #2
 800bf92:	9103      	str	r1, [sp, #12]
 800bf94:	f107 010c 	add.w	r1, r7, #12
 800bf98:	9102      	str	r1, [sp, #8]
 800bf9a:	9201      	str	r2, [sp, #4]
 800bf9c:	9300      	str	r3, [sp, #0]
 800bf9e:	462b      	mov	r3, r5
 800bfa0:	4622      	mov	r2, r4
 800bfa2:	4601      	mov	r1, r0
 800bfa4:	6838      	ldr	r0, [r7, #0]
 800bfa6:	f000 fae1 	bl	800c56c <etharp_raw>
    break;
 800bfaa:	e001      	b.n	800bfb0 <etharp_input+0xf8>
    break;
 800bfac:	bf00      	nop
 800bfae:	e000      	b.n	800bfb2 <etharp_input+0xfa>
    break;
 800bfb0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f7f9 fd8c 	bl	8005ad0 <pbuf_free>
}
 800bfb8:	3718      	adds	r7, #24
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bdb0      	pop	{r4, r5, r7, pc}
 800bfbe:	bf00      	nop
 800bfc0:	080102cc 	.word	0x080102cc
 800bfc4:	0801041c 	.word	0x0801041c
 800bfc8:	08010344 	.word	0x08010344

0800bfcc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b086      	sub	sp, #24
 800bfd0:	af02      	add	r7, sp, #8
 800bfd2:	60f8      	str	r0, [r7, #12]
 800bfd4:	60b9      	str	r1, [r7, #8]
 800bfd6:	4613      	mov	r3, r2
 800bfd8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800bfda:	79fa      	ldrb	r2, [r7, #7]
 800bfdc:	4944      	ldr	r1, [pc, #272]	; (800c0f0 <etharp_output_to_arp_index+0x124>)
 800bfde:	4613      	mov	r3, r2
 800bfe0:	005b      	lsls	r3, r3, #1
 800bfe2:	4413      	add	r3, r2
 800bfe4:	00db      	lsls	r3, r3, #3
 800bfe6:	440b      	add	r3, r1
 800bfe8:	3314      	adds	r3, #20
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	d806      	bhi.n	800bffe <etharp_output_to_arp_index+0x32>
 800bff0:	4b40      	ldr	r3, [pc, #256]	; (800c0f4 <etharp_output_to_arp_index+0x128>)
 800bff2:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800bff6:	4940      	ldr	r1, [pc, #256]	; (800c0f8 <etharp_output_to_arp_index+0x12c>)
 800bff8:	4840      	ldr	r0, [pc, #256]	; (800c0fc <etharp_output_to_arp_index+0x130>)
 800bffa:	f001 feb7 	bl	800dd6c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800bffe:	79fa      	ldrb	r2, [r7, #7]
 800c000:	493b      	ldr	r1, [pc, #236]	; (800c0f0 <etharp_output_to_arp_index+0x124>)
 800c002:	4613      	mov	r3, r2
 800c004:	005b      	lsls	r3, r3, #1
 800c006:	4413      	add	r3, r2
 800c008:	00db      	lsls	r3, r3, #3
 800c00a:	440b      	add	r3, r1
 800c00c:	3314      	adds	r3, #20
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	2b02      	cmp	r3, #2
 800c012:	d153      	bne.n	800c0bc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c014:	79fa      	ldrb	r2, [r7, #7]
 800c016:	4936      	ldr	r1, [pc, #216]	; (800c0f0 <etharp_output_to_arp_index+0x124>)
 800c018:	4613      	mov	r3, r2
 800c01a:	005b      	lsls	r3, r3, #1
 800c01c:	4413      	add	r3, r2
 800c01e:	00db      	lsls	r3, r3, #3
 800c020:	440b      	add	r3, r1
 800c022:	3312      	adds	r3, #18
 800c024:	881b      	ldrh	r3, [r3, #0]
 800c026:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c02a:	d919      	bls.n	800c060 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c02c:	79fa      	ldrb	r2, [r7, #7]
 800c02e:	4613      	mov	r3, r2
 800c030:	005b      	lsls	r3, r3, #1
 800c032:	4413      	add	r3, r2
 800c034:	00db      	lsls	r3, r3, #3
 800c036:	4a2e      	ldr	r2, [pc, #184]	; (800c0f0 <etharp_output_to_arp_index+0x124>)
 800c038:	4413      	add	r3, r2
 800c03a:	3304      	adds	r3, #4
 800c03c:	4619      	mov	r1, r3
 800c03e:	68f8      	ldr	r0, [r7, #12]
 800c040:	f000 fb42 	bl	800c6c8 <etharp_request>
 800c044:	4603      	mov	r3, r0
 800c046:	2b00      	cmp	r3, #0
 800c048:	d138      	bne.n	800c0bc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c04a:	79fa      	ldrb	r2, [r7, #7]
 800c04c:	4928      	ldr	r1, [pc, #160]	; (800c0f0 <etharp_output_to_arp_index+0x124>)
 800c04e:	4613      	mov	r3, r2
 800c050:	005b      	lsls	r3, r3, #1
 800c052:	4413      	add	r3, r2
 800c054:	00db      	lsls	r3, r3, #3
 800c056:	440b      	add	r3, r1
 800c058:	3314      	adds	r3, #20
 800c05a:	2203      	movs	r2, #3
 800c05c:	701a      	strb	r2, [r3, #0]
 800c05e:	e02d      	b.n	800c0bc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c060:	79fa      	ldrb	r2, [r7, #7]
 800c062:	4923      	ldr	r1, [pc, #140]	; (800c0f0 <etharp_output_to_arp_index+0x124>)
 800c064:	4613      	mov	r3, r2
 800c066:	005b      	lsls	r3, r3, #1
 800c068:	4413      	add	r3, r2
 800c06a:	00db      	lsls	r3, r3, #3
 800c06c:	440b      	add	r3, r1
 800c06e:	3312      	adds	r3, #18
 800c070:	881b      	ldrh	r3, [r3, #0]
 800c072:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c076:	d321      	bcc.n	800c0bc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c078:	79fa      	ldrb	r2, [r7, #7]
 800c07a:	4613      	mov	r3, r2
 800c07c:	005b      	lsls	r3, r3, #1
 800c07e:	4413      	add	r3, r2
 800c080:	00db      	lsls	r3, r3, #3
 800c082:	4a1b      	ldr	r2, [pc, #108]	; (800c0f0 <etharp_output_to_arp_index+0x124>)
 800c084:	4413      	add	r3, r2
 800c086:	1d19      	adds	r1, r3, #4
 800c088:	79fa      	ldrb	r2, [r7, #7]
 800c08a:	4613      	mov	r3, r2
 800c08c:	005b      	lsls	r3, r3, #1
 800c08e:	4413      	add	r3, r2
 800c090:	00db      	lsls	r3, r3, #3
 800c092:	3308      	adds	r3, #8
 800c094:	4a16      	ldr	r2, [pc, #88]	; (800c0f0 <etharp_output_to_arp_index+0x124>)
 800c096:	4413      	add	r3, r2
 800c098:	3304      	adds	r3, #4
 800c09a:	461a      	mov	r2, r3
 800c09c:	68f8      	ldr	r0, [r7, #12]
 800c09e:	f000 faf1 	bl	800c684 <etharp_request_dst>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d109      	bne.n	800c0bc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c0a8:	79fa      	ldrb	r2, [r7, #7]
 800c0aa:	4911      	ldr	r1, [pc, #68]	; (800c0f0 <etharp_output_to_arp_index+0x124>)
 800c0ac:	4613      	mov	r3, r2
 800c0ae:	005b      	lsls	r3, r3, #1
 800c0b0:	4413      	add	r3, r2
 800c0b2:	00db      	lsls	r3, r3, #3
 800c0b4:	440b      	add	r3, r1
 800c0b6:	3314      	adds	r3, #20
 800c0b8:	2203      	movs	r2, #3
 800c0ba:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f103 0129 	add.w	r1, r3, #41	; 0x29
 800c0c2:	79fa      	ldrb	r2, [r7, #7]
 800c0c4:	4613      	mov	r3, r2
 800c0c6:	005b      	lsls	r3, r3, #1
 800c0c8:	4413      	add	r3, r2
 800c0ca:	00db      	lsls	r3, r3, #3
 800c0cc:	3308      	adds	r3, #8
 800c0ce:	4a08      	ldr	r2, [pc, #32]	; (800c0f0 <etharp_output_to_arp_index+0x124>)
 800c0d0:	4413      	add	r3, r2
 800c0d2:	3304      	adds	r3, #4
 800c0d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c0d8:	9200      	str	r2, [sp, #0]
 800c0da:	460a      	mov	r2, r1
 800c0dc:	68b9      	ldr	r1, [r7, #8]
 800c0de:	68f8      	ldr	r0, [r7, #12]
 800c0e0:	f001 fdb4 	bl	800dc4c <ethernet_output>
 800c0e4:	4603      	mov	r3, r0
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3710      	adds	r7, #16
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	2000010c 	.word	0x2000010c
 800c0f4:	080102cc 	.word	0x080102cc
 800c0f8:	0801043c 	.word	0x0801043c
 800c0fc:	08010344 	.word	0x08010344

0800c100 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b08a      	sub	sp, #40	; 0x28
 800c104:	af02      	add	r7, sp, #8
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	60b9      	str	r1, [r7, #8]
 800c10a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d106      	bne.n	800c124 <etharp_output+0x24>
 800c116:	4b69      	ldr	r3, [pc, #420]	; (800c2bc <etharp_output+0x1bc>)
 800c118:	f240 321b 	movw	r2, #795	; 0x31b
 800c11c:	4968      	ldr	r1, [pc, #416]	; (800c2c0 <etharp_output+0x1c0>)
 800c11e:	4869      	ldr	r0, [pc, #420]	; (800c2c4 <etharp_output+0x1c4>)
 800c120:	f001 fe24 	bl	800dd6c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d106      	bne.n	800c138 <etharp_output+0x38>
 800c12a:	4b64      	ldr	r3, [pc, #400]	; (800c2bc <etharp_output+0x1bc>)
 800c12c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800c130:	4965      	ldr	r1, [pc, #404]	; (800c2c8 <etharp_output+0x1c8>)
 800c132:	4864      	ldr	r0, [pc, #400]	; (800c2c4 <etharp_output+0x1c4>)
 800c134:	f001 fe1a 	bl	800dd6c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d106      	bne.n	800c14c <etharp_output+0x4c>
 800c13e:	4b5f      	ldr	r3, [pc, #380]	; (800c2bc <etharp_output+0x1bc>)
 800c140:	f240 321d 	movw	r2, #797	; 0x31d
 800c144:	4961      	ldr	r1, [pc, #388]	; (800c2cc <etharp_output+0x1cc>)
 800c146:	485f      	ldr	r0, [pc, #380]	; (800c2c4 <etharp_output+0x1c4>)
 800c148:	f001 fe10 	bl	800dd6c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	68f9      	ldr	r1, [r7, #12]
 800c152:	4618      	mov	r0, r3
 800c154:	f000 fed4 	bl	800cf00 <ip4_addr_isbroadcast_u32>
 800c158:	4603      	mov	r3, r0
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d002      	beq.n	800c164 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c15e:	4b5c      	ldr	r3, [pc, #368]	; (800c2d0 <etharp_output+0x1d0>)
 800c160:	61fb      	str	r3, [r7, #28]
 800c162:	e09b      	b.n	800c29c <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c16c:	2be0      	cmp	r3, #224	; 0xe0
 800c16e:	d118      	bne.n	800c1a2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c170:	2301      	movs	r3, #1
 800c172:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c174:	2300      	movs	r3, #0
 800c176:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c178:	235e      	movs	r3, #94	; 0x5e
 800c17a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	3301      	adds	r3, #1
 800c180:	781b      	ldrb	r3, [r3, #0]
 800c182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c186:	b2db      	uxtb	r3, r3
 800c188:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	3302      	adds	r3, #2
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	3303      	adds	r3, #3
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c19a:	f107 0310 	add.w	r3, r7, #16
 800c19e:	61fb      	str	r3, [r7, #28]
 800c1a0:	e07c      	b.n	800c29c <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	3304      	adds	r3, #4
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	405a      	eors	r2, r3
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	3308      	adds	r3, #8
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4013      	ands	r3, r2
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d012      	beq.n	800c1e0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c1c0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d00b      	beq.n	800c1e0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	330c      	adds	r3, #12
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d003      	beq.n	800c1da <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	330c      	adds	r3, #12
 800c1d6:	61bb      	str	r3, [r7, #24]
 800c1d8:	e002      	b.n	800c1e0 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c1da:	f06f 0303 	mvn.w	r3, #3
 800c1de:	e069      	b.n	800c2b4 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c1e0:	4b3c      	ldr	r3, [pc, #240]	; (800c2d4 <etharp_output+0x1d4>)
 800c1e2:	781b      	ldrb	r3, [r3, #0]
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	4a3c      	ldr	r2, [pc, #240]	; (800c2d8 <etharp_output+0x1d8>)
 800c1e8:	460b      	mov	r3, r1
 800c1ea:	005b      	lsls	r3, r3, #1
 800c1ec:	440b      	add	r3, r1
 800c1ee:	00db      	lsls	r3, r3, #3
 800c1f0:	4413      	add	r3, r2
 800c1f2:	3314      	adds	r3, #20
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	2b01      	cmp	r3, #1
 800c1f8:	d917      	bls.n	800c22a <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c1fa:	69bb      	ldr	r3, [r7, #24]
 800c1fc:	681a      	ldr	r2, [r3, #0]
 800c1fe:	4b35      	ldr	r3, [pc, #212]	; (800c2d4 <etharp_output+0x1d4>)
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	4618      	mov	r0, r3
 800c204:	4934      	ldr	r1, [pc, #208]	; (800c2d8 <etharp_output+0x1d8>)
 800c206:	4603      	mov	r3, r0
 800c208:	005b      	lsls	r3, r3, #1
 800c20a:	4403      	add	r3, r0
 800c20c:	00db      	lsls	r3, r3, #3
 800c20e:	440b      	add	r3, r1
 800c210:	3304      	adds	r3, #4
 800c212:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c214:	429a      	cmp	r2, r3
 800c216:	d108      	bne.n	800c22a <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c218:	4b2e      	ldr	r3, [pc, #184]	; (800c2d4 <etharp_output+0x1d4>)
 800c21a:	781b      	ldrb	r3, [r3, #0]
 800c21c:	461a      	mov	r2, r3
 800c21e:	68b9      	ldr	r1, [r7, #8]
 800c220:	68f8      	ldr	r0, [r7, #12]
 800c222:	f7ff fed3 	bl	800bfcc <etharp_output_to_arp_index>
 800c226:	4603      	mov	r3, r0
 800c228:	e044      	b.n	800c2b4 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c22a:	2300      	movs	r3, #0
 800c22c:	75fb      	strb	r3, [r7, #23]
 800c22e:	e02a      	b.n	800c286 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c230:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c234:	4928      	ldr	r1, [pc, #160]	; (800c2d8 <etharp_output+0x1d8>)
 800c236:	4613      	mov	r3, r2
 800c238:	005b      	lsls	r3, r3, #1
 800c23a:	4413      	add	r3, r2
 800c23c:	00db      	lsls	r3, r3, #3
 800c23e:	440b      	add	r3, r1
 800c240:	3314      	adds	r3, #20
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	2b01      	cmp	r3, #1
 800c246:	d918      	bls.n	800c27a <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c248:	69bb      	ldr	r3, [r7, #24]
 800c24a:	6819      	ldr	r1, [r3, #0]
 800c24c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c250:	4821      	ldr	r0, [pc, #132]	; (800c2d8 <etharp_output+0x1d8>)
 800c252:	4613      	mov	r3, r2
 800c254:	005b      	lsls	r3, r3, #1
 800c256:	4413      	add	r3, r2
 800c258:	00db      	lsls	r3, r3, #3
 800c25a:	4403      	add	r3, r0
 800c25c:	3304      	adds	r3, #4
 800c25e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c260:	4299      	cmp	r1, r3
 800c262:	d10a      	bne.n	800c27a <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800c264:	7dfa      	ldrb	r2, [r7, #23]
 800c266:	4b1b      	ldr	r3, [pc, #108]	; (800c2d4 <etharp_output+0x1d4>)
 800c268:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c26a:	7dfb      	ldrb	r3, [r7, #23]
 800c26c:	461a      	mov	r2, r3
 800c26e:	68b9      	ldr	r1, [r7, #8]
 800c270:	68f8      	ldr	r0, [r7, #12]
 800c272:	f7ff feab 	bl	800bfcc <etharp_output_to_arp_index>
 800c276:	4603      	mov	r3, r0
 800c278:	e01c      	b.n	800c2b4 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c27a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c27e:	b2db      	uxtb	r3, r3
 800c280:	3301      	adds	r3, #1
 800c282:	b2db      	uxtb	r3, r3
 800c284:	75fb      	strb	r3, [r7, #23]
 800c286:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c28a:	2b09      	cmp	r3, #9
 800c28c:	ddd0      	ble.n	800c230 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c28e:	68ba      	ldr	r2, [r7, #8]
 800c290:	69b9      	ldr	r1, [r7, #24]
 800c292:	68f8      	ldr	r0, [r7, #12]
 800c294:	f000 f822 	bl	800c2dc <etharp_query>
 800c298:	4603      	mov	r3, r0
 800c29a:	e00b      	b.n	800c2b4 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800c2a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c2a6:	9300      	str	r3, [sp, #0]
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	68b9      	ldr	r1, [r7, #8]
 800c2ac:	68f8      	ldr	r0, [r7, #12]
 800c2ae:	f001 fccd 	bl	800dc4c <ethernet_output>
 800c2b2:	4603      	mov	r3, r0
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3720      	adds	r7, #32
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}
 800c2bc:	080102cc 	.word	0x080102cc
 800c2c0:	0801041c 	.word	0x0801041c
 800c2c4:	08010344 	.word	0x08010344
 800c2c8:	0801046c 	.word	0x0801046c
 800c2cc:	0801040c 	.word	0x0801040c
 800c2d0:	08010a34 	.word	0x08010a34
 800c2d4:	200001fc 	.word	0x200001fc
 800c2d8:	2000010c 	.word	0x2000010c

0800c2dc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b08c      	sub	sp, #48	; 0x30
 800c2e0:	af02      	add	r7, sp, #8
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	60b9      	str	r1, [r7, #8]
 800c2e6:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	3329      	adds	r3, #41	; 0x29
 800c2ec:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c2ee:	23ff      	movs	r3, #255	; 0xff
 800c2f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	68f9      	ldr	r1, [r7, #12]
 800c2fe:	4618      	mov	r0, r3
 800c300:	f000 fdfe 	bl	800cf00 <ip4_addr_isbroadcast_u32>
 800c304:	4603      	mov	r3, r0
 800c306:	2b00      	cmp	r3, #0
 800c308:	d10c      	bne.n	800c324 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c312:	2be0      	cmp	r3, #224	; 0xe0
 800c314:	d006      	beq.n	800c324 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d003      	beq.n	800c324 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d102      	bne.n	800c32a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c324:	f06f 030f 	mvn.w	r3, #15
 800c328:	e10e      	b.n	800c548 <etharp_query+0x26c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c32a:	68fa      	ldr	r2, [r7, #12]
 800c32c:	2101      	movs	r1, #1
 800c32e:	68b8      	ldr	r0, [r7, #8]
 800c330:	f7ff fba0 	bl	800ba74 <etharp_find_entry>
 800c334:	4603      	mov	r3, r0
 800c336:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800c338:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	da02      	bge.n	800c346 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800c340:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c344:	e100      	b.n	800c548 <etharp_query+0x26c>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c346:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c34a:	4981      	ldr	r1, [pc, #516]	; (800c550 <etharp_query+0x274>)
 800c34c:	4613      	mov	r3, r2
 800c34e:	005b      	lsls	r3, r3, #1
 800c350:	4413      	add	r3, r2
 800c352:	00db      	lsls	r3, r3, #3
 800c354:	440b      	add	r3, r1
 800c356:	3314      	adds	r3, #20
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d117      	bne.n	800c38e <etharp_query+0xb2>
    is_new_entry = 1;
 800c35e:	2301      	movs	r3, #1
 800c360:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c362:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c366:	497a      	ldr	r1, [pc, #488]	; (800c550 <etharp_query+0x274>)
 800c368:	4613      	mov	r3, r2
 800c36a:	005b      	lsls	r3, r3, #1
 800c36c:	4413      	add	r3, r2
 800c36e:	00db      	lsls	r3, r3, #3
 800c370:	440b      	add	r3, r1
 800c372:	3314      	adds	r3, #20
 800c374:	2201      	movs	r2, #1
 800c376:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c378:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c37c:	4974      	ldr	r1, [pc, #464]	; (800c550 <etharp_query+0x274>)
 800c37e:	4613      	mov	r3, r2
 800c380:	005b      	lsls	r3, r3, #1
 800c382:	4413      	add	r3, r2
 800c384:	00db      	lsls	r3, r3, #3
 800c386:	440b      	add	r3, r1
 800c388:	3308      	adds	r3, #8
 800c38a:	68fa      	ldr	r2, [r7, #12]
 800c38c:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c38e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c392:	496f      	ldr	r1, [pc, #444]	; (800c550 <etharp_query+0x274>)
 800c394:	4613      	mov	r3, r2
 800c396:	005b      	lsls	r3, r3, #1
 800c398:	4413      	add	r3, r2
 800c39a:	00db      	lsls	r3, r3, #3
 800c39c:	440b      	add	r3, r1
 800c39e:	3314      	adds	r3, #20
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	2b01      	cmp	r3, #1
 800c3a4:	d012      	beq.n	800c3cc <etharp_query+0xf0>
 800c3a6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c3aa:	4969      	ldr	r1, [pc, #420]	; (800c550 <etharp_query+0x274>)
 800c3ac:	4613      	mov	r3, r2
 800c3ae:	005b      	lsls	r3, r3, #1
 800c3b0:	4413      	add	r3, r2
 800c3b2:	00db      	lsls	r3, r3, #3
 800c3b4:	440b      	add	r3, r1
 800c3b6:	3314      	adds	r3, #20
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d806      	bhi.n	800c3cc <etharp_query+0xf0>
 800c3be:	4b65      	ldr	r3, [pc, #404]	; (800c554 <etharp_query+0x278>)
 800c3c0:	f240 32c7 	movw	r2, #967	; 0x3c7
 800c3c4:	4964      	ldr	r1, [pc, #400]	; (800c558 <etharp_query+0x27c>)
 800c3c6:	4865      	ldr	r0, [pc, #404]	; (800c55c <etharp_query+0x280>)
 800c3c8:	f001 fcd0 	bl	800dd6c <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c3cc:	6a3b      	ldr	r3, [r7, #32]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d102      	bne.n	800c3d8 <etharp_query+0xfc>
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d10c      	bne.n	800c3f2 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c3d8:	68b9      	ldr	r1, [r7, #8]
 800c3da:	68f8      	ldr	r0, [r7, #12]
 800c3dc:	f000 f974 	bl	800c6c8 <etharp_request>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d102      	bne.n	800c3f2 <etharp_query+0x116>
      return result;
 800c3ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c3f0:	e0aa      	b.n	800c548 <etharp_query+0x26c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d106      	bne.n	800c406 <etharp_query+0x12a>
 800c3f8:	4b56      	ldr	r3, [pc, #344]	; (800c554 <etharp_query+0x278>)
 800c3fa:	f240 32db 	movw	r2, #987	; 0x3db
 800c3fe:	4958      	ldr	r1, [pc, #352]	; (800c560 <etharp_query+0x284>)
 800c400:	4856      	ldr	r0, [pc, #344]	; (800c55c <etharp_query+0x280>)
 800c402:	f001 fcb3 	bl	800dd6c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c406:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c40a:	4951      	ldr	r1, [pc, #324]	; (800c550 <etharp_query+0x274>)
 800c40c:	4613      	mov	r3, r2
 800c40e:	005b      	lsls	r3, r3, #1
 800c410:	4413      	add	r3, r2
 800c412:	00db      	lsls	r3, r3, #3
 800c414:	440b      	add	r3, r1
 800c416:	3314      	adds	r3, #20
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	2b01      	cmp	r3, #1
 800c41c:	d918      	bls.n	800c450 <etharp_query+0x174>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800c41e:	7cfa      	ldrb	r2, [r7, #19]
 800c420:	4b50      	ldr	r3, [pc, #320]	; (800c564 <etharp_query+0x288>)
 800c422:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c424:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c428:	4613      	mov	r3, r2
 800c42a:	005b      	lsls	r3, r3, #1
 800c42c:	4413      	add	r3, r2
 800c42e:	00db      	lsls	r3, r3, #3
 800c430:	3308      	adds	r3, #8
 800c432:	4a47      	ldr	r2, [pc, #284]	; (800c550 <etharp_query+0x274>)
 800c434:	4413      	add	r3, r2
 800c436:	3304      	adds	r3, #4
 800c438:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c43c:	9200      	str	r2, [sp, #0]
 800c43e:	697a      	ldr	r2, [r7, #20]
 800c440:	6879      	ldr	r1, [r7, #4]
 800c442:	68f8      	ldr	r0, [r7, #12]
 800c444:	f001 fc02 	bl	800dc4c <ethernet_output>
 800c448:	4603      	mov	r3, r0
 800c44a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c44e:	e079      	b.n	800c544 <etharp_query+0x268>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c450:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c454:	493e      	ldr	r1, [pc, #248]	; (800c550 <etharp_query+0x274>)
 800c456:	4613      	mov	r3, r2
 800c458:	005b      	lsls	r3, r3, #1
 800c45a:	4413      	add	r3, r2
 800c45c:	00db      	lsls	r3, r3, #3
 800c45e:	440b      	add	r3, r1
 800c460:	3314      	adds	r3, #20
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	2b01      	cmp	r3, #1
 800c466:	d16d      	bne.n	800c544 <etharp_query+0x268>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c468:	2300      	movs	r3, #0
 800c46a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c470:	e01a      	b.n	800c4a8 <etharp_query+0x1cc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c472:	69fb      	ldr	r3, [r7, #28]
 800c474:	895a      	ldrh	r2, [r3, #10]
 800c476:	69fb      	ldr	r3, [r7, #28]
 800c478:	891b      	ldrh	r3, [r3, #8]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d10a      	bne.n	800c494 <etharp_query+0x1b8>
 800c47e:	69fb      	ldr	r3, [r7, #28]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d006      	beq.n	800c494 <etharp_query+0x1b8>
 800c486:	4b33      	ldr	r3, [pc, #204]	; (800c554 <etharp_query+0x278>)
 800c488:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800c48c:	4936      	ldr	r1, [pc, #216]	; (800c568 <etharp_query+0x28c>)
 800c48e:	4833      	ldr	r0, [pc, #204]	; (800c55c <etharp_query+0x280>)
 800c490:	f001 fc6c 	bl	800dd6c <iprintf>
      if (p->type != PBUF_ROM) {
 800c494:	69fb      	ldr	r3, [r7, #28]
 800c496:	7b1b      	ldrb	r3, [r3, #12]
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d002      	beq.n	800c4a2 <etharp_query+0x1c6>
        copy_needed = 1;
 800c49c:	2301      	movs	r3, #1
 800c49e:	61bb      	str	r3, [r7, #24]
        break;
 800c4a0:	e005      	b.n	800c4ae <etharp_query+0x1d2>
      }
      p = p->next;
 800c4a2:	69fb      	ldr	r3, [r7, #28]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c4a8:	69fb      	ldr	r3, [r7, #28]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d1e1      	bne.n	800c472 <etharp_query+0x196>
    }
    if (copy_needed) {
 800c4ae:	69bb      	ldr	r3, [r7, #24]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d017      	beq.n	800c4e4 <etharp_query+0x208>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800c4b4:	69fb      	ldr	r3, [r7, #28]
 800c4b6:	891b      	ldrh	r3, [r3, #8]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	2002      	movs	r0, #2
 800c4be:	f7f8 ff95 	bl	80053ec <pbuf_alloc>
 800c4c2:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800c4c4:	69fb      	ldr	r3, [r7, #28]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d011      	beq.n	800c4ee <etharp_query+0x212>
        if (pbuf_copy(p, q) != ERR_OK) {
 800c4ca:	6879      	ldr	r1, [r7, #4]
 800c4cc:	69f8      	ldr	r0, [r7, #28]
 800c4ce:	f7f9 fc31 	bl	8005d34 <pbuf_copy>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d00a      	beq.n	800c4ee <etharp_query+0x212>
          pbuf_free(p);
 800c4d8:	69f8      	ldr	r0, [r7, #28]
 800c4da:	f7f9 faf9 	bl	8005ad0 <pbuf_free>
          p = NULL;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	61fb      	str	r3, [r7, #28]
 800c4e2:	e004      	b.n	800c4ee <etharp_query+0x212>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800c4e8:	69f8      	ldr	r0, [r7, #28]
 800c4ea:	f7f9 fb9b 	bl	8005c24 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800c4ee:	69fb      	ldr	r3, [r7, #28]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d024      	beq.n	800c53e <etharp_query+0x262>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800c4f4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c4f8:	4915      	ldr	r1, [pc, #84]	; (800c550 <etharp_query+0x274>)
 800c4fa:	4613      	mov	r3, r2
 800c4fc:	005b      	lsls	r3, r3, #1
 800c4fe:	4413      	add	r3, r2
 800c500:	00db      	lsls	r3, r3, #3
 800c502:	440b      	add	r3, r1
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d00b      	beq.n	800c522 <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800c50a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c50e:	4910      	ldr	r1, [pc, #64]	; (800c550 <etharp_query+0x274>)
 800c510:	4613      	mov	r3, r2
 800c512:	005b      	lsls	r3, r3, #1
 800c514:	4413      	add	r3, r2
 800c516:	00db      	lsls	r3, r3, #3
 800c518:	440b      	add	r3, r1
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7f9 fad7 	bl	8005ad0 <pbuf_free>
      }
      arp_table[i].q = p;
 800c522:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c526:	490a      	ldr	r1, [pc, #40]	; (800c550 <etharp_query+0x274>)
 800c528:	4613      	mov	r3, r2
 800c52a:	005b      	lsls	r3, r3, #1
 800c52c:	4413      	add	r3, r2
 800c52e:	00db      	lsls	r3, r3, #3
 800c530:	440b      	add	r3, r1
 800c532:	69fa      	ldr	r2, [r7, #28]
 800c534:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800c536:	2300      	movs	r3, #0
 800c538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c53c:	e002      	b.n	800c544 <etharp_query+0x268>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800c53e:	23ff      	movs	r3, #255	; 0xff
 800c540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800c544:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c548:	4618      	mov	r0, r3
 800c54a:	3728      	adds	r7, #40	; 0x28
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	2000010c 	.word	0x2000010c
 800c554:	080102cc 	.word	0x080102cc
 800c558:	08010478 	.word	0x08010478
 800c55c:	08010344 	.word	0x08010344
 800c560:	0801046c 	.word	0x0801046c
 800c564:	200001fc 	.word	0x200001fc
 800c568:	080104a0 	.word	0x080104a0

0800c56c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b08a      	sub	sp, #40	; 0x28
 800c570:	af02      	add	r7, sp, #8
 800c572:	60f8      	str	r0, [r7, #12]
 800c574:	60b9      	str	r1, [r7, #8]
 800c576:	607a      	str	r2, [r7, #4]
 800c578:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800c57a:	2300      	movs	r3, #0
 800c57c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d106      	bne.n	800c592 <etharp_raw+0x26>
 800c584:	4b3a      	ldr	r3, [pc, #232]	; (800c670 <etharp_raw+0x104>)
 800c586:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800c58a:	493a      	ldr	r1, [pc, #232]	; (800c674 <etharp_raw+0x108>)
 800c58c:	483a      	ldr	r0, [pc, #232]	; (800c678 <etharp_raw+0x10c>)
 800c58e:	f001 fbed 	bl	800dd6c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c592:	2200      	movs	r2, #0
 800c594:	211c      	movs	r1, #28
 800c596:	2002      	movs	r0, #2
 800c598:	f7f8 ff28 	bl	80053ec <pbuf_alloc>
 800c59c:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d102      	bne.n	800c5aa <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800c5a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c5a8:	e05d      	b.n	800c666 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	895b      	ldrh	r3, [r3, #10]
 800c5ae:	2b1b      	cmp	r3, #27
 800c5b0:	d806      	bhi.n	800c5c0 <etharp_raw+0x54>
 800c5b2:	4b2f      	ldr	r3, [pc, #188]	; (800c670 <etharp_raw+0x104>)
 800c5b4:	f240 4263 	movw	r2, #1123	; 0x463
 800c5b8:	4930      	ldr	r1, [pc, #192]	; (800c67c <etharp_raw+0x110>)
 800c5ba:	482f      	ldr	r0, [pc, #188]	; (800c678 <etharp_raw+0x10c>)
 800c5bc:	f001 fbd6 	bl	800dd6c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c5c0:	69bb      	ldr	r3, [r7, #24]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c5c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7f8 f954 	bl	8004876 <lwip_htons>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5dc:	2b06      	cmp	r3, #6
 800c5de:	d006      	beq.n	800c5ee <etharp_raw+0x82>
 800c5e0:	4b23      	ldr	r3, [pc, #140]	; (800c670 <etharp_raw+0x104>)
 800c5e2:	f240 426a 	movw	r2, #1130	; 0x46a
 800c5e6:	4926      	ldr	r1, [pc, #152]	; (800c680 <etharp_raw+0x114>)
 800c5e8:	4823      	ldr	r0, [pc, #140]	; (800c678 <etharp_raw+0x10c>)
 800c5ea:	f001 fbbf 	bl	800dd6c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	3308      	adds	r3, #8
 800c5f2:	2206      	movs	r2, #6
 800c5f4:	6839      	ldr	r1, [r7, #0]
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f001 fba2 	bl	800dd40 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	3312      	adds	r3, #18
 800c600:	2206      	movs	r2, #6
 800c602:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c604:	4618      	mov	r0, r3
 800c606:	f001 fb9b 	bl	800dd40 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	330e      	adds	r3, #14
 800c60e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c610:	6812      	ldr	r2, [r2, #0]
 800c612:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	3318      	adds	r3, #24
 800c618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c61a:	6812      	ldr	r2, [r2, #0]
 800c61c:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	2200      	movs	r2, #0
 800c622:	701a      	strb	r2, [r3, #0]
 800c624:	2200      	movs	r2, #0
 800c626:	f042 0201 	orr.w	r2, r2, #1
 800c62a:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	2200      	movs	r2, #0
 800c630:	f042 0208 	orr.w	r2, r2, #8
 800c634:	709a      	strb	r2, [r3, #2]
 800c636:	2200      	movs	r2, #0
 800c638:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	2206      	movs	r2, #6
 800c63e:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	2204      	movs	r2, #4
 800c644:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c646:	f640 0306 	movw	r3, #2054	; 0x806
 800c64a:	9300      	str	r3, [sp, #0]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	68ba      	ldr	r2, [r7, #8]
 800c650:	69b9      	ldr	r1, [r7, #24]
 800c652:	68f8      	ldr	r0, [r7, #12]
 800c654:	f001 fafa 	bl	800dc4c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800c658:	69b8      	ldr	r0, [r7, #24]
 800c65a:	f7f9 fa39 	bl	8005ad0 <pbuf_free>
  p = NULL;
 800c65e:	2300      	movs	r3, #0
 800c660:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800c662:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c666:	4618      	mov	r0, r3
 800c668:	3720      	adds	r7, #32
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}
 800c66e:	bf00      	nop
 800c670:	080102cc 	.word	0x080102cc
 800c674:	0801041c 	.word	0x0801041c
 800c678:	08010344 	.word	0x08010344
 800c67c:	080104bc 	.word	0x080104bc
 800c680:	080104f0 	.word	0x080104f0

0800c684 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b088      	sub	sp, #32
 800c688:	af04      	add	r7, sp, #16
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	60b9      	str	r1, [r7, #8]
 800c68e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c6a0:	2201      	movs	r2, #1
 800c6a2:	9203      	str	r2, [sp, #12]
 800c6a4:	68ba      	ldr	r2, [r7, #8]
 800c6a6:	9202      	str	r2, [sp, #8]
 800c6a8:	4a06      	ldr	r2, [pc, #24]	; (800c6c4 <etharp_request_dst+0x40>)
 800c6aa:	9201      	str	r2, [sp, #4]
 800c6ac:	9300      	str	r3, [sp, #0]
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	687a      	ldr	r2, [r7, #4]
 800c6b2:	68f8      	ldr	r0, [r7, #12]
 800c6b4:	f7ff ff5a 	bl	800c56c <etharp_raw>
 800c6b8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3710      	adds	r7, #16
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	08010a3c 	.word	0x08010a3c

0800c6c8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b082      	sub	sp, #8
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800c6d2:	4a05      	ldr	r2, [pc, #20]	; (800c6e8 <etharp_request+0x20>)
 800c6d4:	6839      	ldr	r1, [r7, #0]
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f7ff ffd4 	bl	800c684 <etharp_request_dst>
 800c6dc:	4603      	mov	r3, r0
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3708      	adds	r7, #8
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	08010a34 	.word	0x08010a34

0800c6ec <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b08e      	sub	sp, #56	; 0x38
 800c6f0:	af04      	add	r7, sp, #16
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800c6f6:	4b7a      	ldr	r3, [pc, #488]	; (800c8e0 <icmp_input+0x1f4>)
 800c6f8:	689b      	ldr	r3, [r3, #8]
 800c6fa:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800c6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	b29b      	uxth	r3, r3
 800c702:	f003 030f 	and.w	r3, r3, #15
 800c706:	b29b      	uxth	r3, r3
 800c708:	009b      	lsls	r3, r3, #2
 800c70a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800c70c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c70e:	2b13      	cmp	r3, #19
 800c710:	f240 80d1 	bls.w	800c8b6 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	895b      	ldrh	r3, [r3, #10]
 800c718:	2b03      	cmp	r3, #3
 800c71a:	f240 80ce 	bls.w	800c8ba <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	685b      	ldr	r3, [r3, #4]
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800c728:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	f000 80bb 	beq.w	800c8a8 <icmp_input+0x1bc>
 800c732:	2b08      	cmp	r3, #8
 800c734:	f040 80bb 	bne.w	800c8ae <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800c738:	4b6a      	ldr	r3, [pc, #424]	; (800c8e4 <icmp_input+0x1f8>)
 800c73a:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c73c:	4b68      	ldr	r3, [pc, #416]	; (800c8e0 <icmp_input+0x1f4>)
 800c73e:	695b      	ldr	r3, [r3, #20]
 800c740:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c744:	2be0      	cmp	r3, #224	; 0xe0
 800c746:	f000 80bf 	beq.w	800c8c8 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800c74a:	4b65      	ldr	r3, [pc, #404]	; (800c8e0 <icmp_input+0x1f4>)
 800c74c:	695b      	ldr	r3, [r3, #20]
 800c74e:	4a64      	ldr	r2, [pc, #400]	; (800c8e0 <icmp_input+0x1f4>)
 800c750:	6812      	ldr	r2, [r2, #0]
 800c752:	4611      	mov	r1, r2
 800c754:	4618      	mov	r0, r3
 800c756:	f000 fbd3 	bl	800cf00 <ip4_addr_isbroadcast_u32>
 800c75a:	4603      	mov	r3, r0
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	f040 80b5 	bne.w	800c8cc <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	891b      	ldrh	r3, [r3, #8]
 800c766:	2b07      	cmp	r3, #7
 800c768:	f240 80a9 	bls.w	800c8be <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800c76c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c76e:	330e      	adds	r3, #14
 800c770:	b29b      	uxth	r3, r3
 800c772:	b21b      	sxth	r3, r3
 800c774:	4619      	mov	r1, r3
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f7f9 f986 	bl	8005a88 <pbuf_header>
 800c77c:	4603      	mov	r3, r0
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d046      	beq.n	800c810 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	891a      	ldrh	r2, [r3, #8]
 800c786:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c788:	4413      	add	r3, r2
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	2200      	movs	r2, #0
 800c78e:	4619      	mov	r1, r3
 800c790:	2002      	movs	r0, #2
 800c792:	f7f8 fe2b 	bl	80053ec <pbuf_alloc>
 800c796:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800c798:	69bb      	ldr	r3, [r7, #24]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	f000 8098 	beq.w	800c8d0 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800c7a0:	69bb      	ldr	r3, [r7, #24]
 800c7a2:	895b      	ldrh	r3, [r3, #10]
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c7a8:	3308      	adds	r3, #8
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d203      	bcs.n	800c7b6 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800c7ae:	69b8      	ldr	r0, [r7, #24]
 800c7b0:	f7f9 f98e 	bl	8005ad0 <pbuf_free>
        goto icmperr;
 800c7b4:	e08d      	b.n	800c8d2 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800c7b6:	69bb      	ldr	r3, [r7, #24]
 800c7b8:	685b      	ldr	r3, [r3, #4]
 800c7ba:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c7bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f001 fabe 	bl	800dd40 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800c7c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c7c6:	425b      	negs	r3, r3
 800c7c8:	b29b      	uxth	r3, r3
 800c7ca:	b21b      	sxth	r3, r3
 800c7cc:	4619      	mov	r1, r3
 800c7ce:	69b8      	ldr	r0, [r7, #24]
 800c7d0:	f7f9 f95a 	bl	8005a88 <pbuf_header>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d009      	beq.n	800c7ee <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800c7da:	4b43      	ldr	r3, [pc, #268]	; (800c8e8 <icmp_input+0x1fc>)
 800c7dc:	22af      	movs	r2, #175	; 0xaf
 800c7de:	4943      	ldr	r1, [pc, #268]	; (800c8ec <icmp_input+0x200>)
 800c7e0:	4843      	ldr	r0, [pc, #268]	; (800c8f0 <icmp_input+0x204>)
 800c7e2:	f001 fac3 	bl	800dd6c <iprintf>
        pbuf_free(r);
 800c7e6:	69b8      	ldr	r0, [r7, #24]
 800c7e8:	f7f9 f972 	bl	8005ad0 <pbuf_free>
        goto icmperr;
 800c7ec:	e071      	b.n	800c8d2 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800c7ee:	6879      	ldr	r1, [r7, #4]
 800c7f0:	69b8      	ldr	r0, [r7, #24]
 800c7f2:	f7f9 fa9f 	bl	8005d34 <pbuf_copy>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d003      	beq.n	800c804 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800c7fc:	69b8      	ldr	r0, [r7, #24]
 800c7fe:	f7f9 f967 	bl	8005ad0 <pbuf_free>
        goto icmperr;
 800c802:	e066      	b.n	800c8d2 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f7f9 f963 	bl	8005ad0 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800c80a:	69bb      	ldr	r3, [r7, #24]
 800c80c:	607b      	str	r3, [r7, #4]
 800c80e:	e015      	b.n	800c83c <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800c810:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c812:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800c816:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800c81a:	33f2      	adds	r3, #242	; 0xf2
 800c81c:	b29b      	uxth	r3, r3
 800c81e:	b21b      	sxth	r3, r3
 800c820:	4619      	mov	r1, r3
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f7f9 f930 	bl	8005a88 <pbuf_header>
 800c828:	4603      	mov	r3, r0
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d006      	beq.n	800c83c <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800c82e:	4b2e      	ldr	r3, [pc, #184]	; (800c8e8 <icmp_input+0x1fc>)
 800c830:	22c0      	movs	r2, #192	; 0xc0
 800c832:	4930      	ldr	r1, [pc, #192]	; (800c8f4 <icmp_input+0x208>)
 800c834:	482e      	ldr	r0, [pc, #184]	; (800c8f0 <icmp_input+0x204>)
 800c836:	f001 fa99 	bl	800dd6c <iprintf>
        goto icmperr;
 800c83a:	e04a      	b.n	800c8d2 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800c842:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c846:	4619      	mov	r1, r3
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f7f9 f91d 	bl	8005a88 <pbuf_header>
 800c84e:	4603      	mov	r3, r0
 800c850:	2b00      	cmp	r3, #0
 800c852:	d12b      	bne.n	800c8ac <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800c85a:	69fb      	ldr	r3, [r7, #28]
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800c862:	4b1f      	ldr	r3, [pc, #124]	; (800c8e0 <icmp_input+0x1f4>)
 800c864:	691a      	ldr	r2, [r3, #16]
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	2200      	movs	r2, #0
 800c86e:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	2200      	movs	r2, #0
 800c874:	709a      	strb	r2, [r3, #2]
 800c876:	2200      	movs	r2, #0
 800c878:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	22ff      	movs	r2, #255	; 0xff
 800c87e:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	2200      	movs	r2, #0
 800c884:	729a      	strb	r2, [r3, #10]
 800c886:	2200      	movs	r2, #0
 800c888:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	9302      	str	r3, [sp, #8]
 800c88e:	2301      	movs	r3, #1
 800c890:	9301      	str	r3, [sp, #4]
 800c892:	2300      	movs	r3, #0
 800c894:	9300      	str	r3, [sp, #0]
 800c896:	23ff      	movs	r3, #255	; 0xff
 800c898:	2200      	movs	r2, #0
 800c89a:	69f9      	ldr	r1, [r7, #28]
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f000 fa5d 	bl	800cd5c <ip4_output_if>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800c8a6:	e001      	b.n	800c8ac <icmp_input+0x1c0>
    break;
 800c8a8:	bf00      	nop
 800c8aa:	e000      	b.n	800c8ae <icmp_input+0x1c2>
    break;
 800c8ac:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f7f9 f90e 	bl	8005ad0 <pbuf_free>
  return;
 800c8b4:	e011      	b.n	800c8da <icmp_input+0x1ee>
    goto lenerr;
 800c8b6:	bf00      	nop
 800c8b8:	e002      	b.n	800c8c0 <icmp_input+0x1d4>
    goto lenerr;
 800c8ba:	bf00      	nop
 800c8bc:	e000      	b.n	800c8c0 <icmp_input+0x1d4>
      goto lenerr;
 800c8be:	bf00      	nop
lenerr:
  pbuf_free(p);
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f7f9 f905 	bl	8005ad0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c8c6:	e008      	b.n	800c8da <icmp_input+0x1ee>
      goto icmperr;
 800c8c8:	bf00      	nop
 800c8ca:	e002      	b.n	800c8d2 <icmp_input+0x1e6>
      goto icmperr;
 800c8cc:	bf00      	nop
 800c8ce:	e000      	b.n	800c8d2 <icmp_input+0x1e6>
        goto icmperr;
 800c8d0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f7f9 f8fc 	bl	8005ad0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c8d8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800c8da:	3728      	adds	r7, #40	; 0x28
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}
 800c8e0:	2000378c 	.word	0x2000378c
 800c8e4:	200037a0 	.word	0x200037a0
 800c8e8:	08010534 	.word	0x08010534
 800c8ec:	0801056c 	.word	0x0801056c
 800c8f0:	080105a4 	.word	0x080105a4
 800c8f4:	080105cc 	.word	0x080105cc

0800c8f8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	460b      	mov	r3, r1
 800c902:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800c904:	78fb      	ldrb	r3, [r7, #3]
 800c906:	461a      	mov	r2, r3
 800c908:	2103      	movs	r1, #3
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f000 f814 	bl	800c938 <icmp_send_response>
}
 800c910:	bf00      	nop
 800c912:	3708      	adds	r7, #8
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}

0800c918 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	460b      	mov	r3, r1
 800c922:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800c924:	78fb      	ldrb	r3, [r7, #3]
 800c926:	461a      	mov	r2, r3
 800c928:	210b      	movs	r1, #11
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f000 f804 	bl	800c938 <icmp_send_response>
}
 800c930:	bf00      	nop
 800c932:	3708      	adds	r7, #8
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}

0800c938 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b08c      	sub	sp, #48	; 0x30
 800c93c:	af04      	add	r7, sp, #16
 800c93e:	6078      	str	r0, [r7, #4]
 800c940:	460b      	mov	r3, r1
 800c942:	70fb      	strb	r3, [r7, #3]
 800c944:	4613      	mov	r3, r2
 800c946:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800c948:	2200      	movs	r2, #0
 800c94a:	2124      	movs	r1, #36	; 0x24
 800c94c:	2001      	movs	r0, #1
 800c94e:	f7f8 fd4d 	bl	80053ec <pbuf_alloc>
 800c952:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800c954:	69fb      	ldr	r3, [r7, #28]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d04c      	beq.n	800c9f4 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800c95a:	69fb      	ldr	r3, [r7, #28]
 800c95c:	895b      	ldrh	r3, [r3, #10]
 800c95e:	2b23      	cmp	r3, #35	; 0x23
 800c960:	d806      	bhi.n	800c970 <icmp_send_response+0x38>
 800c962:	4b26      	ldr	r3, [pc, #152]	; (800c9fc <icmp_send_response+0xc4>)
 800c964:	f240 1261 	movw	r2, #353	; 0x161
 800c968:	4925      	ldr	r1, [pc, #148]	; (800ca00 <icmp_send_response+0xc8>)
 800c96a:	4826      	ldr	r0, [pc, #152]	; (800ca04 <icmp_send_response+0xcc>)
 800c96c:	f001 f9fe 	bl	800dd6c <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800c976:	69fb      	ldr	r3, [r7, #28]
 800c978:	685b      	ldr	r3, [r3, #4]
 800c97a:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	78fa      	ldrb	r2, [r7, #3]
 800c980:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	78ba      	ldrb	r2, [r7, #2]
 800c986:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	2200      	movs	r2, #0
 800c98c:	711a      	strb	r2, [r3, #4]
 800c98e:	2200      	movs	r2, #0
 800c990:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	2200      	movs	r2, #0
 800c996:	719a      	strb	r2, [r3, #6]
 800c998:	2200      	movs	r2, #0
 800c99a:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800c99c:	69fb      	ldr	r3, [r7, #28]
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	f103 0008 	add.w	r0, r3, #8
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	685b      	ldr	r3, [r3, #4]
 800c9a8:	221c      	movs	r2, #28
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	f001 f9c8 	bl	800dd40 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800c9b0:	69bb      	ldr	r3, [r7, #24]
 800c9b2:	68db      	ldr	r3, [r3, #12]
 800c9b4:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800c9b6:	f107 030c 	add.w	r3, r7, #12
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f000 f824 	bl	800ca08 <ip4_route>
 800c9c0:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d011      	beq.n	800c9ec <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	709a      	strb	r2, [r3, #2]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800c9d2:	f107 020c 	add.w	r2, r7, #12
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	9302      	str	r3, [sp, #8]
 800c9da:	2301      	movs	r3, #1
 800c9dc:	9301      	str	r3, [sp, #4]
 800c9de:	2300      	movs	r3, #0
 800c9e0:	9300      	str	r3, [sp, #0]
 800c9e2:	23ff      	movs	r3, #255	; 0xff
 800c9e4:	2100      	movs	r1, #0
 800c9e6:	69f8      	ldr	r0, [r7, #28]
 800c9e8:	f000 f9b8 	bl	800cd5c <ip4_output_if>
  }
  pbuf_free(q);
 800c9ec:	69f8      	ldr	r0, [r7, #28]
 800c9ee:	f7f9 f86f 	bl	8005ad0 <pbuf_free>
 800c9f2:	e000      	b.n	800c9f6 <icmp_send_response+0xbe>
    return;
 800c9f4:	bf00      	nop
}
 800c9f6:	3720      	adds	r7, #32
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}
 800c9fc:	08010534 	.word	0x08010534
 800ca00:	08010600 	.word	0x08010600
 800ca04:	080105a4 	.word	0x080105a4

0800ca08 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b085      	sub	sp, #20
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800ca10:	4b30      	ldr	r3, [pc, #192]	; (800cad4 <ip4_route+0xcc>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	60fb      	str	r3, [r7, #12]
 800ca16:	e036      	b.n	800ca86 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ca1e:	f003 0301 	and.w	r3, r3, #1
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d02b      	beq.n	800ca80 <ip4_route+0x78>
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ca2e:	089b      	lsrs	r3, r3, #2
 800ca30:	f003 0301 	and.w	r3, r3, #1
 800ca34:	b2db      	uxtb	r3, r3
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d022      	beq.n	800ca80 <ip4_route+0x78>
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	3304      	adds	r3, #4
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d01d      	beq.n	800ca80 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681a      	ldr	r2, [r3, #0]
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	3304      	adds	r3, #4
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	405a      	eors	r2, r3
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	3308      	adds	r3, #8
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	4013      	ands	r3, r2
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d101      	bne.n	800ca60 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	e033      	b.n	800cac8 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ca66:	f003 0302 	and.w	r3, r3, #2
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d108      	bne.n	800ca80 <ip4_route+0x78>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681a      	ldr	r2, [r3, #0]
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	330c      	adds	r3, #12
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d101      	bne.n	800ca80 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	e023      	b.n	800cac8 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	60fb      	str	r3, [r7, #12]
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d1c5      	bne.n	800ca18 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ca8c:	4b12      	ldr	r3, [pc, #72]	; (800cad8 <ip4_route+0xd0>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d015      	beq.n	800cac0 <ip4_route+0xb8>
 800ca94:	4b10      	ldr	r3, [pc, #64]	; (800cad8 <ip4_route+0xd0>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ca9c:	f003 0301 	and.w	r3, r3, #1
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d00d      	beq.n	800cac0 <ip4_route+0xb8>
 800caa4:	4b0c      	ldr	r3, [pc, #48]	; (800cad8 <ip4_route+0xd0>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800caac:	f003 0304 	and.w	r3, r3, #4
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d005      	beq.n	800cac0 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800cab4:	4b08      	ldr	r3, [pc, #32]	; (800cad8 <ip4_route+0xd0>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	3304      	adds	r3, #4
 800caba:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d101      	bne.n	800cac4 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800cac0:	2300      	movs	r3, #0
 800cac2:	e001      	b.n	800cac8 <ip4_route+0xc0>
  }

  return netif_default;
 800cac4:	4b04      	ldr	r3, [pc, #16]	; (800cad8 <ip4_route+0xd0>)
 800cac6:	681b      	ldr	r3, [r3, #0]
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3714      	adds	r7, #20
 800cacc:	46bd      	mov	sp, r7
 800cace:	bc80      	pop	{r7}
 800cad0:	4770      	bx	lr
 800cad2:	bf00      	nop
 800cad4:	20006cac 	.word	0x20006cac
 800cad8:	20006cb0 	.word	0x20006cb0

0800cadc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b086      	sub	sp, #24
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
 800cae4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	685b      	ldr	r3, [r3, #4]
 800caea:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	781b      	ldrb	r3, [r3, #0]
 800caf0:	091b      	lsrs	r3, r3, #4
 800caf2:	b2db      	uxtb	r3, r3
 800caf4:	2b04      	cmp	r3, #4
 800caf6:	d004      	beq.n	800cb02 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f7f8 ffe9 	bl	8005ad0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800cafe:	2300      	movs	r3, #0
 800cb00:	e124      	b.n	800cd4c <ip4_input+0x270>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	f003 030f 	and.w	r3, r3, #15
 800cb0c:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800cb0e:	897b      	ldrh	r3, [r7, #10]
 800cb10:	009b      	lsls	r3, r3, #2
 800cb12:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	885b      	ldrh	r3, [r3, #2]
 800cb18:	b29b      	uxth	r3, r3
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7f7 feab 	bl	8004876 <lwip_htons>
 800cb20:	4603      	mov	r3, r0
 800cb22:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	891b      	ldrh	r3, [r3, #8]
 800cb28:	893a      	ldrh	r2, [r7, #8]
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d204      	bcs.n	800cb38 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 800cb2e:	893b      	ldrh	r3, [r7, #8]
 800cb30:	4619      	mov	r1, r3
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f7f8 fe58 	bl	80057e8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	895b      	ldrh	r3, [r3, #10]
 800cb3c:	897a      	ldrh	r2, [r7, #10]
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d807      	bhi.n	800cb52 <ip4_input+0x76>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	891b      	ldrh	r3, [r3, #8]
 800cb46:	893a      	ldrh	r2, [r7, #8]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d802      	bhi.n	800cb52 <ip4_input+0x76>
 800cb4c:	897b      	ldrh	r3, [r7, #10]
 800cb4e:	2b13      	cmp	r3, #19
 800cb50:	d804      	bhi.n	800cb5c <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f7f8 ffbc 	bl	8005ad0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	e0f7      	b.n	800cd4c <ip4_input+0x270>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800cb5c:	697b      	ldr	r3, [r7, #20]
 800cb5e:	691b      	ldr	r3, [r3, #16]
 800cb60:	4a7c      	ldr	r2, [pc, #496]	; (800cd54 <ip4_input+0x278>)
 800cb62:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	4a7a      	ldr	r2, [pc, #488]	; (800cd54 <ip4_input+0x278>)
 800cb6a:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cb6c:	4b79      	ldr	r3, [pc, #484]	; (800cd54 <ip4_input+0x278>)
 800cb6e:	695b      	ldr	r3, [r3, #20]
 800cb70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb74:	2be0      	cmp	r3, #224	; 0xe0
 800cb76:	d112      	bne.n	800cb9e <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cb7e:	f003 0301 	and.w	r3, r3, #1
 800cb82:	b2db      	uxtb	r3, r3
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d007      	beq.n	800cb98 <ip4_input+0xbc>
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	3304      	adds	r3, #4
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d002      	beq.n	800cb98 <ip4_input+0xbc>
      netif = inp;
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	613b      	str	r3, [r7, #16]
 800cb96:	e041      	b.n	800cc1c <ip4_input+0x140>
    } else {
      netif = NULL;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	613b      	str	r3, [r7, #16]
 800cb9c:	e03e      	b.n	800cc1c <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800cb9e:	2301      	movs	r3, #1
 800cba0:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cbac:	f003 0301 	and.w	r3, r3, #1
 800cbb0:	b2db      	uxtb	r3, r3
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d014      	beq.n	800cbe0 <ip4_input+0x104>
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	3304      	adds	r3, #4
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d00f      	beq.n	800cbe0 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cbc0:	4b64      	ldr	r3, [pc, #400]	; (800cd54 <ip4_input+0x278>)
 800cbc2:	695a      	ldr	r2, [r3, #20]
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	3304      	adds	r3, #4
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d026      	beq.n	800cc1c <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800cbce:	4b61      	ldr	r3, [pc, #388]	; (800cd54 <ip4_input+0x278>)
 800cbd0:	695b      	ldr	r3, [r3, #20]
 800cbd2:	6939      	ldr	r1, [r7, #16]
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f000 f993 	bl	800cf00 <ip4_addr_isbroadcast_u32>
 800cbda:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d11d      	bne.n	800cc1c <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d00d      	beq.n	800cc02 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800cbe6:	4b5b      	ldr	r3, [pc, #364]	; (800cd54 <ip4_input+0x278>)
 800cbe8:	695b      	ldr	r3, [r3, #20]
 800cbea:	b2db      	uxtb	r3, r3
 800cbec:	2b7f      	cmp	r3, #127	; 0x7f
 800cbee:	d102      	bne.n	800cbf6 <ip4_input+0x11a>
          netif = NULL;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	613b      	str	r3, [r7, #16]
          break;
 800cbf4:	e012      	b.n	800cc1c <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800cbfa:	4b57      	ldr	r3, [pc, #348]	; (800cd58 <ip4_input+0x27c>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	613b      	str	r3, [r7, #16]
 800cc00:	e002      	b.n	800cc08 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800cc08:	693a      	ldr	r2, [r7, #16]
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d102      	bne.n	800cc16 <ip4_input+0x13a>
        netif = netif->next;
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d1c4      	bne.n	800cba6 <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800cc1c:	4b4d      	ldr	r3, [pc, #308]	; (800cd54 <ip4_input+0x278>)
 800cc1e:	691b      	ldr	r3, [r3, #16]
 800cc20:	6839      	ldr	r1, [r7, #0]
 800cc22:	4618      	mov	r0, r3
 800cc24:	f000 f96c 	bl	800cf00 <ip4_addr_isbroadcast_u32>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d105      	bne.n	800cc3a <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800cc2e:	4b49      	ldr	r3, [pc, #292]	; (800cd54 <ip4_input+0x278>)
 800cc30:	691b      	ldr	r3, [r3, #16]
 800cc32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800cc36:	2be0      	cmp	r3, #224	; 0xe0
 800cc38:	d104      	bne.n	800cc44 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f7f8 ff48 	bl	8005ad0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800cc40:	2300      	movs	r3, #0
 800cc42:	e083      	b.n	800cd4c <ip4_input+0x270>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d104      	bne.n	800cc54 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f7f8 ff40 	bl	8005ad0 <pbuf_free>
    return ERR_OK;
 800cc50:	2300      	movs	r3, #0
 800cc52:	e07b      	b.n	800cd4c <ip4_input+0x270>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	88db      	ldrh	r3, [r3, #6]
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800cc60:	4013      	ands	r3, r2
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d00b      	beq.n	800cc7e <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f000 fc8e 	bl	800d588 <ip4_reass>
 800cc6c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d101      	bne.n	800cc78 <ip4_input+0x19c>
      return ERR_OK;
 800cc74:	2300      	movs	r3, #0
 800cc76:	e069      	b.n	800cd4c <ip4_input+0x270>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800cc7e:	4a35      	ldr	r2, [pc, #212]	; (800cd54 <ip4_input+0x278>)
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800cc84:	4a33      	ldr	r2, [pc, #204]	; (800cd54 <ip4_input+0x278>)
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800cc8a:	4a32      	ldr	r2, [pc, #200]	; (800cd54 <ip4_input+0x278>)
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	b29b      	uxth	r3, r3
 800cc96:	f003 030f 	and.w	r3, r3, #15
 800cc9a:	b29b      	uxth	r3, r3
 800cc9c:	009b      	lsls	r3, r3, #2
 800cc9e:	b29a      	uxth	r2, r3
 800cca0:	4b2c      	ldr	r3, [pc, #176]	; (800cd54 <ip4_input+0x278>)
 800cca2:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800cca4:	897b      	ldrh	r3, [r7, #10]
 800cca6:	425b      	negs	r3, r3
 800cca8:	b29b      	uxth	r3, r3
 800ccaa:	b21b      	sxth	r3, r3
 800ccac:	4619      	mov	r1, r3
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f7f8 feea 	bl	8005a88 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	7a5b      	ldrb	r3, [r3, #9]
 800ccb8:	2b11      	cmp	r3, #17
 800ccba:	d006      	beq.n	800ccca <ip4_input+0x1ee>
 800ccbc:	2b11      	cmp	r3, #17
 800ccbe:	dc13      	bgt.n	800cce8 <ip4_input+0x20c>
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	d00c      	beq.n	800ccde <ip4_input+0x202>
 800ccc4:	2b06      	cmp	r3, #6
 800ccc6:	d005      	beq.n	800ccd4 <ip4_input+0x1f8>
 800ccc8:	e00e      	b.n	800cce8 <ip4_input+0x20c>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800ccca:	6839      	ldr	r1, [r7, #0]
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f7fe fce3 	bl	800b698 <udp_input>
      break;
 800ccd2:	e028      	b.n	800cd26 <ip4_input+0x24a>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800ccd4:	6839      	ldr	r1, [r7, #0]
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f7fa fd9a 	bl	8007810 <tcp_input>
      break;
 800ccdc:	e023      	b.n	800cd26 <ip4_input+0x24a>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800ccde:	6839      	ldr	r1, [r7, #0]
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f7ff fd03 	bl	800c6ec <icmp_input>
      break;
 800cce6:	e01e      	b.n	800cd26 <ip4_input+0x24a>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800cce8:	4b1a      	ldr	r3, [pc, #104]	; (800cd54 <ip4_input+0x278>)
 800ccea:	695b      	ldr	r3, [r3, #20]
 800ccec:	6939      	ldr	r1, [r7, #16]
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f000 f906 	bl	800cf00 <ip4_addr_isbroadcast_u32>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d112      	bne.n	800cd20 <ip4_input+0x244>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ccfa:	4b16      	ldr	r3, [pc, #88]	; (800cd54 <ip4_input+0x278>)
 800ccfc:	695b      	ldr	r3, [r3, #20]
 800ccfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800cd02:	2be0      	cmp	r3, #224	; 0xe0
 800cd04:	d00c      	beq.n	800cd20 <ip4_input+0x244>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800cd06:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f7f8 fecd 	bl	8005aac <pbuf_header_force>
        p->payload = iphdr;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	697a      	ldr	r2, [r7, #20]
 800cd16:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800cd18:	2102      	movs	r1, #2
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f7ff fdec 	bl	800c8f8 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f7f8 fed5 	bl	8005ad0 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800cd26:	4b0b      	ldr	r3, [pc, #44]	; (800cd54 <ip4_input+0x278>)
 800cd28:	2200      	movs	r2, #0
 800cd2a:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800cd2c:	4b09      	ldr	r3, [pc, #36]	; (800cd54 <ip4_input+0x278>)
 800cd2e:	2200      	movs	r2, #0
 800cd30:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800cd32:	4b08      	ldr	r3, [pc, #32]	; (800cd54 <ip4_input+0x278>)
 800cd34:	2200      	movs	r2, #0
 800cd36:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800cd38:	4b06      	ldr	r3, [pc, #24]	; (800cd54 <ip4_input+0x278>)
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800cd3e:	4b05      	ldr	r3, [pc, #20]	; (800cd54 <ip4_input+0x278>)
 800cd40:	2200      	movs	r2, #0
 800cd42:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800cd44:	4b03      	ldr	r3, [pc, #12]	; (800cd54 <ip4_input+0x278>)
 800cd46:	2200      	movs	r2, #0
 800cd48:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800cd4a:	2300      	movs	r3, #0
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3718      	adds	r7, #24
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}
 800cd54:	2000378c 	.word	0x2000378c
 800cd58:	20006cac 	.word	0x20006cac

0800cd5c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b08a      	sub	sp, #40	; 0x28
 800cd60:	af04      	add	r7, sp, #16
 800cd62:	60f8      	str	r0, [r7, #12]
 800cd64:	60b9      	str	r1, [r7, #8]
 800cd66:	607a      	str	r2, [r7, #4]
 800cd68:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d009      	beq.n	800cd88 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d003      	beq.n	800cd82 <ip4_output_if+0x26>
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d102      	bne.n	800cd88 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800cd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd84:	3304      	adds	r3, #4
 800cd86:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800cd88:	78fa      	ldrb	r2, [r7, #3]
 800cd8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd8c:	9302      	str	r3, [sp, #8]
 800cd8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cd92:	9301      	str	r3, [sp, #4]
 800cd94:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cd98:	9300      	str	r3, [sp, #0]
 800cd9a:	4613      	mov	r3, r2
 800cd9c:	687a      	ldr	r2, [r7, #4]
 800cd9e:	6979      	ldr	r1, [r7, #20]
 800cda0:	68f8      	ldr	r0, [r7, #12]
 800cda2:	f000 f805 	bl	800cdb0 <ip4_output_if_src>
 800cda6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3718      	adds	r7, #24
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b088      	sub	sp, #32
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	60f8      	str	r0, [r7, #12]
 800cdb8:	60b9      	str	r1, [r7, #8]
 800cdba:	607a      	str	r2, [r7, #4]
 800cdbc:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	89db      	ldrh	r3, [r3, #14]
 800cdc2:	2b01      	cmp	r3, #1
 800cdc4:	d006      	beq.n	800cdd4 <ip4_output_if_src+0x24>
 800cdc6:	4b48      	ldr	r3, [pc, #288]	; (800cee8 <ip4_output_if_src+0x138>)
 800cdc8:	f240 3233 	movw	r2, #819	; 0x333
 800cdcc:	4947      	ldr	r1, [pc, #284]	; (800ceec <ip4_output_if_src+0x13c>)
 800cdce:	4848      	ldr	r0, [pc, #288]	; (800cef0 <ip4_output_if_src+0x140>)
 800cdd0:	f000 ffcc 	bl	800dd6c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d060      	beq.n	800ce9c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800cdda:	2314      	movs	r3, #20
 800cddc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800cdde:	2114      	movs	r1, #20
 800cde0:	68f8      	ldr	r0, [r7, #12]
 800cde2:	f7f8 fe51 	bl	8005a88 <pbuf_header>
 800cde6:	4603      	mov	r3, r0
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d002      	beq.n	800cdf2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800cdec:	f06f 0301 	mvn.w	r3, #1
 800cdf0:	e075      	b.n	800cede <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	685b      	ldr	r3, [r3, #4]
 800cdf6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	895b      	ldrh	r3, [r3, #10]
 800cdfc:	2b13      	cmp	r3, #19
 800cdfe:	d806      	bhi.n	800ce0e <ip4_output_if_src+0x5e>
 800ce00:	4b39      	ldr	r3, [pc, #228]	; (800cee8 <ip4_output_if_src+0x138>)
 800ce02:	f44f 7258 	mov.w	r2, #864	; 0x360
 800ce06:	493b      	ldr	r1, [pc, #236]	; (800cef4 <ip4_output_if_src+0x144>)
 800ce08:	4839      	ldr	r0, [pc, #228]	; (800cef0 <ip4_output_if_src+0x140>)
 800ce0a:	f000 ffaf 	bl	800dd6c <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800ce0e:	69fb      	ldr	r3, [r7, #28]
 800ce10:	78fa      	ldrb	r2, [r7, #3]
 800ce12:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ce14:	69fb      	ldr	r3, [r7, #28]
 800ce16:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ce1a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681a      	ldr	r2, [r3, #0]
 800ce20:	69fb      	ldr	r3, [r7, #28]
 800ce22:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ce24:	8b7b      	ldrh	r3, [r7, #26]
 800ce26:	089b      	lsrs	r3, r3, #2
 800ce28:	b29b      	uxth	r3, r3
 800ce2a:	b2db      	uxtb	r3, r3
 800ce2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce30:	b2da      	uxtb	r2, r3
 800ce32:	69fb      	ldr	r3, [r7, #28]
 800ce34:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ce36:	69fb      	ldr	r3, [r7, #28]
 800ce38:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ce3c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	891b      	ldrh	r3, [r3, #8]
 800ce42:	4618      	mov	r0, r3
 800ce44:	f7f7 fd17 	bl	8004876 <lwip_htons>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	461a      	mov	r2, r3
 800ce4c:	69fb      	ldr	r3, [r7, #28]
 800ce4e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ce50:	69fb      	ldr	r3, [r7, #28]
 800ce52:	2200      	movs	r2, #0
 800ce54:	719a      	strb	r2, [r3, #6]
 800ce56:	2200      	movs	r2, #0
 800ce58:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ce5a:	4b27      	ldr	r3, [pc, #156]	; (800cef8 <ip4_output_if_src+0x148>)
 800ce5c:	881b      	ldrh	r3, [r3, #0]
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7f7 fd09 	bl	8004876 <lwip_htons>
 800ce64:	4603      	mov	r3, r0
 800ce66:	461a      	mov	r2, r3
 800ce68:	69fb      	ldr	r3, [r7, #28]
 800ce6a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ce6c:	4b22      	ldr	r3, [pc, #136]	; (800cef8 <ip4_output_if_src+0x148>)
 800ce6e:	881b      	ldrh	r3, [r3, #0]
 800ce70:	3301      	adds	r3, #1
 800ce72:	b29a      	uxth	r2, r3
 800ce74:	4b20      	ldr	r3, [pc, #128]	; (800cef8 <ip4_output_if_src+0x148>)
 800ce76:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d104      	bne.n	800ce88 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ce7e:	4b1f      	ldr	r3, [pc, #124]	; (800cefc <ip4_output_if_src+0x14c>)
 800ce80:	681a      	ldr	r2, [r3, #0]
 800ce82:	69fb      	ldr	r3, [r7, #28]
 800ce84:	60da      	str	r2, [r3, #12]
 800ce86:	e003      	b.n	800ce90 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	681a      	ldr	r2, [r3, #0]
 800ce8c:	69fb      	ldr	r3, [r7, #28]
 800ce8e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ce90:	69fb      	ldr	r3, [r7, #28]
 800ce92:	2200      	movs	r2, #0
 800ce94:	729a      	strb	r2, [r3, #10]
 800ce96:	2200      	movs	r2, #0
 800ce98:	72da      	strb	r2, [r3, #11]
 800ce9a:	e008      	b.n	800ceae <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	685b      	ldr	r3, [r3, #4]
 800cea0:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800cea2:	69fb      	ldr	r3, [r7, #28]
 800cea4:	691b      	ldr	r3, [r3, #16]
 800cea6:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800cea8:	f107 0314 	add.w	r3, r7, #20
 800ceac:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ceae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d00c      	beq.n	800ced0 <ip4_output_if_src+0x120>
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	891a      	ldrh	r2, [r3, #8]
 800ceba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cebc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d906      	bls.n	800ced0 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800cec2:	687a      	ldr	r2, [r7, #4]
 800cec4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cec6:	68f8      	ldr	r0, [r7, #12]
 800cec8:	f000 fd0a 	bl	800d8e0 <ip4_frag>
 800cecc:	4603      	mov	r3, r0
 800cece:	e006      	b.n	800cede <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800ced0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced2:	695b      	ldr	r3, [r3, #20]
 800ced4:	687a      	ldr	r2, [r7, #4]
 800ced6:	68f9      	ldr	r1, [r7, #12]
 800ced8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ceda:	4798      	blx	r3
 800cedc:	4603      	mov	r3, r0
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3720      	adds	r7, #32
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop
 800cee8:	0801062c 	.word	0x0801062c
 800ceec:	08010660 	.word	0x08010660
 800cef0:	0801066c 	.word	0x0801066c
 800cef4:	08010694 	.word	0x08010694
 800cef8:	200001fe 	.word	0x200001fe
 800cefc:	08010a30 	.word	0x08010a30

0800cf00 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b085      	sub	sp, #20
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf14:	d002      	beq.n	800cf1c <ip4_addr_isbroadcast_u32+0x1c>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d101      	bne.n	800cf20 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	e02a      	b.n	800cf76 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cf26:	f003 0302 	and.w	r3, r3, #2
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d101      	bne.n	800cf32 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	e021      	b.n	800cf76 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	3304      	adds	r3, #4
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	687a      	ldr	r2, [r7, #4]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d101      	bne.n	800cf42 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	e019      	b.n	800cf76 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800cf42:	68fa      	ldr	r2, [r7, #12]
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	3304      	adds	r3, #4
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	405a      	eors	r2, r3
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	3308      	adds	r3, #8
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	4013      	ands	r3, r2
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d10d      	bne.n	800cf74 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	3308      	adds	r3, #8
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	43da      	mvns	r2, r3
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	3308      	adds	r3, #8
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d101      	bne.n	800cf74 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800cf70:	2301      	movs	r3, #1
 800cf72:	e000      	b.n	800cf76 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800cf74:	2300      	movs	r3, #0
  }
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3714      	adds	r7, #20
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bc80      	pop	{r7}
 800cf7e:	4770      	bx	lr

0800cf80 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b084      	sub	sp, #16
 800cf84:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800cf86:	2300      	movs	r3, #0
 800cf88:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800cf8a:	4b12      	ldr	r3, [pc, #72]	; (800cfd4 <ip_reass_tmr+0x54>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800cf90:	e018      	b.n	800cfc4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	7fdb      	ldrb	r3, [r3, #31]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d00b      	beq.n	800cfb2 <ip_reass_tmr+0x32>
      r->timer--;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	7fdb      	ldrb	r3, [r3, #31]
 800cf9e:	3b01      	subs	r3, #1
 800cfa0:	b2da      	uxtb	r2, r3
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	60fb      	str	r3, [r7, #12]
 800cfb0:	e008      	b.n	800cfc4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800cfbc:	68b9      	ldr	r1, [r7, #8]
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f000 f80a 	bl	800cfd8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d1e3      	bne.n	800cf92 <ip_reass_tmr+0x12>
     }
   }
}
 800cfca:	bf00      	nop
 800cfcc:	bf00      	nop
 800cfce:	3710      	adds	r7, #16
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}
 800cfd4:	20000200 	.word	0x20000200

0800cfd8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b088      	sub	sp, #32
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800cfe6:	683a      	ldr	r2, [r7, #0]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d105      	bne.n	800cffa <ip_reass_free_complete_datagram+0x22>
 800cfee:	4b45      	ldr	r3, [pc, #276]	; (800d104 <ip_reass_free_complete_datagram+0x12c>)
 800cff0:	22ab      	movs	r2, #171	; 0xab
 800cff2:	4945      	ldr	r1, [pc, #276]	; (800d108 <ip_reass_free_complete_datagram+0x130>)
 800cff4:	4845      	ldr	r0, [pc, #276]	; (800d10c <ip_reass_free_complete_datagram+0x134>)
 800cff6:	f000 feb9 	bl	800dd6c <iprintf>
  if (prev != NULL) {
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d00a      	beq.n	800d016 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	687a      	ldr	r2, [r7, #4]
 800d006:	429a      	cmp	r2, r3
 800d008:	d005      	beq.n	800d016 <ip_reass_free_complete_datagram+0x3e>
 800d00a:	4b3e      	ldr	r3, [pc, #248]	; (800d104 <ip_reass_free_complete_datagram+0x12c>)
 800d00c:	22ad      	movs	r2, #173	; 0xad
 800d00e:	4940      	ldr	r1, [pc, #256]	; (800d110 <ip_reass_free_complete_datagram+0x138>)
 800d010:	483e      	ldr	r0, [pc, #248]	; (800d10c <ip_reass_free_complete_datagram+0x134>)
 800d012:	f000 feab 	bl	800dd6c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	685b      	ldr	r3, [r3, #4]
 800d01a:	685b      	ldr	r3, [r3, #4]
 800d01c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	889b      	ldrh	r3, [r3, #4]
 800d022:	b29b      	uxth	r3, r3
 800d024:	2b00      	cmp	r3, #0
 800d026:	d12a      	bne.n	800d07e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d036:	69bb      	ldr	r3, [r7, #24]
 800d038:	6858      	ldr	r0, [r3, #4]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	3308      	adds	r3, #8
 800d03e:	2214      	movs	r2, #20
 800d040:	4619      	mov	r1, r3
 800d042:	f000 fe7d 	bl	800dd40 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d046:	2101      	movs	r1, #1
 800d048:	69b8      	ldr	r0, [r7, #24]
 800d04a:	f7ff fc65 	bl	800c918 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d04e:	69b8      	ldr	r0, [r7, #24]
 800d050:	f7f8 fdd2 	bl	8005bf8 <pbuf_clen>
 800d054:	4603      	mov	r3, r0
 800d056:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d058:	8bfa      	ldrh	r2, [r7, #30]
 800d05a:	8a7b      	ldrh	r3, [r7, #18]
 800d05c:	4413      	add	r3, r2
 800d05e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d062:	db05      	blt.n	800d070 <ip_reass_free_complete_datagram+0x98>
 800d064:	4b27      	ldr	r3, [pc, #156]	; (800d104 <ip_reass_free_complete_datagram+0x12c>)
 800d066:	22bc      	movs	r2, #188	; 0xbc
 800d068:	492a      	ldr	r1, [pc, #168]	; (800d114 <ip_reass_free_complete_datagram+0x13c>)
 800d06a:	4828      	ldr	r0, [pc, #160]	; (800d10c <ip_reass_free_complete_datagram+0x134>)
 800d06c:	f000 fe7e 	bl	800dd6c <iprintf>
    pbufs_freed += clen;
 800d070:	8bfa      	ldrh	r2, [r7, #30]
 800d072:	8a7b      	ldrh	r3, [r7, #18]
 800d074:	4413      	add	r3, r2
 800d076:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d078:	69b8      	ldr	r0, [r7, #24]
 800d07a:	f7f8 fd29 	bl	8005ad0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	685b      	ldr	r3, [r3, #4]
 800d082:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d084:	e01f      	b.n	800d0c6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d086:	69bb      	ldr	r3, [r7, #24]
 800d088:	685b      	ldr	r3, [r3, #4]
 800d08a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d08c:	69bb      	ldr	r3, [r7, #24]
 800d08e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d096:	68f8      	ldr	r0, [r7, #12]
 800d098:	f7f8 fdae 	bl	8005bf8 <pbuf_clen>
 800d09c:	4603      	mov	r3, r0
 800d09e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d0a0:	8bfa      	ldrh	r2, [r7, #30]
 800d0a2:	8a7b      	ldrh	r3, [r7, #18]
 800d0a4:	4413      	add	r3, r2
 800d0a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0aa:	db05      	blt.n	800d0b8 <ip_reass_free_complete_datagram+0xe0>
 800d0ac:	4b15      	ldr	r3, [pc, #84]	; (800d104 <ip_reass_free_complete_datagram+0x12c>)
 800d0ae:	22cc      	movs	r2, #204	; 0xcc
 800d0b0:	4918      	ldr	r1, [pc, #96]	; (800d114 <ip_reass_free_complete_datagram+0x13c>)
 800d0b2:	4816      	ldr	r0, [pc, #88]	; (800d10c <ip_reass_free_complete_datagram+0x134>)
 800d0b4:	f000 fe5a 	bl	800dd6c <iprintf>
    pbufs_freed += clen;
 800d0b8:	8bfa      	ldrh	r2, [r7, #30]
 800d0ba:	8a7b      	ldrh	r3, [r7, #18]
 800d0bc:	4413      	add	r3, r2
 800d0be:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d0c0:	68f8      	ldr	r0, [r7, #12]
 800d0c2:	f7f8 fd05 	bl	8005ad0 <pbuf_free>
  while (p != NULL) {
 800d0c6:	69bb      	ldr	r3, [r7, #24]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d1dc      	bne.n	800d086 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d0cc:	6839      	ldr	r1, [r7, #0]
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f000 f8c2 	bl	800d258 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800d0d4:	4b10      	ldr	r3, [pc, #64]	; (800d118 <ip_reass_free_complete_datagram+0x140>)
 800d0d6:	881b      	ldrh	r3, [r3, #0]
 800d0d8:	8bfa      	ldrh	r2, [r7, #30]
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d905      	bls.n	800d0ea <ip_reass_free_complete_datagram+0x112>
 800d0de:	4b09      	ldr	r3, [pc, #36]	; (800d104 <ip_reass_free_complete_datagram+0x12c>)
 800d0e0:	22d2      	movs	r2, #210	; 0xd2
 800d0e2:	490e      	ldr	r1, [pc, #56]	; (800d11c <ip_reass_free_complete_datagram+0x144>)
 800d0e4:	4809      	ldr	r0, [pc, #36]	; (800d10c <ip_reass_free_complete_datagram+0x134>)
 800d0e6:	f000 fe41 	bl	800dd6c <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800d0ea:	4b0b      	ldr	r3, [pc, #44]	; (800d118 <ip_reass_free_complete_datagram+0x140>)
 800d0ec:	881a      	ldrh	r2, [r3, #0]
 800d0ee:	8bfb      	ldrh	r3, [r7, #30]
 800d0f0:	1ad3      	subs	r3, r2, r3
 800d0f2:	b29a      	uxth	r2, r3
 800d0f4:	4b08      	ldr	r3, [pc, #32]	; (800d118 <ip_reass_free_complete_datagram+0x140>)
 800d0f6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d0f8:	8bfb      	ldrh	r3, [r7, #30]
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3720      	adds	r7, #32
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop
 800d104:	080106c4 	.word	0x080106c4
 800d108:	08010700 	.word	0x08010700
 800d10c:	0801070c 	.word	0x0801070c
 800d110:	08010734 	.word	0x08010734
 800d114:	08010748 	.word	0x08010748
 800d118:	20000204 	.word	0x20000204
 800d11c:	08010768 	.word	0x08010768

0800d120 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b08a      	sub	sp, #40	; 0x28
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d12a:	2300      	movs	r3, #0
 800d12c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d12e:	2300      	movs	r3, #0
 800d130:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d132:	2300      	movs	r3, #0
 800d134:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d136:	2300      	movs	r3, #0
 800d138:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d13a:	2300      	movs	r3, #0
 800d13c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d13e:	4b28      	ldr	r3, [pc, #160]	; (800d1e0 <ip_reass_remove_oldest_datagram+0xc0>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d144:	e030      	b.n	800d1a8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d148:	695a      	ldr	r2, [r3, #20]
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	68db      	ldr	r3, [r3, #12]
 800d14e:	429a      	cmp	r2, r3
 800d150:	d10c      	bne.n	800d16c <ip_reass_remove_oldest_datagram+0x4c>
 800d152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d154:	699a      	ldr	r2, [r3, #24]
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	691b      	ldr	r3, [r3, #16]
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d106      	bne.n	800d16c <ip_reass_remove_oldest_datagram+0x4c>
 800d15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d160:	899a      	ldrh	r2, [r3, #12]
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	889b      	ldrh	r3, [r3, #4]
 800d166:	b29b      	uxth	r3, r3
 800d168:	429a      	cmp	r2, r3
 800d16a:	d014      	beq.n	800d196 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	3301      	adds	r3, #1
 800d170:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d172:	6a3b      	ldr	r3, [r7, #32]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d104      	bne.n	800d182 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d17c:	69fb      	ldr	r3, [r7, #28]
 800d17e:	61bb      	str	r3, [r7, #24]
 800d180:	e009      	b.n	800d196 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d184:	7fda      	ldrb	r2, [r3, #31]
 800d186:	6a3b      	ldr	r3, [r7, #32]
 800d188:	7fdb      	ldrb	r3, [r3, #31]
 800d18a:	429a      	cmp	r2, r3
 800d18c:	d803      	bhi.n	800d196 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d190:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d192:	69fb      	ldr	r3, [r7, #28]
 800d194:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d001      	beq.n	800d1a2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d1cb      	bne.n	800d146 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d1ae:	6a3b      	ldr	r3, [r7, #32]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d008      	beq.n	800d1c6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d1b4:	69b9      	ldr	r1, [r7, #24]
 800d1b6:	6a38      	ldr	r0, [r7, #32]
 800d1b8:	f7ff ff0e 	bl	800cfd8 <ip_reass_free_complete_datagram>
 800d1bc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d1be:	697a      	ldr	r2, [r7, #20]
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	4413      	add	r3, r2
 800d1c4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d1c6:	697a      	ldr	r2, [r7, #20]
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	da02      	bge.n	800d1d4 <ip_reass_remove_oldest_datagram+0xb4>
 800d1ce:	693b      	ldr	r3, [r7, #16]
 800d1d0:	2b01      	cmp	r3, #1
 800d1d2:	dcac      	bgt.n	800d12e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d1d4:	697b      	ldr	r3, [r7, #20]
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3728      	adds	r7, #40	; 0x28
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}
 800d1de:	bf00      	nop
 800d1e0:	20000200 	.word	0x20000200

0800d1e4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b084      	sub	sp, #16
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
 800d1ec:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d1ee:	2004      	movs	r0, #4
 800d1f0:	f7f7 feea 	bl	8004fc8 <memp_malloc>
 800d1f4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d110      	bne.n	800d21e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d1fc:	6839      	ldr	r1, [r7, #0]
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f7ff ff8e 	bl	800d120 <ip_reass_remove_oldest_datagram>
 800d204:	4602      	mov	r2, r0
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	4293      	cmp	r3, r2
 800d20a:	dc03      	bgt.n	800d214 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d20c:	2004      	movs	r0, #4
 800d20e:	f7f7 fedb 	bl	8004fc8 <memp_malloc>
 800d212:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d101      	bne.n	800d21e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800d21a:	2300      	movs	r3, #0
 800d21c:	e016      	b.n	800d24c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d21e:	2220      	movs	r2, #32
 800d220:	2100      	movs	r1, #0
 800d222:	68f8      	ldr	r0, [r7, #12]
 800d224:	f000 fd9a 	bl	800dd5c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2203      	movs	r2, #3
 800d22c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d22e:	4b09      	ldr	r3, [pc, #36]	; (800d254 <ip_reass_enqueue_new_datagram+0x70>)
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d236:	4a07      	ldr	r2, [pc, #28]	; (800d254 <ip_reass_enqueue_new_datagram+0x70>)
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	3308      	adds	r3, #8
 800d240:	2214      	movs	r2, #20
 800d242:	6879      	ldr	r1, [r7, #4]
 800d244:	4618      	mov	r0, r3
 800d246:	f000 fd7b 	bl	800dd40 <memcpy>
  return ipr;
 800d24a:	68fb      	ldr	r3, [r7, #12]
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	3710      	adds	r7, #16
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}
 800d254:	20000200 	.word	0x20000200

0800d258 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b082      	sub	sp, #8
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d262:	4b10      	ldr	r3, [pc, #64]	; (800d2a4 <ip_reass_dequeue_datagram+0x4c>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	687a      	ldr	r2, [r7, #4]
 800d268:	429a      	cmp	r2, r3
 800d26a:	d104      	bne.n	800d276 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4a0c      	ldr	r2, [pc, #48]	; (800d2a4 <ip_reass_dequeue_datagram+0x4c>)
 800d272:	6013      	str	r3, [r2, #0]
 800d274:	e00d      	b.n	800d292 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d106      	bne.n	800d28a <ip_reass_dequeue_datagram+0x32>
 800d27c:	4b0a      	ldr	r3, [pc, #40]	; (800d2a8 <ip_reass_dequeue_datagram+0x50>)
 800d27e:	f240 1245 	movw	r2, #325	; 0x145
 800d282:	490a      	ldr	r1, [pc, #40]	; (800d2ac <ip_reass_dequeue_datagram+0x54>)
 800d284:	480a      	ldr	r0, [pc, #40]	; (800d2b0 <ip_reass_dequeue_datagram+0x58>)
 800d286:	f000 fd71 	bl	800dd6c <iprintf>
    prev->next = ipr->next;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681a      	ldr	r2, [r3, #0]
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d292:	6879      	ldr	r1, [r7, #4]
 800d294:	2004      	movs	r0, #4
 800d296:	f7f7 fee3 	bl	8005060 <memp_free>
}
 800d29a:	bf00      	nop
 800d29c:	3708      	adds	r7, #8
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
 800d2a2:	bf00      	nop
 800d2a4:	20000200 	.word	0x20000200
 800d2a8:	080106c4 	.word	0x080106c4
 800d2ac:	08010784 	.word	0x08010784
 800d2b0:	0801070c 	.word	0x0801070c

0800d2b4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b08c      	sub	sp, #48	; 0x30
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	60f8      	str	r0, [r7, #12]
 800d2bc:	60b9      	str	r1, [r7, #8]
 800d2be:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800d2c8:	68bb      	ldr	r3, [r7, #8]
 800d2ca:	685b      	ldr	r3, [r3, #4]
 800d2cc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800d2ce:	69fb      	ldr	r3, [r7, #28]
 800d2d0:	885b      	ldrh	r3, [r3, #2]
 800d2d2:	b29b      	uxth	r3, r3
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f7f7 face 	bl	8004876 <lwip_htons>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	461a      	mov	r2, r3
 800d2de:	69fb      	ldr	r3, [r7, #28]
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	b29b      	uxth	r3, r3
 800d2e4:	f003 030f 	and.w	r3, r3, #15
 800d2e8:	b29b      	uxth	r3, r3
 800d2ea:	009b      	lsls	r3, r3, #2
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	1ad3      	subs	r3, r2, r3
 800d2f0:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800d2f2:	69fb      	ldr	r3, [r7, #28]
 800d2f4:	88db      	ldrh	r3, [r3, #6]
 800d2f6:	b29b      	uxth	r3, r3
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f7f7 fabc 	bl	8004876 <lwip_htons>
 800d2fe:	4603      	mov	r3, r0
 800d300:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d304:	b29b      	uxth	r3, r3
 800d306:	00db      	lsls	r3, r3, #3
 800d308:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	685b      	ldr	r3, [r3, #4]
 800d30e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800d310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d312:	2200      	movs	r2, #0
 800d314:	701a      	strb	r2, [r3, #0]
 800d316:	2200      	movs	r2, #0
 800d318:	705a      	strb	r2, [r3, #1]
 800d31a:	2200      	movs	r2, #0
 800d31c:	709a      	strb	r2, [r3, #2]
 800d31e:	2200      	movs	r2, #0
 800d320:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d324:	8b3a      	ldrh	r2, [r7, #24]
 800d326:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800d328:	8b3a      	ldrh	r2, [r7, #24]
 800d32a:	8b7b      	ldrh	r3, [r7, #26]
 800d32c:	4413      	add	r3, r2
 800d32e:	b29a      	uxth	r2, r3
 800d330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d332:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	627b      	str	r3, [r7, #36]	; 0x24
 800d33a:	e061      	b.n	800d400 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800d33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33e:	685b      	ldr	r3, [r3, #4]
 800d340:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800d342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d344:	889b      	ldrh	r3, [r3, #4]
 800d346:	b29a      	uxth	r2, r3
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	889b      	ldrh	r3, [r3, #4]
 800d34c:	b29b      	uxth	r3, r3
 800d34e:	429a      	cmp	r2, r3
 800d350:	d232      	bcs.n	800d3b8 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d356:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d01f      	beq.n	800d39e <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d360:	889b      	ldrh	r3, [r3, #4]
 800d362:	b29a      	uxth	r2, r3
 800d364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d366:	88db      	ldrh	r3, [r3, #6]
 800d368:	b29b      	uxth	r3, r3
 800d36a:	429a      	cmp	r2, r3
 800d36c:	f0c0 80e3 	bcc.w	800d536 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 800d370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d372:	88db      	ldrh	r3, [r3, #6]
 800d374:	b29a      	uxth	r2, r3
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	889b      	ldrh	r3, [r3, #4]
 800d37a:	b29b      	uxth	r3, r3
 800d37c:	429a      	cmp	r2, r3
 800d37e:	f200 80da 	bhi.w	800d536 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d384:	68ba      	ldr	r2, [r7, #8]
 800d386:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d38a:	88db      	ldrh	r3, [r3, #6]
 800d38c:	b29a      	uxth	r2, r3
 800d38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d390:	889b      	ldrh	r3, [r3, #4]
 800d392:	b29b      	uxth	r3, r3
 800d394:	429a      	cmp	r2, r3
 800d396:	d037      	beq.n	800d408 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d398:	2300      	movs	r3, #0
 800d39a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d39c:	e034      	b.n	800d408 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800d39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a0:	88db      	ldrh	r3, [r3, #6]
 800d3a2:	b29a      	uxth	r2, r3
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	889b      	ldrh	r3, [r3, #4]
 800d3a8:	b29b      	uxth	r3, r3
 800d3aa:	429a      	cmp	r2, r3
 800d3ac:	f200 80c5 	bhi.w	800d53a <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	68ba      	ldr	r2, [r7, #8]
 800d3b4:	605a      	str	r2, [r3, #4]
      break;
 800d3b6:	e027      	b.n	800d408 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800d3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ba:	889b      	ldrh	r3, [r3, #4]
 800d3bc:	b29a      	uxth	r2, r3
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	889b      	ldrh	r3, [r3, #4]
 800d3c2:	b29b      	uxth	r3, r3
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	f000 80ba 	beq.w	800d53e <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3cc:	889b      	ldrh	r3, [r3, #4]
 800d3ce:	b29a      	uxth	r2, r3
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	88db      	ldrh	r3, [r3, #6]
 800d3d4:	b29b      	uxth	r3, r3
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	f0c0 80b3 	bcc.w	800d542 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d009      	beq.n	800d3f6 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800d3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e4:	88db      	ldrh	r3, [r3, #6]
 800d3e6:	b29a      	uxth	r2, r3
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	889b      	ldrh	r3, [r3, #4]
 800d3ec:	b29b      	uxth	r3, r3
 800d3ee:	429a      	cmp	r2, r3
 800d3f0:	d001      	beq.n	800d3f6 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800d400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d402:	2b00      	cmp	r3, #0
 800d404:	d19a      	bne.n	800d33c <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800d406:	e000      	b.n	800d40a <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800d408:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d12d      	bne.n	800d46c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800d410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d412:	2b00      	cmp	r3, #0
 800d414:	d01c      	beq.n	800d450 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d418:	88db      	ldrh	r3, [r3, #6]
 800d41a:	b29a      	uxth	r2, r3
 800d41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41e:	889b      	ldrh	r3, [r3, #4]
 800d420:	b29b      	uxth	r3, r3
 800d422:	429a      	cmp	r2, r3
 800d424:	d906      	bls.n	800d434 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800d426:	4b51      	ldr	r3, [pc, #324]	; (800d56c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d428:	f240 12ab 	movw	r2, #427	; 0x1ab
 800d42c:	4950      	ldr	r1, [pc, #320]	; (800d570 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d42e:	4851      	ldr	r0, [pc, #324]	; (800d574 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d430:	f000 fc9c 	bl	800dd6c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800d434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d436:	68ba      	ldr	r2, [r7, #8]
 800d438:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d43c:	88db      	ldrh	r3, [r3, #6]
 800d43e:	b29a      	uxth	r2, r3
 800d440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d442:	889b      	ldrh	r3, [r3, #4]
 800d444:	b29b      	uxth	r3, r3
 800d446:	429a      	cmp	r2, r3
 800d448:	d010      	beq.n	800d46c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800d44a:	2300      	movs	r3, #0
 800d44c:	623b      	str	r3, [r7, #32]
 800d44e:	e00d      	b.n	800d46c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	685b      	ldr	r3, [r3, #4]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d006      	beq.n	800d466 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800d458:	4b44      	ldr	r3, [pc, #272]	; (800d56c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d45a:	f240 12b3 	movw	r2, #435	; 0x1b3
 800d45e:	4946      	ldr	r1, [pc, #280]	; (800d578 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d460:	4844      	ldr	r0, [pc, #272]	; (800d574 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d462:	f000 fc83 	bl	800dd6c <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	68ba      	ldr	r2, [r7, #8]
 800d46a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d105      	bne.n	800d47e <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	7f9b      	ldrb	r3, [r3, #30]
 800d476:	f003 0301 	and.w	r3, r3, #1
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d059      	beq.n	800d532 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800d47e:	6a3b      	ldr	r3, [r7, #32]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d04f      	beq.n	800d524 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	685b      	ldr	r3, [r3, #4]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d006      	beq.n	800d49a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	685b      	ldr	r3, [r3, #4]
 800d490:	685b      	ldr	r3, [r3, #4]
 800d492:	889b      	ldrh	r3, [r3, #4]
 800d494:	b29b      	uxth	r3, r3
 800d496:	2b00      	cmp	r3, #0
 800d498:	d002      	beq.n	800d4a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800d49a:	2300      	movs	r3, #0
 800d49c:	623b      	str	r3, [r7, #32]
 800d49e:	e041      	b.n	800d524 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800d4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800d4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d4aa:	e012      	b.n	800d4d2 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800d4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ae:	685b      	ldr	r3, [r3, #4]
 800d4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800d4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b4:	88db      	ldrh	r3, [r3, #6]
 800d4b6:	b29a      	uxth	r2, r3
 800d4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ba:	889b      	ldrh	r3, [r3, #4]
 800d4bc:	b29b      	uxth	r3, r3
 800d4be:	429a      	cmp	r2, r3
 800d4c0:	d002      	beq.n	800d4c8 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	623b      	str	r3, [r7, #32]
            break;
 800d4c6:	e007      	b.n	800d4d8 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800d4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ca:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800d4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d1e9      	bne.n	800d4ac <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800d4d8:	6a3b      	ldr	r3, [r7, #32]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d022      	beq.n	800d524 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	685b      	ldr	r3, [r3, #4]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d106      	bne.n	800d4f4 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800d4e6:	4b21      	ldr	r3, [pc, #132]	; (800d56c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d4e8:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800d4ec:	4923      	ldr	r1, [pc, #140]	; (800d57c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d4ee:	4821      	ldr	r0, [pc, #132]	; (800d574 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d4f0:	f000 fc3c 	bl	800dd6c <iprintf>
          LWIP_ASSERT("sanity check",
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	685b      	ldr	r3, [r3, #4]
 800d4f8:	685b      	ldr	r3, [r3, #4]
 800d4fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d106      	bne.n	800d50e <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800d500:	4b1a      	ldr	r3, [pc, #104]	; (800d56c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d502:	f240 12d5 	movw	r2, #469	; 0x1d5
 800d506:	491d      	ldr	r1, [pc, #116]	; (800d57c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d508:	481a      	ldr	r0, [pc, #104]	; (800d574 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d50a:	f000 fc2f 	bl	800dd6c <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d006      	beq.n	800d524 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800d516:	4b15      	ldr	r3, [pc, #84]	; (800d56c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d518:	f240 12d7 	movw	r2, #471	; 0x1d7
 800d51c:	4918      	ldr	r1, [pc, #96]	; (800d580 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d51e:	4815      	ldr	r0, [pc, #84]	; (800d574 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d520:	f000 fc24 	bl	800dd6c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800d524:	6a3b      	ldr	r3, [r7, #32]
 800d526:	2b00      	cmp	r3, #0
 800d528:	bf14      	ite	ne
 800d52a:	2301      	movne	r3, #1
 800d52c:	2300      	moveq	r3, #0
 800d52e:	b2db      	uxtb	r3, r3
 800d530:	e018      	b.n	800d564 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800d532:	2300      	movs	r3, #0
 800d534:	e016      	b.n	800d564 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
          goto freepbuf;
 800d536:	bf00      	nop
 800d538:	e004      	b.n	800d544 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 800d53a:	bf00      	nop
 800d53c:	e002      	b.n	800d544 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800d53e:	bf00      	nop
 800d540:	e000      	b.n	800d544 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800d542:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800d544:	68b8      	ldr	r0, [r7, #8]
 800d546:	f7f8 fb57 	bl	8005bf8 <pbuf_clen>
 800d54a:	4603      	mov	r3, r0
 800d54c:	461a      	mov	r2, r3
 800d54e:	4b0d      	ldr	r3, [pc, #52]	; (800d584 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d550:	881b      	ldrh	r3, [r3, #0]
 800d552:	1a9b      	subs	r3, r3, r2
 800d554:	b29a      	uxth	r2, r3
 800d556:	4b0b      	ldr	r3, [pc, #44]	; (800d584 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d558:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800d55a:	68b8      	ldr	r0, [r7, #8]
 800d55c:	f7f8 fab8 	bl	8005ad0 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d560:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800d564:	4618      	mov	r0, r3
 800d566:	3730      	adds	r7, #48	; 0x30
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}
 800d56c:	080106c4 	.word	0x080106c4
 800d570:	080107a0 	.word	0x080107a0
 800d574:	0801070c 	.word	0x0801070c
 800d578:	080107c0 	.word	0x080107c0
 800d57c:	080107f8 	.word	0x080107f8
 800d580:	08010808 	.word	0x08010808
 800d584:	20000204 	.word	0x20000204

0800d588 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b08e      	sub	sp, #56	; 0x38
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	685b      	ldr	r3, [r3, #4]
 800d594:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800d596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d598:	781b      	ldrb	r3, [r3, #0]
 800d59a:	f003 030f 	and.w	r3, r3, #15
 800d59e:	009b      	lsls	r3, r3, #2
 800d5a0:	2b14      	cmp	r3, #20
 800d5a2:	f040 8131 	bne.w	800d808 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800d5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a8:	88db      	ldrh	r3, [r3, #6]
 800d5aa:	b29b      	uxth	r3, r3
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f7f7 f962 	bl	8004876 <lwip_htons>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d5b8:	b29b      	uxth	r3, r3
 800d5ba:	00db      	lsls	r3, r3, #3
 800d5bc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800d5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5c0:	885b      	ldrh	r3, [r3, #2]
 800d5c2:	b29b      	uxth	r3, r3
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f7f7 f956 	bl	8004876 <lwip_htons>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	461a      	mov	r2, r3
 800d5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d0:	781b      	ldrb	r3, [r3, #0]
 800d5d2:	b29b      	uxth	r3, r3
 800d5d4:	f003 030f 	and.w	r3, r3, #15
 800d5d8:	b29b      	uxth	r3, r3
 800d5da:	009b      	lsls	r3, r3, #2
 800d5dc:	b29b      	uxth	r3, r3
 800d5de:	1ad3      	subs	r3, r2, r3
 800d5e0:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f7f8 fb08 	bl	8005bf8 <pbuf_clen>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d5ec:	4b8e      	ldr	r3, [pc, #568]	; (800d828 <ip4_reass+0x2a0>)
 800d5ee:	881b      	ldrh	r3, [r3, #0]
 800d5f0:	461a      	mov	r2, r3
 800d5f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d5f4:	4413      	add	r3, r2
 800d5f6:	2b0a      	cmp	r3, #10
 800d5f8:	dd10      	ble.n	800d61c <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d5fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d5fc:	4619      	mov	r1, r3
 800d5fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d600:	f7ff fd8e 	bl	800d120 <ip_reass_remove_oldest_datagram>
 800d604:	4603      	mov	r3, r0
 800d606:	2b00      	cmp	r3, #0
 800d608:	f000 8100 	beq.w	800d80c <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800d60c:	4b86      	ldr	r3, [pc, #536]	; (800d828 <ip4_reass+0x2a0>)
 800d60e:	881b      	ldrh	r3, [r3, #0]
 800d610:	461a      	mov	r2, r3
 800d612:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d614:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d616:	2b0a      	cmp	r3, #10
 800d618:	f300 80f8 	bgt.w	800d80c <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d61c:	4b83      	ldr	r3, [pc, #524]	; (800d82c <ip4_reass+0x2a4>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	633b      	str	r3, [r7, #48]	; 0x30
 800d622:	e015      	b.n	800d650 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d626:	695a      	ldr	r2, [r3, #20]
 800d628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d62a:	68db      	ldr	r3, [r3, #12]
 800d62c:	429a      	cmp	r2, r3
 800d62e:	d10c      	bne.n	800d64a <ip4_reass+0xc2>
 800d630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d632:	699a      	ldr	r2, [r3, #24]
 800d634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d636:	691b      	ldr	r3, [r3, #16]
 800d638:	429a      	cmp	r2, r3
 800d63a:	d106      	bne.n	800d64a <ip4_reass+0xc2>
 800d63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d63e:	899a      	ldrh	r2, [r3, #12]
 800d640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d642:	889b      	ldrh	r3, [r3, #4]
 800d644:	b29b      	uxth	r3, r3
 800d646:	429a      	cmp	r2, r3
 800d648:	d006      	beq.n	800d658 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	633b      	str	r3, [r7, #48]	; 0x30
 800d650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d652:	2b00      	cmp	r3, #0
 800d654:	d1e6      	bne.n	800d624 <ip4_reass+0x9c>
 800d656:	e000      	b.n	800d65a <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800d658:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800d65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d109      	bne.n	800d674 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800d660:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d662:	4619      	mov	r1, r3
 800d664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d666:	f7ff fdbd 	bl	800d1e4 <ip_reass_enqueue_new_datagram>
 800d66a:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800d66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d11c      	bne.n	800d6ac <ip4_reass+0x124>
      goto nullreturn;
 800d672:	e0d0      	b.n	800d816 <ip4_reass+0x28e>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d676:	88db      	ldrh	r3, [r3, #6]
 800d678:	b29b      	uxth	r3, r3
 800d67a:	4618      	mov	r0, r3
 800d67c:	f7f7 f8fb 	bl	8004876 <lwip_htons>
 800d680:	4603      	mov	r3, r0
 800d682:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d686:	2b00      	cmp	r3, #0
 800d688:	d110      	bne.n	800d6ac <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800d68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d68c:	89db      	ldrh	r3, [r3, #14]
 800d68e:	4618      	mov	r0, r3
 800d690:	f7f7 f8f1 	bl	8004876 <lwip_htons>
 800d694:	4603      	mov	r3, r0
 800d696:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d006      	beq.n	800d6ac <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800d69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a0:	3308      	adds	r3, #8
 800d6a2:	2214      	movs	r2, #20
 800d6a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f000 fb4a 	bl	800dd40 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ae:	88db      	ldrh	r3, [r3, #6]
 800d6b0:	b29b      	uxth	r3, r3
 800d6b2:	f003 0320 	and.w	r3, r3, #32
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	bf0c      	ite	eq
 800d6ba:	2301      	moveq	r3, #1
 800d6bc:	2300      	movne	r3, #0
 800d6be:	b2db      	uxtb	r3, r3
 800d6c0:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800d6c2:	69fb      	ldr	r3, [r7, #28]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d00e      	beq.n	800d6e6 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800d6c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d6ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d6cc:	4413      	add	r3, r2
 800d6ce:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d6d0:	8b7a      	ldrh	r2, [r7, #26]
 800d6d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	f0c0 809b 	bcc.w	800d810 <ip4_reass+0x288>
 800d6da:	8b7b      	ldrh	r3, [r7, #26]
 800d6dc:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800d6e0:	4293      	cmp	r3, r2
 800d6e2:	f200 8095 	bhi.w	800d810 <ip4_reass+0x288>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800d6e6:	69fa      	ldr	r2, [r7, #28]
 800d6e8:	6879      	ldr	r1, [r7, #4]
 800d6ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6ec:	f7ff fde2 	bl	800d2b4 <ip_reass_chain_frag_into_datagram_and_validate>
 800d6f0:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6f8:	f000 808c 	beq.w	800d814 <ip4_reass+0x28c>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d6fc:	4b4a      	ldr	r3, [pc, #296]	; (800d828 <ip4_reass+0x2a0>)
 800d6fe:	881a      	ldrh	r2, [r3, #0]
 800d700:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d702:	4413      	add	r3, r2
 800d704:	b29a      	uxth	r2, r3
 800d706:	4b48      	ldr	r3, [pc, #288]	; (800d828 <ip4_reass+0x2a0>)
 800d708:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800d70a:	69fb      	ldr	r3, [r7, #28]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d00d      	beq.n	800d72c <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800d710:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d712:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d714:	4413      	add	r3, r2
 800d716:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800d718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d71a:	8a7a      	ldrh	r2, [r7, #18]
 800d71c:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d720:	7f9b      	ldrb	r3, [r3, #30]
 800d722:	f043 0301 	orr.w	r3, r3, #1
 800d726:	b2da      	uxtb	r2, r3
 800d728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d72a:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d72c:	697b      	ldr	r3, [r7, #20]
 800d72e:	2b01      	cmp	r3, #1
 800d730:	d168      	bne.n	800d804 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800d732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d734:	8b9b      	ldrh	r3, [r3, #28]
 800d736:	3314      	adds	r3, #20
 800d738:	b29a      	uxth	r2, r3
 800d73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d73c:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800d73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d740:	685b      	ldr	r3, [r3, #4]
 800d742:	685b      	ldr	r3, [r3, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800d748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d74a:	685b      	ldr	r3, [r3, #4]
 800d74c:	685b      	ldr	r3, [r3, #4]
 800d74e:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d752:	3308      	adds	r3, #8
 800d754:	2214      	movs	r2, #20
 800d756:	4619      	mov	r1, r3
 800d758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d75a:	f000 faf1 	bl	800dd40 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800d75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d760:	8b9b      	ldrh	r3, [r3, #28]
 800d762:	4618      	mov	r0, r3
 800d764:	f7f7 f887 	bl	8004876 <lwip_htons>
 800d768:	4603      	mov	r3, r0
 800d76a:	461a      	mov	r2, r3
 800d76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d76e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800d770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d772:	2200      	movs	r2, #0
 800d774:	719a      	strb	r2, [r3, #6]
 800d776:	2200      	movs	r2, #0
 800d778:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800d77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d77c:	2200      	movs	r2, #0
 800d77e:	729a      	strb	r2, [r3, #10]
 800d780:	2200      	movs	r2, #0
 800d782:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800d784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800d78a:	e00e      	b.n	800d7aa <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800d78c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d78e:	685b      	ldr	r3, [r3, #4]
 800d790:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800d792:	f06f 0113 	mvn.w	r1, #19
 800d796:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d798:	f7f8 f976 	bl	8005a88 <pbuf_header>
      pbuf_cat(p, r);
 800d79c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f7f8 fa62 	bl	8005c68 <pbuf_cat>
      r = iprh->next_pbuf;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800d7aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d1ed      	bne.n	800d78c <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800d7b0:	4b1e      	ldr	r3, [pc, #120]	; (800d82c <ip4_reass+0x2a4>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d102      	bne.n	800d7c0 <ip4_reass+0x238>
      ipr_prev = NULL;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d7be:	e010      	b.n	800d7e2 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d7c0:	4b1a      	ldr	r3, [pc, #104]	; (800d82c <ip4_reass+0x2a4>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d7c6:	e007      	b.n	800d7d8 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800d7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d006      	beq.n	800d7e0 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d1f4      	bne.n	800d7c8 <ip4_reass+0x240>
 800d7de:	e000      	b.n	800d7e2 <ip4_reass+0x25a>
          break;
 800d7e0:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800d7e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d7e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7e6:	f7ff fd37 	bl	800d258 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f7f8 fa04 	bl	8005bf8 <pbuf_clen>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	4b0c      	ldr	r3, [pc, #48]	; (800d828 <ip4_reass+0x2a0>)
 800d7f6:	881b      	ldrh	r3, [r3, #0]
 800d7f8:	1a9b      	subs	r3, r3, r2
 800d7fa:	b29a      	uxth	r2, r3
 800d7fc:	4b0a      	ldr	r3, [pc, #40]	; (800d828 <ip4_reass+0x2a0>)
 800d7fe:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	e00c      	b.n	800d81e <ip4_reass+0x296>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800d804:	2300      	movs	r3, #0
 800d806:	e00a      	b.n	800d81e <ip4_reass+0x296>
    goto nullreturn;
 800d808:	bf00      	nop
 800d80a:	e004      	b.n	800d816 <ip4_reass+0x28e>
      goto nullreturn;
 800d80c:	bf00      	nop
 800d80e:	e002      	b.n	800d816 <ip4_reass+0x28e>
      goto nullreturn;
 800d810:	bf00      	nop
 800d812:	e000      	b.n	800d816 <ip4_reass+0x28e>
    goto nullreturn;
 800d814:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f7f8 f95a 	bl	8005ad0 <pbuf_free>
  return NULL;
 800d81c:	2300      	movs	r3, #0
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3738      	adds	r7, #56	; 0x38
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
 800d826:	bf00      	nop
 800d828:	20000204 	.word	0x20000204
 800d82c:	20000200 	.word	0x20000200

0800d830 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800d834:	2005      	movs	r0, #5
 800d836:	f7f7 fbc7 	bl	8004fc8 <memp_malloc>
 800d83a:	4603      	mov	r3, r0
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	bd80      	pop	{r7, pc}

0800d840 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b082      	sub	sp, #8
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d106      	bne.n	800d85c <ip_frag_free_pbuf_custom_ref+0x1c>
 800d84e:	4b07      	ldr	r3, [pc, #28]	; (800d86c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800d850:	f240 22ae 	movw	r2, #686	; 0x2ae
 800d854:	4906      	ldr	r1, [pc, #24]	; (800d870 <ip_frag_free_pbuf_custom_ref+0x30>)
 800d856:	4807      	ldr	r0, [pc, #28]	; (800d874 <ip_frag_free_pbuf_custom_ref+0x34>)
 800d858:	f000 fa88 	bl	800dd6c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800d85c:	6879      	ldr	r1, [r7, #4]
 800d85e:	2005      	movs	r0, #5
 800d860:	f7f7 fbfe 	bl	8005060 <memp_free>
}
 800d864:	bf00      	nop
 800d866:	3708      	adds	r7, #8
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}
 800d86c:	080106c4 	.word	0x080106c4
 800d870:	0801082c 	.word	0x0801082c
 800d874:	0801070c 	.word	0x0801070c

0800d878 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b084      	sub	sp, #16
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d106      	bne.n	800d898 <ipfrag_free_pbuf_custom+0x20>
 800d88a:	4b11      	ldr	r3, [pc, #68]	; (800d8d0 <ipfrag_free_pbuf_custom+0x58>)
 800d88c:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800d890:	4910      	ldr	r1, [pc, #64]	; (800d8d4 <ipfrag_free_pbuf_custom+0x5c>)
 800d892:	4811      	ldr	r0, [pc, #68]	; (800d8d8 <ipfrag_free_pbuf_custom+0x60>)
 800d894:	f000 fa6a 	bl	800dd6c <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800d898:	68fa      	ldr	r2, [r7, #12]
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d006      	beq.n	800d8ae <ipfrag_free_pbuf_custom+0x36>
 800d8a0:	4b0b      	ldr	r3, [pc, #44]	; (800d8d0 <ipfrag_free_pbuf_custom+0x58>)
 800d8a2:	f240 22b9 	movw	r2, #697	; 0x2b9
 800d8a6:	490d      	ldr	r1, [pc, #52]	; (800d8dc <ipfrag_free_pbuf_custom+0x64>)
 800d8a8:	480b      	ldr	r0, [pc, #44]	; (800d8d8 <ipfrag_free_pbuf_custom+0x60>)
 800d8aa:	f000 fa5f 	bl	800dd6c <iprintf>
  if (pcr->original != NULL) {
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	695b      	ldr	r3, [r3, #20]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d004      	beq.n	800d8c0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	695b      	ldr	r3, [r3, #20]
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f7f8 f908 	bl	8005ad0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800d8c0:	68f8      	ldr	r0, [r7, #12]
 800d8c2:	f7ff ffbd 	bl	800d840 <ip_frag_free_pbuf_custom_ref>
}
 800d8c6:	bf00      	nop
 800d8c8:	3710      	adds	r7, #16
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}
 800d8ce:	bf00      	nop
 800d8d0:	080106c4 	.word	0x080106c4
 800d8d4:	08010838 	.word	0x08010838
 800d8d8:	0801070c 	.word	0x0801070c
 800d8dc:	08010844 	.word	0x08010844

0800d8e0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b092      	sub	sp, #72	; 0x48
 800d8e4:	af02      	add	r7, sp, #8
 800d8e6:	60f8      	str	r0, [r7, #12]
 800d8e8:	60b9      	str	r1, [r7, #8]
 800d8ea:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d8f4:	3b14      	subs	r3, #20
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	da00      	bge.n	800d8fc <ip4_frag+0x1c>
 800d8fa:	3307      	adds	r3, #7
 800d8fc:	10db      	asrs	r3, r3, #3
 800d8fe:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800d900:	2314      	movs	r3, #20
 800d902:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	685b      	ldr	r3, [r3, #4]
 800d908:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800d90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d90c:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800d90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d910:	781b      	ldrb	r3, [r3, #0]
 800d912:	f003 030f 	and.w	r3, r3, #15
 800d916:	009b      	lsls	r3, r3, #2
 800d918:	2b14      	cmp	r3, #20
 800d91a:	d009      	beq.n	800d930 <ip4_frag+0x50>
 800d91c:	4b7a      	ldr	r3, [pc, #488]	; (800db08 <ip4_frag+0x228>)
 800d91e:	f240 22e1 	movw	r2, #737	; 0x2e1
 800d922:	497a      	ldr	r1, [pc, #488]	; (800db0c <ip4_frag+0x22c>)
 800d924:	487a      	ldr	r0, [pc, #488]	; (800db10 <ip4_frag+0x230>)
 800d926:	f000 fa21 	bl	800dd6c <iprintf>
 800d92a:	f06f 0305 	mvn.w	r3, #5
 800d92e:	e0e6      	b.n	800dafe <ip4_frag+0x21e>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800d930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d932:	88db      	ldrh	r3, [r3, #6]
 800d934:	b29b      	uxth	r3, r3
 800d936:	4618      	mov	r0, r3
 800d938:	f7f6 ff9d 	bl	8004876 <lwip_htons>
 800d93c:	4603      	mov	r3, r0
 800d93e:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800d940:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d942:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d946:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800d948:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d94a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d009      	beq.n	800d966 <ip4_frag+0x86>
 800d952:	4b6d      	ldr	r3, [pc, #436]	; (800db08 <ip4_frag+0x228>)
 800d954:	f240 22e6 	movw	r2, #742	; 0x2e6
 800d958:	496e      	ldr	r1, [pc, #440]	; (800db14 <ip4_frag+0x234>)
 800d95a:	486d      	ldr	r0, [pc, #436]	; (800db10 <ip4_frag+0x230>)
 800d95c:	f000 fa06 	bl	800dd6c <iprintf>
 800d960:	f06f 0305 	mvn.w	r3, #5
 800d964:	e0cb      	b.n	800dafe <ip4_frag+0x21e>

  left = p->tot_len - IP_HLEN;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	891b      	ldrh	r3, [r3, #8]
 800d96a:	3b14      	subs	r3, #20
 800d96c:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800d96e:	e0bd      	b.n	800daec <ip4_frag+0x20c>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800d970:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d972:	00da      	lsls	r2, r3, #3
 800d974:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d976:	4293      	cmp	r3, r2
 800d978:	bfa8      	it	ge
 800d97a:	4613      	movge	r3, r2
 800d97c:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800d97e:	2200      	movs	r2, #0
 800d980:	2114      	movs	r1, #20
 800d982:	2002      	movs	r0, #2
 800d984:	f7f7 fd32 	bl	80053ec <pbuf_alloc>
 800d988:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800d98a:	6a3b      	ldr	r3, [r7, #32]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	f000 80b3 	beq.w	800daf8 <ip4_frag+0x218>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	895b      	ldrh	r3, [r3, #10]
 800d996:	2b13      	cmp	r3, #19
 800d998:	d806      	bhi.n	800d9a8 <ip4_frag+0xc8>
 800d99a:	4b5b      	ldr	r3, [pc, #364]	; (800db08 <ip4_frag+0x228>)
 800d99c:	f44f 7242 	mov.w	r2, #776	; 0x308
 800d9a0:	495d      	ldr	r1, [pc, #372]	; (800db18 <ip4_frag+0x238>)
 800d9a2:	485b      	ldr	r0, [pc, #364]	; (800db10 <ip4_frag+0x230>)
 800d9a4:	f000 f9e2 	bl	800dd6c <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800d9a8:	6a3b      	ldr	r3, [r7, #32]
 800d9aa:	685b      	ldr	r3, [r3, #4]
 800d9ac:	2214      	movs	r2, #20
 800d9ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f000 f9c5 	bl	800dd40 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800d9b6:	6a3b      	ldr	r3, [r7, #32]
 800d9b8:	685b      	ldr	r3, [r3, #4]
 800d9ba:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800d9bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d9be:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800d9c0:	e04f      	b.n	800da62 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	895a      	ldrh	r2, [r3, #10]
 800d9c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d9c8:	1ad3      	subs	r3, r2, r3
 800d9ca:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800d9cc:	8b7a      	ldrh	r2, [r7, #26]
 800d9ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d9d0:	4293      	cmp	r3, r2
 800d9d2:	bf28      	it	cs
 800d9d4:	4613      	movcs	r3, r2
 800d9d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800d9d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d105      	bne.n	800d9ea <ip4_frag+0x10a>
        poff = 0;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	60fb      	str	r3, [r7, #12]
        continue;
 800d9e8:	e03b      	b.n	800da62 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800d9ea:	f7ff ff21 	bl	800d830 <ip_frag_alloc_pbuf_custom_ref>
 800d9ee:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d103      	bne.n	800d9fe <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800d9f6:	6a38      	ldr	r0, [r7, #32]
 800d9f8:	f7f8 f86a 	bl	8005ad0 <pbuf_free>
        goto memerr;
 800d9fc:	e07d      	b.n	800dafa <ip4_frag+0x21a>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d9fe:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800da04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800da06:	4413      	add	r3, r2
 800da08:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800da0a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800da0c:	9201      	str	r2, [sp, #4]
 800da0e:	9300      	str	r3, [sp, #0]
 800da10:	4603      	mov	r3, r0
 800da12:	2202      	movs	r2, #2
 800da14:	2004      	movs	r0, #4
 800da16:	f7f7 fe7d 	bl	8005714 <pbuf_alloced_custom>
 800da1a:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d106      	bne.n	800da30 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800da22:	6978      	ldr	r0, [r7, #20]
 800da24:	f7ff ff0c 	bl	800d840 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800da28:	6a38      	ldr	r0, [r7, #32]
 800da2a:	f7f8 f851 	bl	8005ad0 <pbuf_free>
        goto memerr;
 800da2e:	e064      	b.n	800dafa <ip4_frag+0x21a>
      }
      pbuf_ref(p);
 800da30:	68f8      	ldr	r0, [r7, #12]
 800da32:	f7f8 f8f7 	bl	8005c24 <pbuf_ref>
      pcr->original = p;
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	68fa      	ldr	r2, [r7, #12]
 800da3a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	4a37      	ldr	r2, [pc, #220]	; (800db1c <ip4_frag+0x23c>)
 800da40:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800da42:	6939      	ldr	r1, [r7, #16]
 800da44:	6a38      	ldr	r0, [r7, #32]
 800da46:	f7f8 f90f 	bl	8005c68 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800da4a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800da4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800da4e:	1ad3      	subs	r3, r2, r3
 800da50:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800da52:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800da54:	2b00      	cmp	r3, #0
 800da56:	d004      	beq.n	800da62 <ip4_frag+0x182>
        poff = 0;
 800da58:	2300      	movs	r3, #0
 800da5a:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800da62:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800da64:	2b00      	cmp	r3, #0
 800da66:	d1ac      	bne.n	800d9c2 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800da68:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800da6a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800da6c:	4413      	add	r3, r2
 800da6e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800da74:	f1a3 0213 	sub.w	r2, r3, #19
 800da78:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800da7a:	429a      	cmp	r2, r3
 800da7c:	bfcc      	ite	gt
 800da7e:	2301      	movgt	r3, #1
 800da80:	2300      	movle	r3, #0
 800da82:	b2db      	uxtb	r3, r3
 800da84:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800da86:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800da88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800da8c:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800da8e:	69fb      	ldr	r3, [r7, #28]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d103      	bne.n	800da9c <ip4_frag+0x1bc>
      tmp = tmp | IP_MF;
 800da94:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800da96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800da9a:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800da9c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800da9e:	4618      	mov	r0, r3
 800daa0:	f7f6 fee9 	bl	8004876 <lwip_htons>
 800daa4:	4603      	mov	r3, r0
 800daa6:	461a      	mov	r2, r3
 800daa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daaa:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800daac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800daae:	3314      	adds	r3, #20
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	4618      	mov	r0, r3
 800dab4:	f7f6 fedf 	bl	8004876 <lwip_htons>
 800dab8:	4603      	mov	r3, r0
 800daba:	461a      	mov	r2, r3
 800dabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dabe:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800dac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dac2:	2200      	movs	r2, #0
 800dac4:	729a      	strb	r2, [r3, #10]
 800dac6:	2200      	movs	r2, #0
 800dac8:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	695b      	ldr	r3, [r3, #20]
 800dace:	687a      	ldr	r2, [r7, #4]
 800dad0:	6a39      	ldr	r1, [r7, #32]
 800dad2:	68b8      	ldr	r0, [r7, #8]
 800dad4:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800dad6:	6a38      	ldr	r0, [r7, #32]
 800dad8:	f7f7 fffa 	bl	8005ad0 <pbuf_free>
    left -= fragsize;
 800dadc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800dade:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dae0:	1ad3      	subs	r3, r2, r3
 800dae2:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800dae4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800dae6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800dae8:	4413      	add	r3, r2
 800daea:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800daec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800daee:	2b00      	cmp	r3, #0
 800daf0:	f47f af3e 	bne.w	800d970 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800daf4:	2300      	movs	r3, #0
 800daf6:	e002      	b.n	800dafe <ip4_frag+0x21e>
      goto memerr;
 800daf8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800dafa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dafe:	4618      	mov	r0, r3
 800db00:	3740      	adds	r7, #64	; 0x40
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}
 800db06:	bf00      	nop
 800db08:	080106c4 	.word	0x080106c4
 800db0c:	08010850 	.word	0x08010850
 800db10:	0801070c 	.word	0x0801070c
 800db14:	08010878 	.word	0x08010878
 800db18:	08010894 	.word	0x08010894
 800db1c:	0800d879 	.word	0x0800d879

0800db20 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b086      	sub	sp, #24
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800db2a:	230e      	movs	r3, #14
 800db2c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	895b      	ldrh	r3, [r3, #10]
 800db32:	2b0e      	cmp	r3, #14
 800db34:	d977      	bls.n	800dc26 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	685b      	ldr	r3, [r3, #4]
 800db3a:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	7b1a      	ldrb	r2, [r3, #12]
 800db40:	7b5b      	ldrb	r3, [r3, #13]
 800db42:	021b      	lsls	r3, r3, #8
 800db44:	4313      	orrs	r3, r2
 800db46:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	781b      	ldrb	r3, [r3, #0]
 800db4c:	f003 0301 	and.w	r3, r3, #1
 800db50:	2b00      	cmp	r3, #0
 800db52:	d023      	beq.n	800db9c <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	2b01      	cmp	r3, #1
 800db5a:	d10f      	bne.n	800db7c <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800db5c:	693b      	ldr	r3, [r7, #16]
 800db5e:	785b      	ldrb	r3, [r3, #1]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d11b      	bne.n	800db9c <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800db68:	2b5e      	cmp	r3, #94	; 0x5e
 800db6a:	d117      	bne.n	800db9c <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	7b5b      	ldrb	r3, [r3, #13]
 800db70:	f043 0310 	orr.w	r3, r3, #16
 800db74:	b2da      	uxtb	r2, r3
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	735a      	strb	r2, [r3, #13]
 800db7a:	e00f      	b.n	800db9c <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	2206      	movs	r2, #6
 800db80:	4931      	ldr	r1, [pc, #196]	; (800dc48 <ethernet_input+0x128>)
 800db82:	4618      	mov	r0, r3
 800db84:	f000 f8ce 	bl	800dd24 <memcmp>
 800db88:	4603      	mov	r3, r0
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d106      	bne.n	800db9c <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	7b5b      	ldrb	r3, [r3, #13]
 800db92:	f043 0308 	orr.w	r3, r3, #8
 800db96:	b2da      	uxtb	r2, r3
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800db9c:	89fb      	ldrh	r3, [r7, #14]
 800db9e:	2b08      	cmp	r3, #8
 800dba0:	d003      	beq.n	800dbaa <ethernet_input+0x8a>
 800dba2:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800dba6:	d01e      	beq.n	800dbe6 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800dba8:	e046      	b.n	800dc38 <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dbb0:	f003 0308 	and.w	r3, r3, #8
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d038      	beq.n	800dc2a <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	895b      	ldrh	r3, [r3, #10]
 800dbbc:	461a      	mov	r2, r3
 800dbbe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	db33      	blt.n	800dc2e <ethernet_input+0x10e>
 800dbc6:	8afb      	ldrh	r3, [r7, #22]
 800dbc8:	425b      	negs	r3, r3
 800dbca:	b29b      	uxth	r3, r3
 800dbcc:	b21b      	sxth	r3, r3
 800dbce:	4619      	mov	r1, r3
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f7f7 ff59 	bl	8005a88 <pbuf_header>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d128      	bne.n	800dc2e <ethernet_input+0x10e>
        ip4_input(p, netif);
 800dbdc:	6839      	ldr	r1, [r7, #0]
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f7fe ff7c 	bl	800cadc <ip4_input>
      break;
 800dbe4:	e01d      	b.n	800dc22 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dbec:	f003 0308 	and.w	r3, r3, #8
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d01e      	beq.n	800dc32 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	895b      	ldrh	r3, [r3, #10]
 800dbf8:	461a      	mov	r2, r3
 800dbfa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	db19      	blt.n	800dc36 <ethernet_input+0x116>
 800dc02:	8afb      	ldrh	r3, [r7, #22]
 800dc04:	425b      	negs	r3, r3
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	b21b      	sxth	r3, r3
 800dc0a:	4619      	mov	r1, r3
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f7f7 ff3b 	bl	8005a88 <pbuf_header>
 800dc12:	4603      	mov	r3, r0
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d10e      	bne.n	800dc36 <ethernet_input+0x116>
        etharp_input(p, netif);
 800dc18:	6839      	ldr	r1, [r7, #0]
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	f7fe f94c 	bl	800beb8 <etharp_input>
      break;
 800dc20:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800dc22:	2300      	movs	r3, #0
 800dc24:	e00c      	b.n	800dc40 <ethernet_input+0x120>
    goto free_and_return;
 800dc26:	bf00      	nop
 800dc28:	e006      	b.n	800dc38 <ethernet_input+0x118>
        goto free_and_return;
 800dc2a:	bf00      	nop
 800dc2c:	e004      	b.n	800dc38 <ethernet_input+0x118>
        goto free_and_return;
 800dc2e:	bf00      	nop
 800dc30:	e002      	b.n	800dc38 <ethernet_input+0x118>
        goto free_and_return;
 800dc32:	bf00      	nop
 800dc34:	e000      	b.n	800dc38 <ethernet_input+0x118>
        goto free_and_return;
 800dc36:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f7f7 ff49 	bl	8005ad0 <pbuf_free>
  return ERR_OK;
 800dc3e:	2300      	movs	r3, #0
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	3718      	adds	r7, #24
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}
 800dc48:	08010a34 	.word	0x08010a34

0800dc4c <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b086      	sub	sp, #24
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	60f8      	str	r0, [r7, #12]
 800dc54:	60b9      	str	r1, [r7, #8]
 800dc56:	607a      	str	r2, [r7, #4]
 800dc58:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800dc5a:	8c3b      	ldrh	r3, [r7, #32]
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f7f6 fe0a 	bl	8004876 <lwip_htons>
 800dc62:	4603      	mov	r3, r0
 800dc64:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800dc66:	210e      	movs	r1, #14
 800dc68:	68b8      	ldr	r0, [r7, #8]
 800dc6a:	f7f7 ff0d 	bl	8005a88 <pbuf_header>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d125      	bne.n	800dcc0 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	685b      	ldr	r3, [r3, #4]
 800dc78:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	8afa      	ldrh	r2, [r7, #22]
 800dc7e:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	2206      	movs	r2, #6
 800dc84:	6839      	ldr	r1, [r7, #0]
 800dc86:	4618      	mov	r0, r3
 800dc88:	f000 f85a 	bl	800dd40 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800dc8c:	693b      	ldr	r3, [r7, #16]
 800dc8e:	3306      	adds	r3, #6
 800dc90:	2206      	movs	r2, #6
 800dc92:	6879      	ldr	r1, [r7, #4]
 800dc94:	4618      	mov	r0, r3
 800dc96:	f000 f853 	bl	800dd40 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dca0:	2b06      	cmp	r3, #6
 800dca2:	d006      	beq.n	800dcb2 <ethernet_output+0x66>
 800dca4:	4b0a      	ldr	r3, [pc, #40]	; (800dcd0 <ethernet_output+0x84>)
 800dca6:	f240 122b 	movw	r2, #299	; 0x12b
 800dcaa:	490a      	ldr	r1, [pc, #40]	; (800dcd4 <ethernet_output+0x88>)
 800dcac:	480a      	ldr	r0, [pc, #40]	; (800dcd8 <ethernet_output+0x8c>)
 800dcae:	f000 f85d 	bl	800dd6c <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	699b      	ldr	r3, [r3, #24]
 800dcb6:	68b9      	ldr	r1, [r7, #8]
 800dcb8:	68f8      	ldr	r0, [r7, #12]
 800dcba:	4798      	blx	r3
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	e002      	b.n	800dcc6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800dcc0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800dcc2:	f06f 0301 	mvn.w	r3, #1
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3718      	adds	r7, #24
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
 800dcce:	bf00      	nop
 800dcd0:	080108b4 	.word	0x080108b4
 800dcd4:	080108ec 	.word	0x080108ec
 800dcd8:	08010920 	.word	0x08010920

0800dcdc <__libc_init_array>:
 800dcdc:	b570      	push	{r4, r5, r6, lr}
 800dcde:	2600      	movs	r6, #0
 800dce0:	4d0c      	ldr	r5, [pc, #48]	; (800dd14 <__libc_init_array+0x38>)
 800dce2:	4c0d      	ldr	r4, [pc, #52]	; (800dd18 <__libc_init_array+0x3c>)
 800dce4:	1b64      	subs	r4, r4, r5
 800dce6:	10a4      	asrs	r4, r4, #2
 800dce8:	42a6      	cmp	r6, r4
 800dcea:	d109      	bne.n	800dd00 <__libc_init_array+0x24>
 800dcec:	f000 ff9e 	bl	800ec2c <_init>
 800dcf0:	2600      	movs	r6, #0
 800dcf2:	4d0a      	ldr	r5, [pc, #40]	; (800dd1c <__libc_init_array+0x40>)
 800dcf4:	4c0a      	ldr	r4, [pc, #40]	; (800dd20 <__libc_init_array+0x44>)
 800dcf6:	1b64      	subs	r4, r4, r5
 800dcf8:	10a4      	asrs	r4, r4, #2
 800dcfa:	42a6      	cmp	r6, r4
 800dcfc:	d105      	bne.n	800dd0a <__libc_init_array+0x2e>
 800dcfe:	bd70      	pop	{r4, r5, r6, pc}
 800dd00:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd04:	4798      	blx	r3
 800dd06:	3601      	adds	r6, #1
 800dd08:	e7ee      	b.n	800dce8 <__libc_init_array+0xc>
 800dd0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd0e:	4798      	blx	r3
 800dd10:	3601      	adds	r6, #1
 800dd12:	e7f2      	b.n	800dcfa <__libc_init_array+0x1e>
 800dd14:	08010ae4 	.word	0x08010ae4
 800dd18:	08010ae4 	.word	0x08010ae4
 800dd1c:	08010ae4 	.word	0x08010ae4
 800dd20:	08010ae8 	.word	0x08010ae8

0800dd24 <memcmp>:
 800dd24:	b530      	push	{r4, r5, lr}
 800dd26:	2400      	movs	r4, #0
 800dd28:	3901      	subs	r1, #1
 800dd2a:	42a2      	cmp	r2, r4
 800dd2c:	d101      	bne.n	800dd32 <memcmp+0xe>
 800dd2e:	2000      	movs	r0, #0
 800dd30:	e005      	b.n	800dd3e <memcmp+0x1a>
 800dd32:	5d03      	ldrb	r3, [r0, r4]
 800dd34:	3401      	adds	r4, #1
 800dd36:	5d0d      	ldrb	r5, [r1, r4]
 800dd38:	42ab      	cmp	r3, r5
 800dd3a:	d0f6      	beq.n	800dd2a <memcmp+0x6>
 800dd3c:	1b58      	subs	r0, r3, r5
 800dd3e:	bd30      	pop	{r4, r5, pc}

0800dd40 <memcpy>:
 800dd40:	440a      	add	r2, r1
 800dd42:	4291      	cmp	r1, r2
 800dd44:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd48:	d100      	bne.n	800dd4c <memcpy+0xc>
 800dd4a:	4770      	bx	lr
 800dd4c:	b510      	push	{r4, lr}
 800dd4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd52:	4291      	cmp	r1, r2
 800dd54:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd58:	d1f9      	bne.n	800dd4e <memcpy+0xe>
 800dd5a:	bd10      	pop	{r4, pc}

0800dd5c <memset>:
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	4402      	add	r2, r0
 800dd60:	4293      	cmp	r3, r2
 800dd62:	d100      	bne.n	800dd66 <memset+0xa>
 800dd64:	4770      	bx	lr
 800dd66:	f803 1b01 	strb.w	r1, [r3], #1
 800dd6a:	e7f9      	b.n	800dd60 <memset+0x4>

0800dd6c <iprintf>:
 800dd6c:	b40f      	push	{r0, r1, r2, r3}
 800dd6e:	4b0a      	ldr	r3, [pc, #40]	; (800dd98 <iprintf+0x2c>)
 800dd70:	b513      	push	{r0, r1, r4, lr}
 800dd72:	681c      	ldr	r4, [r3, #0]
 800dd74:	b124      	cbz	r4, 800dd80 <iprintf+0x14>
 800dd76:	69a3      	ldr	r3, [r4, #24]
 800dd78:	b913      	cbnz	r3, 800dd80 <iprintf+0x14>
 800dd7a:	4620      	mov	r0, r4
 800dd7c:	f000 f866 	bl	800de4c <__sinit>
 800dd80:	ab05      	add	r3, sp, #20
 800dd82:	4620      	mov	r0, r4
 800dd84:	9a04      	ldr	r2, [sp, #16]
 800dd86:	68a1      	ldr	r1, [r4, #8]
 800dd88:	9301      	str	r3, [sp, #4]
 800dd8a:	f000 f9cd 	bl	800e128 <_vfiprintf_r>
 800dd8e:	b002      	add	sp, #8
 800dd90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd94:	b004      	add	sp, #16
 800dd96:	4770      	bx	lr
 800dd98:	20000010 	.word	0x20000010

0800dd9c <std>:
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	b510      	push	{r4, lr}
 800dda0:	4604      	mov	r4, r0
 800dda2:	e9c0 3300 	strd	r3, r3, [r0]
 800dda6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ddaa:	6083      	str	r3, [r0, #8]
 800ddac:	8181      	strh	r1, [r0, #12]
 800ddae:	6643      	str	r3, [r0, #100]	; 0x64
 800ddb0:	81c2      	strh	r2, [r0, #14]
 800ddb2:	6183      	str	r3, [r0, #24]
 800ddb4:	4619      	mov	r1, r3
 800ddb6:	2208      	movs	r2, #8
 800ddb8:	305c      	adds	r0, #92	; 0x5c
 800ddba:	f7ff ffcf 	bl	800dd5c <memset>
 800ddbe:	4b05      	ldr	r3, [pc, #20]	; (800ddd4 <std+0x38>)
 800ddc0:	6224      	str	r4, [r4, #32]
 800ddc2:	6263      	str	r3, [r4, #36]	; 0x24
 800ddc4:	4b04      	ldr	r3, [pc, #16]	; (800ddd8 <std+0x3c>)
 800ddc6:	62a3      	str	r3, [r4, #40]	; 0x28
 800ddc8:	4b04      	ldr	r3, [pc, #16]	; (800dddc <std+0x40>)
 800ddca:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ddcc:	4b04      	ldr	r3, [pc, #16]	; (800dde0 <std+0x44>)
 800ddce:	6323      	str	r3, [r4, #48]	; 0x30
 800ddd0:	bd10      	pop	{r4, pc}
 800ddd2:	bf00      	nop
 800ddd4:	0800e6d5 	.word	0x0800e6d5
 800ddd8:	0800e6f7 	.word	0x0800e6f7
 800dddc:	0800e72f 	.word	0x0800e72f
 800dde0:	0800e753 	.word	0x0800e753

0800dde4 <_cleanup_r>:
 800dde4:	4901      	ldr	r1, [pc, #4]	; (800ddec <_cleanup_r+0x8>)
 800dde6:	f000 b8af 	b.w	800df48 <_fwalk_reent>
 800ddea:	bf00      	nop
 800ddec:	0800ea2d 	.word	0x0800ea2d

0800ddf0 <__sfmoreglue>:
 800ddf0:	b570      	push	{r4, r5, r6, lr}
 800ddf2:	2568      	movs	r5, #104	; 0x68
 800ddf4:	1e4a      	subs	r2, r1, #1
 800ddf6:	4355      	muls	r5, r2
 800ddf8:	460e      	mov	r6, r1
 800ddfa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ddfe:	f000 f911 	bl	800e024 <_malloc_r>
 800de02:	4604      	mov	r4, r0
 800de04:	b140      	cbz	r0, 800de18 <__sfmoreglue+0x28>
 800de06:	2100      	movs	r1, #0
 800de08:	e9c0 1600 	strd	r1, r6, [r0]
 800de0c:	300c      	adds	r0, #12
 800de0e:	60a0      	str	r0, [r4, #8]
 800de10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800de14:	f7ff ffa2 	bl	800dd5c <memset>
 800de18:	4620      	mov	r0, r4
 800de1a:	bd70      	pop	{r4, r5, r6, pc}

0800de1c <__sfp_lock_acquire>:
 800de1c:	4801      	ldr	r0, [pc, #4]	; (800de24 <__sfp_lock_acquire+0x8>)
 800de1e:	f000 b8b3 	b.w	800df88 <__retarget_lock_acquire_recursive>
 800de22:	bf00      	nop
 800de24:	20006ce4 	.word	0x20006ce4

0800de28 <__sfp_lock_release>:
 800de28:	4801      	ldr	r0, [pc, #4]	; (800de30 <__sfp_lock_release+0x8>)
 800de2a:	f000 b8ae 	b.w	800df8a <__retarget_lock_release_recursive>
 800de2e:	bf00      	nop
 800de30:	20006ce4 	.word	0x20006ce4

0800de34 <__sinit_lock_acquire>:
 800de34:	4801      	ldr	r0, [pc, #4]	; (800de3c <__sinit_lock_acquire+0x8>)
 800de36:	f000 b8a7 	b.w	800df88 <__retarget_lock_acquire_recursive>
 800de3a:	bf00      	nop
 800de3c:	20006cdf 	.word	0x20006cdf

0800de40 <__sinit_lock_release>:
 800de40:	4801      	ldr	r0, [pc, #4]	; (800de48 <__sinit_lock_release+0x8>)
 800de42:	f000 b8a2 	b.w	800df8a <__retarget_lock_release_recursive>
 800de46:	bf00      	nop
 800de48:	20006cdf 	.word	0x20006cdf

0800de4c <__sinit>:
 800de4c:	b510      	push	{r4, lr}
 800de4e:	4604      	mov	r4, r0
 800de50:	f7ff fff0 	bl	800de34 <__sinit_lock_acquire>
 800de54:	69a3      	ldr	r3, [r4, #24]
 800de56:	b11b      	cbz	r3, 800de60 <__sinit+0x14>
 800de58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de5c:	f7ff bff0 	b.w	800de40 <__sinit_lock_release>
 800de60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800de64:	6523      	str	r3, [r4, #80]	; 0x50
 800de66:	4b13      	ldr	r3, [pc, #76]	; (800deb4 <__sinit+0x68>)
 800de68:	4a13      	ldr	r2, [pc, #76]	; (800deb8 <__sinit+0x6c>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	62a2      	str	r2, [r4, #40]	; 0x28
 800de6e:	42a3      	cmp	r3, r4
 800de70:	bf08      	it	eq
 800de72:	2301      	moveq	r3, #1
 800de74:	4620      	mov	r0, r4
 800de76:	bf08      	it	eq
 800de78:	61a3      	streq	r3, [r4, #24]
 800de7a:	f000 f81f 	bl	800debc <__sfp>
 800de7e:	6060      	str	r0, [r4, #4]
 800de80:	4620      	mov	r0, r4
 800de82:	f000 f81b 	bl	800debc <__sfp>
 800de86:	60a0      	str	r0, [r4, #8]
 800de88:	4620      	mov	r0, r4
 800de8a:	f000 f817 	bl	800debc <__sfp>
 800de8e:	2200      	movs	r2, #0
 800de90:	2104      	movs	r1, #4
 800de92:	60e0      	str	r0, [r4, #12]
 800de94:	6860      	ldr	r0, [r4, #4]
 800de96:	f7ff ff81 	bl	800dd9c <std>
 800de9a:	2201      	movs	r2, #1
 800de9c:	2109      	movs	r1, #9
 800de9e:	68a0      	ldr	r0, [r4, #8]
 800dea0:	f7ff ff7c 	bl	800dd9c <std>
 800dea4:	2202      	movs	r2, #2
 800dea6:	2112      	movs	r1, #18
 800dea8:	68e0      	ldr	r0, [r4, #12]
 800deaa:	f7ff ff77 	bl	800dd9c <std>
 800deae:	2301      	movs	r3, #1
 800deb0:	61a3      	str	r3, [r4, #24]
 800deb2:	e7d1      	b.n	800de58 <__sinit+0xc>
 800deb4:	08010a44 	.word	0x08010a44
 800deb8:	0800dde5 	.word	0x0800dde5

0800debc <__sfp>:
 800debc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800debe:	4607      	mov	r7, r0
 800dec0:	f7ff ffac 	bl	800de1c <__sfp_lock_acquire>
 800dec4:	4b1e      	ldr	r3, [pc, #120]	; (800df40 <__sfp+0x84>)
 800dec6:	681e      	ldr	r6, [r3, #0]
 800dec8:	69b3      	ldr	r3, [r6, #24]
 800deca:	b913      	cbnz	r3, 800ded2 <__sfp+0x16>
 800decc:	4630      	mov	r0, r6
 800dece:	f7ff ffbd 	bl	800de4c <__sinit>
 800ded2:	3648      	adds	r6, #72	; 0x48
 800ded4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ded8:	3b01      	subs	r3, #1
 800deda:	d503      	bpl.n	800dee4 <__sfp+0x28>
 800dedc:	6833      	ldr	r3, [r6, #0]
 800dede:	b30b      	cbz	r3, 800df24 <__sfp+0x68>
 800dee0:	6836      	ldr	r6, [r6, #0]
 800dee2:	e7f7      	b.n	800ded4 <__sfp+0x18>
 800dee4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dee8:	b9d5      	cbnz	r5, 800df20 <__sfp+0x64>
 800deea:	4b16      	ldr	r3, [pc, #88]	; (800df44 <__sfp+0x88>)
 800deec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800def0:	60e3      	str	r3, [r4, #12]
 800def2:	6665      	str	r5, [r4, #100]	; 0x64
 800def4:	f000 f847 	bl	800df86 <__retarget_lock_init_recursive>
 800def8:	f7ff ff96 	bl	800de28 <__sfp_lock_release>
 800defc:	2208      	movs	r2, #8
 800defe:	4629      	mov	r1, r5
 800df00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800df04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800df08:	6025      	str	r5, [r4, #0]
 800df0a:	61a5      	str	r5, [r4, #24]
 800df0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800df10:	f7ff ff24 	bl	800dd5c <memset>
 800df14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800df18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800df1c:	4620      	mov	r0, r4
 800df1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df20:	3468      	adds	r4, #104	; 0x68
 800df22:	e7d9      	b.n	800ded8 <__sfp+0x1c>
 800df24:	2104      	movs	r1, #4
 800df26:	4638      	mov	r0, r7
 800df28:	f7ff ff62 	bl	800ddf0 <__sfmoreglue>
 800df2c:	4604      	mov	r4, r0
 800df2e:	6030      	str	r0, [r6, #0]
 800df30:	2800      	cmp	r0, #0
 800df32:	d1d5      	bne.n	800dee0 <__sfp+0x24>
 800df34:	f7ff ff78 	bl	800de28 <__sfp_lock_release>
 800df38:	230c      	movs	r3, #12
 800df3a:	603b      	str	r3, [r7, #0]
 800df3c:	e7ee      	b.n	800df1c <__sfp+0x60>
 800df3e:	bf00      	nop
 800df40:	08010a44 	.word	0x08010a44
 800df44:	ffff0001 	.word	0xffff0001

0800df48 <_fwalk_reent>:
 800df48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df4c:	4606      	mov	r6, r0
 800df4e:	4688      	mov	r8, r1
 800df50:	2700      	movs	r7, #0
 800df52:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800df56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800df5a:	f1b9 0901 	subs.w	r9, r9, #1
 800df5e:	d505      	bpl.n	800df6c <_fwalk_reent+0x24>
 800df60:	6824      	ldr	r4, [r4, #0]
 800df62:	2c00      	cmp	r4, #0
 800df64:	d1f7      	bne.n	800df56 <_fwalk_reent+0xe>
 800df66:	4638      	mov	r0, r7
 800df68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df6c:	89ab      	ldrh	r3, [r5, #12]
 800df6e:	2b01      	cmp	r3, #1
 800df70:	d907      	bls.n	800df82 <_fwalk_reent+0x3a>
 800df72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800df76:	3301      	adds	r3, #1
 800df78:	d003      	beq.n	800df82 <_fwalk_reent+0x3a>
 800df7a:	4629      	mov	r1, r5
 800df7c:	4630      	mov	r0, r6
 800df7e:	47c0      	blx	r8
 800df80:	4307      	orrs	r7, r0
 800df82:	3568      	adds	r5, #104	; 0x68
 800df84:	e7e9      	b.n	800df5a <_fwalk_reent+0x12>

0800df86 <__retarget_lock_init_recursive>:
 800df86:	4770      	bx	lr

0800df88 <__retarget_lock_acquire_recursive>:
 800df88:	4770      	bx	lr

0800df8a <__retarget_lock_release_recursive>:
 800df8a:	4770      	bx	lr

0800df8c <_free_r>:
 800df8c:	b538      	push	{r3, r4, r5, lr}
 800df8e:	4605      	mov	r5, r0
 800df90:	2900      	cmp	r1, #0
 800df92:	d043      	beq.n	800e01c <_free_r+0x90>
 800df94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df98:	1f0c      	subs	r4, r1, #4
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	bfb8      	it	lt
 800df9e:	18e4      	addlt	r4, r4, r3
 800dfa0:	f000 fe04 	bl	800ebac <__malloc_lock>
 800dfa4:	4a1e      	ldr	r2, [pc, #120]	; (800e020 <_free_r+0x94>)
 800dfa6:	6813      	ldr	r3, [r2, #0]
 800dfa8:	4610      	mov	r0, r2
 800dfaa:	b933      	cbnz	r3, 800dfba <_free_r+0x2e>
 800dfac:	6063      	str	r3, [r4, #4]
 800dfae:	6014      	str	r4, [r2, #0]
 800dfb0:	4628      	mov	r0, r5
 800dfb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dfb6:	f000 bdff 	b.w	800ebb8 <__malloc_unlock>
 800dfba:	42a3      	cmp	r3, r4
 800dfbc:	d90a      	bls.n	800dfd4 <_free_r+0x48>
 800dfbe:	6821      	ldr	r1, [r4, #0]
 800dfc0:	1862      	adds	r2, r4, r1
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	bf01      	itttt	eq
 800dfc6:	681a      	ldreq	r2, [r3, #0]
 800dfc8:	685b      	ldreq	r3, [r3, #4]
 800dfca:	1852      	addeq	r2, r2, r1
 800dfcc:	6022      	streq	r2, [r4, #0]
 800dfce:	6063      	str	r3, [r4, #4]
 800dfd0:	6004      	str	r4, [r0, #0]
 800dfd2:	e7ed      	b.n	800dfb0 <_free_r+0x24>
 800dfd4:	461a      	mov	r2, r3
 800dfd6:	685b      	ldr	r3, [r3, #4]
 800dfd8:	b10b      	cbz	r3, 800dfde <_free_r+0x52>
 800dfda:	42a3      	cmp	r3, r4
 800dfdc:	d9fa      	bls.n	800dfd4 <_free_r+0x48>
 800dfde:	6811      	ldr	r1, [r2, #0]
 800dfe0:	1850      	adds	r0, r2, r1
 800dfe2:	42a0      	cmp	r0, r4
 800dfe4:	d10b      	bne.n	800dffe <_free_r+0x72>
 800dfe6:	6820      	ldr	r0, [r4, #0]
 800dfe8:	4401      	add	r1, r0
 800dfea:	1850      	adds	r0, r2, r1
 800dfec:	4283      	cmp	r3, r0
 800dfee:	6011      	str	r1, [r2, #0]
 800dff0:	d1de      	bne.n	800dfb0 <_free_r+0x24>
 800dff2:	6818      	ldr	r0, [r3, #0]
 800dff4:	685b      	ldr	r3, [r3, #4]
 800dff6:	4401      	add	r1, r0
 800dff8:	6011      	str	r1, [r2, #0]
 800dffa:	6053      	str	r3, [r2, #4]
 800dffc:	e7d8      	b.n	800dfb0 <_free_r+0x24>
 800dffe:	d902      	bls.n	800e006 <_free_r+0x7a>
 800e000:	230c      	movs	r3, #12
 800e002:	602b      	str	r3, [r5, #0]
 800e004:	e7d4      	b.n	800dfb0 <_free_r+0x24>
 800e006:	6820      	ldr	r0, [r4, #0]
 800e008:	1821      	adds	r1, r4, r0
 800e00a:	428b      	cmp	r3, r1
 800e00c:	bf01      	itttt	eq
 800e00e:	6819      	ldreq	r1, [r3, #0]
 800e010:	685b      	ldreq	r3, [r3, #4]
 800e012:	1809      	addeq	r1, r1, r0
 800e014:	6021      	streq	r1, [r4, #0]
 800e016:	6063      	str	r3, [r4, #4]
 800e018:	6054      	str	r4, [r2, #4]
 800e01a:	e7c9      	b.n	800dfb0 <_free_r+0x24>
 800e01c:	bd38      	pop	{r3, r4, r5, pc}
 800e01e:	bf00      	nop
 800e020:	20000208 	.word	0x20000208

0800e024 <_malloc_r>:
 800e024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e026:	1ccd      	adds	r5, r1, #3
 800e028:	f025 0503 	bic.w	r5, r5, #3
 800e02c:	3508      	adds	r5, #8
 800e02e:	2d0c      	cmp	r5, #12
 800e030:	bf38      	it	cc
 800e032:	250c      	movcc	r5, #12
 800e034:	2d00      	cmp	r5, #0
 800e036:	4606      	mov	r6, r0
 800e038:	db01      	blt.n	800e03e <_malloc_r+0x1a>
 800e03a:	42a9      	cmp	r1, r5
 800e03c:	d903      	bls.n	800e046 <_malloc_r+0x22>
 800e03e:	230c      	movs	r3, #12
 800e040:	6033      	str	r3, [r6, #0]
 800e042:	2000      	movs	r0, #0
 800e044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e046:	f000 fdb1 	bl	800ebac <__malloc_lock>
 800e04a:	4921      	ldr	r1, [pc, #132]	; (800e0d0 <_malloc_r+0xac>)
 800e04c:	680a      	ldr	r2, [r1, #0]
 800e04e:	4614      	mov	r4, r2
 800e050:	b99c      	cbnz	r4, 800e07a <_malloc_r+0x56>
 800e052:	4f20      	ldr	r7, [pc, #128]	; (800e0d4 <_malloc_r+0xb0>)
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	b923      	cbnz	r3, 800e062 <_malloc_r+0x3e>
 800e058:	4621      	mov	r1, r4
 800e05a:	4630      	mov	r0, r6
 800e05c:	f000 fb2a 	bl	800e6b4 <_sbrk_r>
 800e060:	6038      	str	r0, [r7, #0]
 800e062:	4629      	mov	r1, r5
 800e064:	4630      	mov	r0, r6
 800e066:	f000 fb25 	bl	800e6b4 <_sbrk_r>
 800e06a:	1c43      	adds	r3, r0, #1
 800e06c:	d123      	bne.n	800e0b6 <_malloc_r+0x92>
 800e06e:	230c      	movs	r3, #12
 800e070:	4630      	mov	r0, r6
 800e072:	6033      	str	r3, [r6, #0]
 800e074:	f000 fda0 	bl	800ebb8 <__malloc_unlock>
 800e078:	e7e3      	b.n	800e042 <_malloc_r+0x1e>
 800e07a:	6823      	ldr	r3, [r4, #0]
 800e07c:	1b5b      	subs	r3, r3, r5
 800e07e:	d417      	bmi.n	800e0b0 <_malloc_r+0x8c>
 800e080:	2b0b      	cmp	r3, #11
 800e082:	d903      	bls.n	800e08c <_malloc_r+0x68>
 800e084:	6023      	str	r3, [r4, #0]
 800e086:	441c      	add	r4, r3
 800e088:	6025      	str	r5, [r4, #0]
 800e08a:	e004      	b.n	800e096 <_malloc_r+0x72>
 800e08c:	6863      	ldr	r3, [r4, #4]
 800e08e:	42a2      	cmp	r2, r4
 800e090:	bf0c      	ite	eq
 800e092:	600b      	streq	r3, [r1, #0]
 800e094:	6053      	strne	r3, [r2, #4]
 800e096:	4630      	mov	r0, r6
 800e098:	f000 fd8e 	bl	800ebb8 <__malloc_unlock>
 800e09c:	f104 000b 	add.w	r0, r4, #11
 800e0a0:	1d23      	adds	r3, r4, #4
 800e0a2:	f020 0007 	bic.w	r0, r0, #7
 800e0a6:	1ac2      	subs	r2, r0, r3
 800e0a8:	d0cc      	beq.n	800e044 <_malloc_r+0x20>
 800e0aa:	1a1b      	subs	r3, r3, r0
 800e0ac:	50a3      	str	r3, [r4, r2]
 800e0ae:	e7c9      	b.n	800e044 <_malloc_r+0x20>
 800e0b0:	4622      	mov	r2, r4
 800e0b2:	6864      	ldr	r4, [r4, #4]
 800e0b4:	e7cc      	b.n	800e050 <_malloc_r+0x2c>
 800e0b6:	1cc4      	adds	r4, r0, #3
 800e0b8:	f024 0403 	bic.w	r4, r4, #3
 800e0bc:	42a0      	cmp	r0, r4
 800e0be:	d0e3      	beq.n	800e088 <_malloc_r+0x64>
 800e0c0:	1a21      	subs	r1, r4, r0
 800e0c2:	4630      	mov	r0, r6
 800e0c4:	f000 faf6 	bl	800e6b4 <_sbrk_r>
 800e0c8:	3001      	adds	r0, #1
 800e0ca:	d1dd      	bne.n	800e088 <_malloc_r+0x64>
 800e0cc:	e7cf      	b.n	800e06e <_malloc_r+0x4a>
 800e0ce:	bf00      	nop
 800e0d0:	20000208 	.word	0x20000208
 800e0d4:	2000020c 	.word	0x2000020c

0800e0d8 <__sfputc_r>:
 800e0d8:	6893      	ldr	r3, [r2, #8]
 800e0da:	b410      	push	{r4}
 800e0dc:	3b01      	subs	r3, #1
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	6093      	str	r3, [r2, #8]
 800e0e2:	da07      	bge.n	800e0f4 <__sfputc_r+0x1c>
 800e0e4:	6994      	ldr	r4, [r2, #24]
 800e0e6:	42a3      	cmp	r3, r4
 800e0e8:	db01      	blt.n	800e0ee <__sfputc_r+0x16>
 800e0ea:	290a      	cmp	r1, #10
 800e0ec:	d102      	bne.n	800e0f4 <__sfputc_r+0x1c>
 800e0ee:	bc10      	pop	{r4}
 800e0f0:	f000 bb34 	b.w	800e75c <__swbuf_r>
 800e0f4:	6813      	ldr	r3, [r2, #0]
 800e0f6:	1c58      	adds	r0, r3, #1
 800e0f8:	6010      	str	r0, [r2, #0]
 800e0fa:	7019      	strb	r1, [r3, #0]
 800e0fc:	4608      	mov	r0, r1
 800e0fe:	bc10      	pop	{r4}
 800e100:	4770      	bx	lr

0800e102 <__sfputs_r>:
 800e102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e104:	4606      	mov	r6, r0
 800e106:	460f      	mov	r7, r1
 800e108:	4614      	mov	r4, r2
 800e10a:	18d5      	adds	r5, r2, r3
 800e10c:	42ac      	cmp	r4, r5
 800e10e:	d101      	bne.n	800e114 <__sfputs_r+0x12>
 800e110:	2000      	movs	r0, #0
 800e112:	e007      	b.n	800e124 <__sfputs_r+0x22>
 800e114:	463a      	mov	r2, r7
 800e116:	4630      	mov	r0, r6
 800e118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e11c:	f7ff ffdc 	bl	800e0d8 <__sfputc_r>
 800e120:	1c43      	adds	r3, r0, #1
 800e122:	d1f3      	bne.n	800e10c <__sfputs_r+0xa>
 800e124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e128 <_vfiprintf_r>:
 800e128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e12c:	460d      	mov	r5, r1
 800e12e:	4614      	mov	r4, r2
 800e130:	4698      	mov	r8, r3
 800e132:	4606      	mov	r6, r0
 800e134:	b09d      	sub	sp, #116	; 0x74
 800e136:	b118      	cbz	r0, 800e140 <_vfiprintf_r+0x18>
 800e138:	6983      	ldr	r3, [r0, #24]
 800e13a:	b90b      	cbnz	r3, 800e140 <_vfiprintf_r+0x18>
 800e13c:	f7ff fe86 	bl	800de4c <__sinit>
 800e140:	4b89      	ldr	r3, [pc, #548]	; (800e368 <_vfiprintf_r+0x240>)
 800e142:	429d      	cmp	r5, r3
 800e144:	d11b      	bne.n	800e17e <_vfiprintf_r+0x56>
 800e146:	6875      	ldr	r5, [r6, #4]
 800e148:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e14a:	07d9      	lsls	r1, r3, #31
 800e14c:	d405      	bmi.n	800e15a <_vfiprintf_r+0x32>
 800e14e:	89ab      	ldrh	r3, [r5, #12]
 800e150:	059a      	lsls	r2, r3, #22
 800e152:	d402      	bmi.n	800e15a <_vfiprintf_r+0x32>
 800e154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e156:	f7ff ff17 	bl	800df88 <__retarget_lock_acquire_recursive>
 800e15a:	89ab      	ldrh	r3, [r5, #12]
 800e15c:	071b      	lsls	r3, r3, #28
 800e15e:	d501      	bpl.n	800e164 <_vfiprintf_r+0x3c>
 800e160:	692b      	ldr	r3, [r5, #16]
 800e162:	b9eb      	cbnz	r3, 800e1a0 <_vfiprintf_r+0x78>
 800e164:	4629      	mov	r1, r5
 800e166:	4630      	mov	r0, r6
 800e168:	f000 fb5c 	bl	800e824 <__swsetup_r>
 800e16c:	b1c0      	cbz	r0, 800e1a0 <_vfiprintf_r+0x78>
 800e16e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e170:	07dc      	lsls	r4, r3, #31
 800e172:	d50e      	bpl.n	800e192 <_vfiprintf_r+0x6a>
 800e174:	f04f 30ff 	mov.w	r0, #4294967295
 800e178:	b01d      	add	sp, #116	; 0x74
 800e17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e17e:	4b7b      	ldr	r3, [pc, #492]	; (800e36c <_vfiprintf_r+0x244>)
 800e180:	429d      	cmp	r5, r3
 800e182:	d101      	bne.n	800e188 <_vfiprintf_r+0x60>
 800e184:	68b5      	ldr	r5, [r6, #8]
 800e186:	e7df      	b.n	800e148 <_vfiprintf_r+0x20>
 800e188:	4b79      	ldr	r3, [pc, #484]	; (800e370 <_vfiprintf_r+0x248>)
 800e18a:	429d      	cmp	r5, r3
 800e18c:	bf08      	it	eq
 800e18e:	68f5      	ldreq	r5, [r6, #12]
 800e190:	e7da      	b.n	800e148 <_vfiprintf_r+0x20>
 800e192:	89ab      	ldrh	r3, [r5, #12]
 800e194:	0598      	lsls	r0, r3, #22
 800e196:	d4ed      	bmi.n	800e174 <_vfiprintf_r+0x4c>
 800e198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e19a:	f7ff fef6 	bl	800df8a <__retarget_lock_release_recursive>
 800e19e:	e7e9      	b.n	800e174 <_vfiprintf_r+0x4c>
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	9309      	str	r3, [sp, #36]	; 0x24
 800e1a4:	2320      	movs	r3, #32
 800e1a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e1aa:	2330      	movs	r3, #48	; 0x30
 800e1ac:	f04f 0901 	mov.w	r9, #1
 800e1b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1b4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800e374 <_vfiprintf_r+0x24c>
 800e1b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e1bc:	4623      	mov	r3, r4
 800e1be:	469a      	mov	sl, r3
 800e1c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1c4:	b10a      	cbz	r2, 800e1ca <_vfiprintf_r+0xa2>
 800e1c6:	2a25      	cmp	r2, #37	; 0x25
 800e1c8:	d1f9      	bne.n	800e1be <_vfiprintf_r+0x96>
 800e1ca:	ebba 0b04 	subs.w	fp, sl, r4
 800e1ce:	d00b      	beq.n	800e1e8 <_vfiprintf_r+0xc0>
 800e1d0:	465b      	mov	r3, fp
 800e1d2:	4622      	mov	r2, r4
 800e1d4:	4629      	mov	r1, r5
 800e1d6:	4630      	mov	r0, r6
 800e1d8:	f7ff ff93 	bl	800e102 <__sfputs_r>
 800e1dc:	3001      	adds	r0, #1
 800e1de:	f000 80aa 	beq.w	800e336 <_vfiprintf_r+0x20e>
 800e1e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1e4:	445a      	add	r2, fp
 800e1e6:	9209      	str	r2, [sp, #36]	; 0x24
 800e1e8:	f89a 3000 	ldrb.w	r3, [sl]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	f000 80a2 	beq.w	800e336 <_vfiprintf_r+0x20e>
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	f04f 32ff 	mov.w	r2, #4294967295
 800e1f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1fc:	f10a 0a01 	add.w	sl, sl, #1
 800e200:	9304      	str	r3, [sp, #16]
 800e202:	9307      	str	r3, [sp, #28]
 800e204:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e208:	931a      	str	r3, [sp, #104]	; 0x68
 800e20a:	4654      	mov	r4, sl
 800e20c:	2205      	movs	r2, #5
 800e20e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e212:	4858      	ldr	r0, [pc, #352]	; (800e374 <_vfiprintf_r+0x24c>)
 800e214:	f000 fcbc 	bl	800eb90 <memchr>
 800e218:	9a04      	ldr	r2, [sp, #16]
 800e21a:	b9d8      	cbnz	r0, 800e254 <_vfiprintf_r+0x12c>
 800e21c:	06d1      	lsls	r1, r2, #27
 800e21e:	bf44      	itt	mi
 800e220:	2320      	movmi	r3, #32
 800e222:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e226:	0713      	lsls	r3, r2, #28
 800e228:	bf44      	itt	mi
 800e22a:	232b      	movmi	r3, #43	; 0x2b
 800e22c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e230:	f89a 3000 	ldrb.w	r3, [sl]
 800e234:	2b2a      	cmp	r3, #42	; 0x2a
 800e236:	d015      	beq.n	800e264 <_vfiprintf_r+0x13c>
 800e238:	4654      	mov	r4, sl
 800e23a:	2000      	movs	r0, #0
 800e23c:	f04f 0c0a 	mov.w	ip, #10
 800e240:	9a07      	ldr	r2, [sp, #28]
 800e242:	4621      	mov	r1, r4
 800e244:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e248:	3b30      	subs	r3, #48	; 0x30
 800e24a:	2b09      	cmp	r3, #9
 800e24c:	d94e      	bls.n	800e2ec <_vfiprintf_r+0x1c4>
 800e24e:	b1b0      	cbz	r0, 800e27e <_vfiprintf_r+0x156>
 800e250:	9207      	str	r2, [sp, #28]
 800e252:	e014      	b.n	800e27e <_vfiprintf_r+0x156>
 800e254:	eba0 0308 	sub.w	r3, r0, r8
 800e258:	fa09 f303 	lsl.w	r3, r9, r3
 800e25c:	4313      	orrs	r3, r2
 800e25e:	46a2      	mov	sl, r4
 800e260:	9304      	str	r3, [sp, #16]
 800e262:	e7d2      	b.n	800e20a <_vfiprintf_r+0xe2>
 800e264:	9b03      	ldr	r3, [sp, #12]
 800e266:	1d19      	adds	r1, r3, #4
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	9103      	str	r1, [sp, #12]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	bfbb      	ittet	lt
 800e270:	425b      	neglt	r3, r3
 800e272:	f042 0202 	orrlt.w	r2, r2, #2
 800e276:	9307      	strge	r3, [sp, #28]
 800e278:	9307      	strlt	r3, [sp, #28]
 800e27a:	bfb8      	it	lt
 800e27c:	9204      	strlt	r2, [sp, #16]
 800e27e:	7823      	ldrb	r3, [r4, #0]
 800e280:	2b2e      	cmp	r3, #46	; 0x2e
 800e282:	d10c      	bne.n	800e29e <_vfiprintf_r+0x176>
 800e284:	7863      	ldrb	r3, [r4, #1]
 800e286:	2b2a      	cmp	r3, #42	; 0x2a
 800e288:	d135      	bne.n	800e2f6 <_vfiprintf_r+0x1ce>
 800e28a:	9b03      	ldr	r3, [sp, #12]
 800e28c:	3402      	adds	r4, #2
 800e28e:	1d1a      	adds	r2, r3, #4
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	9203      	str	r2, [sp, #12]
 800e294:	2b00      	cmp	r3, #0
 800e296:	bfb8      	it	lt
 800e298:	f04f 33ff 	movlt.w	r3, #4294967295
 800e29c:	9305      	str	r3, [sp, #20]
 800e29e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e384 <_vfiprintf_r+0x25c>
 800e2a2:	2203      	movs	r2, #3
 800e2a4:	4650      	mov	r0, sl
 800e2a6:	7821      	ldrb	r1, [r4, #0]
 800e2a8:	f000 fc72 	bl	800eb90 <memchr>
 800e2ac:	b140      	cbz	r0, 800e2c0 <_vfiprintf_r+0x198>
 800e2ae:	2340      	movs	r3, #64	; 0x40
 800e2b0:	eba0 000a 	sub.w	r0, r0, sl
 800e2b4:	fa03 f000 	lsl.w	r0, r3, r0
 800e2b8:	9b04      	ldr	r3, [sp, #16]
 800e2ba:	3401      	adds	r4, #1
 800e2bc:	4303      	orrs	r3, r0
 800e2be:	9304      	str	r3, [sp, #16]
 800e2c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2c4:	2206      	movs	r2, #6
 800e2c6:	482c      	ldr	r0, [pc, #176]	; (800e378 <_vfiprintf_r+0x250>)
 800e2c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e2cc:	f000 fc60 	bl	800eb90 <memchr>
 800e2d0:	2800      	cmp	r0, #0
 800e2d2:	d03f      	beq.n	800e354 <_vfiprintf_r+0x22c>
 800e2d4:	4b29      	ldr	r3, [pc, #164]	; (800e37c <_vfiprintf_r+0x254>)
 800e2d6:	bb1b      	cbnz	r3, 800e320 <_vfiprintf_r+0x1f8>
 800e2d8:	9b03      	ldr	r3, [sp, #12]
 800e2da:	3307      	adds	r3, #7
 800e2dc:	f023 0307 	bic.w	r3, r3, #7
 800e2e0:	3308      	adds	r3, #8
 800e2e2:	9303      	str	r3, [sp, #12]
 800e2e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2e6:	443b      	add	r3, r7
 800e2e8:	9309      	str	r3, [sp, #36]	; 0x24
 800e2ea:	e767      	b.n	800e1bc <_vfiprintf_r+0x94>
 800e2ec:	460c      	mov	r4, r1
 800e2ee:	2001      	movs	r0, #1
 800e2f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2f4:	e7a5      	b.n	800e242 <_vfiprintf_r+0x11a>
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	f04f 0c0a 	mov.w	ip, #10
 800e2fc:	4619      	mov	r1, r3
 800e2fe:	3401      	adds	r4, #1
 800e300:	9305      	str	r3, [sp, #20]
 800e302:	4620      	mov	r0, r4
 800e304:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e308:	3a30      	subs	r2, #48	; 0x30
 800e30a:	2a09      	cmp	r2, #9
 800e30c:	d903      	bls.n	800e316 <_vfiprintf_r+0x1ee>
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d0c5      	beq.n	800e29e <_vfiprintf_r+0x176>
 800e312:	9105      	str	r1, [sp, #20]
 800e314:	e7c3      	b.n	800e29e <_vfiprintf_r+0x176>
 800e316:	4604      	mov	r4, r0
 800e318:	2301      	movs	r3, #1
 800e31a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e31e:	e7f0      	b.n	800e302 <_vfiprintf_r+0x1da>
 800e320:	ab03      	add	r3, sp, #12
 800e322:	9300      	str	r3, [sp, #0]
 800e324:	462a      	mov	r2, r5
 800e326:	4630      	mov	r0, r6
 800e328:	4b15      	ldr	r3, [pc, #84]	; (800e380 <_vfiprintf_r+0x258>)
 800e32a:	a904      	add	r1, sp, #16
 800e32c:	f3af 8000 	nop.w
 800e330:	4607      	mov	r7, r0
 800e332:	1c78      	adds	r0, r7, #1
 800e334:	d1d6      	bne.n	800e2e4 <_vfiprintf_r+0x1bc>
 800e336:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e338:	07d9      	lsls	r1, r3, #31
 800e33a:	d405      	bmi.n	800e348 <_vfiprintf_r+0x220>
 800e33c:	89ab      	ldrh	r3, [r5, #12]
 800e33e:	059a      	lsls	r2, r3, #22
 800e340:	d402      	bmi.n	800e348 <_vfiprintf_r+0x220>
 800e342:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e344:	f7ff fe21 	bl	800df8a <__retarget_lock_release_recursive>
 800e348:	89ab      	ldrh	r3, [r5, #12]
 800e34a:	065b      	lsls	r3, r3, #25
 800e34c:	f53f af12 	bmi.w	800e174 <_vfiprintf_r+0x4c>
 800e350:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e352:	e711      	b.n	800e178 <_vfiprintf_r+0x50>
 800e354:	ab03      	add	r3, sp, #12
 800e356:	9300      	str	r3, [sp, #0]
 800e358:	462a      	mov	r2, r5
 800e35a:	4630      	mov	r0, r6
 800e35c:	4b08      	ldr	r3, [pc, #32]	; (800e380 <_vfiprintf_r+0x258>)
 800e35e:	a904      	add	r1, sp, #16
 800e360:	f000 f882 	bl	800e468 <_printf_i>
 800e364:	e7e4      	b.n	800e330 <_vfiprintf_r+0x208>
 800e366:	bf00      	nop
 800e368:	08010a68 	.word	0x08010a68
 800e36c:	08010a88 	.word	0x08010a88
 800e370:	08010a48 	.word	0x08010a48
 800e374:	08010aa8 	.word	0x08010aa8
 800e378:	08010ab2 	.word	0x08010ab2
 800e37c:	00000000 	.word	0x00000000
 800e380:	0800e103 	.word	0x0800e103
 800e384:	08010aae 	.word	0x08010aae

0800e388 <_printf_common>:
 800e388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e38c:	4616      	mov	r6, r2
 800e38e:	4699      	mov	r9, r3
 800e390:	688a      	ldr	r2, [r1, #8]
 800e392:	690b      	ldr	r3, [r1, #16]
 800e394:	4607      	mov	r7, r0
 800e396:	4293      	cmp	r3, r2
 800e398:	bfb8      	it	lt
 800e39a:	4613      	movlt	r3, r2
 800e39c:	6033      	str	r3, [r6, #0]
 800e39e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e3a2:	460c      	mov	r4, r1
 800e3a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e3a8:	b10a      	cbz	r2, 800e3ae <_printf_common+0x26>
 800e3aa:	3301      	adds	r3, #1
 800e3ac:	6033      	str	r3, [r6, #0]
 800e3ae:	6823      	ldr	r3, [r4, #0]
 800e3b0:	0699      	lsls	r1, r3, #26
 800e3b2:	bf42      	ittt	mi
 800e3b4:	6833      	ldrmi	r3, [r6, #0]
 800e3b6:	3302      	addmi	r3, #2
 800e3b8:	6033      	strmi	r3, [r6, #0]
 800e3ba:	6825      	ldr	r5, [r4, #0]
 800e3bc:	f015 0506 	ands.w	r5, r5, #6
 800e3c0:	d106      	bne.n	800e3d0 <_printf_common+0x48>
 800e3c2:	f104 0a19 	add.w	sl, r4, #25
 800e3c6:	68e3      	ldr	r3, [r4, #12]
 800e3c8:	6832      	ldr	r2, [r6, #0]
 800e3ca:	1a9b      	subs	r3, r3, r2
 800e3cc:	42ab      	cmp	r3, r5
 800e3ce:	dc28      	bgt.n	800e422 <_printf_common+0x9a>
 800e3d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e3d4:	1e13      	subs	r3, r2, #0
 800e3d6:	6822      	ldr	r2, [r4, #0]
 800e3d8:	bf18      	it	ne
 800e3da:	2301      	movne	r3, #1
 800e3dc:	0692      	lsls	r2, r2, #26
 800e3de:	d42d      	bmi.n	800e43c <_printf_common+0xb4>
 800e3e0:	4649      	mov	r1, r9
 800e3e2:	4638      	mov	r0, r7
 800e3e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e3e8:	47c0      	blx	r8
 800e3ea:	3001      	adds	r0, #1
 800e3ec:	d020      	beq.n	800e430 <_printf_common+0xa8>
 800e3ee:	6823      	ldr	r3, [r4, #0]
 800e3f0:	68e5      	ldr	r5, [r4, #12]
 800e3f2:	f003 0306 	and.w	r3, r3, #6
 800e3f6:	2b04      	cmp	r3, #4
 800e3f8:	bf18      	it	ne
 800e3fa:	2500      	movne	r5, #0
 800e3fc:	6832      	ldr	r2, [r6, #0]
 800e3fe:	f04f 0600 	mov.w	r6, #0
 800e402:	68a3      	ldr	r3, [r4, #8]
 800e404:	bf08      	it	eq
 800e406:	1aad      	subeq	r5, r5, r2
 800e408:	6922      	ldr	r2, [r4, #16]
 800e40a:	bf08      	it	eq
 800e40c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e410:	4293      	cmp	r3, r2
 800e412:	bfc4      	itt	gt
 800e414:	1a9b      	subgt	r3, r3, r2
 800e416:	18ed      	addgt	r5, r5, r3
 800e418:	341a      	adds	r4, #26
 800e41a:	42b5      	cmp	r5, r6
 800e41c:	d11a      	bne.n	800e454 <_printf_common+0xcc>
 800e41e:	2000      	movs	r0, #0
 800e420:	e008      	b.n	800e434 <_printf_common+0xac>
 800e422:	2301      	movs	r3, #1
 800e424:	4652      	mov	r2, sl
 800e426:	4649      	mov	r1, r9
 800e428:	4638      	mov	r0, r7
 800e42a:	47c0      	blx	r8
 800e42c:	3001      	adds	r0, #1
 800e42e:	d103      	bne.n	800e438 <_printf_common+0xb0>
 800e430:	f04f 30ff 	mov.w	r0, #4294967295
 800e434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e438:	3501      	adds	r5, #1
 800e43a:	e7c4      	b.n	800e3c6 <_printf_common+0x3e>
 800e43c:	2030      	movs	r0, #48	; 0x30
 800e43e:	18e1      	adds	r1, r4, r3
 800e440:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e444:	1c5a      	adds	r2, r3, #1
 800e446:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e44a:	4422      	add	r2, r4
 800e44c:	3302      	adds	r3, #2
 800e44e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e452:	e7c5      	b.n	800e3e0 <_printf_common+0x58>
 800e454:	2301      	movs	r3, #1
 800e456:	4622      	mov	r2, r4
 800e458:	4649      	mov	r1, r9
 800e45a:	4638      	mov	r0, r7
 800e45c:	47c0      	blx	r8
 800e45e:	3001      	adds	r0, #1
 800e460:	d0e6      	beq.n	800e430 <_printf_common+0xa8>
 800e462:	3601      	adds	r6, #1
 800e464:	e7d9      	b.n	800e41a <_printf_common+0x92>
	...

0800e468 <_printf_i>:
 800e468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e46c:	460c      	mov	r4, r1
 800e46e:	7e27      	ldrb	r7, [r4, #24]
 800e470:	4691      	mov	r9, r2
 800e472:	2f78      	cmp	r7, #120	; 0x78
 800e474:	4680      	mov	r8, r0
 800e476:	469a      	mov	sl, r3
 800e478:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e47a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e47e:	d807      	bhi.n	800e490 <_printf_i+0x28>
 800e480:	2f62      	cmp	r7, #98	; 0x62
 800e482:	d80a      	bhi.n	800e49a <_printf_i+0x32>
 800e484:	2f00      	cmp	r7, #0
 800e486:	f000 80d9 	beq.w	800e63c <_printf_i+0x1d4>
 800e48a:	2f58      	cmp	r7, #88	; 0x58
 800e48c:	f000 80a4 	beq.w	800e5d8 <_printf_i+0x170>
 800e490:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e494:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e498:	e03a      	b.n	800e510 <_printf_i+0xa8>
 800e49a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e49e:	2b15      	cmp	r3, #21
 800e4a0:	d8f6      	bhi.n	800e490 <_printf_i+0x28>
 800e4a2:	a001      	add	r0, pc, #4	; (adr r0, 800e4a8 <_printf_i+0x40>)
 800e4a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e4a8:	0800e501 	.word	0x0800e501
 800e4ac:	0800e515 	.word	0x0800e515
 800e4b0:	0800e491 	.word	0x0800e491
 800e4b4:	0800e491 	.word	0x0800e491
 800e4b8:	0800e491 	.word	0x0800e491
 800e4bc:	0800e491 	.word	0x0800e491
 800e4c0:	0800e515 	.word	0x0800e515
 800e4c4:	0800e491 	.word	0x0800e491
 800e4c8:	0800e491 	.word	0x0800e491
 800e4cc:	0800e491 	.word	0x0800e491
 800e4d0:	0800e491 	.word	0x0800e491
 800e4d4:	0800e623 	.word	0x0800e623
 800e4d8:	0800e545 	.word	0x0800e545
 800e4dc:	0800e605 	.word	0x0800e605
 800e4e0:	0800e491 	.word	0x0800e491
 800e4e4:	0800e491 	.word	0x0800e491
 800e4e8:	0800e645 	.word	0x0800e645
 800e4ec:	0800e491 	.word	0x0800e491
 800e4f0:	0800e545 	.word	0x0800e545
 800e4f4:	0800e491 	.word	0x0800e491
 800e4f8:	0800e491 	.word	0x0800e491
 800e4fc:	0800e60d 	.word	0x0800e60d
 800e500:	680b      	ldr	r3, [r1, #0]
 800e502:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e506:	1d1a      	adds	r2, r3, #4
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	600a      	str	r2, [r1, #0]
 800e50c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e510:	2301      	movs	r3, #1
 800e512:	e0a4      	b.n	800e65e <_printf_i+0x1f6>
 800e514:	6825      	ldr	r5, [r4, #0]
 800e516:	6808      	ldr	r0, [r1, #0]
 800e518:	062e      	lsls	r6, r5, #24
 800e51a:	f100 0304 	add.w	r3, r0, #4
 800e51e:	d50a      	bpl.n	800e536 <_printf_i+0xce>
 800e520:	6805      	ldr	r5, [r0, #0]
 800e522:	600b      	str	r3, [r1, #0]
 800e524:	2d00      	cmp	r5, #0
 800e526:	da03      	bge.n	800e530 <_printf_i+0xc8>
 800e528:	232d      	movs	r3, #45	; 0x2d
 800e52a:	426d      	negs	r5, r5
 800e52c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e530:	230a      	movs	r3, #10
 800e532:	485e      	ldr	r0, [pc, #376]	; (800e6ac <_printf_i+0x244>)
 800e534:	e019      	b.n	800e56a <_printf_i+0x102>
 800e536:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e53a:	6805      	ldr	r5, [r0, #0]
 800e53c:	600b      	str	r3, [r1, #0]
 800e53e:	bf18      	it	ne
 800e540:	b22d      	sxthne	r5, r5
 800e542:	e7ef      	b.n	800e524 <_printf_i+0xbc>
 800e544:	680b      	ldr	r3, [r1, #0]
 800e546:	6825      	ldr	r5, [r4, #0]
 800e548:	1d18      	adds	r0, r3, #4
 800e54a:	6008      	str	r0, [r1, #0]
 800e54c:	0628      	lsls	r0, r5, #24
 800e54e:	d501      	bpl.n	800e554 <_printf_i+0xec>
 800e550:	681d      	ldr	r5, [r3, #0]
 800e552:	e002      	b.n	800e55a <_printf_i+0xf2>
 800e554:	0669      	lsls	r1, r5, #25
 800e556:	d5fb      	bpl.n	800e550 <_printf_i+0xe8>
 800e558:	881d      	ldrh	r5, [r3, #0]
 800e55a:	2f6f      	cmp	r7, #111	; 0x6f
 800e55c:	bf0c      	ite	eq
 800e55e:	2308      	moveq	r3, #8
 800e560:	230a      	movne	r3, #10
 800e562:	4852      	ldr	r0, [pc, #328]	; (800e6ac <_printf_i+0x244>)
 800e564:	2100      	movs	r1, #0
 800e566:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e56a:	6866      	ldr	r6, [r4, #4]
 800e56c:	2e00      	cmp	r6, #0
 800e56e:	bfa8      	it	ge
 800e570:	6821      	ldrge	r1, [r4, #0]
 800e572:	60a6      	str	r6, [r4, #8]
 800e574:	bfa4      	itt	ge
 800e576:	f021 0104 	bicge.w	r1, r1, #4
 800e57a:	6021      	strge	r1, [r4, #0]
 800e57c:	b90d      	cbnz	r5, 800e582 <_printf_i+0x11a>
 800e57e:	2e00      	cmp	r6, #0
 800e580:	d04d      	beq.n	800e61e <_printf_i+0x1b6>
 800e582:	4616      	mov	r6, r2
 800e584:	fbb5 f1f3 	udiv	r1, r5, r3
 800e588:	fb03 5711 	mls	r7, r3, r1, r5
 800e58c:	5dc7      	ldrb	r7, [r0, r7]
 800e58e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e592:	462f      	mov	r7, r5
 800e594:	42bb      	cmp	r3, r7
 800e596:	460d      	mov	r5, r1
 800e598:	d9f4      	bls.n	800e584 <_printf_i+0x11c>
 800e59a:	2b08      	cmp	r3, #8
 800e59c:	d10b      	bne.n	800e5b6 <_printf_i+0x14e>
 800e59e:	6823      	ldr	r3, [r4, #0]
 800e5a0:	07df      	lsls	r7, r3, #31
 800e5a2:	d508      	bpl.n	800e5b6 <_printf_i+0x14e>
 800e5a4:	6923      	ldr	r3, [r4, #16]
 800e5a6:	6861      	ldr	r1, [r4, #4]
 800e5a8:	4299      	cmp	r1, r3
 800e5aa:	bfde      	ittt	le
 800e5ac:	2330      	movle	r3, #48	; 0x30
 800e5ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e5b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e5b6:	1b92      	subs	r2, r2, r6
 800e5b8:	6122      	str	r2, [r4, #16]
 800e5ba:	464b      	mov	r3, r9
 800e5bc:	4621      	mov	r1, r4
 800e5be:	4640      	mov	r0, r8
 800e5c0:	f8cd a000 	str.w	sl, [sp]
 800e5c4:	aa03      	add	r2, sp, #12
 800e5c6:	f7ff fedf 	bl	800e388 <_printf_common>
 800e5ca:	3001      	adds	r0, #1
 800e5cc:	d14c      	bne.n	800e668 <_printf_i+0x200>
 800e5ce:	f04f 30ff 	mov.w	r0, #4294967295
 800e5d2:	b004      	add	sp, #16
 800e5d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5d8:	4834      	ldr	r0, [pc, #208]	; (800e6ac <_printf_i+0x244>)
 800e5da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e5de:	680e      	ldr	r6, [r1, #0]
 800e5e0:	6823      	ldr	r3, [r4, #0]
 800e5e2:	f856 5b04 	ldr.w	r5, [r6], #4
 800e5e6:	061f      	lsls	r7, r3, #24
 800e5e8:	600e      	str	r6, [r1, #0]
 800e5ea:	d514      	bpl.n	800e616 <_printf_i+0x1ae>
 800e5ec:	07d9      	lsls	r1, r3, #31
 800e5ee:	bf44      	itt	mi
 800e5f0:	f043 0320 	orrmi.w	r3, r3, #32
 800e5f4:	6023      	strmi	r3, [r4, #0]
 800e5f6:	b91d      	cbnz	r5, 800e600 <_printf_i+0x198>
 800e5f8:	6823      	ldr	r3, [r4, #0]
 800e5fa:	f023 0320 	bic.w	r3, r3, #32
 800e5fe:	6023      	str	r3, [r4, #0]
 800e600:	2310      	movs	r3, #16
 800e602:	e7af      	b.n	800e564 <_printf_i+0xfc>
 800e604:	6823      	ldr	r3, [r4, #0]
 800e606:	f043 0320 	orr.w	r3, r3, #32
 800e60a:	6023      	str	r3, [r4, #0]
 800e60c:	2378      	movs	r3, #120	; 0x78
 800e60e:	4828      	ldr	r0, [pc, #160]	; (800e6b0 <_printf_i+0x248>)
 800e610:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e614:	e7e3      	b.n	800e5de <_printf_i+0x176>
 800e616:	065e      	lsls	r6, r3, #25
 800e618:	bf48      	it	mi
 800e61a:	b2ad      	uxthmi	r5, r5
 800e61c:	e7e6      	b.n	800e5ec <_printf_i+0x184>
 800e61e:	4616      	mov	r6, r2
 800e620:	e7bb      	b.n	800e59a <_printf_i+0x132>
 800e622:	680b      	ldr	r3, [r1, #0]
 800e624:	6826      	ldr	r6, [r4, #0]
 800e626:	1d1d      	adds	r5, r3, #4
 800e628:	6960      	ldr	r0, [r4, #20]
 800e62a:	600d      	str	r5, [r1, #0]
 800e62c:	0635      	lsls	r5, r6, #24
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	d501      	bpl.n	800e636 <_printf_i+0x1ce>
 800e632:	6018      	str	r0, [r3, #0]
 800e634:	e002      	b.n	800e63c <_printf_i+0x1d4>
 800e636:	0671      	lsls	r1, r6, #25
 800e638:	d5fb      	bpl.n	800e632 <_printf_i+0x1ca>
 800e63a:	8018      	strh	r0, [r3, #0]
 800e63c:	2300      	movs	r3, #0
 800e63e:	4616      	mov	r6, r2
 800e640:	6123      	str	r3, [r4, #16]
 800e642:	e7ba      	b.n	800e5ba <_printf_i+0x152>
 800e644:	680b      	ldr	r3, [r1, #0]
 800e646:	1d1a      	adds	r2, r3, #4
 800e648:	600a      	str	r2, [r1, #0]
 800e64a:	681e      	ldr	r6, [r3, #0]
 800e64c:	2100      	movs	r1, #0
 800e64e:	4630      	mov	r0, r6
 800e650:	6862      	ldr	r2, [r4, #4]
 800e652:	f000 fa9d 	bl	800eb90 <memchr>
 800e656:	b108      	cbz	r0, 800e65c <_printf_i+0x1f4>
 800e658:	1b80      	subs	r0, r0, r6
 800e65a:	6060      	str	r0, [r4, #4]
 800e65c:	6863      	ldr	r3, [r4, #4]
 800e65e:	6123      	str	r3, [r4, #16]
 800e660:	2300      	movs	r3, #0
 800e662:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e666:	e7a8      	b.n	800e5ba <_printf_i+0x152>
 800e668:	4632      	mov	r2, r6
 800e66a:	4649      	mov	r1, r9
 800e66c:	4640      	mov	r0, r8
 800e66e:	6923      	ldr	r3, [r4, #16]
 800e670:	47d0      	blx	sl
 800e672:	3001      	adds	r0, #1
 800e674:	d0ab      	beq.n	800e5ce <_printf_i+0x166>
 800e676:	6823      	ldr	r3, [r4, #0]
 800e678:	079b      	lsls	r3, r3, #30
 800e67a:	d413      	bmi.n	800e6a4 <_printf_i+0x23c>
 800e67c:	68e0      	ldr	r0, [r4, #12]
 800e67e:	9b03      	ldr	r3, [sp, #12]
 800e680:	4298      	cmp	r0, r3
 800e682:	bfb8      	it	lt
 800e684:	4618      	movlt	r0, r3
 800e686:	e7a4      	b.n	800e5d2 <_printf_i+0x16a>
 800e688:	2301      	movs	r3, #1
 800e68a:	4632      	mov	r2, r6
 800e68c:	4649      	mov	r1, r9
 800e68e:	4640      	mov	r0, r8
 800e690:	47d0      	blx	sl
 800e692:	3001      	adds	r0, #1
 800e694:	d09b      	beq.n	800e5ce <_printf_i+0x166>
 800e696:	3501      	adds	r5, #1
 800e698:	68e3      	ldr	r3, [r4, #12]
 800e69a:	9903      	ldr	r1, [sp, #12]
 800e69c:	1a5b      	subs	r3, r3, r1
 800e69e:	42ab      	cmp	r3, r5
 800e6a0:	dcf2      	bgt.n	800e688 <_printf_i+0x220>
 800e6a2:	e7eb      	b.n	800e67c <_printf_i+0x214>
 800e6a4:	2500      	movs	r5, #0
 800e6a6:	f104 0619 	add.w	r6, r4, #25
 800e6aa:	e7f5      	b.n	800e698 <_printf_i+0x230>
 800e6ac:	08010ab9 	.word	0x08010ab9
 800e6b0:	08010aca 	.word	0x08010aca

0800e6b4 <_sbrk_r>:
 800e6b4:	b538      	push	{r3, r4, r5, lr}
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	4d05      	ldr	r5, [pc, #20]	; (800e6d0 <_sbrk_r+0x1c>)
 800e6ba:	4604      	mov	r4, r0
 800e6bc:	4608      	mov	r0, r1
 800e6be:	602b      	str	r3, [r5, #0]
 800e6c0:	f7f2 fa88 	bl	8000bd4 <_sbrk>
 800e6c4:	1c43      	adds	r3, r0, #1
 800e6c6:	d102      	bne.n	800e6ce <_sbrk_r+0x1a>
 800e6c8:	682b      	ldr	r3, [r5, #0]
 800e6ca:	b103      	cbz	r3, 800e6ce <_sbrk_r+0x1a>
 800e6cc:	6023      	str	r3, [r4, #0]
 800e6ce:	bd38      	pop	{r3, r4, r5, pc}
 800e6d0:	20006cd8 	.word	0x20006cd8

0800e6d4 <__sread>:
 800e6d4:	b510      	push	{r4, lr}
 800e6d6:	460c      	mov	r4, r1
 800e6d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6dc:	f000 fa72 	bl	800ebc4 <_read_r>
 800e6e0:	2800      	cmp	r0, #0
 800e6e2:	bfab      	itete	ge
 800e6e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e6e6:	89a3      	ldrhlt	r3, [r4, #12]
 800e6e8:	181b      	addge	r3, r3, r0
 800e6ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e6ee:	bfac      	ite	ge
 800e6f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800e6f2:	81a3      	strhlt	r3, [r4, #12]
 800e6f4:	bd10      	pop	{r4, pc}

0800e6f6 <__swrite>:
 800e6f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6fa:	461f      	mov	r7, r3
 800e6fc:	898b      	ldrh	r3, [r1, #12]
 800e6fe:	4605      	mov	r5, r0
 800e700:	05db      	lsls	r3, r3, #23
 800e702:	460c      	mov	r4, r1
 800e704:	4616      	mov	r6, r2
 800e706:	d505      	bpl.n	800e714 <__swrite+0x1e>
 800e708:	2302      	movs	r3, #2
 800e70a:	2200      	movs	r2, #0
 800e70c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e710:	f000 f9c8 	bl	800eaa4 <_lseek_r>
 800e714:	89a3      	ldrh	r3, [r4, #12]
 800e716:	4632      	mov	r2, r6
 800e718:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e71c:	81a3      	strh	r3, [r4, #12]
 800e71e:	4628      	mov	r0, r5
 800e720:	463b      	mov	r3, r7
 800e722:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e72a:	f000 b869 	b.w	800e800 <_write_r>

0800e72e <__sseek>:
 800e72e:	b510      	push	{r4, lr}
 800e730:	460c      	mov	r4, r1
 800e732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e736:	f000 f9b5 	bl	800eaa4 <_lseek_r>
 800e73a:	1c43      	adds	r3, r0, #1
 800e73c:	89a3      	ldrh	r3, [r4, #12]
 800e73e:	bf15      	itete	ne
 800e740:	6560      	strne	r0, [r4, #84]	; 0x54
 800e742:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e746:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e74a:	81a3      	strheq	r3, [r4, #12]
 800e74c:	bf18      	it	ne
 800e74e:	81a3      	strhne	r3, [r4, #12]
 800e750:	bd10      	pop	{r4, pc}

0800e752 <__sclose>:
 800e752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e756:	f000 b8d3 	b.w	800e900 <_close_r>
	...

0800e75c <__swbuf_r>:
 800e75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e75e:	460e      	mov	r6, r1
 800e760:	4614      	mov	r4, r2
 800e762:	4605      	mov	r5, r0
 800e764:	b118      	cbz	r0, 800e76e <__swbuf_r+0x12>
 800e766:	6983      	ldr	r3, [r0, #24]
 800e768:	b90b      	cbnz	r3, 800e76e <__swbuf_r+0x12>
 800e76a:	f7ff fb6f 	bl	800de4c <__sinit>
 800e76e:	4b21      	ldr	r3, [pc, #132]	; (800e7f4 <__swbuf_r+0x98>)
 800e770:	429c      	cmp	r4, r3
 800e772:	d12b      	bne.n	800e7cc <__swbuf_r+0x70>
 800e774:	686c      	ldr	r4, [r5, #4]
 800e776:	69a3      	ldr	r3, [r4, #24]
 800e778:	60a3      	str	r3, [r4, #8]
 800e77a:	89a3      	ldrh	r3, [r4, #12]
 800e77c:	071a      	lsls	r2, r3, #28
 800e77e:	d52f      	bpl.n	800e7e0 <__swbuf_r+0x84>
 800e780:	6923      	ldr	r3, [r4, #16]
 800e782:	b36b      	cbz	r3, 800e7e0 <__swbuf_r+0x84>
 800e784:	6923      	ldr	r3, [r4, #16]
 800e786:	6820      	ldr	r0, [r4, #0]
 800e788:	b2f6      	uxtb	r6, r6
 800e78a:	1ac0      	subs	r0, r0, r3
 800e78c:	6963      	ldr	r3, [r4, #20]
 800e78e:	4637      	mov	r7, r6
 800e790:	4283      	cmp	r3, r0
 800e792:	dc04      	bgt.n	800e79e <__swbuf_r+0x42>
 800e794:	4621      	mov	r1, r4
 800e796:	4628      	mov	r0, r5
 800e798:	f000 f948 	bl	800ea2c <_fflush_r>
 800e79c:	bb30      	cbnz	r0, 800e7ec <__swbuf_r+0x90>
 800e79e:	68a3      	ldr	r3, [r4, #8]
 800e7a0:	3001      	adds	r0, #1
 800e7a2:	3b01      	subs	r3, #1
 800e7a4:	60a3      	str	r3, [r4, #8]
 800e7a6:	6823      	ldr	r3, [r4, #0]
 800e7a8:	1c5a      	adds	r2, r3, #1
 800e7aa:	6022      	str	r2, [r4, #0]
 800e7ac:	701e      	strb	r6, [r3, #0]
 800e7ae:	6963      	ldr	r3, [r4, #20]
 800e7b0:	4283      	cmp	r3, r0
 800e7b2:	d004      	beq.n	800e7be <__swbuf_r+0x62>
 800e7b4:	89a3      	ldrh	r3, [r4, #12]
 800e7b6:	07db      	lsls	r3, r3, #31
 800e7b8:	d506      	bpl.n	800e7c8 <__swbuf_r+0x6c>
 800e7ba:	2e0a      	cmp	r6, #10
 800e7bc:	d104      	bne.n	800e7c8 <__swbuf_r+0x6c>
 800e7be:	4621      	mov	r1, r4
 800e7c0:	4628      	mov	r0, r5
 800e7c2:	f000 f933 	bl	800ea2c <_fflush_r>
 800e7c6:	b988      	cbnz	r0, 800e7ec <__swbuf_r+0x90>
 800e7c8:	4638      	mov	r0, r7
 800e7ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7cc:	4b0a      	ldr	r3, [pc, #40]	; (800e7f8 <__swbuf_r+0x9c>)
 800e7ce:	429c      	cmp	r4, r3
 800e7d0:	d101      	bne.n	800e7d6 <__swbuf_r+0x7a>
 800e7d2:	68ac      	ldr	r4, [r5, #8]
 800e7d4:	e7cf      	b.n	800e776 <__swbuf_r+0x1a>
 800e7d6:	4b09      	ldr	r3, [pc, #36]	; (800e7fc <__swbuf_r+0xa0>)
 800e7d8:	429c      	cmp	r4, r3
 800e7da:	bf08      	it	eq
 800e7dc:	68ec      	ldreq	r4, [r5, #12]
 800e7de:	e7ca      	b.n	800e776 <__swbuf_r+0x1a>
 800e7e0:	4621      	mov	r1, r4
 800e7e2:	4628      	mov	r0, r5
 800e7e4:	f000 f81e 	bl	800e824 <__swsetup_r>
 800e7e8:	2800      	cmp	r0, #0
 800e7ea:	d0cb      	beq.n	800e784 <__swbuf_r+0x28>
 800e7ec:	f04f 37ff 	mov.w	r7, #4294967295
 800e7f0:	e7ea      	b.n	800e7c8 <__swbuf_r+0x6c>
 800e7f2:	bf00      	nop
 800e7f4:	08010a68 	.word	0x08010a68
 800e7f8:	08010a88 	.word	0x08010a88
 800e7fc:	08010a48 	.word	0x08010a48

0800e800 <_write_r>:
 800e800:	b538      	push	{r3, r4, r5, lr}
 800e802:	4604      	mov	r4, r0
 800e804:	4608      	mov	r0, r1
 800e806:	4611      	mov	r1, r2
 800e808:	2200      	movs	r2, #0
 800e80a:	4d05      	ldr	r5, [pc, #20]	; (800e820 <_write_r+0x20>)
 800e80c:	602a      	str	r2, [r5, #0]
 800e80e:	461a      	mov	r2, r3
 800e810:	f7f2 f994 	bl	8000b3c <_write>
 800e814:	1c43      	adds	r3, r0, #1
 800e816:	d102      	bne.n	800e81e <_write_r+0x1e>
 800e818:	682b      	ldr	r3, [r5, #0]
 800e81a:	b103      	cbz	r3, 800e81e <_write_r+0x1e>
 800e81c:	6023      	str	r3, [r4, #0]
 800e81e:	bd38      	pop	{r3, r4, r5, pc}
 800e820:	20006cd8 	.word	0x20006cd8

0800e824 <__swsetup_r>:
 800e824:	4b32      	ldr	r3, [pc, #200]	; (800e8f0 <__swsetup_r+0xcc>)
 800e826:	b570      	push	{r4, r5, r6, lr}
 800e828:	681d      	ldr	r5, [r3, #0]
 800e82a:	4606      	mov	r6, r0
 800e82c:	460c      	mov	r4, r1
 800e82e:	b125      	cbz	r5, 800e83a <__swsetup_r+0x16>
 800e830:	69ab      	ldr	r3, [r5, #24]
 800e832:	b913      	cbnz	r3, 800e83a <__swsetup_r+0x16>
 800e834:	4628      	mov	r0, r5
 800e836:	f7ff fb09 	bl	800de4c <__sinit>
 800e83a:	4b2e      	ldr	r3, [pc, #184]	; (800e8f4 <__swsetup_r+0xd0>)
 800e83c:	429c      	cmp	r4, r3
 800e83e:	d10f      	bne.n	800e860 <__swsetup_r+0x3c>
 800e840:	686c      	ldr	r4, [r5, #4]
 800e842:	89a3      	ldrh	r3, [r4, #12]
 800e844:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e848:	0719      	lsls	r1, r3, #28
 800e84a:	d42c      	bmi.n	800e8a6 <__swsetup_r+0x82>
 800e84c:	06dd      	lsls	r5, r3, #27
 800e84e:	d411      	bmi.n	800e874 <__swsetup_r+0x50>
 800e850:	2309      	movs	r3, #9
 800e852:	6033      	str	r3, [r6, #0]
 800e854:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e858:	f04f 30ff 	mov.w	r0, #4294967295
 800e85c:	81a3      	strh	r3, [r4, #12]
 800e85e:	e03e      	b.n	800e8de <__swsetup_r+0xba>
 800e860:	4b25      	ldr	r3, [pc, #148]	; (800e8f8 <__swsetup_r+0xd4>)
 800e862:	429c      	cmp	r4, r3
 800e864:	d101      	bne.n	800e86a <__swsetup_r+0x46>
 800e866:	68ac      	ldr	r4, [r5, #8]
 800e868:	e7eb      	b.n	800e842 <__swsetup_r+0x1e>
 800e86a:	4b24      	ldr	r3, [pc, #144]	; (800e8fc <__swsetup_r+0xd8>)
 800e86c:	429c      	cmp	r4, r3
 800e86e:	bf08      	it	eq
 800e870:	68ec      	ldreq	r4, [r5, #12]
 800e872:	e7e6      	b.n	800e842 <__swsetup_r+0x1e>
 800e874:	0758      	lsls	r0, r3, #29
 800e876:	d512      	bpl.n	800e89e <__swsetup_r+0x7a>
 800e878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e87a:	b141      	cbz	r1, 800e88e <__swsetup_r+0x6a>
 800e87c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e880:	4299      	cmp	r1, r3
 800e882:	d002      	beq.n	800e88a <__swsetup_r+0x66>
 800e884:	4630      	mov	r0, r6
 800e886:	f7ff fb81 	bl	800df8c <_free_r>
 800e88a:	2300      	movs	r3, #0
 800e88c:	6363      	str	r3, [r4, #52]	; 0x34
 800e88e:	89a3      	ldrh	r3, [r4, #12]
 800e890:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e894:	81a3      	strh	r3, [r4, #12]
 800e896:	2300      	movs	r3, #0
 800e898:	6063      	str	r3, [r4, #4]
 800e89a:	6923      	ldr	r3, [r4, #16]
 800e89c:	6023      	str	r3, [r4, #0]
 800e89e:	89a3      	ldrh	r3, [r4, #12]
 800e8a0:	f043 0308 	orr.w	r3, r3, #8
 800e8a4:	81a3      	strh	r3, [r4, #12]
 800e8a6:	6923      	ldr	r3, [r4, #16]
 800e8a8:	b94b      	cbnz	r3, 800e8be <__swsetup_r+0x9a>
 800e8aa:	89a3      	ldrh	r3, [r4, #12]
 800e8ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e8b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e8b4:	d003      	beq.n	800e8be <__swsetup_r+0x9a>
 800e8b6:	4621      	mov	r1, r4
 800e8b8:	4630      	mov	r0, r6
 800e8ba:	f000 f929 	bl	800eb10 <__smakebuf_r>
 800e8be:	89a0      	ldrh	r0, [r4, #12]
 800e8c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e8c4:	f010 0301 	ands.w	r3, r0, #1
 800e8c8:	d00a      	beq.n	800e8e0 <__swsetup_r+0xbc>
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	60a3      	str	r3, [r4, #8]
 800e8ce:	6963      	ldr	r3, [r4, #20]
 800e8d0:	425b      	negs	r3, r3
 800e8d2:	61a3      	str	r3, [r4, #24]
 800e8d4:	6923      	ldr	r3, [r4, #16]
 800e8d6:	b943      	cbnz	r3, 800e8ea <__swsetup_r+0xc6>
 800e8d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e8dc:	d1ba      	bne.n	800e854 <__swsetup_r+0x30>
 800e8de:	bd70      	pop	{r4, r5, r6, pc}
 800e8e0:	0781      	lsls	r1, r0, #30
 800e8e2:	bf58      	it	pl
 800e8e4:	6963      	ldrpl	r3, [r4, #20]
 800e8e6:	60a3      	str	r3, [r4, #8]
 800e8e8:	e7f4      	b.n	800e8d4 <__swsetup_r+0xb0>
 800e8ea:	2000      	movs	r0, #0
 800e8ec:	e7f7      	b.n	800e8de <__swsetup_r+0xba>
 800e8ee:	bf00      	nop
 800e8f0:	20000010 	.word	0x20000010
 800e8f4:	08010a68 	.word	0x08010a68
 800e8f8:	08010a88 	.word	0x08010a88
 800e8fc:	08010a48 	.word	0x08010a48

0800e900 <_close_r>:
 800e900:	b538      	push	{r3, r4, r5, lr}
 800e902:	2300      	movs	r3, #0
 800e904:	4d05      	ldr	r5, [pc, #20]	; (800e91c <_close_r+0x1c>)
 800e906:	4604      	mov	r4, r0
 800e908:	4608      	mov	r0, r1
 800e90a:	602b      	str	r3, [r5, #0]
 800e90c:	f7f2 f932 	bl	8000b74 <_close>
 800e910:	1c43      	adds	r3, r0, #1
 800e912:	d102      	bne.n	800e91a <_close_r+0x1a>
 800e914:	682b      	ldr	r3, [r5, #0]
 800e916:	b103      	cbz	r3, 800e91a <_close_r+0x1a>
 800e918:	6023      	str	r3, [r4, #0]
 800e91a:	bd38      	pop	{r3, r4, r5, pc}
 800e91c:	20006cd8 	.word	0x20006cd8

0800e920 <__sflush_r>:
 800e920:	898a      	ldrh	r2, [r1, #12]
 800e922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e926:	4605      	mov	r5, r0
 800e928:	0710      	lsls	r0, r2, #28
 800e92a:	460c      	mov	r4, r1
 800e92c:	d458      	bmi.n	800e9e0 <__sflush_r+0xc0>
 800e92e:	684b      	ldr	r3, [r1, #4]
 800e930:	2b00      	cmp	r3, #0
 800e932:	dc05      	bgt.n	800e940 <__sflush_r+0x20>
 800e934:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e936:	2b00      	cmp	r3, #0
 800e938:	dc02      	bgt.n	800e940 <__sflush_r+0x20>
 800e93a:	2000      	movs	r0, #0
 800e93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e940:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e942:	2e00      	cmp	r6, #0
 800e944:	d0f9      	beq.n	800e93a <__sflush_r+0x1a>
 800e946:	2300      	movs	r3, #0
 800e948:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e94c:	682f      	ldr	r7, [r5, #0]
 800e94e:	602b      	str	r3, [r5, #0]
 800e950:	d032      	beq.n	800e9b8 <__sflush_r+0x98>
 800e952:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e954:	89a3      	ldrh	r3, [r4, #12]
 800e956:	075a      	lsls	r2, r3, #29
 800e958:	d505      	bpl.n	800e966 <__sflush_r+0x46>
 800e95a:	6863      	ldr	r3, [r4, #4]
 800e95c:	1ac0      	subs	r0, r0, r3
 800e95e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e960:	b10b      	cbz	r3, 800e966 <__sflush_r+0x46>
 800e962:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e964:	1ac0      	subs	r0, r0, r3
 800e966:	2300      	movs	r3, #0
 800e968:	4602      	mov	r2, r0
 800e96a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e96c:	4628      	mov	r0, r5
 800e96e:	6a21      	ldr	r1, [r4, #32]
 800e970:	47b0      	blx	r6
 800e972:	1c43      	adds	r3, r0, #1
 800e974:	89a3      	ldrh	r3, [r4, #12]
 800e976:	d106      	bne.n	800e986 <__sflush_r+0x66>
 800e978:	6829      	ldr	r1, [r5, #0]
 800e97a:	291d      	cmp	r1, #29
 800e97c:	d82c      	bhi.n	800e9d8 <__sflush_r+0xb8>
 800e97e:	4a2a      	ldr	r2, [pc, #168]	; (800ea28 <__sflush_r+0x108>)
 800e980:	40ca      	lsrs	r2, r1
 800e982:	07d6      	lsls	r6, r2, #31
 800e984:	d528      	bpl.n	800e9d8 <__sflush_r+0xb8>
 800e986:	2200      	movs	r2, #0
 800e988:	6062      	str	r2, [r4, #4]
 800e98a:	6922      	ldr	r2, [r4, #16]
 800e98c:	04d9      	lsls	r1, r3, #19
 800e98e:	6022      	str	r2, [r4, #0]
 800e990:	d504      	bpl.n	800e99c <__sflush_r+0x7c>
 800e992:	1c42      	adds	r2, r0, #1
 800e994:	d101      	bne.n	800e99a <__sflush_r+0x7a>
 800e996:	682b      	ldr	r3, [r5, #0]
 800e998:	b903      	cbnz	r3, 800e99c <__sflush_r+0x7c>
 800e99a:	6560      	str	r0, [r4, #84]	; 0x54
 800e99c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e99e:	602f      	str	r7, [r5, #0]
 800e9a0:	2900      	cmp	r1, #0
 800e9a2:	d0ca      	beq.n	800e93a <__sflush_r+0x1a>
 800e9a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e9a8:	4299      	cmp	r1, r3
 800e9aa:	d002      	beq.n	800e9b2 <__sflush_r+0x92>
 800e9ac:	4628      	mov	r0, r5
 800e9ae:	f7ff faed 	bl	800df8c <_free_r>
 800e9b2:	2000      	movs	r0, #0
 800e9b4:	6360      	str	r0, [r4, #52]	; 0x34
 800e9b6:	e7c1      	b.n	800e93c <__sflush_r+0x1c>
 800e9b8:	6a21      	ldr	r1, [r4, #32]
 800e9ba:	2301      	movs	r3, #1
 800e9bc:	4628      	mov	r0, r5
 800e9be:	47b0      	blx	r6
 800e9c0:	1c41      	adds	r1, r0, #1
 800e9c2:	d1c7      	bne.n	800e954 <__sflush_r+0x34>
 800e9c4:	682b      	ldr	r3, [r5, #0]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d0c4      	beq.n	800e954 <__sflush_r+0x34>
 800e9ca:	2b1d      	cmp	r3, #29
 800e9cc:	d001      	beq.n	800e9d2 <__sflush_r+0xb2>
 800e9ce:	2b16      	cmp	r3, #22
 800e9d0:	d101      	bne.n	800e9d6 <__sflush_r+0xb6>
 800e9d2:	602f      	str	r7, [r5, #0]
 800e9d4:	e7b1      	b.n	800e93a <__sflush_r+0x1a>
 800e9d6:	89a3      	ldrh	r3, [r4, #12]
 800e9d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9dc:	81a3      	strh	r3, [r4, #12]
 800e9de:	e7ad      	b.n	800e93c <__sflush_r+0x1c>
 800e9e0:	690f      	ldr	r7, [r1, #16]
 800e9e2:	2f00      	cmp	r7, #0
 800e9e4:	d0a9      	beq.n	800e93a <__sflush_r+0x1a>
 800e9e6:	0793      	lsls	r3, r2, #30
 800e9e8:	bf18      	it	ne
 800e9ea:	2300      	movne	r3, #0
 800e9ec:	680e      	ldr	r6, [r1, #0]
 800e9ee:	bf08      	it	eq
 800e9f0:	694b      	ldreq	r3, [r1, #20]
 800e9f2:	eba6 0807 	sub.w	r8, r6, r7
 800e9f6:	600f      	str	r7, [r1, #0]
 800e9f8:	608b      	str	r3, [r1, #8]
 800e9fa:	f1b8 0f00 	cmp.w	r8, #0
 800e9fe:	dd9c      	ble.n	800e93a <__sflush_r+0x1a>
 800ea00:	4643      	mov	r3, r8
 800ea02:	463a      	mov	r2, r7
 800ea04:	4628      	mov	r0, r5
 800ea06:	6a21      	ldr	r1, [r4, #32]
 800ea08:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ea0a:	47b0      	blx	r6
 800ea0c:	2800      	cmp	r0, #0
 800ea0e:	dc06      	bgt.n	800ea1e <__sflush_r+0xfe>
 800ea10:	89a3      	ldrh	r3, [r4, #12]
 800ea12:	f04f 30ff 	mov.w	r0, #4294967295
 800ea16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea1a:	81a3      	strh	r3, [r4, #12]
 800ea1c:	e78e      	b.n	800e93c <__sflush_r+0x1c>
 800ea1e:	4407      	add	r7, r0
 800ea20:	eba8 0800 	sub.w	r8, r8, r0
 800ea24:	e7e9      	b.n	800e9fa <__sflush_r+0xda>
 800ea26:	bf00      	nop
 800ea28:	20400001 	.word	0x20400001

0800ea2c <_fflush_r>:
 800ea2c:	b538      	push	{r3, r4, r5, lr}
 800ea2e:	690b      	ldr	r3, [r1, #16]
 800ea30:	4605      	mov	r5, r0
 800ea32:	460c      	mov	r4, r1
 800ea34:	b913      	cbnz	r3, 800ea3c <_fflush_r+0x10>
 800ea36:	2500      	movs	r5, #0
 800ea38:	4628      	mov	r0, r5
 800ea3a:	bd38      	pop	{r3, r4, r5, pc}
 800ea3c:	b118      	cbz	r0, 800ea46 <_fflush_r+0x1a>
 800ea3e:	6983      	ldr	r3, [r0, #24]
 800ea40:	b90b      	cbnz	r3, 800ea46 <_fflush_r+0x1a>
 800ea42:	f7ff fa03 	bl	800de4c <__sinit>
 800ea46:	4b14      	ldr	r3, [pc, #80]	; (800ea98 <_fflush_r+0x6c>)
 800ea48:	429c      	cmp	r4, r3
 800ea4a:	d11b      	bne.n	800ea84 <_fflush_r+0x58>
 800ea4c:	686c      	ldr	r4, [r5, #4]
 800ea4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d0ef      	beq.n	800ea36 <_fflush_r+0xa>
 800ea56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ea58:	07d0      	lsls	r0, r2, #31
 800ea5a:	d404      	bmi.n	800ea66 <_fflush_r+0x3a>
 800ea5c:	0599      	lsls	r1, r3, #22
 800ea5e:	d402      	bmi.n	800ea66 <_fflush_r+0x3a>
 800ea60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea62:	f7ff fa91 	bl	800df88 <__retarget_lock_acquire_recursive>
 800ea66:	4628      	mov	r0, r5
 800ea68:	4621      	mov	r1, r4
 800ea6a:	f7ff ff59 	bl	800e920 <__sflush_r>
 800ea6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ea70:	4605      	mov	r5, r0
 800ea72:	07da      	lsls	r2, r3, #31
 800ea74:	d4e0      	bmi.n	800ea38 <_fflush_r+0xc>
 800ea76:	89a3      	ldrh	r3, [r4, #12]
 800ea78:	059b      	lsls	r3, r3, #22
 800ea7a:	d4dd      	bmi.n	800ea38 <_fflush_r+0xc>
 800ea7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea7e:	f7ff fa84 	bl	800df8a <__retarget_lock_release_recursive>
 800ea82:	e7d9      	b.n	800ea38 <_fflush_r+0xc>
 800ea84:	4b05      	ldr	r3, [pc, #20]	; (800ea9c <_fflush_r+0x70>)
 800ea86:	429c      	cmp	r4, r3
 800ea88:	d101      	bne.n	800ea8e <_fflush_r+0x62>
 800ea8a:	68ac      	ldr	r4, [r5, #8]
 800ea8c:	e7df      	b.n	800ea4e <_fflush_r+0x22>
 800ea8e:	4b04      	ldr	r3, [pc, #16]	; (800eaa0 <_fflush_r+0x74>)
 800ea90:	429c      	cmp	r4, r3
 800ea92:	bf08      	it	eq
 800ea94:	68ec      	ldreq	r4, [r5, #12]
 800ea96:	e7da      	b.n	800ea4e <_fflush_r+0x22>
 800ea98:	08010a68 	.word	0x08010a68
 800ea9c:	08010a88 	.word	0x08010a88
 800eaa0:	08010a48 	.word	0x08010a48

0800eaa4 <_lseek_r>:
 800eaa4:	b538      	push	{r3, r4, r5, lr}
 800eaa6:	4604      	mov	r4, r0
 800eaa8:	4608      	mov	r0, r1
 800eaaa:	4611      	mov	r1, r2
 800eaac:	2200      	movs	r2, #0
 800eaae:	4d05      	ldr	r5, [pc, #20]	; (800eac4 <_lseek_r+0x20>)
 800eab0:	602a      	str	r2, [r5, #0]
 800eab2:	461a      	mov	r2, r3
 800eab4:	f7f2 f882 	bl	8000bbc <_lseek>
 800eab8:	1c43      	adds	r3, r0, #1
 800eaba:	d102      	bne.n	800eac2 <_lseek_r+0x1e>
 800eabc:	682b      	ldr	r3, [r5, #0]
 800eabe:	b103      	cbz	r3, 800eac2 <_lseek_r+0x1e>
 800eac0:	6023      	str	r3, [r4, #0]
 800eac2:	bd38      	pop	{r3, r4, r5, pc}
 800eac4:	20006cd8 	.word	0x20006cd8

0800eac8 <__swhatbuf_r>:
 800eac8:	b570      	push	{r4, r5, r6, lr}
 800eaca:	460e      	mov	r6, r1
 800eacc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ead0:	4614      	mov	r4, r2
 800ead2:	2900      	cmp	r1, #0
 800ead4:	461d      	mov	r5, r3
 800ead6:	b096      	sub	sp, #88	; 0x58
 800ead8:	da07      	bge.n	800eaea <__swhatbuf_r+0x22>
 800eada:	2300      	movs	r3, #0
 800eadc:	602b      	str	r3, [r5, #0]
 800eade:	89b3      	ldrh	r3, [r6, #12]
 800eae0:	061a      	lsls	r2, r3, #24
 800eae2:	d410      	bmi.n	800eb06 <__swhatbuf_r+0x3e>
 800eae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eae8:	e00e      	b.n	800eb08 <__swhatbuf_r+0x40>
 800eaea:	466a      	mov	r2, sp
 800eaec:	f000 f87c 	bl	800ebe8 <_fstat_r>
 800eaf0:	2800      	cmp	r0, #0
 800eaf2:	dbf2      	blt.n	800eada <__swhatbuf_r+0x12>
 800eaf4:	9a01      	ldr	r2, [sp, #4]
 800eaf6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eafa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eafe:	425a      	negs	r2, r3
 800eb00:	415a      	adcs	r2, r3
 800eb02:	602a      	str	r2, [r5, #0]
 800eb04:	e7ee      	b.n	800eae4 <__swhatbuf_r+0x1c>
 800eb06:	2340      	movs	r3, #64	; 0x40
 800eb08:	2000      	movs	r0, #0
 800eb0a:	6023      	str	r3, [r4, #0]
 800eb0c:	b016      	add	sp, #88	; 0x58
 800eb0e:	bd70      	pop	{r4, r5, r6, pc}

0800eb10 <__smakebuf_r>:
 800eb10:	898b      	ldrh	r3, [r1, #12]
 800eb12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eb14:	079d      	lsls	r5, r3, #30
 800eb16:	4606      	mov	r6, r0
 800eb18:	460c      	mov	r4, r1
 800eb1a:	d507      	bpl.n	800eb2c <__smakebuf_r+0x1c>
 800eb1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eb20:	6023      	str	r3, [r4, #0]
 800eb22:	6123      	str	r3, [r4, #16]
 800eb24:	2301      	movs	r3, #1
 800eb26:	6163      	str	r3, [r4, #20]
 800eb28:	b002      	add	sp, #8
 800eb2a:	bd70      	pop	{r4, r5, r6, pc}
 800eb2c:	466a      	mov	r2, sp
 800eb2e:	ab01      	add	r3, sp, #4
 800eb30:	f7ff ffca 	bl	800eac8 <__swhatbuf_r>
 800eb34:	9900      	ldr	r1, [sp, #0]
 800eb36:	4605      	mov	r5, r0
 800eb38:	4630      	mov	r0, r6
 800eb3a:	f7ff fa73 	bl	800e024 <_malloc_r>
 800eb3e:	b948      	cbnz	r0, 800eb54 <__smakebuf_r+0x44>
 800eb40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb44:	059a      	lsls	r2, r3, #22
 800eb46:	d4ef      	bmi.n	800eb28 <__smakebuf_r+0x18>
 800eb48:	f023 0303 	bic.w	r3, r3, #3
 800eb4c:	f043 0302 	orr.w	r3, r3, #2
 800eb50:	81a3      	strh	r3, [r4, #12]
 800eb52:	e7e3      	b.n	800eb1c <__smakebuf_r+0xc>
 800eb54:	4b0d      	ldr	r3, [pc, #52]	; (800eb8c <__smakebuf_r+0x7c>)
 800eb56:	62b3      	str	r3, [r6, #40]	; 0x28
 800eb58:	89a3      	ldrh	r3, [r4, #12]
 800eb5a:	6020      	str	r0, [r4, #0]
 800eb5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb60:	81a3      	strh	r3, [r4, #12]
 800eb62:	9b00      	ldr	r3, [sp, #0]
 800eb64:	6120      	str	r0, [r4, #16]
 800eb66:	6163      	str	r3, [r4, #20]
 800eb68:	9b01      	ldr	r3, [sp, #4]
 800eb6a:	b15b      	cbz	r3, 800eb84 <__smakebuf_r+0x74>
 800eb6c:	4630      	mov	r0, r6
 800eb6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb72:	f000 f84b 	bl	800ec0c <_isatty_r>
 800eb76:	b128      	cbz	r0, 800eb84 <__smakebuf_r+0x74>
 800eb78:	89a3      	ldrh	r3, [r4, #12]
 800eb7a:	f023 0303 	bic.w	r3, r3, #3
 800eb7e:	f043 0301 	orr.w	r3, r3, #1
 800eb82:	81a3      	strh	r3, [r4, #12]
 800eb84:	89a0      	ldrh	r0, [r4, #12]
 800eb86:	4305      	orrs	r5, r0
 800eb88:	81a5      	strh	r5, [r4, #12]
 800eb8a:	e7cd      	b.n	800eb28 <__smakebuf_r+0x18>
 800eb8c:	0800dde5 	.word	0x0800dde5

0800eb90 <memchr>:
 800eb90:	4603      	mov	r3, r0
 800eb92:	b510      	push	{r4, lr}
 800eb94:	b2c9      	uxtb	r1, r1
 800eb96:	4402      	add	r2, r0
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	d101      	bne.n	800eba2 <memchr+0x12>
 800eb9e:	2000      	movs	r0, #0
 800eba0:	e003      	b.n	800ebaa <memchr+0x1a>
 800eba2:	7804      	ldrb	r4, [r0, #0]
 800eba4:	3301      	adds	r3, #1
 800eba6:	428c      	cmp	r4, r1
 800eba8:	d1f6      	bne.n	800eb98 <memchr+0x8>
 800ebaa:	bd10      	pop	{r4, pc}

0800ebac <__malloc_lock>:
 800ebac:	4801      	ldr	r0, [pc, #4]	; (800ebb4 <__malloc_lock+0x8>)
 800ebae:	f7ff b9eb 	b.w	800df88 <__retarget_lock_acquire_recursive>
 800ebb2:	bf00      	nop
 800ebb4:	20006ce0 	.word	0x20006ce0

0800ebb8 <__malloc_unlock>:
 800ebb8:	4801      	ldr	r0, [pc, #4]	; (800ebc0 <__malloc_unlock+0x8>)
 800ebba:	f7ff b9e6 	b.w	800df8a <__retarget_lock_release_recursive>
 800ebbe:	bf00      	nop
 800ebc0:	20006ce0 	.word	0x20006ce0

0800ebc4 <_read_r>:
 800ebc4:	b538      	push	{r3, r4, r5, lr}
 800ebc6:	4604      	mov	r4, r0
 800ebc8:	4608      	mov	r0, r1
 800ebca:	4611      	mov	r1, r2
 800ebcc:	2200      	movs	r2, #0
 800ebce:	4d05      	ldr	r5, [pc, #20]	; (800ebe4 <_read_r+0x20>)
 800ebd0:	602a      	str	r2, [r5, #0]
 800ebd2:	461a      	mov	r2, r3
 800ebd4:	f7f1 ff95 	bl	8000b02 <_read>
 800ebd8:	1c43      	adds	r3, r0, #1
 800ebda:	d102      	bne.n	800ebe2 <_read_r+0x1e>
 800ebdc:	682b      	ldr	r3, [r5, #0]
 800ebde:	b103      	cbz	r3, 800ebe2 <_read_r+0x1e>
 800ebe0:	6023      	str	r3, [r4, #0]
 800ebe2:	bd38      	pop	{r3, r4, r5, pc}
 800ebe4:	20006cd8 	.word	0x20006cd8

0800ebe8 <_fstat_r>:
 800ebe8:	b538      	push	{r3, r4, r5, lr}
 800ebea:	2300      	movs	r3, #0
 800ebec:	4d06      	ldr	r5, [pc, #24]	; (800ec08 <_fstat_r+0x20>)
 800ebee:	4604      	mov	r4, r0
 800ebf0:	4608      	mov	r0, r1
 800ebf2:	4611      	mov	r1, r2
 800ebf4:	602b      	str	r3, [r5, #0]
 800ebf6:	f7f1 ffc8 	bl	8000b8a <_fstat>
 800ebfa:	1c43      	adds	r3, r0, #1
 800ebfc:	d102      	bne.n	800ec04 <_fstat_r+0x1c>
 800ebfe:	682b      	ldr	r3, [r5, #0]
 800ec00:	b103      	cbz	r3, 800ec04 <_fstat_r+0x1c>
 800ec02:	6023      	str	r3, [r4, #0]
 800ec04:	bd38      	pop	{r3, r4, r5, pc}
 800ec06:	bf00      	nop
 800ec08:	20006cd8 	.word	0x20006cd8

0800ec0c <_isatty_r>:
 800ec0c:	b538      	push	{r3, r4, r5, lr}
 800ec0e:	2300      	movs	r3, #0
 800ec10:	4d05      	ldr	r5, [pc, #20]	; (800ec28 <_isatty_r+0x1c>)
 800ec12:	4604      	mov	r4, r0
 800ec14:	4608      	mov	r0, r1
 800ec16:	602b      	str	r3, [r5, #0]
 800ec18:	f7f1 ffc6 	bl	8000ba8 <_isatty>
 800ec1c:	1c43      	adds	r3, r0, #1
 800ec1e:	d102      	bne.n	800ec26 <_isatty_r+0x1a>
 800ec20:	682b      	ldr	r3, [r5, #0]
 800ec22:	b103      	cbz	r3, 800ec26 <_isatty_r+0x1a>
 800ec24:	6023      	str	r3, [r4, #0]
 800ec26:	bd38      	pop	{r3, r4, r5, pc}
 800ec28:	20006cd8 	.word	0x20006cd8

0800ec2c <_init>:
 800ec2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec2e:	bf00      	nop
 800ec30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec32:	bc08      	pop	{r3}
 800ec34:	469e      	mov	lr, r3
 800ec36:	4770      	bx	lr

0800ec38 <_fini>:
 800ec38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec3a:	bf00      	nop
 800ec3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec3e:	bc08      	pop	{r3}
 800ec40:	469e      	mov	lr, r3
 800ec42:	4770      	bx	lr
